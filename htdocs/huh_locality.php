<?php
//==============================================================================
//===   locality.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_locality implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const LOCALITYID_SIZE      = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const DATUM_SIZE           = 20; //YEAR
   const ELEVATIONACCURACY_SIZE = 24; //DOUBLE
   const ELEVATIONMETHOD_SIZE = 20; //YEAR
   const GML_SIZE             = 255; //LONGVARCHAR
   const GUID_SIZE            = 128; //128
   const LAT1TEXT_SIZE        = 20; //YEAR
   const LAT2TEXT_SIZE        = 20; //YEAR
   const LATLONGACCURACY_SIZE = 24; //DOUBLE
   const LATLONGMETHOD_SIZE   = 20; //YEAR
   const LATLONGTYPE_SIZE     = 20; //YEAR
   const LATITUDE1_SIZE       = 12; //12,10
   const LATITUDE2_SIZE       = 12; //12,10
   const LOCALITYNAME_SIZE    = 255; //255
   const LONG1TEXT_SIZE       = 20; //YEAR
   const LONG2TEXT_SIZE       = 20; //YEAR
   const LONGITUDE1_SIZE      = 13; //13,10
   const LONGITUDE2_SIZE      = 13; //13,10
   const MAXELEVATION_SIZE    = 24; //DOUBLE
   const MINELEVATION_SIZE    = 24; //DOUBLE
   const NAMEDPLACE_SIZE      = 255; //255
   const ORIGINALELEVATIONUNIT_SIZE = 20; //YEAR
   const ORIGINALLATLONGUNIT_SIZE = 11; //INTEGER
   const RELATIONTONAMEDPLACE_SIZE = 120; //120
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const SHORTNAME_SIZE       = 32; //32
   const SRCLATLONGUNIT_SIZE  = 4; //TINYINT
   const VERBATIMELEVATION_SIZE = 50; //50
   const VISIBILITY_SIZE      = 4; //TINYINT
   const DISCIPLINEID_SIZE    = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const VISIBILITYSETBYID_SIZE = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const GEOGRAPHYID_SIZE     = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const LOCALITYID        = 'LocalityID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const DATUM             = 'Datum';
   const ELEVATIONACCURACY = 'ElevationAccuracy';
   const ELEVATIONMETHOD   = 'ElevationMethod';
   const GML               = 'GML';
   const GUID              = 'GUID';
   const LAT1TEXT          = 'Lat1Text';
   const LAT2TEXT          = 'Lat2Text';
   const LATLONGACCURACY   = 'LatLongAccuracy';
   const LATLONGMETHOD     = 'LatLongMethod';
   const LATLONGTYPE       = 'LatLongType';
   const LATITUDE1         = 'Latitude1';
   const LATITUDE2         = 'Latitude2';
   const LOCALITYNAME      = 'LocalityName';
   const LONG1TEXT         = 'Long1Text';
   const LONG2TEXT         = 'Long2Text';
   const LONGITUDE1        = 'Longitude1';
   const LONGITUDE2        = 'Longitude2';
   const MAXELEVATION      = 'MaxElevation';
   const MINELEVATION      = 'MinElevation';
   const NAMEDPLACE        = 'NamedPlace';
   const ORIGINALELEVATIONUNIT = 'OriginalElevationUnit';
   const ORIGINALLATLONGUNIT = 'OriginalLatLongUnit';
   const RELATIONTONAMEDPLACE = 'RelationToNamedPlace';
   const REMARKS           = 'Remarks';
   const SHORTNAME         = 'ShortName';
   const SRCLATLONGUNIT    = 'SrcLatLongUnit';
   const VERBATIMELEVATION = 'VerbatimElevation';
   const VISIBILITY        = 'Visibility';
   const DISCIPLINEID      = 'DisciplineID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const VISIBILITYSETBYID = 'VisibilitySetByID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const GEOGRAPHYID       = 'GeographyID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $LocalityID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['LocalityID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $Datum = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Datum']), 0, 20);
  $ElevationAccuracy = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ElevationAccuracy']), 0, 24);
  $ElevationMethod = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ElevationMethod']), 0, 20);
  $GML = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GML']), 0, 255);
  $GUID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GUID']), 0, 128);
  $Lat1Text = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Lat1Text']), 0, 20);
  $Lat2Text = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Lat2Text']), 0, 20);
  $LatLongAccuracy = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['LatLongAccuracy']), 0, 24);
  $LatLongMethod = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['LatLongMethod']), 0, 20);
  $LatLongType = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['LatLongType']), 0, 20);
  $Latitude1 = substr(preg_replace('/[^0-9\-\.\[NULL\]]/','',$_GET['Latitude1']), 0, 12);
  $Latitude2 = substr(preg_replace('/[^0-9\-\.\[NULL\]]/','',$_GET['Latitude2']), 0, 12);
  $LocalityName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['LocalityName']), 0, 255);
  $Long1Text = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Long1Text']), 0, 20);
  $Long2Text = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Long2Text']), 0, 20);
  $Longitude1 = substr(preg_replace('/[^0-9\-\.\[NULL\]]/','',$_GET['Longitude1']), 0, 13);
  $Longitude2 = substr(preg_replace('/[^0-9\-\.\[NULL\]]/','',$_GET['Longitude2']), 0, 13);
  $MaxElevation = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['MaxElevation']), 0, 24);
  $MinElevation = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['MinElevation']), 0, 24);
  $NamedPlace = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['NamedPlace']), 0, 255);
  $OriginalElevationUnit = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['OriginalElevationUnit']), 0, 20);
  $OriginalLatLongUnit = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['OriginalLatLongUnit']), 0, 11);
  $RelationToNamedPlace = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['RelationToNamedPlace']), 0, 120);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $ShortName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ShortName']), 0, 32);
  $SrcLatLongUnit = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['SrcLatLongUnit']), 0, 4);
  $VerbatimElevation = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['VerbatimElevation']), 0, 20);
  $Visibility = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Visibility']), 0, 4);
  $DisciplineID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DisciplineID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $VisibilitySetByID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['VisibilitySetByID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $GeographyID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['GeographyID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $LocalityID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $Datum; // YEAR 
   private $ElevationAccuracy; // DOUBLE 
   private $ElevationMethod; // YEAR 
   private $GML; // LONGVARCHAR 
   private $GUID; // VARCHAR(128) 
   private $Lat1Text; // YEAR 
   private $Lat2Text; // YEAR 
   private $LatLongAccuracy; // DOUBLE 
   private $LatLongMethod; // YEAR 
   private $LatLongType; // YEAR 
   private $Latitude1; // DECIMAL(12,10) 
   private $Latitude2; // DECIMAL(12,10) 
   private $LocalityName; // VARCHAR(255) 
   private $Long1Text; // YEAR 
   private $Long2Text; // YEAR 
   private $Longitude1; // DECIMAL(13,10) 
   private $Longitude2; // DECIMAL(13,10) 
   private $MaxElevation; // DOUBLE 
   private $MinElevation; // DOUBLE 
   private $NamedPlace; // VARCHAR(255) 
   private $OriginalElevationUnit; // YEAR 
   private $OriginalLatLongUnit; // INTEGER 
   private $RelationToNamedPlace; // VARCHAR(120) 
   private $Remarks; // LONGVARCHAR 
   private $ShortName; // VARCHAR(32) 
   private $SrcLatLongUnit; // TINYINT 
   private $VerbatimElevation; // YEAR 
   private $Visibility; // TINYINT 
   private $DisciplineID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $VisibilitySetByID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $GeographyID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' LocalityID, TimestampCreated, TimestampModified, Version, Datum, ElevationAccuracy, ElevationMethod, GML, GUID, Lat1Text, Lat2Text, LatLongAccuracy, LatLongMethod, LatLongType, Latitude1, Latitude2, LocalityName, Long1Text, Long2Text, Longitude1, Longitude2, MaxElevation, MinElevation, NamedPlace, OriginalElevationUnit, OriginalLatLongUnit, RelationToNamedPlace, Remarks, ShortName, SrcLatLongUnit, VerbatimElevation, Visibility, DisciplineID, ModifiedByAgentID, VisibilitySetByID, CreatedByAgentID, GeographyID, ';
   const PKFIELDLIST = ' LocalityID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'LocalityID'  ) ;
   private $allFieldsArray = array( 0 => 'LocalityID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'Datum' , 5 => 'ElevationAccuracy' , 6 => 'ElevationMethod' , 7 => 'GML' , 8 => 'GUID' , 9 => 'Lat1Text' , 10 => 'Lat2Text' , 11 => 'LatLongAccuracy' , 12 => 'LatLongMethod' , 13 => 'LatLongType' , 14 => 'Latitude1' , 15 => 'Latitude2' , 16 => 'LocalityName' , 17 => 'Long1Text' , 18 => 'Long2Text' , 19 => 'Longitude1' , 20 => 'Longitude2' , 21 => 'MaxElevation' , 22 => 'MinElevation' , 23 => 'NamedPlace' , 24 => 'OriginalElevationUnit' , 25 => 'OriginalLatLongUnit' , 26 => 'RelationToNamedPlace' , 27 => 'Remarks' , 28 => 'ShortName' , 29 => 'SrcLatLongUnit' , 30 => 'VerbatimElevation' , 31 => 'Visibility' , 32 => 'DisciplineID' , 33 => 'ModifiedByAgentID' , 34 => 'VisibilitySetByID' , 35 => 'CreatedByAgentID' , 36 => 'GeographyID'  ) ;
   private $selectDistinctFieldsArray = array( 8 => 'GUID' , 16 => 'LocalityName' , 23 => 'NamedPlace' , 26 => 'RelationToNamedPlace' , 32 => 'DisciplineID' , 33 => 'ModifiedByAgentID' , 34 => 'VisibilitySetByID' , 35 => 'CreatedByAgentID' , 36 => 'GeographyID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_locality(){
       $this->LocalityID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->Datum = '';
       $this->ElevationAccuracy = '';
       $this->ElevationMethod = '';
       $this->GML = '';
       $this->GUID = '';
       $this->Lat1Text = '';
       $this->Lat2Text = '';
       $this->LatLongAccuracy = '';
       $this->LatLongMethod = '';
       $this->LatLongType = '';
       $this->Latitude1 = '';
       $this->Latitude2 = '';
       $this->LocalityName = '';
       $this->Long1Text = '';
       $this->Long2Text = '';
       $this->Longitude1 = '';
       $this->Longitude2 = '';
       $this->MaxElevation = '';
       $this->MinElevation = '';
       $this->NamedPlace = '';
       $this->OriginalElevationUnit = '';
       $this->OriginalLatLongUnit = '';
       $this->RelationToNamedPlace = '';
       $this->Remarks = '';
       $this->ShortName = '';
       $this->SrcLatLongUnit = '';
       $this->VerbatimElevation = '';
       $this->Visibility = '';
       $this->DisciplineID = '';
       $this->ModifiedByAgentID = '';
       $this->VisibilitySetByID = '';
       $this->CreatedByAgentID = '';
       $this->GeographyID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='LocalityID') { $returnvalue = $this->setLocalityID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='Datum') { $returnvalue = $this->setDatum($value); } 
             if ($fieldname=='ElevationAccuracy') { $returnvalue = $this->setElevationAccuracy($value); } 
             if ($fieldname=='ElevationMethod') { $returnvalue = $this->setElevationMethod($value); } 
             if ($fieldname=='GML') { $returnvalue = $this->setGML($value); } 
             if ($fieldname=='GUID') { $returnvalue = $this->setGUID($value); } 
             if ($fieldname=='Lat1Text') { $returnvalue = $this->setLat1Text($value); } 
             if ($fieldname=='Lat2Text') { $returnvalue = $this->setLat2Text($value); } 
             if ($fieldname=='LatLongAccuracy') { $returnvalue = $this->setLatLongAccuracy($value); } 
             if ($fieldname=='LatLongMethod') { $returnvalue = $this->setLatLongMethod($value); } 
             if ($fieldname=='LatLongType') { $returnvalue = $this->setLatLongType($value); } 
             if ($fieldname=='Latitude1') { $returnvalue = $this->setLatitude1($value); } 
             if ($fieldname=='Latitude2') { $returnvalue = $this->setLatitude2($value); } 
             if ($fieldname=='LocalityName') { $returnvalue = $this->setLocalityName($value); } 
             if ($fieldname=='Long1Text') { $returnvalue = $this->setLong1Text($value); } 
             if ($fieldname=='Long2Text') { $returnvalue = $this->setLong2Text($value); } 
             if ($fieldname=='Longitude1') { $returnvalue = $this->setLongitude1($value); } 
             if ($fieldname=='Longitude2') { $returnvalue = $this->setLongitude2($value); } 
             if ($fieldname=='MaxElevation') { $returnvalue = $this->setMaxElevation($value); } 
             if ($fieldname=='MinElevation') { $returnvalue = $this->setMinElevation($value); } 
             if ($fieldname=='NamedPlace') { $returnvalue = $this->setNamedPlace($value); } 
             if ($fieldname=='OriginalElevationUnit') { $returnvalue = $this->setOriginalElevationUnit($value); } 
             if ($fieldname=='OriginalLatLongUnit') { $returnvalue = $this->setOriginalLatLongUnit($value); } 
             if ($fieldname=='RelationToNamedPlace') { $returnvalue = $this->setRelationToNamedPlace($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='ShortName') { $returnvalue = $this->setShortName($value); } 
             if ($fieldname=='SrcLatLongUnit') { $returnvalue = $this->setSrcLatLongUnit($value); } 
             if ($fieldname=='VerbatimElevation') { $returnvalue = $this->setVerbatimElevation($value); } 
             if ($fieldname=='Visibility') { $returnvalue = $this->setVisibility($value); } 
             if ($fieldname=='DisciplineID') { $returnvalue = $this->setDisciplineID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='VisibilitySetByID') { $returnvalue = $this->setVisibilitySetByID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='GeographyID') { $returnvalue = $this->setGeographyID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='LocalityID') { $returnvalue = $this->getLocalityID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='Datum') { $returnvalue = $this->getDatum(); } 
             if ($fieldname=='ElevationAccuracy') { $returnvalue = $this->getElevationAccuracy(); } 
             if ($fieldname=='ElevationMethod') { $returnvalue = $this->getElevationMethod(); } 
             if ($fieldname=='GML') { $returnvalue = $this->getGML(); } 
             if ($fieldname=='GUID') { $returnvalue = $this->getGUID(); } 
             if ($fieldname=='Lat1Text') { $returnvalue = $this->getLat1Text(); } 
             if ($fieldname=='Lat2Text') { $returnvalue = $this->getLat2Text(); } 
             if ($fieldname=='LatLongAccuracy') { $returnvalue = $this->getLatLongAccuracy(); } 
             if ($fieldname=='LatLongMethod') { $returnvalue = $this->getLatLongMethod(); } 
             if ($fieldname=='LatLongType') { $returnvalue = $this->getLatLongType(); } 
             if ($fieldname=='Latitude1') { $returnvalue = $this->getLatitude1(); } 
             if ($fieldname=='Latitude2') { $returnvalue = $this->getLatitude2(); } 
             if ($fieldname=='LocalityName') { $returnvalue = $this->getLocalityName(); } 
             if ($fieldname=='Long1Text') { $returnvalue = $this->getLong1Text(); } 
             if ($fieldname=='Long2Text') { $returnvalue = $this->getLong2Text(); } 
             if ($fieldname=='Longitude1') { $returnvalue = $this->getLongitude1(); } 
             if ($fieldname=='Longitude2') { $returnvalue = $this->getLongitude2(); } 
             if ($fieldname=='MaxElevation') { $returnvalue = $this->getMaxElevation(); } 
             if ($fieldname=='MinElevation') { $returnvalue = $this->getMinElevation(); } 
             if ($fieldname=='NamedPlace') { $returnvalue = $this->getNamedPlace(); } 
             if ($fieldname=='OriginalElevationUnit') { $returnvalue = $this->getOriginalElevationUnit(); } 
             if ($fieldname=='OriginalLatLongUnit') { $returnvalue = $this->getOriginalLatLongUnit(); } 
             if ($fieldname=='RelationToNamedPlace') { $returnvalue = $this->getRelationToNamedPlace(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='ShortName') { $returnvalue = $this->getShortName(); } 
             if ($fieldname=='SrcLatLongUnit') { $returnvalue = $this->getSrcLatLongUnit(); } 
             if ($fieldname=='VerbatimElevation') { $returnvalue = $this->getVerbatimElevation(); } 
             if ($fieldname=='Visibility') { $returnvalue = $this->getVisibility(); } 
             if ($fieldname=='DisciplineID') { $returnvalue = $this->getDisciplineID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='VisibilitySetByID') { $returnvalue = $this->getVisibilitySetByID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='GeographyID') { $returnvalue = $this->getGeographyID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*LocalityID*/
   public function getLocalityID() {
       if ($this->LocalityID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LocalityID));
       }
   }
   public function setLocalityID($LocalityID) {
       if (strlen(preg_replace('/[^0-9]/','',$LocalityID)) > huh_locality::LOCALITYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $LocalityID = trim($LocalityID);
       if (!ctype_digit(strval($LocalityID)) && trim(strval($LocalityID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->LocalityID = $this->l_addslashes($LocalityID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_locality::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_locality::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_locality::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*Datum*/
   public function getDatum() {
       if ($this->Datum==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Datum));
       }
   }
   public function setDatum($Datum) {
       if (strlen($Datum) > huh_locality::DATUM_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Datum = $this->l_addslashes($Datum);
       $this->dirty = true;
   }
/*ElevationAccuracy*/
   public function getElevationAccuracy() {
       if ($this->ElevationAccuracy==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ElevationAccuracy));
       }
   }
   public function setElevationAccuracy($ElevationAccuracy) {
       if (strlen($ElevationAccuracy) > huh_locality::ELEVATIONACCURACY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ElevationAccuracy = $this->l_addslashes($ElevationAccuracy);
       $this->dirty = true;
   }
/*ElevationMethod*/
   public function getElevationMethod() {
       if ($this->ElevationMethod==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ElevationMethod));
       }
   }
   public function setElevationMethod($ElevationMethod) {
       if (strlen($ElevationMethod) > huh_locality::ELEVATIONMETHOD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ElevationMethod = $this->l_addslashes($ElevationMethod);
       $this->dirty = true;
   }
/*GML*/
   public function getGML() {
       if ($this->GML==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GML));
       }
   }
   public function setGML($GML) {
       if (strlen($GML) > huh_locality::GML_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GML = $this->l_addslashes($GML);
       $this->dirty = true;
   }
/*GUID*/
   public function getGUID() {
       if ($this->GUID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GUID));
       }
   }
   public function setGUID($GUID) {
       if (strlen($GUID) > huh_locality::GUID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GUID = $this->l_addslashes($GUID);
       $this->dirty = true;
   }
/*Lat1Text*/
   public function getLat1Text() {
       if ($this->Lat1Text==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Lat1Text));
       }
   }
   public function setLat1Text($Lat1Text) {
       if (strlen($Lat1Text) > huh_locality::LAT1TEXT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Lat1Text = $this->l_addslashes($Lat1Text);
       $this->dirty = true;
   }
/*Lat2Text*/
   public function getLat2Text() {
       if ($this->Lat2Text==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Lat2Text));
       }
   }
   public function setLat2Text($Lat2Text) {
       if (strlen($Lat2Text) > huh_locality::LAT2TEXT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Lat2Text = $this->l_addslashes($Lat2Text);
       $this->dirty = true;
   }
/*LatLongAccuracy*/
   public function getLatLongAccuracy() {
       if ($this->LatLongAccuracy==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LatLongAccuracy));
       }
   }
   public function setLatLongAccuracy($LatLongAccuracy) {
       if (strlen($LatLongAccuracy) > huh_locality::LATLONGACCURACY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->LatLongAccuracy = $this->l_addslashes($LatLongAccuracy);
       $this->dirty = true;
   }
/*LatLongMethod*/
   public function getLatLongMethod() {
       if ($this->LatLongMethod==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LatLongMethod));
       }
   }
   public function setLatLongMethod($LatLongMethod) {
       if (strlen($LatLongMethod) > huh_locality::LATLONGMETHOD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->LatLongMethod = $this->l_addslashes($LatLongMethod);
       $this->dirty = true;
   }
/*LatLongType*/
   public function getLatLongType() {
       if ($this->LatLongType==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LatLongType));
       }
   }
   public function setLatLongType($LatLongType) {
       if (strlen($LatLongType) > huh_locality::LATLONGTYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->LatLongType = $this->l_addslashes($LatLongType);
       $this->dirty = true;
   }
/*Latitude1*/
   public function getLatitude1() {
       if ($this->Latitude1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Latitude1));
       }
   }
   public function setLatitude1($Latitude1) {
       if (strlen(preg_replace('/[^0-9]/','',$Latitude1)) > huh_locality::LATITUDE1_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Latitude1 = trim($Latitude1);
       if (!is_numeric($Latitude1) && trim(strval($Latitude1))!='' ) {
             throw new Exception("Value must be a number");
       }
       $this->Latitude1 = $this->l_addslashes($Latitude1);
       $this->dirty = true;
   }
/*Latitude2*/
   public function getLatitude2() {
       if ($this->Latitude2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Latitude2));
       }
   }
   public function setLatitude2($Latitude2) {
       if (strlen(preg_replace('/[^0-9]/','',$Latitude2)) > huh_locality::LATITUDE2_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Latitude2 = trim($Latitude2);
       if (!is_numeric($Latitude2) && trim(strval($Latitude2))!='' ) {
             throw new Exception("Value must be a number");
       }
       $this->Latitude2 = $this->l_addslashes($Latitude2);
       $this->dirty = true;
   }
/*LocalityName*/
   public function getLocalityName() {
       if ($this->LocalityName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LocalityName));
       }
   }
   public function setLocalityName($LocalityName) {
       if (strlen($LocalityName) > huh_locality::LOCALITYNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->LocalityName = $this->l_addslashes($LocalityName);
       $this->dirty = true;
   }
/*Long1Text*/
   public function getLong1Text() {
       if ($this->Long1Text==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Long1Text));
       }
   }
   public function setLong1Text($Long1Text) {
       if (strlen($Long1Text) > huh_locality::LONG1TEXT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Long1Text = $this->l_addslashes($Long1Text);
       $this->dirty = true;
   }
/*Long2Text*/
   public function getLong2Text() {
       if ($this->Long2Text==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Long2Text));
       }
   }
   public function setLong2Text($Long2Text) {
       if (strlen($Long2Text) > huh_locality::LONG2TEXT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Long2Text = $this->l_addslashes($Long2Text);
       $this->dirty = true;
   }
/*Longitude1*/
   public function getLongitude1() {
       if ($this->Longitude1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Longitude1));
       }
   }
   public function setLongitude1($Longitude1) {
       if (strlen(preg_replace('/[^0-9]/','',$Longitude1)) > huh_locality::LONGITUDE1_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Longitude1 = trim($Longitude1);
       if (!is_numeric($Longitude1) && trim(strval($Longitude1))!='' ) {
             throw new Exception("Value must be a number");
       }
       $this->Longitude1 = $this->l_addslashes($Longitude1);
       $this->dirty = true;
   }
/*Longitude2*/
   public function getLongitude2() {
       if ($this->Longitude2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Longitude2));
       }
   }
   public function setLongitude2($Longitude2) {
       if (strlen(preg_replace('/[^0-9]/','',$Longitude2)) > huh_locality::LONGITUDE2_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Longitude2 = trim($Longitude2);
       if (!is_numeric($Longitude2) && trim(strval($Longitude2))!='' ) {
             throw new Exception("Value must be a number");
       }
       $this->Longitude2 = $this->l_addslashes($Longitude2);
       $this->dirty = true;
   }
/*MaxElevation*/
   public function getMaxElevation() {
       if ($this->MaxElevation==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->MaxElevation));
       }
   }
   public function setMaxElevation($MaxElevation) {
       if (strlen($MaxElevation) > huh_locality::MAXELEVATION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->MaxElevation = $this->l_addslashes($MaxElevation);
       $this->dirty = true;
   }
/*MinElevation*/
   public function getMinElevation() {
       if ($this->MinElevation==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->MinElevation));
       }
   }
   public function setMinElevation($MinElevation) {
       if (strlen($MinElevation) > huh_locality::MINELEVATION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->MinElevation = $this->l_addslashes($MinElevation);
       $this->dirty = true;
   }
/*NamedPlace*/
   public function getNamedPlace() {
       if ($this->NamedPlace==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NamedPlace));
       }
   }
   public function setNamedPlace($NamedPlace) {
       if (strlen($NamedPlace) > huh_locality::NAMEDPLACE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->NamedPlace = $this->l_addslashes($NamedPlace);
       $this->dirty = true;
   }
/*OriginalElevationUnit*/
   public function getOriginalElevationUnit() {
       if ($this->OriginalElevationUnit==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->OriginalElevationUnit));
       }
   }
   public function setOriginalElevationUnit($OriginalElevationUnit) {
       if (strlen($OriginalElevationUnit) > huh_locality::ORIGINALELEVATIONUNIT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->OriginalElevationUnit = $this->l_addslashes($OriginalElevationUnit);
       $this->dirty = true;
   }
/*OriginalLatLongUnit*/
   public function getOriginalLatLongUnit() {
       if ($this->OriginalLatLongUnit==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->OriginalLatLongUnit));
       }
   }
   public function setOriginalLatLongUnit($OriginalLatLongUnit) {
       if (strlen(preg_replace('/[^0-9]/','',$OriginalLatLongUnit)) > huh_locality::ORIGINALLATLONGUNIT_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $OriginalLatLongUnit = trim($OriginalLatLongUnit);
       if (!ctype_digit(strval($OriginalLatLongUnit)) && trim(strval($OriginalLatLongUnit))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->OriginalLatLongUnit = $this->l_addslashes($OriginalLatLongUnit);
       $this->dirty = true;
   }
/*RelationToNamedPlace*/
   public function getRelationToNamedPlace() {
       if ($this->RelationToNamedPlace==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RelationToNamedPlace));
       }
   }
   public function setRelationToNamedPlace($RelationToNamedPlace) {
       if (strlen($RelationToNamedPlace) > huh_locality::RELATIONTONAMEDPLACE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->RelationToNamedPlace = $this->l_addslashes($RelationToNamedPlace);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_locality::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*ShortName*/
   public function getShortName() {
       if ($this->ShortName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ShortName));
       }
   }
   public function setShortName($ShortName) {
       if (strlen($ShortName) > huh_locality::SHORTNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ShortName = $this->l_addslashes($ShortName);
       $this->dirty = true;
   }
/*SrcLatLongUnit*/
   public function getSrcLatLongUnit() {
       if ($this->SrcLatLongUnit==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SrcLatLongUnit));
       }
   }
   public function setSrcLatLongUnit($SrcLatLongUnit) {
       if (strlen($SrcLatLongUnit) > huh_locality::SRCLATLONGUNIT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->SrcLatLongUnit = $this->l_addslashes($SrcLatLongUnit);
       $this->dirty = true;
   }
/*VerbatimElevation*/
   public function getVerbatimElevation() {
       if ($this->VerbatimElevation==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->VerbatimElevation));
       }
   }
   public function setVerbatimElevation($VerbatimElevation) {
       if (strlen($VerbatimElevation) > huh_locality::VERBATIMELEVATION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->VerbatimElevation = $this->l_addslashes($VerbatimElevation);
       $this->dirty = true;
   }
/*Visibility*/
   public function getVisibility() {
       if ($this->Visibility==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Visibility));
       }
   }
   public function setVisibility($Visibility) {
       if (strlen($Visibility) > huh_locality::VISIBILITY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Visibility = $this->l_addslashes($Visibility);
       $this->dirty = true;
   }
/*DisciplineID*/
   public function getDisciplineID() {
       if ($this->DisciplineID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DisciplineID));
       }
   }
   public function setDisciplineID($DisciplineID) {
       if (strlen(preg_replace('/[^0-9]/','',$DisciplineID)) > huh_locality::DISCIPLINEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DisciplineID = trim($DisciplineID);
       if (!ctype_digit(strval($DisciplineID))) {
             throw new Exception("Value must be an integer");
       }
       $this->DisciplineID = $this->l_addslashes($DisciplineID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_locality::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*VisibilitySetByID*/
   public function getVisibilitySetByID() {
       if ($this->VisibilitySetByID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->VisibilitySetByID));
       }
   }
   public function setVisibilitySetByID($VisibilitySetByID) {
       if (strlen(preg_replace('/[^0-9]/','',$VisibilitySetByID)) > huh_locality::VISIBILITYSETBYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $VisibilitySetByID = trim($VisibilitySetByID);
       if (!ctype_digit(strval($VisibilitySetByID)) && trim(strval($VisibilitySetByID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->VisibilitySetByID = $this->l_addslashes($VisibilitySetByID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_locality::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*GeographyID*/
   public function getGeographyID() {
       if ($this->GeographyID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeographyID));
       }
   }
   public function setGeographyID($GeographyID) {
       if (strlen(preg_replace('/[^0-9]/','',$GeographyID)) > huh_locality::GEOGRAPHYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $GeographyID = trim($GeographyID);
       if (!ctype_digit(strval($GeographyID)) && trim(strval($GeographyID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->GeographyID = $this->l_addslashes($GeographyID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getLocalityID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['LocalityID'] = $this->getLocalityID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_LocalityIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_DatumMYSQLI_TYPE = 's';
  const C_ElevationAccuracyMYSQLI_TYPE = 'd';
  const C_ElevationMethodMYSQLI_TYPE = 's';
  const C_GMLMYSQLI_TYPE = 's';
  const C_GUIDMYSQLI_TYPE = 's';
  const C_Lat1TextMYSQLI_TYPE = 's';
  const C_Lat2TextMYSQLI_TYPE = 's';
  const C_LatLongAccuracyMYSQLI_TYPE = 'd';
  const C_LatLongMethodMYSQLI_TYPE = 's';
  const C_LatLongTypeMYSQLI_TYPE = 's';
  const C_Latitude1MYSQLI_TYPE = 'd';
  const C_Latitude2MYSQLI_TYPE = 'd';
  const C_LocalityNameMYSQLI_TYPE = 's';
  const C_Long1TextMYSQLI_TYPE = 's';
  const C_Long2TextMYSQLI_TYPE = 's';
  const C_Longitude1MYSQLI_TYPE = 'd';
  const C_Longitude2MYSQLI_TYPE = 'd';
  const C_MaxElevationMYSQLI_TYPE = 'd';
  const C_MinElevationMYSQLI_TYPE = 'd';
  const C_NamedPlaceMYSQLI_TYPE = 's';
  const C_OriginalElevationUnitMYSQLI_TYPE = 's';
  const C_OriginalLatLongUnitMYSQLI_TYPE = 'i';
  const C_RelationToNamedPlaceMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_ShortNameMYSQLI_TYPE = 's';
  const C_SrcLatLongUnitMYSQLI_TYPE = 'i';
  const C_VerbatimElevationMYSQLI_TYPE = 's';
  const C_VisibilityMYSQLI_TYPE = 'i';
  const C_DisciplineIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_VisibilitySetByIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_GeographyIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='LocalityID') { $retval = self::C_LocalityIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='Datum') { $retval = self::C_DatumMYSQLI_TYPE; }
      if ($aFieldname=='ElevationAccuracy') { $retval = self::C_ElevationAccuracyMYSQLI_TYPE; }
      if ($aFieldname=='ElevationMethod') { $retval = self::C_ElevationMethodMYSQLI_TYPE; }
      if ($aFieldname=='GML') { $retval = self::C_GMLMYSQLI_TYPE; }
      if ($aFieldname=='GUID') { $retval = self::C_GUIDMYSQLI_TYPE; }
      if ($aFieldname=='Lat1Text') { $retval = self::C_Lat1TextMYSQLI_TYPE; }
      if ($aFieldname=='Lat2Text') { $retval = self::C_Lat2TextMYSQLI_TYPE; }
      if ($aFieldname=='LatLongAccuracy') { $retval = self::C_LatLongAccuracyMYSQLI_TYPE; }
      if ($aFieldname=='LatLongMethod') { $retval = self::C_LatLongMethodMYSQLI_TYPE; }
      if ($aFieldname=='LatLongType') { $retval = self::C_LatLongTypeMYSQLI_TYPE; }
      if ($aFieldname=='Latitude1') { $retval = self::C_Latitude1MYSQLI_TYPE; }
      if ($aFieldname=='Latitude2') { $retval = self::C_Latitude2MYSQLI_TYPE; }
      if ($aFieldname=='LocalityName') { $retval = self::C_LocalityNameMYSQLI_TYPE; }
      if ($aFieldname=='Long1Text') { $retval = self::C_Long1TextMYSQLI_TYPE; }
      if ($aFieldname=='Long2Text') { $retval = self::C_Long2TextMYSQLI_TYPE; }
      if ($aFieldname=='Longitude1') { $retval = self::C_Longitude1MYSQLI_TYPE; }
      if ($aFieldname=='Longitude2') { $retval = self::C_Longitude2MYSQLI_TYPE; }
      if ($aFieldname=='MaxElevation') { $retval = self::C_MaxElevationMYSQLI_TYPE; }
      if ($aFieldname=='MinElevation') { $retval = self::C_MinElevationMYSQLI_TYPE; }
      if ($aFieldname=='NamedPlace') { $retval = self::C_NamedPlaceMYSQLI_TYPE; }
      if ($aFieldname=='OriginalElevationUnit') { $retval = self::C_OriginalElevationUnitMYSQLI_TYPE; }
      if ($aFieldname=='OriginalLatLongUnit') { $retval = self::C_OriginalLatLongUnitMYSQLI_TYPE; }
      if ($aFieldname=='RelationToNamedPlace') { $retval = self::C_RelationToNamedPlaceMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='ShortName') { $retval = self::C_ShortNameMYSQLI_TYPE; }
      if ($aFieldname=='SrcLatLongUnit') { $retval = self::C_SrcLatLongUnitMYSQLI_TYPE; }
      if ($aFieldname=='VerbatimElevation') { $retval = self::C_VerbatimElevationMYSQLI_TYPE; }
      if ($aFieldname=='Visibility') { $retval = self::C_VisibilityMYSQLI_TYPE; }
      if ($aFieldname=='DisciplineID') { $retval = self::C_DisciplineIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='VisibilitySetByID') { $retval = self::C_VisibilitySetByIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='GeographyID') { $retval = self::C_GeographyIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setLocalityID($pk[LocalityID]);
             } else { ;
                 $this->setLocalityID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->LocalityID != NULL) {
           $sql = 'SELECT LocalityID, TimestampCreated, TimestampModified, Version, Datum, ElevationAccuracy, ElevationMethod, GML, GUID, Lat1Text, Lat2Text, LatLongAccuracy, LatLongMethod, LatLongType, Latitude1, Latitude2, LocalityName, Long1Text, Long2Text, Longitude1, Longitude2, MaxElevation, MinElevation, NamedPlace, OriginalElevationUnit, OriginalLatLongUnit, RelationToNamedPlace, Remarks, ShortName, SrcLatLongUnit, VerbatimElevation, Visibility, DisciplineID, ModifiedByAgentID, VisibilitySetByID, CreatedByAgentID, GeographyID FROM locality WHERE LocalityID = '.$this->LocalityID ;

           $preparesql = 'SELECT LocalityID, TimestampCreated, TimestampModified, Version, Datum, ElevationAccuracy, ElevationMethod, GML, GUID, Lat1Text, Lat2Text, LatLongAccuracy, LatLongMethod, LatLongType, Latitude1, Latitude2, LocalityName, Long1Text, Long2Text, Longitude1, Longitude2, MaxElevation, MinElevation, NamedPlace, OriginalElevationUnit, OriginalLatLongUnit, RelationToNamedPlace, Remarks, ShortName, SrcLatLongUnit, VerbatimElevation, Visibility, DisciplineID, ModifiedByAgentID, VisibilitySetByID, CreatedByAgentID, GeographyID FROM locality WHERE LocalityID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->LocalityID);
              $statement->execute();
              $statement->bind_result($this->LocalityID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Datum, $this->ElevationAccuracy, $this->ElevationMethod, $this->GML, $this->GUID, $this->Lat1Text, $this->Lat2Text, $this->LatLongAccuracy, $this->LatLongMethod, $this->LatLongType, $this->Latitude1, $this->Latitude2, $this->LocalityName, $this->Long1Text, $this->Long2Text, $this->Longitude1, $this->Longitude2, $this->MaxElevation, $this->MinElevation, $this->NamedPlace, $this->OriginalElevationUnit, $this->OriginalLatLongUnit, $this->RelationToNamedPlace, $this->Remarks, $this->ShortName, $this->SrcLatLongUnit, $this->VerbatimElevation, $this->Visibility, $this->DisciplineID, $this->ModifiedByAgentID, $this->VisibilitySetByID, $this->CreatedByAgentID, $this->GeographyID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->LocalityID!= NULL) {
            $sql  = 'UPDATE  locality SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", Datum = ? ";
            $sql .=  ", ElevationAccuracy = ? ";
            $sql .=  ", ElevationMethod = ? ";
            $sql .=  ", GML = ? ";
            $sql .=  ", GUID = ? ";
            $sql .=  ", Lat1Text = ? ";
            $sql .=  ", Lat2Text = ? ";
            $sql .=  ", LatLongAccuracy = ? ";
            $sql .=  ", LatLongMethod = ? ";
            $sql .=  ", LatLongType = ? ";
            $sql .=  ", Latitude1 = ? ";
            $sql .=  ", Latitude2 = ? ";
            $sql .=  ", LocalityName = ? ";
            $sql .=  ", Long1Text = ? ";
            $sql .=  ", Long2Text = ? ";
            $sql .=  ", Longitude1 = ? ";
            $sql .=  ", Longitude2 = ? ";
            $sql .=  ", MaxElevation = ? ";
            $sql .=  ", MinElevation = ? ";
            $sql .=  ", NamedPlace = ? ";
            $sql .=  ", OriginalElevationUnit = ? ";
            $sql .=  ", OriginalLatLongUnit = ? ";
            $sql .=  ", RelationToNamedPlace = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", ShortName = ? ";
            $sql .=  ", SrcLatLongUnit = ? ";
            $sql .=  ", VerbatimElevation = ? ";
            $sql .=  ", Visibility = ? ";
            $sql .=  ", DisciplineID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", VisibilitySetByID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", GeographyID = ? ";

            $sql .= "  WHERE LocalityID = ? ";
        } else {
            $sql  = 'INSERT INTO locality ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( LocalityID ,  TimestampCreated ,  TimestampModified ,  Version ,  Datum ,  ElevationAccuracy ,  ElevationMethod ,  GML ,  GUID ,  Lat1Text ,  Lat2Text ,  LatLongAccuracy ,  LatLongMethod ,  LatLongType ,  Latitude1 ,  Latitude2 ,  LocalityName ,  Long1Text ,  Long2Text ,  Longitude1 ,  Longitude2 ,  MaxElevation ,  MinElevation ,  NamedPlace ,  OriginalElevationUnit ,  OriginalLatLongUnit ,  RelationToNamedPlace ,  Remarks ,  ShortName ,  SrcLatLongUnit ,  VerbatimElevation ,  Visibility ,  DisciplineID ,  ModifiedByAgentID ,  VisibilitySetByID ,  CreatedByAgentID ,  GeographyID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->LocalityID!= NULL ) {
              $statement->bind_param("issisdsssssdssddsssddddssisssisiiiiiii", $this->LocalityID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Datum , $this->ElevationAccuracy , $this->ElevationMethod , $this->GML , $this->GUID , $this->Lat1Text , $this->Lat2Text , $this->LatLongAccuracy , $this->LatLongMethod , $this->LatLongType , $this->Latitude1 , $this->Latitude2 , $this->LocalityName , $this->Long1Text , $this->Long2Text , $this->Longitude1 , $this->Longitude2 , $this->MaxElevation , $this->MinElevation , $this->NamedPlace , $this->OriginalElevationUnit , $this->OriginalLatLongUnit , $this->RelationToNamedPlace , $this->Remarks , $this->ShortName , $this->SrcLatLongUnit , $this->VerbatimElevation , $this->Visibility , $this->DisciplineID , $this->ModifiedByAgentID , $this->VisibilitySetByID , $this->CreatedByAgentID , $this->GeographyID , $this->LocalityID );
           } else { 
              $statement->bind_param("issisdsssssdssddsssddddssisssisiiiiii", $this->LocalityID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Datum , $this->ElevationAccuracy , $this->ElevationMethod , $this->GML , $this->GUID , $this->Lat1Text , $this->Lat2Text , $this->LatLongAccuracy , $this->LatLongMethod , $this->LatLongType , $this->Latitude1 , $this->Latitude2 , $this->LocalityName , $this->Long1Text , $this->Long2Text , $this->Longitude1 , $this->Longitude2 , $this->MaxElevation , $this->MinElevation , $this->NamedPlace , $this->OriginalElevationUnit , $this->OriginalLatLongUnit , $this->RelationToNamedPlace , $this->Remarks , $this->ShortName , $this->SrcLatLongUnit , $this->VerbatimElevation , $this->Visibility , $this->DisciplineID , $this->ModifiedByAgentID , $this->VisibilitySetByID , $this->CreatedByAgentID , $this->GeographyID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->LocalityID != NULL) {
           $sql = 'SELECT LocalityID, TimestampCreated, TimestampModified, Version, Datum, ElevationAccuracy, ElevationMethod, GML, GUID, Lat1Text, Lat2Text, LatLongAccuracy, LatLongMethod, LatLongType, Latitude1, Latitude2, LocalityName, Long1Text, Long2Text, Longitude1, Longitude2, MaxElevation, MinElevation, NamedPlace, OriginalElevationUnit, OriginalLatLongUnit, RelationToNamedPlace, Remarks, ShortName, SrcLatLongUnit, VerbatimElevation, Visibility, DisciplineID, ModifiedByAgentID, VisibilitySetByID, CreatedByAgentID, GeographyID FROM locality WHERE LocalityID = "'.$this->LocalityID.'"  ' ;

           $preparedsql = 'SELECT  FROM locality WHERE  and LocalityID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issisdsssssdssddsssddddssisssisiiiiii", $this->LocalityID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Datum, $this->ElevationAccuracy, $this->ElevationMethod, $this->GML, $this->GUID, $this->Lat1Text, $this->Lat2Text, $this->LatLongAccuracy, $this->LatLongMethod, $this->LatLongType, $this->Latitude1, $this->Latitude2, $this->LocalityName, $this->Long1Text, $this->Long2Text, $this->Longitude1, $this->Longitude2, $this->MaxElevation, $this->MinElevation, $this->NamedPlace, $this->OriginalElevationUnit, $this->OriginalLatLongUnit, $this->RelationToNamedPlace, $this->Remarks, $this->ShortName, $this->SrcLatLongUnit, $this->VerbatimElevation, $this->Visibility, $this->DisciplineID, $this->ModifiedByAgentID, $this->VisibilitySetByID, $this->CreatedByAgentID, $this->GeographyID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM locality WHERE  and LocalityID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issisdsssssdssddsssddddssisssisiiiiii", $this->LocalityID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Datum, $this->ElevationAccuracy, $this->ElevationMethod, $this->GML, $this->GUID, $this->Lat1Text, $this->Lat2Text, $this->LatLongAccuracy, $this->LatLongMethod, $this->LatLongType, $this->Latitude1, $this->Latitude2, $this->LocalityName, $this->Long1Text, $this->Long2Text, $this->Longitude1, $this->Longitude2, $this->MaxElevation, $this->MinElevation, $this->NamedPlace, $this->OriginalElevationUnit, $this->OriginalLatLongUnit, $this->RelationToNamedPlace, $this->Remarks, $this->ShortName, $this->SrcLatLongUnit, $this->VerbatimElevation, $this->Visibility, $this->DisciplineID, $this->ModifiedByAgentID, $this->VisibilitySetByID, $this->CreatedByAgentID, $this->GeographyID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->LocalityID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM locality';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT LocalityID FROM locality $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_locality();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromcollectingevent() { 
      // ForeignKey in: collectingevent
      $t = new collectingevent();
  } 
  public function loadLinkedFromgeocoorddetail() { 
      // ForeignKey in: geocoorddetail
      $t = new geocoorddetail();
  } 
  public function loadLinkedFromlatlonpolygon() { 
      // ForeignKey in: latlonpolygon
      $t = new latlonpolygon();
  } 
  public function loadLinkedFromlocalityattachment() { 
      // ForeignKey in: localityattachment
      $t = new localityattachment();
  } 
  public function loadLinkedFromlocalitycitation() { 
      // ForeignKey in: localitycitation
      $t = new localitycitation();
  } 
  public function loadLinkedFromlocalitydetail() { 
      // ForeignKey in: localitydetail
      $t = new localitydetail();
  } 
  public function loadLinkedFromlocalitynamealias() { 
      // ForeignKey in: localitynamealias
      $t = new localitynamealias();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: DisciplineID
      $t = new discipline();
      $t->load(getDisciplineID());
      $returnvalue[DisciplineID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: VisibilitySetByID
      $t = new specifyuser();
      $t->load(getVisibilitySetByID());
      $returnvalue[VisibilitySetByID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: GeographyID
      $t = new geography();
      $t->load(getGeographyID());
      $returnvalue[GeographyID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT LocalityID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(Datum,'') || ' ' || IFNULL(ElevationAccuracy,'') || ' ' || IFNULL(ElevationMethod,'') || ' ' || IFNULL(GML,'') || ' ' || IFNULL(GUID,'') || ' ' || IFNULL(Lat1Text,'') || ' ' || IFNULL(Lat2Text,'') || ' ' || IFNULL(LatLongAccuracy,'') || ' ' || IFNULL(LatLongMethod,'') || ' ' || IFNULL(LatLongType,'') || ' ' || IFNULL(Latitude1,'') || ' ' || IFNULL(Latitude2,'') || ' ' || IFNULL(LocalityName,'') || ' ' || IFNULL(Long1Text,'') || ' ' || IFNULL(Long2Text,'') || ' ' || IFNULL(Longitude1,'') || ' ' || IFNULL(Longitude2,'') || ' ' || IFNULL(MaxElevation,'') || ' ' || IFNULL(MinElevation,'') || ' ' || IFNULL(NamedPlace,'') || ' ' || IFNULL(OriginalElevationUnit,'') || ' ' || IFNULL(OriginalLatLongUnit,'') || ' ' || IFNULL(RelationToNamedPlace,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(ShortName,'') || ' ' || IFNULL(SrcLatLongUnit,'') || ' ' || IFNULL(VerbatimElevation,'') || ' ' || IFNULL(Visibility,'') || ' ' || IFNULL(DisciplineID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(VisibilitySetByID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(GeographyID,'')) FROM locality order by GUID, LocalityName, NamedPlace, RelationToNamedPlace, DisciplineID, ModifiedByAgentID, VisibilitySetByID, CreatedByAgentID, GeographyID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM locality order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByGUID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LocalityID FROM locality WHERE GUID $operator '$searchTerm'";
        $preparedsql = "SELECT LocalityID FROM locality WHERE GUID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_locality();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByLocalityName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LocalityID FROM locality WHERE LocalityName $operator '$searchTerm'";
        $preparedsql = "SELECT LocalityID FROM locality WHERE LocalityName $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_locality();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByNamedPlace($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LocalityID FROM locality WHERE NamedPlace $operator '$searchTerm'";
        $preparedsql = "SELECT LocalityID FROM locality WHERE NamedPlace $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_locality();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByRelationToNamedPlace($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LocalityID FROM locality WHERE RelationToNamedPlace $operator '$searchTerm'";
        $preparedsql = "SELECT LocalityID FROM locality WHERE RelationToNamedPlace $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_locality();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDisciplineID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LocalityID FROM locality WHERE DisciplineID $operator '$searchTerm'";
        $preparedsql = "SELECT LocalityID FROM locality WHERE DisciplineID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_locality();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LocalityID FROM locality WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT LocalityID FROM locality WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_locality();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByVisibilitySetByID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LocalityID FROM locality WHERE VisibilitySetByID $operator '$searchTerm'";
        $preparedsql = "SELECT LocalityID FROM locality WHERE VisibilitySetByID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_locality();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LocalityID FROM locality WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT LocalityID FROM locality WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_locality();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGeographyID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LocalityID FROM locality WHERE GeographyID $operator '$searchTerm'";
        $preparedsql = "SELECT LocalityID FROM locality WHERE GeographyID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_locality();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctGUID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GUID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GUID FROM locality group by GUID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GUID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctLocalityName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' LocalityName ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, LocalityName FROM locality group by LocalityName order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&LocalityName=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctNamedPlace($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' NamedPlace ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, NamedPlace FROM locality group by NamedPlace order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&NamedPlace=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctRelationToNamedPlace($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' RelationToNamedPlace ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, RelationToNamedPlace FROM locality group by RelationToNamedPlace order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&RelationToNamedPlace=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDisciplineID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DisciplineID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DisciplineID FROM locality group by DisciplineID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DisciplineID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM locality group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctVisibilitySetByID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' VisibilitySetByID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, VisibilitySetByID FROM locality group by VisibilitySetByID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&VisibilitySetByID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM locality group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGeographyID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GeographyID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GeographyID FROM locality group by GeographyID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GeographyID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'GUID':
             $returnvalue = $this->selectDistinctGUID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'LocalityName':
             $returnvalue = $this->selectDistinctLocalityName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'NamedPlace':
             $returnvalue = $this->selectDistinctNamedPlace($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'RelationToNamedPlace':
             $returnvalue = $this->selectDistinctRelationToNamedPlace($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DisciplineID':
             $returnvalue = $this->selectDistinctDisciplineID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'VisibilitySetByID':
             $returnvalue = $this->selectDistinctVisibilitySetByID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GeographyID':
             $returnvalue = $this->selectDistinctGeographyID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the locality.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_localityView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_locality <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_locality::LOCALITYID.": ".$model->getLocalityID()."</li>\n";
       $returnvalue .= "<li>".huh_locality::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_locality::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_locality::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_locality::DATUM.": ".$model->getDatum()."</li>\n";
       $returnvalue .= "<li>".huh_locality::ELEVATIONACCURACY.": ".$model->getElevationAccuracy()."</li>\n";
       $returnvalue .= "<li>".huh_locality::ELEVATIONMETHOD.": ".$model->getElevationMethod()."</li>\n";
       $returnvalue .= "<li>".huh_locality::GML.": ".$model->getGML()."</li>\n";
       $returnvalue .= "<li>".huh_locality::GUID.": ".$model->getGUID()."</li>\n";
       $returnvalue .= "<li>".huh_locality::LAT1TEXT.": ".$model->getLat1Text()."</li>\n";
       $returnvalue .= "<li>".huh_locality::LAT2TEXT.": ".$model->getLat2Text()."</li>\n";
       $returnvalue .= "<li>".huh_locality::LATLONGACCURACY.": ".$model->getLatLongAccuracy()."</li>\n";
       $returnvalue .= "<li>".huh_locality::LATLONGMETHOD.": ".$model->getLatLongMethod()."</li>\n";
       $returnvalue .= "<li>".huh_locality::LATLONGTYPE.": ".$model->getLatLongType()."</li>\n";
       $returnvalue .= "<li>".huh_locality::LATITUDE1.": ".$model->getLatitude1()."</li>\n";
       $returnvalue .= "<li>".huh_locality::LATITUDE2.": ".$model->getLatitude2()."</li>\n";
       $returnvalue .= "<li>".huh_locality::LOCALITYNAME.": ".$model->getLocalityName()."</li>\n";
       $returnvalue .= "<li>".huh_locality::LONG1TEXT.": ".$model->getLong1Text()."</li>\n";
       $returnvalue .= "<li>".huh_locality::LONG2TEXT.": ".$model->getLong2Text()."</li>\n";
       $returnvalue .= "<li>".huh_locality::LONGITUDE1.": ".$model->getLongitude1()."</li>\n";
       $returnvalue .= "<li>".huh_locality::LONGITUDE2.": ".$model->getLongitude2()."</li>\n";
       $returnvalue .= "<li>".huh_locality::MAXELEVATION.": ".$model->getMaxElevation()."</li>\n";
       $returnvalue .= "<li>".huh_locality::MINELEVATION.": ".$model->getMinElevation()."</li>\n";
       $returnvalue .= "<li>".huh_locality::NAMEDPLACE.": ".$model->getNamedPlace()."</li>\n";
       $returnvalue .= "<li>".huh_locality::ORIGINALELEVATIONUNIT.": ".$model->getOriginalElevationUnit()."</li>\n";
       $returnvalue .= "<li>".huh_locality::ORIGINALLATLONGUNIT.": ".$model->getOriginalLatLongUnit()."</li>\n";
       $returnvalue .= "<li>".huh_locality::RELATIONTONAMEDPLACE.": ".$model->getRelationToNamedPlace()."</li>\n";
       $returnvalue .= "<li>".huh_locality::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_locality::SHORTNAME.": ".$model->getShortName()."</li>\n";
       $returnvalue .= "<li>".huh_locality::SRCLATLONGUNIT.": ".$model->getSrcLatLongUnit()."</li>\n";
       $returnvalue .= "<li>".huh_locality::VERBATIMELEVATION.": ".$model->getVerbatimElevation()."</li>\n";
       $returnvalue .= "<li>".huh_locality::VISIBILITY.": ".$model->getVisibility()."</li>\n";
       $returnvalue .= "<li>".huh_locality::DISCIPLINEID.": ".$model->getDisciplineID()."</li>\n";
       $returnvalue .= "<li>".huh_locality::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_locality::VISIBILITYSETBYID.": ".$model->getVisibilitySetByID()."</li>\n";
       $returnvalue .= "<li>".huh_locality::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_locality::GEOGRAPHYID.": ".$model->getGeographyID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>discipline</li>";
           $t_discipline = new huh_discipline();
           $t_disciplineView = new huh_disciplineView();
           $t_disciplineView->setModel($t_discipline);
           if ($model->getDisciplineID() != '') { 
               $t_discipline->load($model->getDisciplineID());
               $returnvalue .= $t_disciplineView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>specifyuser</li>";
           $t_specifyuser = new huh_specifyuser();
           $t_specifyuserView = new huh_specifyuserView();
           $t_specifyuserView->setModel($t_specifyuser);
           if ($model->getVisibilitySetByID() != '') { 
               $t_specifyuser->load($model->getVisibilitySetByID());
               $returnvalue .= $t_specifyuserView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>geography</li>";
           $t_geography = new huh_geography();
           $t_geographyView = new huh_geographyView();
           $t_geographyView->setModel($t_geography);
           if ($model->getGeographyID() != '') { 
               $t_geography->load($model->getGeographyID());
               $returnvalue .= $t_geographyView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_locality::LOCALITYID.': "'.$model->getLocalityID().'",';
       $returnvalue .= '"'.huh_locality::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_locality::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_locality::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_locality::DATUM.': "'.$model->getDatum().'",';
       $returnvalue .= '"'.huh_locality::ELEVATIONACCURACY.': "'.$model->getElevationAccuracy().'",';
       $returnvalue .= '"'.huh_locality::ELEVATIONMETHOD.': "'.$model->getElevationMethod().'",';
       $returnvalue .= '"'.huh_locality::GML.': "'.$model->getGML().'",';
       $returnvalue .= '"'.huh_locality::GUID.': "'.$model->getGUID().'",';
       $returnvalue .= '"'.huh_locality::LAT1TEXT.': "'.$model->getLat1Text().'",';
       $returnvalue .= '"'.huh_locality::LAT2TEXT.': "'.$model->getLat2Text().'",';
       $returnvalue .= '"'.huh_locality::LATLONGACCURACY.': "'.$model->getLatLongAccuracy().'",';
       $returnvalue .= '"'.huh_locality::LATLONGMETHOD.': "'.$model->getLatLongMethod().'",';
       $returnvalue .= '"'.huh_locality::LATLONGTYPE.': "'.$model->getLatLongType().'",';
       $returnvalue .= '"'.huh_locality::LATITUDE1.': "'.$model->getLatitude1().'",';
       $returnvalue .= '"'.huh_locality::LATITUDE2.': "'.$model->getLatitude2().'",';
       $returnvalue .= '"'.huh_locality::LOCALITYNAME.': "'.$model->getLocalityName().'",';
       $returnvalue .= '"'.huh_locality::LONG1TEXT.': "'.$model->getLong1Text().'",';
       $returnvalue .= '"'.huh_locality::LONG2TEXT.': "'.$model->getLong2Text().'",';
       $returnvalue .= '"'.huh_locality::LONGITUDE1.': "'.$model->getLongitude1().'",';
       $returnvalue .= '"'.huh_locality::LONGITUDE2.': "'.$model->getLongitude2().'",';
       $returnvalue .= '"'.huh_locality::MAXELEVATION.': "'.$model->getMaxElevation().'",';
       $returnvalue .= '"'.huh_locality::MINELEVATION.': "'.$model->getMinElevation().'",';
       $returnvalue .= '"'.huh_locality::NAMEDPLACE.': "'.$model->getNamedPlace().'",';
       $returnvalue .= '"'.huh_locality::ORIGINALELEVATIONUNIT.': "'.$model->getOriginalElevationUnit().'",';
       $returnvalue .= '"'.huh_locality::ORIGINALLATLONGUNIT.': "'.$model->getOriginalLatLongUnit().'",';
       $returnvalue .= '"'.huh_locality::RELATIONTONAMEDPLACE.': "'.$model->getRelationToNamedPlace().'",';
       $returnvalue .= '"'.huh_locality::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_locality::SHORTNAME.': "'.$model->getShortName().'",';
       $returnvalue .= '"'.huh_locality::SRCLATLONGUNIT.': "'.$model->getSrcLatLongUnit().'",';
       $returnvalue .= '"'.huh_locality::VERBATIMELEVATION.': "'.$model->getVerbatimElevation().'",';
       $returnvalue .= '"'.huh_locality::VISIBILITY.': "'.$model->getVisibility().'",';
       $returnvalue .= '"'.huh_locality::DISCIPLINEID.': "'.$model->getDisciplineID().'",';
       $returnvalue .= '"'.huh_locality::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_locality::VISIBILITYSETBYID.': "'.$model->getVisibilitySetByID().'",';
       $returnvalue .= '"'.huh_locality::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_locality::GEOGRAPHYID.': "'.$model->getGeographyID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getLocalityID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getDatum()."</td>\n";
       $returnvalue .= "<td>".$model->getElevationAccuracy()."</td>\n";
       $returnvalue .= "<td>".$model->getElevationMethod()."</td>\n";
       $returnvalue .= "<td>".$model->getGML()."</td>\n";
       $returnvalue .= "<td>".$model->getGUID()."</td>\n";
       $returnvalue .= "<td>".$model->getLat1Text()."</td>\n";
       $returnvalue .= "<td>".$model->getLat2Text()."</td>\n";
       $returnvalue .= "<td>".$model->getLatLongAccuracy()."</td>\n";
       $returnvalue .= "<td>".$model->getLatLongMethod()."</td>\n";
       $returnvalue .= "<td>".$model->getLatLongType()."</td>\n";
       $returnvalue .= "<td>".$model->getLatitude1()."</td>\n";
       $returnvalue .= "<td>".$model->getLatitude2()."</td>\n";
       $returnvalue .= "<td>".$model->getLocalityName()."</td>\n";
       $returnvalue .= "<td>".$model->getLong1Text()."</td>\n";
       $returnvalue .= "<td>".$model->getLong2Text()."</td>\n";
       $returnvalue .= "<td>".$model->getLongitude1()."</td>\n";
       $returnvalue .= "<td>".$model->getLongitude2()."</td>\n";
       $returnvalue .= "<td>".$model->getMaxElevation()."</td>\n";
       $returnvalue .= "<td>".$model->getMinElevation()."</td>\n";
       $returnvalue .= "<td>".$model->getNamedPlace()."</td>\n";
       $returnvalue .= "<td>".$model->getOriginalElevationUnit()."</td>\n";
       $returnvalue .= "<td>".$model->getOriginalLatLongUnit()."</td>\n";
       $returnvalue .= "<td>".$model->getRelationToNamedPlace()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getShortName()."</td>\n";
       $returnvalue .= "<td>".$model->getSrcLatLongUnit()."</td>\n";
       $returnvalue .= "<td>".$model->getVerbatimElevation()."</td>\n";
       $returnvalue .= "<td>".$model->getVisibility()."</td>\n";
       $returnvalue .= "<td>".$model->getDisciplineID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getVisibilitySetByID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getGeographyID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_locality::LOCALITYID."</th>\n";
       $returnvalue .= "<th>".huh_locality::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_locality::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_locality::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_locality::DATUM."</th>\n";
       $returnvalue .= "<th>".huh_locality::ELEVATIONACCURACY."</th>\n";
       $returnvalue .= "<th>".huh_locality::ELEVATIONMETHOD."</th>\n";
       $returnvalue .= "<th>".huh_locality::GML."</th>\n";
       $returnvalue .= "<th>".huh_locality::GUID."</th>\n";
       $returnvalue .= "<th>".huh_locality::LAT1TEXT."</th>\n";
       $returnvalue .= "<th>".huh_locality::LAT2TEXT."</th>\n";
       $returnvalue .= "<th>".huh_locality::LATLONGACCURACY."</th>\n";
       $returnvalue .= "<th>".huh_locality::LATLONGMETHOD."</th>\n";
       $returnvalue .= "<th>".huh_locality::LATLONGTYPE."</th>\n";
       $returnvalue .= "<th>".huh_locality::LATITUDE1."</th>\n";
       $returnvalue .= "<th>".huh_locality::LATITUDE2."</th>\n";
       $returnvalue .= "<th>".huh_locality::LOCALITYNAME."</th>\n";
       $returnvalue .= "<th>".huh_locality::LONG1TEXT."</th>\n";
       $returnvalue .= "<th>".huh_locality::LONG2TEXT."</th>\n";
       $returnvalue .= "<th>".huh_locality::LONGITUDE1."</th>\n";
       $returnvalue .= "<th>".huh_locality::LONGITUDE2."</th>\n";
       $returnvalue .= "<th>".huh_locality::MAXELEVATION."</th>\n";
       $returnvalue .= "<th>".huh_locality::MINELEVATION."</th>\n";
       $returnvalue .= "<th>".huh_locality::NAMEDPLACE."</th>\n";
       $returnvalue .= "<th>".huh_locality::ORIGINALELEVATIONUNIT."</th>\n";
       $returnvalue .= "<th>".huh_locality::ORIGINALLATLONGUNIT."</th>\n";
       $returnvalue .= "<th>".huh_locality::RELATIONTONAMEDPLACE."</th>\n";
       $returnvalue .= "<th>".huh_locality::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_locality::SHORTNAME."</th>\n";
       $returnvalue .= "<th>".huh_locality::SRCLATLONGUNIT."</th>\n";
       $returnvalue .= "<th>".huh_locality::VERBATIMELEVATION."</th>\n";
       $returnvalue .= "<th>".huh_locality::VISIBILITY."</th>\n";
       $returnvalue .= "<th>".huh_locality::DISCIPLINEID."</th>\n";
       $returnvalue .= "<th>".huh_locality::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_locality::VISIBILITYSETBYID."</th>\n";
       $returnvalue .= "<th>".huh_locality::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_locality::GEOGRAPHYID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_locality">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new LocalityID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_locality::LOCALITYID.">LOCALITYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_locality::LOCALITYID." id=".huh_locality::LOCALITYID." value='".$model->getLocalityID()."'  style=' width:".huh_locality::LOCALITYID_SIZE ."em;  '  maxlength='".huh_locality::LOCALITYID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_locality::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::TIMESTAMPCREATED." id=".huh_locality::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_locality::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_locality::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::TIMESTAMPMODIFIED." id=".huh_locality::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_locality::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_locality::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_locality::VERSION." id=".huh_locality::VERSION." value='".$model->getVersion()."'  style=' width:".huh_locality::VERSION_SIZE ."em;  '  maxlength='".huh_locality::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::DATUM.">DATUM</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::DATUM." id=".huh_locality::DATUM." value='".$model->getDatum()."'  style=' width:".huh_locality::DATUM_SIZE ."em;  '  maxlength='".huh_locality::DATUM_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::ELEVATIONACCURACY.">ELEVATIONACCURACY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::ELEVATIONACCURACY." id=".huh_locality::ELEVATIONACCURACY." value='".$model->getElevationAccuracy()."'  style=' width:".huh_locality::ELEVATIONACCURACY_SIZE ."em;  '  maxlength='".huh_locality::ELEVATIONACCURACY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::ELEVATIONMETHOD.">ELEVATIONMETHOD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::ELEVATIONMETHOD." id=".huh_locality::ELEVATIONMETHOD." value='".$model->getElevationMethod()."'  style=' width:".huh_locality::ELEVATIONMETHOD_SIZE ."em;  '  maxlength='".huh_locality::ELEVATIONMETHOD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::GML.">GML</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_locality::GML." id=".huh_locality::GML." >".$model->getGML()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::GUID.">GUID</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_locality::GUID." id=".huh_locality::GUID." >".$model->getGUID()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::LAT1TEXT.">LAT1TEXT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::LAT1TEXT." id=".huh_locality::LAT1TEXT." value='".$model->getLat1Text()."'  style=' width:".huh_locality::LAT1TEXT_SIZE ."em;  '  maxlength='".huh_locality::LAT1TEXT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::LAT2TEXT.">LAT2TEXT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::LAT2TEXT." id=".huh_locality::LAT2TEXT." value='".$model->getLat2Text()."'  style=' width:".huh_locality::LAT2TEXT_SIZE ."em;  '  maxlength='".huh_locality::LAT2TEXT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::LATLONGACCURACY.">LATLONGACCURACY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::LATLONGACCURACY." id=".huh_locality::LATLONGACCURACY." value='".$model->getLatLongAccuracy()."'  style=' width:".huh_locality::LATLONGACCURACY_SIZE ."em;  '  maxlength='".huh_locality::LATLONGACCURACY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::LATLONGMETHOD.">LATLONGMETHOD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::LATLONGMETHOD." id=".huh_locality::LATLONGMETHOD." value='".$model->getLatLongMethod()."'  style=' width:".huh_locality::LATLONGMETHOD_SIZE ."em;  '  maxlength='".huh_locality::LATLONGMETHOD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::LATLONGTYPE.">LATLONGTYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::LATLONGTYPE." id=".huh_locality::LATLONGTYPE." value='".$model->getLatLongType()."'  style=' width:".huh_locality::LATLONGTYPE_SIZE ."em;  '  maxlength='".huh_locality::LATLONGTYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::LATITUDE1.">LATITUDE1</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9\.-]*'  invalidMessage='The value entered is not valid.  It must be a number.'  name=".huh_locality::LATITUDE1." id=".huh_locality::LATITUDE1." value='".$model->getLatitude1()."'  style=' width:".huh_locality::LATITUDE1_SIZE ."em;  '  maxlength='".huh_locality::LATITUDE1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::LATITUDE2.">LATITUDE2</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9\.-]*'  invalidMessage='The value entered is not valid.  It must be a number.'  name=".huh_locality::LATITUDE2." id=".huh_locality::LATITUDE2." value='".$model->getLatitude2()."'  style=' width:".huh_locality::LATITUDE2_SIZE ."em;  '  maxlength='".huh_locality::LATITUDE2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::LOCALITYNAME.">LOCALITYNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_locality::LOCALITYNAME." id=".huh_locality::LOCALITYNAME." >".$model->getLocalityName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::LONG1TEXT.">LONG1TEXT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::LONG1TEXT." id=".huh_locality::LONG1TEXT." value='".$model->getLong1Text()."'  style=' width:".huh_locality::LONG1TEXT_SIZE ."em;  '  maxlength='".huh_locality::LONG1TEXT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::LONG2TEXT.">LONG2TEXT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::LONG2TEXT." id=".huh_locality::LONG2TEXT." value='".$model->getLong2Text()."'  style=' width:".huh_locality::LONG2TEXT_SIZE ."em;  '  maxlength='".huh_locality::LONG2TEXT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::LONGITUDE1.">LONGITUDE1</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9\.-]*'  invalidMessage='The value entered is not valid.  It must be a number.'  name=".huh_locality::LONGITUDE1." id=".huh_locality::LONGITUDE1." value='".$model->getLongitude1()."'  style=' width:".huh_locality::LONGITUDE1_SIZE ."em;  '  maxlength='".huh_locality::LONGITUDE1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::LONGITUDE2.">LONGITUDE2</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9\.-]*'  invalidMessage='The value entered is not valid.  It must be a number.'  name=".huh_locality::LONGITUDE2." id=".huh_locality::LONGITUDE2." value='".$model->getLongitude2()."'  style=' width:".huh_locality::LONGITUDE2_SIZE ."em;  '  maxlength='".huh_locality::LONGITUDE2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::MAXELEVATION.">MAXELEVATION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::MAXELEVATION." id=".huh_locality::MAXELEVATION." value='".$model->getMaxElevation()."'  style=' width:".huh_locality::MAXELEVATION_SIZE ."em;  '  maxlength='".huh_locality::MAXELEVATION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::MINELEVATION.">MINELEVATION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::MINELEVATION." id=".huh_locality::MINELEVATION." value='".$model->getMinElevation()."'  style=' width:".huh_locality::MINELEVATION_SIZE ."em;  '  maxlength='".huh_locality::MINELEVATION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::NAMEDPLACE.">NAMEDPLACE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_locality::NAMEDPLACE." id=".huh_locality::NAMEDPLACE." >".$model->getNamedPlace()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::ORIGINALELEVATIONUNIT.">ORIGINALELEVATIONUNIT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::ORIGINALELEVATIONUNIT." id=".huh_locality::ORIGINALELEVATIONUNIT." value='".$model->getOriginalElevationUnit()."'  style=' width:".huh_locality::ORIGINALELEVATIONUNIT_SIZE ."em;  '  maxlength='".huh_locality::ORIGINALELEVATIONUNIT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::ORIGINALLATLONGUNIT.">ORIGINALLATLONGUNIT</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_locality::ORIGINALLATLONGUNIT." id=".huh_locality::ORIGINALLATLONGUNIT." value='".$model->getOriginalLatLongUnit()."'  style=' width:".huh_locality::ORIGINALLATLONGUNIT_SIZE ."em;  '  maxlength='".huh_locality::ORIGINALLATLONGUNIT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::RELATIONTONAMEDPLACE.">RELATIONTONAMEDPLACE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_locality::RELATIONTONAMEDPLACE." id=".huh_locality::RELATIONTONAMEDPLACE." >".$model->getRelationToNamedPlace()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_locality::REMARKS." id=".huh_locality::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::SHORTNAME.">SHORTNAME</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::SHORTNAME." id=".huh_locality::SHORTNAME." value='".$model->getShortName()."'  style=' width:".huh_locality::SHORTNAME_SIZE ."em;  '  maxlength='".huh_locality::SHORTNAME_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::SRCLATLONGUNIT.">SRCLATLONGUNIT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::SRCLATLONGUNIT." id=".huh_locality::SRCLATLONGUNIT." value='".$model->getSrcLatLongUnit()."'  style=' width:".huh_locality::SRCLATLONGUNIT_SIZE ."em;  '  maxlength='".huh_locality::SRCLATLONGUNIT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::VERBATIMELEVATION.">VERBATIMELEVATION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::VERBATIMELEVATION." id=".huh_locality::VERBATIMELEVATION." value='".$model->getVerbatimElevation()."'  style=' width:".huh_locality::VERBATIMELEVATION_SIZE ."em;  '  maxlength='".huh_locality::VERBATIMELEVATION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::VISIBILITY.">VISIBILITY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_locality::VISIBILITY." id=".huh_locality::VISIBILITY." value='".$model->getVisibility()."'  style=' width:".huh_locality::VISIBILITY_SIZE ."em;  '  maxlength='".huh_locality::VISIBILITY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::DISCIPLINEID.">DISCIPLINEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_locality::DISCIPLINEID." id=".huh_locality::DISCIPLINEID." value='".$model->getDisciplineID()."'  style=' width:".huh_locality::DISCIPLINEID_SIZE ."em;  '  maxlength='".huh_locality::DISCIPLINEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_locality::MODIFIEDBYAGENTID." id=".huh_locality::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_locality::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_locality::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::VISIBILITYSETBYID.">VISIBILITYSETBYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_locality::VISIBILITYSETBYID." id=".huh_locality::VISIBILITYSETBYID." value='".$model->getVisibilitySetByID()."'  style=' width:".huh_locality::VISIBILITYSETBYID_SIZE ."em;  '  maxlength='".huh_locality::VISIBILITYSETBYID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_locality::CREATEDBYAGENTID." id=".huh_locality::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_locality::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_locality::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_locality::GEOGRAPHYID.">GEOGRAPHYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_locality::GEOGRAPHYID." id=".huh_locality::GEOGRAPHYID." value='".$model->getGeographyID()."'  style=' width:".huh_locality::GEOGRAPHYID_SIZE ."em;  '  maxlength='".huh_locality::GEOGRAPHYID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_locality">';
       $returnvalue .= '<input type=hidden name=LocalityID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_locality">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>LOCALITYID<input type=text name=".huh_locality::LOCALITYID." id=".huh_locality::LOCALITYID." value='".$model->getLocalityID()."'  size='".huh_locality::LOCALITYID_SIZE ."'  maxlength='".huh_locality::LOCALITYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_locality::TIMESTAMPCREATED." id=".huh_locality::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_locality::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_locality::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_locality::TIMESTAMPMODIFIED." id=".huh_locality::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_locality::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_locality::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_locality::VERSION." id=".huh_locality::VERSION." value='".$model->getVersion()."'  size='".huh_locality::VERSION_SIZE ."'  maxlength='".huh_locality::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATUM<input type=text name=".huh_locality::DATUM." id=".huh_locality::DATUM." value='".$model->getDatum()."'  size='".huh_locality::DATUM_SIZE ."'  maxlength='".huh_locality::DATUM_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ELEVATIONACCURACY<input type=text name=".huh_locality::ELEVATIONACCURACY." id=".huh_locality::ELEVATIONACCURACY." value='".$model->getElevationAccuracy()."'  size='".huh_locality::ELEVATIONACCURACY_SIZE ."'  maxlength='".huh_locality::ELEVATIONACCURACY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ELEVATIONMETHOD<input type=text name=".huh_locality::ELEVATIONMETHOD." id=".huh_locality::ELEVATIONMETHOD." value='".$model->getElevationMethod()."'  size='".huh_locality::ELEVATIONMETHOD_SIZE ."'  maxlength='".huh_locality::ELEVATIONMETHOD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GML<input type=text name=".huh_locality::GML." id=".huh_locality::GML." value='".$model->getGML()."'  size='51'  maxlength='".huh_locality::GML_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GUID<input type=text name=".huh_locality::GUID." id=".huh_locality::GUID." value='".$model->getGUID()."'  size='51'  maxlength='".huh_locality::GUID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LAT1TEXT<input type=text name=".huh_locality::LAT1TEXT." id=".huh_locality::LAT1TEXT." value='".$model->getLat1Text()."'  size='".huh_locality::LAT1TEXT_SIZE ."'  maxlength='".huh_locality::LAT1TEXT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LAT2TEXT<input type=text name=".huh_locality::LAT2TEXT." id=".huh_locality::LAT2TEXT." value='".$model->getLat2Text()."'  size='".huh_locality::LAT2TEXT_SIZE ."'  maxlength='".huh_locality::LAT2TEXT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LATLONGACCURACY<input type=text name=".huh_locality::LATLONGACCURACY." id=".huh_locality::LATLONGACCURACY." value='".$model->getLatLongAccuracy()."'  size='".huh_locality::LATLONGACCURACY_SIZE ."'  maxlength='".huh_locality::LATLONGACCURACY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LATLONGMETHOD<input type=text name=".huh_locality::LATLONGMETHOD." id=".huh_locality::LATLONGMETHOD." value='".$model->getLatLongMethod()."'  size='".huh_locality::LATLONGMETHOD_SIZE ."'  maxlength='".huh_locality::LATLONGMETHOD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LATLONGTYPE<input type=text name=".huh_locality::LATLONGTYPE." id=".huh_locality::LATLONGTYPE." value='".$model->getLatLongType()."'  size='".huh_locality::LATLONGTYPE_SIZE ."'  maxlength='".huh_locality::LATLONGTYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LATITUDE1<input type=text name=".huh_locality::LATITUDE1." id=".huh_locality::LATITUDE1." value='".$model->getLatitude1()."'  size='".huh_locality::LATITUDE1_SIZE ."'  maxlength='".huh_locality::LATITUDE1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LATITUDE2<input type=text name=".huh_locality::LATITUDE2." id=".huh_locality::LATITUDE2." value='".$model->getLatitude2()."'  size='".huh_locality::LATITUDE2_SIZE ."'  maxlength='".huh_locality::LATITUDE2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LOCALITYNAME<input type=text name=".huh_locality::LOCALITYNAME." id=".huh_locality::LOCALITYNAME." value='".$model->getLocalityName()."'  size='51'  maxlength='".huh_locality::LOCALITYNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LONG1TEXT<input type=text name=".huh_locality::LONG1TEXT." id=".huh_locality::LONG1TEXT." value='".$model->getLong1Text()."'  size='".huh_locality::LONG1TEXT_SIZE ."'  maxlength='".huh_locality::LONG1TEXT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LONG2TEXT<input type=text name=".huh_locality::LONG2TEXT." id=".huh_locality::LONG2TEXT." value='".$model->getLong2Text()."'  size='".huh_locality::LONG2TEXT_SIZE ."'  maxlength='".huh_locality::LONG2TEXT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LONGITUDE1<input type=text name=".huh_locality::LONGITUDE1." id=".huh_locality::LONGITUDE1." value='".$model->getLongitude1()."'  size='".huh_locality::LONGITUDE1_SIZE ."'  maxlength='".huh_locality::LONGITUDE1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LONGITUDE2<input type=text name=".huh_locality::LONGITUDE2." id=".huh_locality::LONGITUDE2." value='".$model->getLongitude2()."'  size='".huh_locality::LONGITUDE2_SIZE ."'  maxlength='".huh_locality::LONGITUDE2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MAXELEVATION<input type=text name=".huh_locality::MAXELEVATION." id=".huh_locality::MAXELEVATION." value='".$model->getMaxElevation()."'  size='".huh_locality::MAXELEVATION_SIZE ."'  maxlength='".huh_locality::MAXELEVATION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MINELEVATION<input type=text name=".huh_locality::MINELEVATION." id=".huh_locality::MINELEVATION." value='".$model->getMinElevation()."'  size='".huh_locality::MINELEVATION_SIZE ."'  maxlength='".huh_locality::MINELEVATION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NAMEDPLACE<input type=text name=".huh_locality::NAMEDPLACE." id=".huh_locality::NAMEDPLACE." value='".$model->getNamedPlace()."'  size='51'  maxlength='".huh_locality::NAMEDPLACE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ORIGINALELEVATIONUNIT<input type=text name=".huh_locality::ORIGINALELEVATIONUNIT." id=".huh_locality::ORIGINALELEVATIONUNIT." value='".$model->getOriginalElevationUnit()."'  size='".huh_locality::ORIGINALELEVATIONUNIT_SIZE ."'  maxlength='".huh_locality::ORIGINALELEVATIONUNIT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ORIGINALLATLONGUNIT<input type=text name=".huh_locality::ORIGINALLATLONGUNIT." id=".huh_locality::ORIGINALLATLONGUNIT." value='".$model->getOriginalLatLongUnit()."'  size='".huh_locality::ORIGINALLATLONGUNIT_SIZE ."'  maxlength='".huh_locality::ORIGINALLATLONGUNIT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RELATIONTONAMEDPLACE<input type=text name=".huh_locality::RELATIONTONAMEDPLACE." id=".huh_locality::RELATIONTONAMEDPLACE." value='".$model->getRelationToNamedPlace()."'  size='51'  maxlength='".huh_locality::RELATIONTONAMEDPLACE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_locality::REMARKS." id=".huh_locality::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_locality::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SHORTNAME<input type=text name=".huh_locality::SHORTNAME." id=".huh_locality::SHORTNAME." value='".$model->getShortName()."'  size='".huh_locality::SHORTNAME_SIZE ."'  maxlength='".huh_locality::SHORTNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SRCLATLONGUNIT<input type=text name=".huh_locality::SRCLATLONGUNIT." id=".huh_locality::SRCLATLONGUNIT." value='".$model->getSrcLatLongUnit()."'  size='".huh_locality::SRCLATLONGUNIT_SIZE ."'  maxlength='".huh_locality::SRCLATLONGUNIT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERBATIMELEVATION<input type=text name=".huh_locality::VERBATIMELEVATION." id=".huh_locality::VERBATIMELEVATION." value='".$model->getVerbatimElevation()."'  size='".huh_locality::VERBATIMELEVATION_SIZE ."'  maxlength='".huh_locality::VERBATIMELEVATION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VISIBILITY<input type=text name=".huh_locality::VISIBILITY." id=".huh_locality::VISIBILITY." value='".$model->getVisibility()."'  size='".huh_locality::VISIBILITY_SIZE ."'  maxlength='".huh_locality::VISIBILITY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISCIPLINEID<input type=text name=".huh_locality::DISCIPLINEID." id=".huh_locality::DISCIPLINEID." value='".$model->getDisciplineID()."'  size='".huh_locality::DISCIPLINEID_SIZE ."'  maxlength='".huh_locality::DISCIPLINEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_locality::MODIFIEDBYAGENTID." id=".huh_locality::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_locality::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_locality::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VISIBILITYSETBYID<input type=text name=".huh_locality::VISIBILITYSETBYID." id=".huh_locality::VISIBILITYSETBYID." value='".$model->getVisibilitySetByID()."'  size='".huh_locality::VISIBILITYSETBYID_SIZE ."'  maxlength='".huh_locality::VISIBILITYSETBYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_locality::CREATEDBYAGENTID." id=".huh_locality::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_locality::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_locality::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOGRAPHYID<input type=text name=".huh_locality::GEOGRAPHYID." id=".huh_locality::GEOGRAPHYID." value='".$model->getGeographyID()."'  size='".huh_locality::GEOGRAPHYID_SIZE ."'  maxlength='".huh_locality::GEOGRAPHYID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
