<?php
//==============================================================================
//===   collection.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_collection implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const USERGROUPSCOPEID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const CATALOGFORMATNUMNAME_SIZE = 64; //64
   const CODE_SIZE            = 20; //YEAR
   const COLLECTIONID_SIZE    = 11; //INTEGER
   const COLLECTIONNAME_SIZE  = 20; //YEAR
   const COLLECTIONTYPE_SIZE  = 32; //32
   const DBCONTENTVERSION_SIZE = 32; //32
   const DESCRIPTION_SIZE     = 255; //LONGVARCHAR
   const DEVELOPMENTSTATUS_SIZE = 32; //32
   const ESTIMATEDSIZE_SIZE   = 11; //INTEGER
   const INSTITUTIONTYPE_SIZE = 32; //32
   const ISEMBEDDEDCOLLECTINGEVENT_SIZE = 1; //1
   const ISANUMBER_SIZE       = 24; //24
   const KINGDOMCOVERAGE_SIZE = 32; //32
   const PRESERVATIONMETHODTYPE_SIZE = 32; //32
   const PRIMARYFOCUS_SIZE    = 32; //32
   const PRIMARYPURPOSE_SIZE  = 32; //32
   const REGNUMBER_SIZE       = 24; //24
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const SCOPE_SIZE           = 255; //LONGVARCHAR
   const WEBPORTALURI_SIZE    = 255; //255
   const WEBSITEURI_SIZE      = 255; //255
   const DISCIPLINEID_SIZE    = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const USERGROUPSCOPEID  = 'UserGroupScopeId';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const CATALOGFORMATNUMNAME = 'CatalogFormatNumName';
   const CODE              = 'Code';
   const COLLECTIONID      = 'collectionId';
   const COLLECTIONNAME    = 'CollectionName';
   const COLLECTIONTYPE    = 'CollectionType';
   const DBCONTENTVERSION  = 'DbContentVersion';
   const DESCRIPTION       = 'Description';
   const DEVELOPMENTSTATUS = 'DevelopmentStatus';
   const ESTIMATEDSIZE     = 'EstimatedSize';
   const INSTITUTIONTYPE   = 'InstitutionType';
   const ISEMBEDDEDCOLLECTINGEVENT = 'IsEmbeddedCollectingEvent';
   const ISANUMBER         = 'IsaNumber';
   const KINGDOMCOVERAGE   = 'KingdomCoverage';
   const PRESERVATIONMETHODTYPE = 'PreservationMethodType';
   const PRIMARYFOCUS      = 'PrimaryFocus';
   const PRIMARYPURPOSE    = 'PrimaryPurpose';
   const REGNUMBER         = 'RegNumber';
   const REMARKS           = 'Remarks';
   const SCOPE             = 'Scope';
   const WEBPORTALURI      = 'WebPortalURI';
   const WEBSITEURI        = 'WebSiteURI';
   const DISCIPLINEID      = 'DisciplineID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $UserGroupScopeId = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['UserGroupScopeId']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $CatalogFormatNumName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CatalogFormatNumName']), 0, 64);
  $Code = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Code']), 0, 20);
  $collectionId = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['collectionId']), 0, 11);
  $CollectionName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CollectionName']), 0, 20);
  $CollectionType = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CollectionType']), 0, 32);
  $DbContentVersion = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DbContentVersion']), 0, 32);
  $Description = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Description']), 0, 255);
  $DevelopmentStatus = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DevelopmentStatus']), 0, 32);
  $EstimatedSize = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['EstimatedSize']), 0, 11);
  $InstitutionType = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['InstitutionType']), 0, 32);
  $IsEmbeddedCollectingEvent = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsEmbeddedCollectingEvent']), 0, 1);
  $IsaNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsaNumber']), 0, 24);
  $KingdomCoverage = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['KingdomCoverage']), 0, 32);
  $PreservationMethodType = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PreservationMethodType']), 0, 32);
  $PrimaryFocus = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PrimaryFocus']), 0, 32);
  $PrimaryPurpose = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PrimaryPurpose']), 0, 32);
  $RegNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['RegNumber']), 0, 24);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $Scope = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Scope']), 0, 255);
  $WebPortalURI = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['WebPortalURI']), 0, 255);
  $WebSiteURI = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['WebSiteURI']), 0, 255);
  $DisciplineID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DisciplineID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $UserGroupScopeId; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $CatalogFormatNumName; // VARCHAR(64) 
   private $Code; // YEAR 
   private $collectionId; // INTEGER 
   private $CollectionName; // YEAR 
   private $CollectionType; // VARCHAR(32) 
   private $DbContentVersion; // VARCHAR(32) 
   private $Description; // LONGVARCHAR 
   private $DevelopmentStatus; // VARCHAR(32) 
   private $EstimatedSize; // INTEGER 
   private $InstitutionType; // VARCHAR(32) 
   private $IsEmbeddedCollectingEvent; // BIT(1) 
   private $IsaNumber; // VARCHAR(24) 
   private $KingdomCoverage; // VARCHAR(32) 
   private $PreservationMethodType; // VARCHAR(32) 
   private $PrimaryFocus; // VARCHAR(32) 
   private $PrimaryPurpose; // VARCHAR(32) 
   private $RegNumber; // VARCHAR(24) 
   private $Remarks; // LONGVARCHAR 
   private $Scope; // LONGVARCHAR 
   private $WebPortalURI; // VARCHAR(255) 
   private $WebSiteURI; // VARCHAR(255) 
   private $DisciplineID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' UserGroupScopeId, TimestampCreated, TimestampModified, Version, CreatedByAgentID, ModifiedByAgentID, CatalogFormatNumName, Code, collectionId, CollectionName, CollectionType, DbContentVersion, Description, DevelopmentStatus, EstimatedSize, InstitutionType, IsEmbeddedCollectingEvent, IsaNumber, KingdomCoverage, PreservationMethodType, PrimaryFocus, PrimaryPurpose, RegNumber, Remarks, Scope, WebPortalURI, WebSiteURI, DisciplineID, ';
   const PKFIELDLIST = ' UserGroupScopeId, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'UserGroupScopeId'  ) ;
   private $allFieldsArray = array( 0 => 'UserGroupScopeId' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'CreatedByAgentID' , 5 => 'ModifiedByAgentID' , 6 => 'CatalogFormatNumName' , 7 => 'Code' , 8 => 'collectionId' , 9 => 'CollectionName' , 10 => 'CollectionType' , 11 => 'DbContentVersion' , 12 => 'Description' , 13 => 'DevelopmentStatus' , 14 => 'EstimatedSize' , 15 => 'InstitutionType' , 16 => 'IsEmbeddedCollectingEvent' , 17 => 'IsaNumber' , 18 => 'KingdomCoverage' , 19 => 'PreservationMethodType' , 20 => 'PrimaryFocus' , 21 => 'PrimaryPurpose' , 22 => 'RegNumber' , 23 => 'Remarks' , 24 => 'Scope' , 25 => 'WebPortalURI' , 26 => 'WebSiteURI' , 27 => 'DisciplineID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'CreatedByAgentID' , 5 => 'ModifiedByAgentID' , 9 => 'CollectionName' , 27 => 'DisciplineID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_collection(){
       $this->UserGroupScopeId = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->CreatedByAgentID = '';
       $this->ModifiedByAgentID = '';
       $this->CatalogFormatNumName = '';
       $this->Code = '';
       $this->collectionId = '';
       $this->CollectionName = '';
       $this->CollectionType = '';
       $this->DbContentVersion = '';
       $this->Description = '';
       $this->DevelopmentStatus = '';
       $this->EstimatedSize = '';
       $this->InstitutionType = '';
       $this->IsEmbeddedCollectingEvent = '';
       $this->IsaNumber = '';
       $this->KingdomCoverage = '';
       $this->PreservationMethodType = '';
       $this->PrimaryFocus = '';
       $this->PrimaryPurpose = '';
       $this->RegNumber = '';
       $this->Remarks = '';
       $this->Scope = '';
       $this->WebPortalURI = '';
       $this->WebSiteURI = '';
       $this->DisciplineID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='UserGroupScopeId') { $returnvalue = $this->setUserGroupScopeId($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='CatalogFormatNumName') { $returnvalue = $this->setCatalogFormatNumName($value); } 
             if ($fieldname=='Code') { $returnvalue = $this->setCode($value); } 
             if ($fieldname=='collectionId') { $returnvalue = $this->setcollectionId($value); } 
             if ($fieldname=='CollectionName') { $returnvalue = $this->setCollectionName($value); } 
             if ($fieldname=='CollectionType') { $returnvalue = $this->setCollectionType($value); } 
             if ($fieldname=='DbContentVersion') { $returnvalue = $this->setDbContentVersion($value); } 
             if ($fieldname=='Description') { $returnvalue = $this->setDescription($value); } 
             if ($fieldname=='DevelopmentStatus') { $returnvalue = $this->setDevelopmentStatus($value); } 
             if ($fieldname=='EstimatedSize') { $returnvalue = $this->setEstimatedSize($value); } 
             if ($fieldname=='InstitutionType') { $returnvalue = $this->setInstitutionType($value); } 
             if ($fieldname=='IsEmbeddedCollectingEvent') { $returnvalue = $this->setIsEmbeddedCollectingEvent($value); } 
             if ($fieldname=='IsaNumber') { $returnvalue = $this->setIsaNumber($value); } 
             if ($fieldname=='KingdomCoverage') { $returnvalue = $this->setKingdomCoverage($value); } 
             if ($fieldname=='PreservationMethodType') { $returnvalue = $this->setPreservationMethodType($value); } 
             if ($fieldname=='PrimaryFocus') { $returnvalue = $this->setPrimaryFocus($value); } 
             if ($fieldname=='PrimaryPurpose') { $returnvalue = $this->setPrimaryPurpose($value); } 
             if ($fieldname=='RegNumber') { $returnvalue = $this->setRegNumber($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='Scope') { $returnvalue = $this->setScope($value); } 
             if ($fieldname=='WebPortalURI') { $returnvalue = $this->setWebPortalURI($value); } 
             if ($fieldname=='WebSiteURI') { $returnvalue = $this->setWebSiteURI($value); } 
             if ($fieldname=='DisciplineID') { $returnvalue = $this->setDisciplineID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='UserGroupScopeId') { $returnvalue = $this->getUserGroupScopeId(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='CatalogFormatNumName') { $returnvalue = $this->getCatalogFormatNumName(); } 
             if ($fieldname=='Code') { $returnvalue = $this->getCode(); } 
             if ($fieldname=='collectionId') { $returnvalue = $this->getcollectionId(); } 
             if ($fieldname=='CollectionName') { $returnvalue = $this->getCollectionName(); } 
             if ($fieldname=='CollectionType') { $returnvalue = $this->getCollectionType(); } 
             if ($fieldname=='DbContentVersion') { $returnvalue = $this->getDbContentVersion(); } 
             if ($fieldname=='Description') { $returnvalue = $this->getDescription(); } 
             if ($fieldname=='DevelopmentStatus') { $returnvalue = $this->getDevelopmentStatus(); } 
             if ($fieldname=='EstimatedSize') { $returnvalue = $this->getEstimatedSize(); } 
             if ($fieldname=='InstitutionType') { $returnvalue = $this->getInstitutionType(); } 
             if ($fieldname=='IsEmbeddedCollectingEvent') { $returnvalue = $this->getIsEmbeddedCollectingEvent(); } 
             if ($fieldname=='IsaNumber') { $returnvalue = $this->getIsaNumber(); } 
             if ($fieldname=='KingdomCoverage') { $returnvalue = $this->getKingdomCoverage(); } 
             if ($fieldname=='PreservationMethodType') { $returnvalue = $this->getPreservationMethodType(); } 
             if ($fieldname=='PrimaryFocus') { $returnvalue = $this->getPrimaryFocus(); } 
             if ($fieldname=='PrimaryPurpose') { $returnvalue = $this->getPrimaryPurpose(); } 
             if ($fieldname=='RegNumber') { $returnvalue = $this->getRegNumber(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='Scope') { $returnvalue = $this->getScope(); } 
             if ($fieldname=='WebPortalURI') { $returnvalue = $this->getWebPortalURI(); } 
             if ($fieldname=='WebSiteURI') { $returnvalue = $this->getWebSiteURI(); } 
             if ($fieldname=='DisciplineID') { $returnvalue = $this->getDisciplineID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*UserGroupScopeId*/
   public function getUserGroupScopeId() {
       if ($this->UserGroupScopeId==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UserGroupScopeId));
       }
   }
   public function setUserGroupScopeId($UserGroupScopeId) {
       if (strlen(preg_replace('/[^0-9]/','',$UserGroupScopeId)) > huh_collection::USERGROUPSCOPEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $UserGroupScopeId = trim($UserGroupScopeId);
       if (!ctype_digit(strval($UserGroupScopeId)) && trim(strval($UserGroupScopeId))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->UserGroupScopeId = $this->l_addslashes($UserGroupScopeId);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_collection::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_collection::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_collection::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_collection::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_collection::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*CatalogFormatNumName*/
   public function getCatalogFormatNumName() {
       if ($this->CatalogFormatNumName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CatalogFormatNumName));
       }
   }
   public function setCatalogFormatNumName($CatalogFormatNumName) {
       if (strlen($CatalogFormatNumName) > huh_collection::CATALOGFORMATNUMNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CatalogFormatNumName = $this->l_addslashes($CatalogFormatNumName);
       $this->dirty = true;
   }
/*Code*/
   public function getCode() {
       if ($this->Code==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Code));
       }
   }
   public function setCode($Code) {
       if (strlen($Code) > huh_collection::CODE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Code = $this->l_addslashes($Code);
       $this->dirty = true;
   }
/*collectionId*/
   public function getcollectionId() {
       if ($this->collectionId==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->collectionId));
       }
   }
   public function setcollectionId($collectionId) {
       if (strlen(preg_replace('/[^0-9]/','',$collectionId)) > huh_collection::COLLECTIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $collectionId = trim($collectionId);
       if (!ctype_digit(strval($collectionId)) && trim(strval($collectionId))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->collectionId = $this->l_addslashes($collectionId);
       $this->dirty = true;
   }
/*CollectionName*/
   public function getCollectionName() {
       if ($this->CollectionName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionName));
       }
   }
   public function setCollectionName($CollectionName) {
       if (strlen($CollectionName) > huh_collection::COLLECTIONNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CollectionName = $this->l_addslashes($CollectionName);
       $this->dirty = true;
   }
/*CollectionType*/
   public function getCollectionType() {
       if ($this->CollectionType==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionType));
       }
   }
   public function setCollectionType($CollectionType) {
       if (strlen($CollectionType) > huh_collection::COLLECTIONTYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CollectionType = $this->l_addslashes($CollectionType);
       $this->dirty = true;
   }
/*DbContentVersion*/
   public function getDbContentVersion() {
       if ($this->DbContentVersion==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DbContentVersion));
       }
   }
   public function setDbContentVersion($DbContentVersion) {
       if (strlen($DbContentVersion) > huh_collection::DBCONTENTVERSION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DbContentVersion = $this->l_addslashes($DbContentVersion);
       $this->dirty = true;
   }
/*Description*/
   public function getDescription() {
       if ($this->Description==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Description));
       }
   }
   public function setDescription($Description) {
       if (strlen($Description) > huh_collection::DESCRIPTION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Description = $this->l_addslashes($Description);
       $this->dirty = true;
   }
/*DevelopmentStatus*/
   public function getDevelopmentStatus() {
       if ($this->DevelopmentStatus==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DevelopmentStatus));
       }
   }
   public function setDevelopmentStatus($DevelopmentStatus) {
       if (strlen($DevelopmentStatus) > huh_collection::DEVELOPMENTSTATUS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DevelopmentStatus = $this->l_addslashes($DevelopmentStatus);
       $this->dirty = true;
   }
/*EstimatedSize*/
   public function getEstimatedSize() {
       if ($this->EstimatedSize==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->EstimatedSize));
       }
   }
   public function setEstimatedSize($EstimatedSize) {
       if (strlen(preg_replace('/[^0-9]/','',$EstimatedSize)) > huh_collection::ESTIMATEDSIZE_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $EstimatedSize = trim($EstimatedSize);
       if (!ctype_digit(strval($EstimatedSize)) && trim(strval($EstimatedSize))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->EstimatedSize = $this->l_addslashes($EstimatedSize);
       $this->dirty = true;
   }
/*InstitutionType*/
   public function getInstitutionType() {
       if ($this->InstitutionType==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->InstitutionType));
       }
   }
   public function setInstitutionType($InstitutionType) {
       if (strlen($InstitutionType) > huh_collection::INSTITUTIONTYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->InstitutionType = $this->l_addslashes($InstitutionType);
       $this->dirty = true;
   }
/*IsEmbeddedCollectingEvent*/
   public function getIsEmbeddedCollectingEvent() {
       if ($this->IsEmbeddedCollectingEvent==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsEmbeddedCollectingEvent));
       }
   }
   public function setIsEmbeddedCollectingEvent($IsEmbeddedCollectingEvent) {
       if (strlen($IsEmbeddedCollectingEvent) > huh_collection::ISEMBEDDEDCOLLECTINGEVENT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsEmbeddedCollectingEvent = $this->l_addslashes($IsEmbeddedCollectingEvent);
       $this->dirty = true;
   }
/*IsaNumber*/
   public function getIsaNumber() {
       if ($this->IsaNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsaNumber));
       }
   }
   public function setIsaNumber($IsaNumber) {
       if (strlen($IsaNumber) > huh_collection::ISANUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsaNumber = $this->l_addslashes($IsaNumber);
       $this->dirty = true;
   }
/*KingdomCoverage*/
   public function getKingdomCoverage() {
       if ($this->KingdomCoverage==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->KingdomCoverage));
       }
   }
   public function setKingdomCoverage($KingdomCoverage) {
       if (strlen($KingdomCoverage) > huh_collection::KINGDOMCOVERAGE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->KingdomCoverage = $this->l_addslashes($KingdomCoverage);
       $this->dirty = true;
   }
/*PreservationMethodType*/
   public function getPreservationMethodType() {
       if ($this->PreservationMethodType==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PreservationMethodType));
       }
   }
   public function setPreservationMethodType($PreservationMethodType) {
       if (strlen($PreservationMethodType) > huh_collection::PRESERVATIONMETHODTYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PreservationMethodType = $this->l_addslashes($PreservationMethodType);
       $this->dirty = true;
   }
/*PrimaryFocus*/
   public function getPrimaryFocus() {
       if ($this->PrimaryFocus==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PrimaryFocus));
       }
   }
   public function setPrimaryFocus($PrimaryFocus) {
       if (strlen($PrimaryFocus) > huh_collection::PRIMARYFOCUS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PrimaryFocus = $this->l_addslashes($PrimaryFocus);
       $this->dirty = true;
   }
/*PrimaryPurpose*/
   public function getPrimaryPurpose() {
       if ($this->PrimaryPurpose==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PrimaryPurpose));
       }
   }
   public function setPrimaryPurpose($PrimaryPurpose) {
       if (strlen($PrimaryPurpose) > huh_collection::PRIMARYPURPOSE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PrimaryPurpose = $this->l_addslashes($PrimaryPurpose);
       $this->dirty = true;
   }
/*RegNumber*/
   public function getRegNumber() {
       if ($this->RegNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RegNumber));
       }
   }
   public function setRegNumber($RegNumber) {
       if (strlen($RegNumber) > huh_collection::REGNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->RegNumber = $this->l_addslashes($RegNumber);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_collection::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*Scope*/
   public function getScope() {
       if ($this->Scope==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Scope));
       }
   }
   public function setScope($Scope) {
       if (strlen($Scope) > huh_collection::SCOPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Scope = $this->l_addslashes($Scope);
       $this->dirty = true;
   }
/*WebPortalURI*/
   public function getWebPortalURI() {
       if ($this->WebPortalURI==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->WebPortalURI));
       }
   }
   public function setWebPortalURI($WebPortalURI) {
       if (strlen($WebPortalURI) > huh_collection::WEBPORTALURI_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->WebPortalURI = $this->l_addslashes($WebPortalURI);
       $this->dirty = true;
   }
/*WebSiteURI*/
   public function getWebSiteURI() {
       if ($this->WebSiteURI==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->WebSiteURI));
       }
   }
   public function setWebSiteURI($WebSiteURI) {
       if (strlen($WebSiteURI) > huh_collection::WEBSITEURI_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->WebSiteURI = $this->l_addslashes($WebSiteURI);
       $this->dirty = true;
   }
/*DisciplineID*/
   public function getDisciplineID() {
       if ($this->DisciplineID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DisciplineID));
       }
   }
   public function setDisciplineID($DisciplineID) {
       if (strlen(preg_replace('/[^0-9]/','',$DisciplineID)) > huh_collection::DISCIPLINEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DisciplineID = trim($DisciplineID);
       if (!ctype_digit(strval($DisciplineID))) {
             throw new Exception("Value must be an integer");
       }
       $this->DisciplineID = $this->l_addslashes($DisciplineID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getUserGroupScopeId();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['UserGroupScopeId'] = $this->getUserGroupScopeId();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_UserGroupScopeIdMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_CatalogFormatNumNameMYSQLI_TYPE = 's';
  const C_CodeMYSQLI_TYPE = 's';
  const C_collectionIdMYSQLI_TYPE = 'i';
  const C_CollectionNameMYSQLI_TYPE = 's';
  const C_CollectionTypeMYSQLI_TYPE = 's';
  const C_DbContentVersionMYSQLI_TYPE = 's';
  const C_DescriptionMYSQLI_TYPE = 's';
  const C_DevelopmentStatusMYSQLI_TYPE = 's';
  const C_EstimatedSizeMYSQLI_TYPE = 'i';
  const C_InstitutionTypeMYSQLI_TYPE = 's';
  const C_IsEmbeddedCollectingEventMYSQLI_TYPE = 'i';
  const C_IsaNumberMYSQLI_TYPE = 's';
  const C_KingdomCoverageMYSQLI_TYPE = 's';
  const C_PreservationMethodTypeMYSQLI_TYPE = 's';
  const C_PrimaryFocusMYSQLI_TYPE = 's';
  const C_PrimaryPurposeMYSQLI_TYPE = 's';
  const C_RegNumberMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_ScopeMYSQLI_TYPE = 's';
  const C_WebPortalURIMYSQLI_TYPE = 's';
  const C_WebSiteURIMYSQLI_TYPE = 's';
  const C_DisciplineIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='UserGroupScopeId') { $retval = self::C_UserGroupScopeIdMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='CatalogFormatNumName') { $retval = self::C_CatalogFormatNumNameMYSQLI_TYPE; }
      if ($aFieldname=='Code') { $retval = self::C_CodeMYSQLI_TYPE; }
      if ($aFieldname=='collectionId') { $retval = self::C_collectionIdMYSQLI_TYPE; }
      if ($aFieldname=='CollectionName') { $retval = self::C_CollectionNameMYSQLI_TYPE; }
      if ($aFieldname=='CollectionType') { $retval = self::C_CollectionTypeMYSQLI_TYPE; }
      if ($aFieldname=='DbContentVersion') { $retval = self::C_DbContentVersionMYSQLI_TYPE; }
      if ($aFieldname=='Description') { $retval = self::C_DescriptionMYSQLI_TYPE; }
      if ($aFieldname=='DevelopmentStatus') { $retval = self::C_DevelopmentStatusMYSQLI_TYPE; }
      if ($aFieldname=='EstimatedSize') { $retval = self::C_EstimatedSizeMYSQLI_TYPE; }
      if ($aFieldname=='InstitutionType') { $retval = self::C_InstitutionTypeMYSQLI_TYPE; }
      if ($aFieldname=='IsEmbeddedCollectingEvent') { $retval = self::C_IsEmbeddedCollectingEventMYSQLI_TYPE; }
      if ($aFieldname=='IsaNumber') { $retval = self::C_IsaNumberMYSQLI_TYPE; }
      if ($aFieldname=='KingdomCoverage') { $retval = self::C_KingdomCoverageMYSQLI_TYPE; }
      if ($aFieldname=='PreservationMethodType') { $retval = self::C_PreservationMethodTypeMYSQLI_TYPE; }
      if ($aFieldname=='PrimaryFocus') { $retval = self::C_PrimaryFocusMYSQLI_TYPE; }
      if ($aFieldname=='PrimaryPurpose') { $retval = self::C_PrimaryPurposeMYSQLI_TYPE; }
      if ($aFieldname=='RegNumber') { $retval = self::C_RegNumberMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='Scope') { $retval = self::C_ScopeMYSQLI_TYPE; }
      if ($aFieldname=='WebPortalURI') { $retval = self::C_WebPortalURIMYSQLI_TYPE; }
      if ($aFieldname=='WebSiteURI') { $retval = self::C_WebSiteURIMYSQLI_TYPE; }
      if ($aFieldname=='DisciplineID') { $retval = self::C_DisciplineIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setUserGroupScopeId($pk[UserGroupScopeId]);
             } else { ;
                 $this->setUserGroupScopeId($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->UserGroupScopeId != NULL) {
           $sql = 'SELECT UserGroupScopeId, TimestampCreated, TimestampModified, Version, CreatedByAgentID, ModifiedByAgentID, CatalogFormatNumName, Code, collectionId, CollectionName, CollectionType, DbContentVersion, Description, DevelopmentStatus, EstimatedSize, InstitutionType, IsEmbeddedCollectingEvent, IsaNumber, KingdomCoverage, PreservationMethodType, PrimaryFocus, PrimaryPurpose, RegNumber, Remarks, Scope, WebPortalURI, WebSiteURI, DisciplineID FROM collection WHERE UserGroupScopeId = '.$this->UserGroupScopeId ;

           $preparesql = 'SELECT UserGroupScopeId, TimestampCreated, TimestampModified, Version, CreatedByAgentID, ModifiedByAgentID, CatalogFormatNumName, Code, collectionId, CollectionName, CollectionType, DbContentVersion, Description, DevelopmentStatus, EstimatedSize, InstitutionType, IsEmbeddedCollectingEvent, IsaNumber, KingdomCoverage, PreservationMethodType, PrimaryFocus, PrimaryPurpose, RegNumber, Remarks, Scope, WebPortalURI, WebSiteURI, DisciplineID FROM collection WHERE UserGroupScopeId = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->UserGroupScopeId);
              $statement->execute();
              $statement->bind_result($this->UserGroupScopeId, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->CatalogFormatNumName, $this->Code, $this->collectionId, $this->CollectionName, $this->CollectionType, $this->DbContentVersion, $this->Description, $this->DevelopmentStatus, $this->EstimatedSize, $this->InstitutionType, $this->IsEmbeddedCollectingEvent, $this->IsaNumber, $this->KingdomCoverage, $this->PreservationMethodType, $this->PrimaryFocus, $this->PrimaryPurpose, $this->RegNumber, $this->Remarks, $this->Scope, $this->WebPortalURI, $this->WebSiteURI, $this->DisciplineID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->UserGroupScopeId!= NULL) {
            $sql  = 'UPDATE  collection SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", CatalogFormatNumName = ? ";
            $sql .=  ", Code = ? ";
            $sql .=  ", collectionId = ? ";
            $sql .=  ", CollectionName = ? ";
            $sql .=  ", CollectionType = ? ";
            $sql .=  ", DbContentVersion = ? ";
            $sql .=  ", Description = ? ";
            $sql .=  ", DevelopmentStatus = ? ";
            $sql .=  ", EstimatedSize = ? ";
            $sql .=  ", InstitutionType = ? ";
            $sql .=  ", IsEmbeddedCollectingEvent = ? ";
            $sql .=  ", IsaNumber = ? ";
            $sql .=  ", KingdomCoverage = ? ";
            $sql .=  ", PreservationMethodType = ? ";
            $sql .=  ", PrimaryFocus = ? ";
            $sql .=  ", PrimaryPurpose = ? ";
            $sql .=  ", RegNumber = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", Scope = ? ";
            $sql .=  ", WebPortalURI = ? ";
            $sql .=  ", WebSiteURI = ? ";
            $sql .=  ", DisciplineID = ? ";

            $sql .= "  WHERE UserGroupScopeId = ? ";
        } else {
            $sql  = 'INSERT INTO collection ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( UserGroupScopeId ,  TimestampCreated ,  TimestampModified ,  Version ,  CreatedByAgentID ,  ModifiedByAgentID ,  CatalogFormatNumName ,  Code ,  collectionId ,  CollectionName ,  CollectionType ,  DbContentVersion ,  Description ,  DevelopmentStatus ,  EstimatedSize ,  InstitutionType ,  IsEmbeddedCollectingEvent ,  IsaNumber ,  KingdomCoverage ,  PreservationMethodType ,  PrimaryFocus ,  PrimaryPurpose ,  RegNumber ,  Remarks ,  Scope ,  WebPortalURI ,  WebSiteURI ,  DisciplineID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->UserGroupScopeId!= NULL ) {
              $statement->bind_param("issiiississsssisissssssssssii", $this->UserGroupScopeId , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->CatalogFormatNumName , $this->Code , $this->collectionId , $this->CollectionName , $this->CollectionType , $this->DbContentVersion , $this->Description , $this->DevelopmentStatus , $this->EstimatedSize , $this->InstitutionType , $this->IsEmbeddedCollectingEvent , $this->IsaNumber , $this->KingdomCoverage , $this->PreservationMethodType , $this->PrimaryFocus , $this->PrimaryPurpose , $this->RegNumber , $this->Remarks , $this->Scope , $this->WebPortalURI , $this->WebSiteURI , $this->DisciplineID , $this->UserGroupScopeId );
           } else { 
              $statement->bind_param("issiiississsssisissssssssssi", $this->UserGroupScopeId , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->CatalogFormatNumName , $this->Code , $this->collectionId , $this->CollectionName , $this->CollectionType , $this->DbContentVersion , $this->Description , $this->DevelopmentStatus , $this->EstimatedSize , $this->InstitutionType , $this->IsEmbeddedCollectingEvent , $this->IsaNumber , $this->KingdomCoverage , $this->PreservationMethodType , $this->PrimaryFocus , $this->PrimaryPurpose , $this->RegNumber , $this->Remarks , $this->Scope , $this->WebPortalURI , $this->WebSiteURI , $this->DisciplineID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->UserGroupScopeId != NULL) {
           $sql = 'SELECT UserGroupScopeId, TimestampCreated, TimestampModified, Version, CreatedByAgentID, ModifiedByAgentID, CatalogFormatNumName, Code, collectionId, CollectionName, CollectionType, DbContentVersion, Description, DevelopmentStatus, EstimatedSize, InstitutionType, IsEmbeddedCollectingEvent, IsaNumber, KingdomCoverage, PreservationMethodType, PrimaryFocus, PrimaryPurpose, RegNumber, Remarks, Scope, WebPortalURI, WebSiteURI, DisciplineID FROM collection WHERE UserGroupScopeId = "'.$this->UserGroupScopeId.'"  ' ;

           $preparedsql = 'SELECT  FROM collection WHERE  and UserGroupScopeId = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issiiississsssisissssssssssi", $this->UserGroupScopeId, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->CatalogFormatNumName, $this->Code, $this->collectionId, $this->CollectionName, $this->CollectionType, $this->DbContentVersion, $this->Description, $this->DevelopmentStatus, $this->EstimatedSize, $this->InstitutionType, $this->IsEmbeddedCollectingEvent, $this->IsaNumber, $this->KingdomCoverage, $this->PreservationMethodType, $this->PrimaryFocus, $this->PrimaryPurpose, $this->RegNumber, $this->Remarks, $this->Scope, $this->WebPortalURI, $this->WebSiteURI, $this->DisciplineID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM collection WHERE  and UserGroupScopeId = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issiiississsssisissssssssssi", $this->UserGroupScopeId, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->CatalogFormatNumName, $this->Code, $this->collectionId, $this->CollectionName, $this->CollectionType, $this->DbContentVersion, $this->Description, $this->DevelopmentStatus, $this->EstimatedSize, $this->InstitutionType, $this->IsEmbeddedCollectingEvent, $this->IsaNumber, $this->KingdomCoverage, $this->PreservationMethodType, $this->PrimaryFocus, $this->PrimaryPurpose, $this->RegNumber, $this->Remarks, $this->Scope, $this->WebPortalURI, $this->WebSiteURI, $this->DisciplineID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->UserGroupScopeId = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM collection';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT UserGroupScopeId FROM collection $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_collection();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromagent() { 
      // ForeignKey in: agent
      $t = new agent();
  } 
  public function loadLinkedFromautonumsch_coll() { 
      // ForeignKey in: autonumsch_coll
      $t = new autonumsch_coll();
  } 
  public function loadLinkedFromcollectionobject() { 
      // ForeignKey in: collectionobject
      $t = new collectionobject();
  } 
  public function loadLinkedFromcollectionreltype() { 
      // ForeignKey in: collectionreltype
      $t = new collectionreltype();
  } 
  public function loadLinkedFromfieldnotebook() { 
      // ForeignKey in: fieldnotebook
      $t = new fieldnotebook();
  } 
  public function loadLinkedFrompicklist() { 
      // ForeignKey in: picklist
      $t = new picklist();
  } 
  public function loadLinkedFrompreptype() { 
      // ForeignKey in: preptype
      $t = new preptype();
  } 
  public function loadLinkedFromspappresourcedir() { 
      // ForeignKey in: spappresourcedir
      $t = new spappresourcedir();
  } 
  public function loadLinkedFromsptasksemaphore() { 
      // ForeignKey in: sptasksemaphore
      $t = new sptasksemaphore();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: DisciplineID
      $t = new discipline();
      $t->load(getDisciplineID());
      $returnvalue[DisciplineID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT UserGroupScopeId, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(CatalogFormatNumName,'') || ' ' || IFNULL(Code,'') || ' ' || IFNULL(collectionId,'') || ' ' || IFNULL(CollectionName,'') || ' ' || IFNULL(CollectionType,'') || ' ' || IFNULL(DbContentVersion,'') || ' ' || IFNULL(Description,'') || ' ' || IFNULL(DevelopmentStatus,'') || ' ' || IFNULL(EstimatedSize,'') || ' ' || IFNULL(InstitutionType,'') || ' ' || IFNULL(IsEmbeddedCollectingEvent,'') || ' ' || IFNULL(IsaNumber,'') || ' ' || IFNULL(KingdomCoverage,'') || ' ' || IFNULL(PreservationMethodType,'') || ' ' || IFNULL(PrimaryFocus,'') || ' ' || IFNULL(PrimaryPurpose,'') || ' ' || IFNULL(RegNumber,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(Scope,'') || ' ' || IFNULL(WebPortalURI,'') || ' ' || IFNULL(WebSiteURI,'') || ' ' || IFNULL(DisciplineID,'')) FROM collection order by CreatedByAgentID, ModifiedByAgentID, CollectionName, DisciplineID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM collection order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM collection WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM collection WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collection();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM collection WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM collection WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collection();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCollectionName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM collection WHERE CollectionName $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM collection WHERE CollectionName $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collection();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDisciplineID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM collection WHERE DisciplineID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM collection WHERE DisciplineID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collection();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM collection group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM collection group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCollectionName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionName ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectionName FROM collection group by CollectionName order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectionName=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDisciplineID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DisciplineID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DisciplineID FROM collection group by DisciplineID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DisciplineID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CollectionName':
             $returnvalue = $this->selectDistinctCollectionName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DisciplineID':
             $returnvalue = $this->selectDistinctDisciplineID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the collection.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_collectionView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_collection <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_collection::USERGROUPSCOPEID.": ".$model->getUserGroupScopeId()."</li>\n";
       $returnvalue .= "<li>".huh_collection::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_collection::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_collection::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_collection::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_collection::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_collection::CATALOGFORMATNUMNAME.": ".$model->getCatalogFormatNumName()."</li>\n";
       $returnvalue .= "<li>".huh_collection::CODE.": ".$model->getCode()."</li>\n";
       $returnvalue .= "<li>".huh_collection::COLLECTIONID.": ".$model->getcollectionId()."</li>\n";
       $returnvalue .= "<li>".huh_collection::COLLECTIONNAME.": ".$model->getCollectionName()."</li>\n";
       $returnvalue .= "<li>".huh_collection::COLLECTIONTYPE.": ".$model->getCollectionType()."</li>\n";
       $returnvalue .= "<li>".huh_collection::DBCONTENTVERSION.": ".$model->getDbContentVersion()."</li>\n";
       $returnvalue .= "<li>".huh_collection::DESCRIPTION.": ".$model->getDescription()."</li>\n";
       $returnvalue .= "<li>".huh_collection::DEVELOPMENTSTATUS.": ".$model->getDevelopmentStatus()."</li>\n";
       $returnvalue .= "<li>".huh_collection::ESTIMATEDSIZE.": ".$model->getEstimatedSize()."</li>\n";
       $returnvalue .= "<li>".huh_collection::INSTITUTIONTYPE.": ".$model->getInstitutionType()."</li>\n";
       $returnvalue .= "<li>".huh_collection::ISEMBEDDEDCOLLECTINGEVENT.": ".$model->getIsEmbeddedCollectingEvent()."</li>\n";
       $returnvalue .= "<li>".huh_collection::ISANUMBER.": ".$model->getIsaNumber()."</li>\n";
       $returnvalue .= "<li>".huh_collection::KINGDOMCOVERAGE.": ".$model->getKingdomCoverage()."</li>\n";
       $returnvalue .= "<li>".huh_collection::PRESERVATIONMETHODTYPE.": ".$model->getPreservationMethodType()."</li>\n";
       $returnvalue .= "<li>".huh_collection::PRIMARYFOCUS.": ".$model->getPrimaryFocus()."</li>\n";
       $returnvalue .= "<li>".huh_collection::PRIMARYPURPOSE.": ".$model->getPrimaryPurpose()."</li>\n";
       $returnvalue .= "<li>".huh_collection::REGNUMBER.": ".$model->getRegNumber()."</li>\n";
       $returnvalue .= "<li>".huh_collection::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_collection::SCOPE.": ".$model->getScope()."</li>\n";
       $returnvalue .= "<li>".huh_collection::WEBPORTALURI.": ".$model->getWebPortalURI()."</li>\n";
       $returnvalue .= "<li>".huh_collection::WEBSITEURI.": ".$model->getWebSiteURI()."</li>\n";
       $returnvalue .= "<li>".huh_collection::DISCIPLINEID.": ".$model->getDisciplineID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>discipline</li>";
           $t_discipline = new huh_discipline();
           $t_disciplineView = new huh_disciplineView();
           $t_disciplineView->setModel($t_discipline);
           if ($model->getDisciplineID() != '') { 
               $t_discipline->load($model->getDisciplineID());
               $returnvalue .= $t_disciplineView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_collection::USERGROUPSCOPEID.': "'.$model->getUserGroupScopeId().'",';
       $returnvalue .= '"'.huh_collection::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_collection::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_collection::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_collection::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_collection::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_collection::CATALOGFORMATNUMNAME.': "'.$model->getCatalogFormatNumName().'",';
       $returnvalue .= '"'.huh_collection::CODE.': "'.$model->getCode().'",';
       $returnvalue .= '"'.huh_collection::COLLECTIONID.': "'.$model->getcollectionId().'",';
       $returnvalue .= '"'.huh_collection::COLLECTIONNAME.': "'.$model->getCollectionName().'",';
       $returnvalue .= '"'.huh_collection::COLLECTIONTYPE.': "'.$model->getCollectionType().'",';
       $returnvalue .= '"'.huh_collection::DBCONTENTVERSION.': "'.$model->getDbContentVersion().'",';
       $returnvalue .= '"'.huh_collection::DESCRIPTION.': "'.$model->getDescription().'",';
       $returnvalue .= '"'.huh_collection::DEVELOPMENTSTATUS.': "'.$model->getDevelopmentStatus().'",';
       $returnvalue .= '"'.huh_collection::ESTIMATEDSIZE.': "'.$model->getEstimatedSize().'",';
       $returnvalue .= '"'.huh_collection::INSTITUTIONTYPE.': "'.$model->getInstitutionType().'",';
       $returnvalue .= '"'.huh_collection::ISEMBEDDEDCOLLECTINGEVENT.': "'.$model->getIsEmbeddedCollectingEvent().'",';
       $returnvalue .= '"'.huh_collection::ISANUMBER.': "'.$model->getIsaNumber().'",';
       $returnvalue .= '"'.huh_collection::KINGDOMCOVERAGE.': "'.$model->getKingdomCoverage().'",';
       $returnvalue .= '"'.huh_collection::PRESERVATIONMETHODTYPE.': "'.$model->getPreservationMethodType().'",';
       $returnvalue .= '"'.huh_collection::PRIMARYFOCUS.': "'.$model->getPrimaryFocus().'",';
       $returnvalue .= '"'.huh_collection::PRIMARYPURPOSE.': "'.$model->getPrimaryPurpose().'",';
       $returnvalue .= '"'.huh_collection::REGNUMBER.': "'.$model->getRegNumber().'",';
       $returnvalue .= '"'.huh_collection::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_collection::SCOPE.': "'.$model->getScope().'",';
       $returnvalue .= '"'.huh_collection::WEBPORTALURI.': "'.$model->getWebPortalURI().'",';
       $returnvalue .= '"'.huh_collection::WEBSITEURI.': "'.$model->getWebSiteURI().'",';
       $returnvalue .= '"'.huh_collection::DISCIPLINEID.': "'.$model->getDisciplineID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getUserGroupScopeId()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getCatalogFormatNumName()."</td>\n";
       $returnvalue .= "<td>".$model->getCode()."</td>\n";
       $returnvalue .= "<td>".$model->getcollectionId()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionName()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionType()."</td>\n";
       $returnvalue .= "<td>".$model->getDbContentVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getDescription()."</td>\n";
       $returnvalue .= "<td>".$model->getDevelopmentStatus()."</td>\n";
       $returnvalue .= "<td>".$model->getEstimatedSize()."</td>\n";
       $returnvalue .= "<td>".$model->getInstitutionType()."</td>\n";
       $returnvalue .= "<td>".$model->getIsEmbeddedCollectingEvent()."</td>\n";
       $returnvalue .= "<td>".$model->getIsaNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getKingdomCoverage()."</td>\n";
       $returnvalue .= "<td>".$model->getPreservationMethodType()."</td>\n";
       $returnvalue .= "<td>".$model->getPrimaryFocus()."</td>\n";
       $returnvalue .= "<td>".$model->getPrimaryPurpose()."</td>\n";
       $returnvalue .= "<td>".$model->getRegNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getScope()."</td>\n";
       $returnvalue .= "<td>".$model->getWebPortalURI()."</td>\n";
       $returnvalue .= "<td>".$model->getWebSiteURI()."</td>\n";
       $returnvalue .= "<td>".$model->getDisciplineID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_collection::USERGROUPSCOPEID."</th>\n";
       $returnvalue .= "<th>".huh_collection::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_collection::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_collection::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_collection::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_collection::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_collection::CATALOGFORMATNUMNAME."</th>\n";
       $returnvalue .= "<th>".huh_collection::CODE."</th>\n";
       $returnvalue .= "<th>".huh_collection::COLLECTIONID."</th>\n";
       $returnvalue .= "<th>".huh_collection::COLLECTIONNAME."</th>\n";
       $returnvalue .= "<th>".huh_collection::COLLECTIONTYPE."</th>\n";
       $returnvalue .= "<th>".huh_collection::DBCONTENTVERSION."</th>\n";
       $returnvalue .= "<th>".huh_collection::DESCRIPTION."</th>\n";
       $returnvalue .= "<th>".huh_collection::DEVELOPMENTSTATUS."</th>\n";
       $returnvalue .= "<th>".huh_collection::ESTIMATEDSIZE."</th>\n";
       $returnvalue .= "<th>".huh_collection::INSTITUTIONTYPE."</th>\n";
       $returnvalue .= "<th>".huh_collection::ISEMBEDDEDCOLLECTINGEVENT."</th>\n";
       $returnvalue .= "<th>".huh_collection::ISANUMBER."</th>\n";
       $returnvalue .= "<th>".huh_collection::KINGDOMCOVERAGE."</th>\n";
       $returnvalue .= "<th>".huh_collection::PRESERVATIONMETHODTYPE."</th>\n";
       $returnvalue .= "<th>".huh_collection::PRIMARYFOCUS."</th>\n";
       $returnvalue .= "<th>".huh_collection::PRIMARYPURPOSE."</th>\n";
       $returnvalue .= "<th>".huh_collection::REGNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_collection::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_collection::SCOPE."</th>\n";
       $returnvalue .= "<th>".huh_collection::WEBPORTALURI."</th>\n";
       $returnvalue .= "<th>".huh_collection::WEBSITEURI."</th>\n";
       $returnvalue .= "<th>".huh_collection::DISCIPLINEID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_collection">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new UserGroupScopeId"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_collection::USERGROUPSCOPEID.">USERGROUPSCOPEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collection::USERGROUPSCOPEID." id=".huh_collection::USERGROUPSCOPEID." value='".$model->getUserGroupScopeId()."'  style=' width:".huh_collection::USERGROUPSCOPEID_SIZE ."em;  '  maxlength='".huh_collection::USERGROUPSCOPEID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_collection::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::TIMESTAMPCREATED." id=".huh_collection::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_collection::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_collection::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::TIMESTAMPMODIFIED." id=".huh_collection::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_collection::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_collection::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collection::VERSION." id=".huh_collection::VERSION." value='".$model->getVersion()."'  style=' width:".huh_collection::VERSION_SIZE ."em;  '  maxlength='".huh_collection::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collection::CREATEDBYAGENTID." id=".huh_collection::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_collection::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_collection::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collection::MODIFIEDBYAGENTID." id=".huh_collection::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_collection::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_collection::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::CATALOGFORMATNUMNAME.">CATALOGFORMATNUMNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collection::CATALOGFORMATNUMNAME." id=".huh_collection::CATALOGFORMATNUMNAME." >".$model->getCatalogFormatNumName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::CODE.">CODE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::CODE." id=".huh_collection::CODE." value='".$model->getCode()."'  style=' width:".huh_collection::CODE_SIZE ."em;  '  maxlength='".huh_collection::CODE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::COLLECTIONID.">COLLECTIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collection::COLLECTIONID." id=".huh_collection::COLLECTIONID." value='".$model->getcollectionId()."'  style=' width:".huh_collection::COLLECTIONID_SIZE ."em;  '  maxlength='".huh_collection::COLLECTIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::COLLECTIONNAME.">COLLECTIONNAME</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::COLLECTIONNAME." id=".huh_collection::COLLECTIONNAME." value='".$model->getCollectionName()."'  style=' width:".huh_collection::COLLECTIONNAME_SIZE ."em;  '  maxlength='".huh_collection::COLLECTIONNAME_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::COLLECTIONTYPE.">COLLECTIONTYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::COLLECTIONTYPE." id=".huh_collection::COLLECTIONTYPE." value='".$model->getCollectionType()."'  style=' width:".huh_collection::COLLECTIONTYPE_SIZE ."em;  '  maxlength='".huh_collection::COLLECTIONTYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::DBCONTENTVERSION.">DBCONTENTVERSION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::DBCONTENTVERSION." id=".huh_collection::DBCONTENTVERSION." value='".$model->getDbContentVersion()."'  style=' width:".huh_collection::DBCONTENTVERSION_SIZE ."em;  '  maxlength='".huh_collection::DBCONTENTVERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::DESCRIPTION.">DESCRIPTION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collection::DESCRIPTION." id=".huh_collection::DESCRIPTION." >".$model->getDescription()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::DEVELOPMENTSTATUS.">DEVELOPMENTSTATUS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::DEVELOPMENTSTATUS." id=".huh_collection::DEVELOPMENTSTATUS." value='".$model->getDevelopmentStatus()."'  style=' width:".huh_collection::DEVELOPMENTSTATUS_SIZE ."em;  '  maxlength='".huh_collection::DEVELOPMENTSTATUS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::ESTIMATEDSIZE.">ESTIMATEDSIZE</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collection::ESTIMATEDSIZE." id=".huh_collection::ESTIMATEDSIZE." value='".$model->getEstimatedSize()."'  style=' width:".huh_collection::ESTIMATEDSIZE_SIZE ."em;  '  maxlength='".huh_collection::ESTIMATEDSIZE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::INSTITUTIONTYPE.">INSTITUTIONTYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::INSTITUTIONTYPE." id=".huh_collection::INSTITUTIONTYPE." value='".$model->getInstitutionType()."'  style=' width:".huh_collection::INSTITUTIONTYPE_SIZE ."em;  '  maxlength='".huh_collection::INSTITUTIONTYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::ISEMBEDDEDCOLLECTINGEVENT.">ISEMBEDDEDCOLLECTINGEVENT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::ISEMBEDDEDCOLLECTINGEVENT." id=".huh_collection::ISEMBEDDEDCOLLECTINGEVENT." value='".$model->getIsEmbeddedCollectingEvent()."'  style=' width:".huh_collection::ISEMBEDDEDCOLLECTINGEVENT_SIZE ."em;  '  maxlength='".huh_collection::ISEMBEDDEDCOLLECTINGEVENT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::ISANUMBER.">ISANUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::ISANUMBER." id=".huh_collection::ISANUMBER." value='".$model->getIsaNumber()."'  style=' width:".huh_collection::ISANUMBER_SIZE ."em;  '  maxlength='".huh_collection::ISANUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::KINGDOMCOVERAGE.">KINGDOMCOVERAGE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::KINGDOMCOVERAGE." id=".huh_collection::KINGDOMCOVERAGE." value='".$model->getKingdomCoverage()."'  style=' width:".huh_collection::KINGDOMCOVERAGE_SIZE ."em;  '  maxlength='".huh_collection::KINGDOMCOVERAGE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::PRESERVATIONMETHODTYPE.">PRESERVATIONMETHODTYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::PRESERVATIONMETHODTYPE." id=".huh_collection::PRESERVATIONMETHODTYPE." value='".$model->getPreservationMethodType()."'  style=' width:".huh_collection::PRESERVATIONMETHODTYPE_SIZE ."em;  '  maxlength='".huh_collection::PRESERVATIONMETHODTYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::PRIMARYFOCUS.">PRIMARYFOCUS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::PRIMARYFOCUS." id=".huh_collection::PRIMARYFOCUS." value='".$model->getPrimaryFocus()."'  style=' width:".huh_collection::PRIMARYFOCUS_SIZE ."em;  '  maxlength='".huh_collection::PRIMARYFOCUS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::PRIMARYPURPOSE.">PRIMARYPURPOSE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::PRIMARYPURPOSE." id=".huh_collection::PRIMARYPURPOSE." value='".$model->getPrimaryPurpose()."'  style=' width:".huh_collection::PRIMARYPURPOSE_SIZE ."em;  '  maxlength='".huh_collection::PRIMARYPURPOSE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::REGNUMBER.">REGNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collection::REGNUMBER." id=".huh_collection::REGNUMBER." value='".$model->getRegNumber()."'  style=' width:".huh_collection::REGNUMBER_SIZE ."em;  '  maxlength='".huh_collection::REGNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collection::REMARKS." id=".huh_collection::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::SCOPE.">SCOPE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collection::SCOPE." id=".huh_collection::SCOPE." >".$model->getScope()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::WEBPORTALURI.">WEBPORTALURI</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collection::WEBPORTALURI." id=".huh_collection::WEBPORTALURI." >".$model->getWebPortalURI()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::WEBSITEURI.">WEBSITEURI</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collection::WEBSITEURI." id=".huh_collection::WEBSITEURI." >".$model->getWebSiteURI()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collection::DISCIPLINEID.">DISCIPLINEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collection::DISCIPLINEID." id=".huh_collection::DISCIPLINEID." value='".$model->getDisciplineID()."'  style=' width:".huh_collection::DISCIPLINEID_SIZE ."em;  '  maxlength='".huh_collection::DISCIPLINEID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_collection">';
       $returnvalue .= '<input type=hidden name=UserGroupScopeId id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_collection">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>USERGROUPSCOPEID<input type=text name=".huh_collection::USERGROUPSCOPEID." id=".huh_collection::USERGROUPSCOPEID." value='".$model->getUserGroupScopeId()."'  size='".huh_collection::USERGROUPSCOPEID_SIZE ."'  maxlength='".huh_collection::USERGROUPSCOPEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_collection::TIMESTAMPCREATED." id=".huh_collection::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_collection::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_collection::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_collection::TIMESTAMPMODIFIED." id=".huh_collection::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_collection::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_collection::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_collection::VERSION." id=".huh_collection::VERSION." value='".$model->getVersion()."'  size='".huh_collection::VERSION_SIZE ."'  maxlength='".huh_collection::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_collection::CREATEDBYAGENTID." id=".huh_collection::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_collection::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_collection::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_collection::MODIFIEDBYAGENTID." id=".huh_collection::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_collection::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_collection::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CATALOGFORMATNUMNAME<input type=text name=".huh_collection::CATALOGFORMATNUMNAME." id=".huh_collection::CATALOGFORMATNUMNAME." value='".$model->getCatalogFormatNumName()."'  size='51'  maxlength='".huh_collection::CATALOGFORMATNUMNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CODE<input type=text name=".huh_collection::CODE." id=".huh_collection::CODE." value='".$model->getCode()."'  size='".huh_collection::CODE_SIZE ."'  maxlength='".huh_collection::CODE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONID<input type=text name=".huh_collection::COLLECTIONID." id=".huh_collection::COLLECTIONID." value='".$model->getcollectionId()."'  size='".huh_collection::COLLECTIONID_SIZE ."'  maxlength='".huh_collection::COLLECTIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONNAME<input type=text name=".huh_collection::COLLECTIONNAME." id=".huh_collection::COLLECTIONNAME." value='".$model->getCollectionName()."'  size='".huh_collection::COLLECTIONNAME_SIZE ."'  maxlength='".huh_collection::COLLECTIONNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONTYPE<input type=text name=".huh_collection::COLLECTIONTYPE." id=".huh_collection::COLLECTIONTYPE." value='".$model->getCollectionType()."'  size='".huh_collection::COLLECTIONTYPE_SIZE ."'  maxlength='".huh_collection::COLLECTIONTYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DBCONTENTVERSION<input type=text name=".huh_collection::DBCONTENTVERSION." id=".huh_collection::DBCONTENTVERSION." value='".$model->getDbContentVersion()."'  size='".huh_collection::DBCONTENTVERSION_SIZE ."'  maxlength='".huh_collection::DBCONTENTVERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DESCRIPTION<input type=text name=".huh_collection::DESCRIPTION." id=".huh_collection::DESCRIPTION." value='".$model->getDescription()."'  size='51'  maxlength='".huh_collection::DESCRIPTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DEVELOPMENTSTATUS<input type=text name=".huh_collection::DEVELOPMENTSTATUS." id=".huh_collection::DEVELOPMENTSTATUS." value='".$model->getDevelopmentStatus()."'  size='".huh_collection::DEVELOPMENTSTATUS_SIZE ."'  maxlength='".huh_collection::DEVELOPMENTSTATUS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ESTIMATEDSIZE<input type=text name=".huh_collection::ESTIMATEDSIZE." id=".huh_collection::ESTIMATEDSIZE." value='".$model->getEstimatedSize()."'  size='".huh_collection::ESTIMATEDSIZE_SIZE ."'  maxlength='".huh_collection::ESTIMATEDSIZE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>INSTITUTIONTYPE<input type=text name=".huh_collection::INSTITUTIONTYPE." id=".huh_collection::INSTITUTIONTYPE." value='".$model->getInstitutionType()."'  size='".huh_collection::INSTITUTIONTYPE_SIZE ."'  maxlength='".huh_collection::INSTITUTIONTYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISEMBEDDEDCOLLECTINGEVENT<input type=text name=".huh_collection::ISEMBEDDEDCOLLECTINGEVENT." id=".huh_collection::ISEMBEDDEDCOLLECTINGEVENT." value='".$model->getIsEmbeddedCollectingEvent()."'  size='".huh_collection::ISEMBEDDEDCOLLECTINGEVENT_SIZE ."'  maxlength='".huh_collection::ISEMBEDDEDCOLLECTINGEVENT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISANUMBER<input type=text name=".huh_collection::ISANUMBER." id=".huh_collection::ISANUMBER." value='".$model->getIsaNumber()."'  size='".huh_collection::ISANUMBER_SIZE ."'  maxlength='".huh_collection::ISANUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>KINGDOMCOVERAGE<input type=text name=".huh_collection::KINGDOMCOVERAGE." id=".huh_collection::KINGDOMCOVERAGE." value='".$model->getKingdomCoverage()."'  size='".huh_collection::KINGDOMCOVERAGE_SIZE ."'  maxlength='".huh_collection::KINGDOMCOVERAGE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PRESERVATIONMETHODTYPE<input type=text name=".huh_collection::PRESERVATIONMETHODTYPE." id=".huh_collection::PRESERVATIONMETHODTYPE." value='".$model->getPreservationMethodType()."'  size='".huh_collection::PRESERVATIONMETHODTYPE_SIZE ."'  maxlength='".huh_collection::PRESERVATIONMETHODTYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PRIMARYFOCUS<input type=text name=".huh_collection::PRIMARYFOCUS." id=".huh_collection::PRIMARYFOCUS." value='".$model->getPrimaryFocus()."'  size='".huh_collection::PRIMARYFOCUS_SIZE ."'  maxlength='".huh_collection::PRIMARYFOCUS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PRIMARYPURPOSE<input type=text name=".huh_collection::PRIMARYPURPOSE." id=".huh_collection::PRIMARYPURPOSE." value='".$model->getPrimaryPurpose()."'  size='".huh_collection::PRIMARYPURPOSE_SIZE ."'  maxlength='".huh_collection::PRIMARYPURPOSE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REGNUMBER<input type=text name=".huh_collection::REGNUMBER." id=".huh_collection::REGNUMBER." value='".$model->getRegNumber()."'  size='".huh_collection::REGNUMBER_SIZE ."'  maxlength='".huh_collection::REGNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_collection::REMARKS." id=".huh_collection::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_collection::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SCOPE<input type=text name=".huh_collection::SCOPE." id=".huh_collection::SCOPE." value='".$model->getScope()."'  size='51'  maxlength='".huh_collection::SCOPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>WEBPORTALURI<input type=text name=".huh_collection::WEBPORTALURI." id=".huh_collection::WEBPORTALURI." value='".$model->getWebPortalURI()."'  size='51'  maxlength='".huh_collection::WEBPORTALURI_SIZE ."' ></li>\n";
       $returnvalue .= "<li>WEBSITEURI<input type=text name=".huh_collection::WEBSITEURI." id=".huh_collection::WEBSITEURI." value='".$model->getWebSiteURI()."'  size='51'  maxlength='".huh_collection::WEBSITEURI_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISCIPLINEID<input type=text name=".huh_collection::DISCIPLINEID." id=".huh_collection::DISCIPLINEID." value='".$model->getDisciplineID()."'  size='".huh_collection::DISCIPLINEID_SIZE ."'  maxlength='".huh_collection::DISCIPLINEID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
