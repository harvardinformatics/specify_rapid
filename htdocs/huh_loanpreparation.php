<?php
//==============================================================================
//===   loanpreparation.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_loanpreparation implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const LOANPREPARATIONID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const DESCRIPTIONOFMATERIAL_SIZE = 255; //LONGVARCHAR
   const INCOMMENTS_SIZE      = 255; //LONGVARCHAR
   const ISRESOLVED_SIZE      = 1; //1
   const ITEMCOUNT_SIZE       = 11; //INTEGER
   const NONSPECIMENCOUNT_SIZE = 11; //INTEGER
   const OUTCOMMENTS_SIZE     = 255; //LONGVARCHAR
   const QUANTITYRESOLVED_SIZE = 11; //INTEGER
   const QUANTITYRETURNED_SIZE = 11; //INTEGER
   const RECEIVEDCOMMENTS_SIZE = 255; //LONGVARCHAR
   const SRCTAXONOMY_SIZE     = 255; //LONGVARCHAR
   const TYPECOUNT_SIZE       = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const DISCIPLINEID_SIZE    = 11; //INTEGER
   const PREPARATIONID_SIZE   = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const LOANID_SIZE          = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const LOANPREPARATIONID = 'LoanPreparationID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const DESCRIPTIONOFMATERIAL = 'DescriptionOfMaterial';
   const INCOMMENTS        = 'InComments';
   const ISRESOLVED        = 'IsResolved';
   const ITEMCOUNT         = 'ItemCount';
   const NONSPECIMENCOUNT  = 'NonSpecimenCount';
   const OUTCOMMENTS       = 'OutComments';
   const QUANTITYRESOLVED  = 'QuantityResolved';
   const QUANTITYRETURNED  = 'QuantityReturned';
   const RECEIVEDCOMMENTS  = 'ReceivedComments';
   const SRCTAXONOMY       = 'SrcTaxonomy';
   const TYPECOUNT         = 'TypeCount';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const DISCIPLINEID      = 'DisciplineID';
   const PREPARATIONID     = 'PreparationID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const LOANID            = 'LoanID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $LoanPreparationID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['LoanPreparationID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $DescriptionOfMaterial = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DescriptionOfMaterial']), 0, 255);
  $InComments = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['InComments']), 0, 255);
  $IsResolved = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsResolved']), 0, 1);
  $ItemCount = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ItemCount']), 0, 11);
  $NonSpecimenCount = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['NonSpecimenCount']), 0, 11);
  $OutComments = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['OutComments']), 0, 255);
  $QuantityResolved = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['QuantityResolved']), 0, 11);
  $QuantityReturned = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['QuantityReturned']), 0, 11);
  $ReceivedComments = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ReceivedComments']), 0, 255);
  $SrcTaxonomy = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['SrcTaxonomy']), 0, 255);
  $TypeCount = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['TypeCount']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $DisciplineID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DisciplineID']), 0, 11);
  $PreparationID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PreparationID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $LoanID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['LoanID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $LoanPreparationID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $DescriptionOfMaterial; // LONGVARCHAR 
   private $InComments; // LONGVARCHAR 
   private $IsResolved; // BIT(1) 
   private $ItemCount; // INTEGER 
   private $NonSpecimenCount; // INTEGER 
   private $OutComments; // LONGVARCHAR 
   private $QuantityResolved; // INTEGER 
   private $QuantityReturned; // INTEGER 
   private $ReceivedComments; // LONGVARCHAR 
   private $SrcTaxonomy; // LONGVARCHAR 
   private $TypeCount; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $DisciplineID; // INTEGER 
   private $PreparationID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $LoanID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' LoanPreparationID, TimestampCreated, TimestampModified, Version, DescriptionOfMaterial, InComments, IsResolved, ItemCount, NonSpecimenCount, OutComments, QuantityResolved, QuantityReturned, ReceivedComments, SrcTaxonomy, TypeCount, CreatedByAgentID, DisciplineID, PreparationID, ModifiedByAgentID, LoanID, ';
   const PKFIELDLIST = ' LoanPreparationID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'LoanPreparationID'  ) ;
   private $allFieldsArray = array( 0 => 'LoanPreparationID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'DescriptionOfMaterial' , 5 => 'InComments' , 6 => 'IsResolved' , 7 => 'ItemCount' , 8 => 'NonSpecimenCount' , 9 => 'OutComments' , 10 => 'QuantityResolved' , 11 => 'QuantityReturned' , 12 => 'ReceivedComments' , 13 => 'SrcTaxonomy' , 14 => 'TypeCount' , 15 => 'CreatedByAgentID' , 16 => 'DisciplineID' , 17 => 'PreparationID' , 18 => 'ModifiedByAgentID' , 19 => 'LoanID'  ) ;
   private $selectDistinctFieldsArray = array( 15 => 'CreatedByAgentID' , 16 => 'DisciplineID' , 17 => 'PreparationID' , 18 => 'ModifiedByAgentID' , 19 => 'LoanID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_loanpreparation(){
       $this->LoanPreparationID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->DescriptionOfMaterial = '';
       $this->InComments = '';
       $this->IsResolved = '';
       $this->ItemCount = '';
       $this->NonSpecimenCount = '';
       $this->OutComments = '';
       $this->QuantityResolved = '';
       $this->QuantityReturned = '';
       $this->ReceivedComments = '';
       $this->SrcTaxonomy = '';
       $this->TypeCount = '';
       $this->CreatedByAgentID = '';
       $this->DisciplineID = '';
       $this->PreparationID = '';
       $this->ModifiedByAgentID = '';
       $this->LoanID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='LoanPreparationID') { $returnvalue = $this->setLoanPreparationID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='DescriptionOfMaterial') { $returnvalue = $this->setDescriptionOfMaterial($value); } 
             if ($fieldname=='InComments') { $returnvalue = $this->setInComments($value); } 
             if ($fieldname=='IsResolved') { $returnvalue = $this->setIsResolved($value); } 
             if ($fieldname=='ItemCount') { $returnvalue = $this->setItemCount($value); } 
             if ($fieldname=='NonSpecimenCount') { $returnvalue = $this->setNonSpecimenCount($value); } 
             if ($fieldname=='OutComments') { $returnvalue = $this->setOutComments($value); } 
             if ($fieldname=='QuantityResolved') { $returnvalue = $this->setQuantityResolved($value); } 
             if ($fieldname=='QuantityReturned') { $returnvalue = $this->setQuantityReturned($value); } 
             if ($fieldname=='ReceivedComments') { $returnvalue = $this->setReceivedComments($value); } 
             if ($fieldname=='SrcTaxonomy') { $returnvalue = $this->setSrcTaxonomy($value); } 
             if ($fieldname=='TypeCount') { $returnvalue = $this->setTypeCount($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='DisciplineID') { $returnvalue = $this->setDisciplineID($value); } 
             if ($fieldname=='PreparationID') { $returnvalue = $this->setPreparationID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='LoanID') { $returnvalue = $this->setLoanID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='LoanPreparationID') { $returnvalue = $this->getLoanPreparationID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='DescriptionOfMaterial') { $returnvalue = $this->getDescriptionOfMaterial(); } 
             if ($fieldname=='InComments') { $returnvalue = $this->getInComments(); } 
             if ($fieldname=='IsResolved') { $returnvalue = $this->getIsResolved(); } 
             if ($fieldname=='ItemCount') { $returnvalue = $this->getItemCount(); } 
             if ($fieldname=='NonSpecimenCount') { $returnvalue = $this->getNonSpecimenCount(); } 
             if ($fieldname=='OutComments') { $returnvalue = $this->getOutComments(); } 
             if ($fieldname=='QuantityResolved') { $returnvalue = $this->getQuantityResolved(); } 
             if ($fieldname=='QuantityReturned') { $returnvalue = $this->getQuantityReturned(); } 
             if ($fieldname=='ReceivedComments') { $returnvalue = $this->getReceivedComments(); } 
             if ($fieldname=='SrcTaxonomy') { $returnvalue = $this->getSrcTaxonomy(); } 
             if ($fieldname=='TypeCount') { $returnvalue = $this->getTypeCount(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='DisciplineID') { $returnvalue = $this->getDisciplineID(); } 
             if ($fieldname=='PreparationID') { $returnvalue = $this->getPreparationID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='LoanID') { $returnvalue = $this->getLoanID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*LoanPreparationID*/
   public function getLoanPreparationID() {
       if ($this->LoanPreparationID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LoanPreparationID));
       }
   }
   public function setLoanPreparationID($LoanPreparationID) {
       if (strlen(preg_replace('/[^0-9]/','',$LoanPreparationID)) > huh_loanpreparation::LOANPREPARATIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $LoanPreparationID = trim($LoanPreparationID);
       if (!ctype_digit(strval($LoanPreparationID)) && trim(strval($LoanPreparationID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->LoanPreparationID = $this->l_addslashes($LoanPreparationID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_loanpreparation::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_loanpreparation::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_loanpreparation::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*DescriptionOfMaterial*/
   public function getDescriptionOfMaterial() {
       if ($this->DescriptionOfMaterial==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DescriptionOfMaterial));
       }
   }
   public function setDescriptionOfMaterial($DescriptionOfMaterial) {
       if (strlen($DescriptionOfMaterial) > huh_loanpreparation::DESCRIPTIONOFMATERIAL_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DescriptionOfMaterial = $this->l_addslashes($DescriptionOfMaterial);
       $this->dirty = true;
   }
/*InComments*/
   public function getInComments() {
       if ($this->InComments==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->InComments));
       }
   }
   public function setInComments($InComments) {
       if (strlen($InComments) > huh_loanpreparation::INCOMMENTS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->InComments = $this->l_addslashes($InComments);
       $this->dirty = true;
   }
/*IsResolved*/
   public function getIsResolved() {
       if ($this->IsResolved==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsResolved));
       }
   }
   public function setIsResolved($IsResolved) {
       if (strlen($IsResolved) > huh_loanpreparation::ISRESOLVED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsResolved = $this->l_addslashes($IsResolved);
       $this->dirty = true;
   }
/*ItemCount*/
   public function getItemCount() {
       if ($this->ItemCount==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ItemCount));
       }
   }
   public function setItemCount($ItemCount) {
       if (strlen(preg_replace('/[^0-9]/','',$ItemCount)) > huh_loanpreparation::ITEMCOUNT_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ItemCount = trim($ItemCount);
       if (!ctype_digit(strval($ItemCount)) && trim(strval($ItemCount))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ItemCount = $this->l_addslashes($ItemCount);
       $this->dirty = true;
   }
/*NonSpecimenCount*/
   public function getNonSpecimenCount() {
       if ($this->NonSpecimenCount==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NonSpecimenCount));
       }
   }
   public function setNonSpecimenCount($NonSpecimenCount) {
       if (strlen(preg_replace('/[^0-9]/','',$NonSpecimenCount)) > huh_loanpreparation::NONSPECIMENCOUNT_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $NonSpecimenCount = trim($NonSpecimenCount);
       if (!ctype_digit(strval($NonSpecimenCount)) && trim(strval($NonSpecimenCount))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->NonSpecimenCount = $this->l_addslashes($NonSpecimenCount);
       $this->dirty = true;
   }
/*OutComments*/
   public function getOutComments() {
       if ($this->OutComments==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->OutComments));
       }
   }
   public function setOutComments($OutComments) {
       if (strlen($OutComments) > huh_loanpreparation::OUTCOMMENTS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->OutComments = $this->l_addslashes($OutComments);
       $this->dirty = true;
   }
/*QuantityResolved*/
   public function getQuantityResolved() {
       if ($this->QuantityResolved==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->QuantityResolved));
       }
   }
   public function setQuantityResolved($QuantityResolved) {
       if (strlen(preg_replace('/[^0-9]/','',$QuantityResolved)) > huh_loanpreparation::QUANTITYRESOLVED_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $QuantityResolved = trim($QuantityResolved);
       if (!ctype_digit(strval($QuantityResolved)) && trim(strval($QuantityResolved))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->QuantityResolved = $this->l_addslashes($QuantityResolved);
       $this->dirty = true;
   }
/*QuantityReturned*/
   public function getQuantityReturned() {
       if ($this->QuantityReturned==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->QuantityReturned));
       }
   }
   public function setQuantityReturned($QuantityReturned) {
       if (strlen(preg_replace('/[^0-9]/','',$QuantityReturned)) > huh_loanpreparation::QUANTITYRETURNED_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $QuantityReturned = trim($QuantityReturned);
       if (!ctype_digit(strval($QuantityReturned)) && trim(strval($QuantityReturned))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->QuantityReturned = $this->l_addslashes($QuantityReturned);
       $this->dirty = true;
   }
/*ReceivedComments*/
   public function getReceivedComments() {
       if ($this->ReceivedComments==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ReceivedComments));
       }
   }
   public function setReceivedComments($ReceivedComments) {
       if (strlen($ReceivedComments) > huh_loanpreparation::RECEIVEDCOMMENTS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ReceivedComments = $this->l_addslashes($ReceivedComments);
       $this->dirty = true;
   }
/*SrcTaxonomy*/
   public function getSrcTaxonomy() {
       if ($this->SrcTaxonomy==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SrcTaxonomy));
       }
   }
   public function setSrcTaxonomy($SrcTaxonomy) {
       if (strlen($SrcTaxonomy) > huh_loanpreparation::SRCTAXONOMY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->SrcTaxonomy = $this->l_addslashes($SrcTaxonomy);
       $this->dirty = true;
   }
/*TypeCount*/
   public function getTypeCount() {
       if ($this->TypeCount==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TypeCount));
       }
   }
   public function setTypeCount($TypeCount) {
       if (strlen(preg_replace('/[^0-9]/','',$TypeCount)) > huh_loanpreparation::TYPECOUNT_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $TypeCount = trim($TypeCount);
       if (!ctype_digit(strval($TypeCount)) && trim(strval($TypeCount))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->TypeCount = $this->l_addslashes($TypeCount);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_loanpreparation::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*DisciplineID*/
   public function getDisciplineID() {
       if ($this->DisciplineID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DisciplineID));
       }
   }
   public function setDisciplineID($DisciplineID) {
       if (strlen(preg_replace('/[^0-9]/','',$DisciplineID)) > huh_loanpreparation::DISCIPLINEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DisciplineID = trim($DisciplineID);
       if (!ctype_digit(strval($DisciplineID))) {
             throw new Exception("Value must be an integer");
       }
       $this->DisciplineID = $this->l_addslashes($DisciplineID);
       $this->dirty = true;
   }
/*PreparationID*/
   public function getPreparationID() {
       if ($this->PreparationID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PreparationID));
       }
   }
   public function setPreparationID($PreparationID) {
       if (strlen(preg_replace('/[^0-9]/','',$PreparationID)) > huh_loanpreparation::PREPARATIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PreparationID = trim($PreparationID);
       if (!ctype_digit(strval($PreparationID)) && trim(strval($PreparationID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PreparationID = $this->l_addslashes($PreparationID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_loanpreparation::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*LoanID*/
   public function getLoanID() {
       if ($this->LoanID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LoanID));
       }
   }
   public function setLoanID($LoanID) {
       if (strlen(preg_replace('/[^0-9]/','',$LoanID)) > huh_loanpreparation::LOANID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $LoanID = trim($LoanID);
       if (!ctype_digit(strval($LoanID))) {
             throw new Exception("Value must be an integer");
       }
       $this->LoanID = $this->l_addslashes($LoanID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getLoanPreparationID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['LoanPreparationID'] = $this->getLoanPreparationID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_LoanPreparationIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_DescriptionOfMaterialMYSQLI_TYPE = 's';
  const C_InCommentsMYSQLI_TYPE = 's';
  const C_IsResolvedMYSQLI_TYPE = 'i';
  const C_ItemCountMYSQLI_TYPE = 'i';
  const C_NonSpecimenCountMYSQLI_TYPE = 'i';
  const C_OutCommentsMYSQLI_TYPE = 's';
  const C_QuantityResolvedMYSQLI_TYPE = 'i';
  const C_QuantityReturnedMYSQLI_TYPE = 'i';
  const C_ReceivedCommentsMYSQLI_TYPE = 's';
  const C_SrcTaxonomyMYSQLI_TYPE = 's';
  const C_TypeCountMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_DisciplineIDMYSQLI_TYPE = 'i';
  const C_PreparationIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_LoanIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='LoanPreparationID') { $retval = self::C_LoanPreparationIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='DescriptionOfMaterial') { $retval = self::C_DescriptionOfMaterialMYSQLI_TYPE; }
      if ($aFieldname=='InComments') { $retval = self::C_InCommentsMYSQLI_TYPE; }
      if ($aFieldname=='IsResolved') { $retval = self::C_IsResolvedMYSQLI_TYPE; }
      if ($aFieldname=='ItemCount') { $retval = self::C_ItemCountMYSQLI_TYPE; }
      if ($aFieldname=='NonSpecimenCount') { $retval = self::C_NonSpecimenCountMYSQLI_TYPE; }
      if ($aFieldname=='OutComments') { $retval = self::C_OutCommentsMYSQLI_TYPE; }
      if ($aFieldname=='QuantityResolved') { $retval = self::C_QuantityResolvedMYSQLI_TYPE; }
      if ($aFieldname=='QuantityReturned') { $retval = self::C_QuantityReturnedMYSQLI_TYPE; }
      if ($aFieldname=='ReceivedComments') { $retval = self::C_ReceivedCommentsMYSQLI_TYPE; }
      if ($aFieldname=='SrcTaxonomy') { $retval = self::C_SrcTaxonomyMYSQLI_TYPE; }
      if ($aFieldname=='TypeCount') { $retval = self::C_TypeCountMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='DisciplineID') { $retval = self::C_DisciplineIDMYSQLI_TYPE; }
      if ($aFieldname=='PreparationID') { $retval = self::C_PreparationIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='LoanID') { $retval = self::C_LoanIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setLoanPreparationID($pk[LoanPreparationID]);
             } else { ;
                 $this->setLoanPreparationID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->LoanPreparationID != NULL) {
           $sql = 'SELECT LoanPreparationID, TimestampCreated, TimestampModified, Version, DescriptionOfMaterial, InComments, IsResolved, ItemCount, NonSpecimenCount, OutComments, QuantityResolved, QuantityReturned, ReceivedComments, SrcTaxonomy, TypeCount, CreatedByAgentID, DisciplineID, PreparationID, ModifiedByAgentID, LoanID FROM loanpreparation WHERE LoanPreparationID = '.$this->LoanPreparationID ;

           $preparesql = 'SELECT LoanPreparationID, TimestampCreated, TimestampModified, Version, DescriptionOfMaterial, InComments, IsResolved, ItemCount, NonSpecimenCount, OutComments, QuantityResolved, QuantityReturned, ReceivedComments, SrcTaxonomy, TypeCount, CreatedByAgentID, DisciplineID, PreparationID, ModifiedByAgentID, LoanID FROM loanpreparation WHERE LoanPreparationID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->LoanPreparationID);
              $statement->execute();
              $statement->bind_result($this->LoanPreparationID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->DescriptionOfMaterial, $this->InComments, $this->IsResolved, $this->ItemCount, $this->NonSpecimenCount, $this->OutComments, $this->QuantityResolved, $this->QuantityReturned, $this->ReceivedComments, $this->SrcTaxonomy, $this->TypeCount, $this->CreatedByAgentID, $this->DisciplineID, $this->PreparationID, $this->ModifiedByAgentID, $this->LoanID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->LoanPreparationID!= NULL) {
            $sql  = 'UPDATE  loanpreparation SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", DescriptionOfMaterial = ? ";
            $sql .=  ", InComments = ? ";
            $sql .=  ", IsResolved = ? ";
            $sql .=  ", ItemCount = ? ";
            $sql .=  ", NonSpecimenCount = ? ";
            $sql .=  ", OutComments = ? ";
            $sql .=  ", QuantityResolved = ? ";
            $sql .=  ", QuantityReturned = ? ";
            $sql .=  ", ReceivedComments = ? ";
            $sql .=  ", SrcTaxonomy = ? ";
            $sql .=  ", TypeCount = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", DisciplineID = ? ";
            $sql .=  ", PreparationID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", LoanID = ? ";

            $sql .= "  WHERE LoanPreparationID = ? ";
        } else {
            $sql  = 'INSERT INTO loanpreparation ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( LoanPreparationID ,  TimestampCreated ,  TimestampModified ,  Version ,  DescriptionOfMaterial ,  InComments ,  IsResolved ,  ItemCount ,  NonSpecimenCount ,  OutComments ,  QuantityResolved ,  QuantityReturned ,  ReceivedComments ,  SrcTaxonomy ,  TypeCount ,  CreatedByAgentID ,  DisciplineID ,  PreparationID ,  ModifiedByAgentID ,  LoanID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->LoanPreparationID!= NULL ) {
              $statement->bind_param("ississiiisiissiiiiiii", $this->LoanPreparationID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->DescriptionOfMaterial , $this->InComments , $this->IsResolved , $this->ItemCount , $this->NonSpecimenCount , $this->OutComments , $this->QuantityResolved , $this->QuantityReturned , $this->ReceivedComments , $this->SrcTaxonomy , $this->TypeCount , $this->CreatedByAgentID , $this->DisciplineID , $this->PreparationID , $this->ModifiedByAgentID , $this->LoanID , $this->LoanPreparationID );
           } else { 
              $statement->bind_param("ississiiisiissiiiiii", $this->LoanPreparationID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->DescriptionOfMaterial , $this->InComments , $this->IsResolved , $this->ItemCount , $this->NonSpecimenCount , $this->OutComments , $this->QuantityResolved , $this->QuantityReturned , $this->ReceivedComments , $this->SrcTaxonomy , $this->TypeCount , $this->CreatedByAgentID , $this->DisciplineID , $this->PreparationID , $this->ModifiedByAgentID , $this->LoanID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->LoanPreparationID != NULL) {
           $sql = 'SELECT LoanPreparationID, TimestampCreated, TimestampModified, Version, DescriptionOfMaterial, InComments, IsResolved, ItemCount, NonSpecimenCount, OutComments, QuantityResolved, QuantityReturned, ReceivedComments, SrcTaxonomy, TypeCount, CreatedByAgentID, DisciplineID, PreparationID, ModifiedByAgentID, LoanID FROM loanpreparation WHERE LoanPreparationID = "'.$this->LoanPreparationID.'"  ' ;

           $preparedsql = 'SELECT  FROM loanpreparation WHERE  and LoanPreparationID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississiiisiissiiiiii", $this->LoanPreparationID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->DescriptionOfMaterial, $this->InComments, $this->IsResolved, $this->ItemCount, $this->NonSpecimenCount, $this->OutComments, $this->QuantityResolved, $this->QuantityReturned, $this->ReceivedComments, $this->SrcTaxonomy, $this->TypeCount, $this->CreatedByAgentID, $this->DisciplineID, $this->PreparationID, $this->ModifiedByAgentID, $this->LoanID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM loanpreparation WHERE  and LoanPreparationID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississiiisiissiiiiii", $this->LoanPreparationID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->DescriptionOfMaterial, $this->InComments, $this->IsResolved, $this->ItemCount, $this->NonSpecimenCount, $this->OutComments, $this->QuantityResolved, $this->QuantityReturned, $this->ReceivedComments, $this->SrcTaxonomy, $this->TypeCount, $this->CreatedByAgentID, $this->DisciplineID, $this->PreparationID, $this->ModifiedByAgentID, $this->LoanID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->LoanPreparationID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM loanpreparation';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT LoanPreparationID FROM loanpreparation $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_loanpreparation();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromloanreturnpreparation() { 
      // ForeignKey in: loanreturnpreparation
      $t = new loanreturnpreparation();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: DisciplineID
      $t = new discipline();
      $t->load(getDisciplineID());
      $returnvalue[DisciplineID] = $t;
       // fk: PreparationID
      $t = new preparation();
      $t->load(getPreparationID());
      $returnvalue[PreparationID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: LoanID
      $t = new loan();
      $t->load(getLoanID());
      $returnvalue[LoanID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT LoanPreparationID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(DescriptionOfMaterial,'') || ' ' || IFNULL(InComments,'') || ' ' || IFNULL(IsResolved,'') || ' ' || IFNULL(ItemCount,'') || ' ' || IFNULL(NonSpecimenCount,'') || ' ' || IFNULL(OutComments,'') || ' ' || IFNULL(QuantityResolved,'') || ' ' || IFNULL(QuantityReturned,'') || ' ' || IFNULL(ReceivedComments,'') || ' ' || IFNULL(SrcTaxonomy,'') || ' ' || IFNULL(TypeCount,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(DisciplineID,'') || ' ' || IFNULL(PreparationID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(LoanID,'')) FROM loanpreparation order by CreatedByAgentID, DisciplineID, PreparationID, ModifiedByAgentID, LoanID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM loanpreparation order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanPreparationID FROM loanpreparation WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT LoanPreparationID FROM loanpreparation WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loanpreparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDisciplineID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanPreparationID FROM loanpreparation WHERE DisciplineID $operator '$searchTerm'";
        $preparedsql = "SELECT LoanPreparationID FROM loanpreparation WHERE DisciplineID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loanpreparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPreparationID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanPreparationID FROM loanpreparation WHERE PreparationID $operator '$searchTerm'";
        $preparedsql = "SELECT LoanPreparationID FROM loanpreparation WHERE PreparationID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loanpreparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanPreparationID FROM loanpreparation WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT LoanPreparationID FROM loanpreparation WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loanpreparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByLoanID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanPreparationID FROM loanpreparation WHERE LoanID $operator '$searchTerm'";
        $preparedsql = "SELECT LoanPreparationID FROM loanpreparation WHERE LoanID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loanpreparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM loanpreparation group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDisciplineID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DisciplineID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DisciplineID FROM loanpreparation group by DisciplineID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DisciplineID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPreparationID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' PreparationID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, PreparationID FROM loanpreparation group by PreparationID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&PreparationID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM loanpreparation group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctLoanID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' LoanID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, LoanID FROM loanpreparation group by LoanID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&LoanID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DisciplineID':
             $returnvalue = $this->selectDistinctDisciplineID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'PreparationID':
             $returnvalue = $this->selectDistinctPreparationID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'LoanID':
             $returnvalue = $this->selectDistinctLoanID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the loanpreparation.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_loanpreparationView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_loanpreparation <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_loanpreparation::LOANPREPARATIONID.": ".$model->getLoanPreparationID()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::DESCRIPTIONOFMATERIAL.": ".$model->getDescriptionOfMaterial()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::INCOMMENTS.": ".$model->getInComments()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::ISRESOLVED.": ".$model->getIsResolved()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::ITEMCOUNT.": ".$model->getItemCount()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::NONSPECIMENCOUNT.": ".$model->getNonSpecimenCount()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::OUTCOMMENTS.": ".$model->getOutComments()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::QUANTITYRESOLVED.": ".$model->getQuantityResolved()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::QUANTITYRETURNED.": ".$model->getQuantityReturned()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::RECEIVEDCOMMENTS.": ".$model->getReceivedComments()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::SRCTAXONOMY.": ".$model->getSrcTaxonomy()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::TYPECOUNT.": ".$model->getTypeCount()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::DISCIPLINEID.": ".$model->getDisciplineID()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::PREPARATIONID.": ".$model->getPreparationID()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_loanpreparation::LOANID.": ".$model->getLoanID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>discipline</li>";
           $t_discipline = new huh_discipline();
           $t_disciplineView = new huh_disciplineView();
           $t_disciplineView->setModel($t_discipline);
           if ($model->getDisciplineID() != '') { 
               $t_discipline->load($model->getDisciplineID());
               $returnvalue .= $t_disciplineView->getDetailsView(false);
           }
           $returnvalue .= "<li>preparation</li>";
           $t_preparation = new huh_preparation();
           $t_preparationView = new huh_preparationView();
           $t_preparationView->setModel($t_preparation);
           if ($model->getPreparationID() != '') { 
               $t_preparation->load($model->getPreparationID());
               $returnvalue .= $t_preparationView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>loan</li>";
           $t_loan = new huh_loan();
           $t_loanView = new huh_loanView();
           $t_loanView->setModel($t_loan);
           if ($model->getLoanID() != '') { 
               $t_loan->load($model->getLoanID());
               $returnvalue .= $t_loanView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_loanpreparation::LOANPREPARATIONID.': "'.$model->getLoanPreparationID().'",';
       $returnvalue .= '"'.huh_loanpreparation::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_loanpreparation::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_loanpreparation::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_loanpreparation::DESCRIPTIONOFMATERIAL.': "'.$model->getDescriptionOfMaterial().'",';
       $returnvalue .= '"'.huh_loanpreparation::INCOMMENTS.': "'.$model->getInComments().'",';
       $returnvalue .= '"'.huh_loanpreparation::ISRESOLVED.': "'.$model->getIsResolved().'",';
       $returnvalue .= '"'.huh_loanpreparation::ITEMCOUNT.': "'.$model->getItemCount().'",';
       $returnvalue .= '"'.huh_loanpreparation::NONSPECIMENCOUNT.': "'.$model->getNonSpecimenCount().'",';
       $returnvalue .= '"'.huh_loanpreparation::OUTCOMMENTS.': "'.$model->getOutComments().'",';
       $returnvalue .= '"'.huh_loanpreparation::QUANTITYRESOLVED.': "'.$model->getQuantityResolved().'",';
       $returnvalue .= '"'.huh_loanpreparation::QUANTITYRETURNED.': "'.$model->getQuantityReturned().'",';
       $returnvalue .= '"'.huh_loanpreparation::RECEIVEDCOMMENTS.': "'.$model->getReceivedComments().'",';
       $returnvalue .= '"'.huh_loanpreparation::SRCTAXONOMY.': "'.$model->getSrcTaxonomy().'",';
       $returnvalue .= '"'.huh_loanpreparation::TYPECOUNT.': "'.$model->getTypeCount().'",';
       $returnvalue .= '"'.huh_loanpreparation::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_loanpreparation::DISCIPLINEID.': "'.$model->getDisciplineID().'",';
       $returnvalue .= '"'.huh_loanpreparation::PREPARATIONID.': "'.$model->getPreparationID().'",';
       $returnvalue .= '"'.huh_loanpreparation::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_loanpreparation::LOANID.': "'.$model->getLoanID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getLoanPreparationID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getDescriptionOfMaterial()."</td>\n";
       $returnvalue .= "<td>".$model->getInComments()."</td>\n";
       $returnvalue .= "<td>".$model->getIsResolved()."</td>\n";
       $returnvalue .= "<td>".$model->getItemCount()."</td>\n";
       $returnvalue .= "<td>".$model->getNonSpecimenCount()."</td>\n";
       $returnvalue .= "<td>".$model->getOutComments()."</td>\n";
       $returnvalue .= "<td>".$model->getQuantityResolved()."</td>\n";
       $returnvalue .= "<td>".$model->getQuantityReturned()."</td>\n";
       $returnvalue .= "<td>".$model->getReceivedComments()."</td>\n";
       $returnvalue .= "<td>".$model->getSrcTaxonomy()."</td>\n";
       $returnvalue .= "<td>".$model->getTypeCount()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getDisciplineID()."</td>\n";
       $returnvalue .= "<td>".$model->getPreparationID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getLoanID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_loanpreparation::LOANPREPARATIONID."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::DESCRIPTIONOFMATERIAL."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::INCOMMENTS."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::ISRESOLVED."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::ITEMCOUNT."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::NONSPECIMENCOUNT."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::OUTCOMMENTS."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::QUANTITYRESOLVED."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::QUANTITYRETURNED."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::RECEIVEDCOMMENTS."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::SRCTAXONOMY."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::TYPECOUNT."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::DISCIPLINEID."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::PREPARATIONID."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_loanpreparation::LOANID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_loanpreparation">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new LoanPreparationID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_loanpreparation::LOANPREPARATIONID.">LOANPREPARATIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loanpreparation::LOANPREPARATIONID." id=".huh_loanpreparation::LOANPREPARATIONID." value='".$model->getLoanPreparationID()."'  style=' width:".huh_loanpreparation::LOANPREPARATIONID_SIZE ."em;  '  maxlength='".huh_loanpreparation::LOANPREPARATIONID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_loanpreparation::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loanpreparation::TIMESTAMPCREATED." id=".huh_loanpreparation::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_loanpreparation::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_loanpreparation::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loanpreparation::TIMESTAMPMODIFIED." id=".huh_loanpreparation::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_loanpreparation::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_loanpreparation::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loanpreparation::VERSION." id=".huh_loanpreparation::VERSION." value='".$model->getVersion()."'  style=' width:".huh_loanpreparation::VERSION_SIZE ."em;  '  maxlength='".huh_loanpreparation::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::DESCRIPTIONOFMATERIAL.">DESCRIPTIONOFMATERIAL</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_loanpreparation::DESCRIPTIONOFMATERIAL." id=".huh_loanpreparation::DESCRIPTIONOFMATERIAL." >".$model->getDescriptionOfMaterial()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::INCOMMENTS.">INCOMMENTS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_loanpreparation::INCOMMENTS." id=".huh_loanpreparation::INCOMMENTS." >".$model->getInComments()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::ISRESOLVED.">ISRESOLVED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loanpreparation::ISRESOLVED." id=".huh_loanpreparation::ISRESOLVED." value='".$model->getIsResolved()."'  style=' width:".huh_loanpreparation::ISRESOLVED_SIZE ."em;  '  maxlength='".huh_loanpreparation::ISRESOLVED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::ITEMCOUNT.">ITEMCOUNT</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loanpreparation::ITEMCOUNT." id=".huh_loanpreparation::ITEMCOUNT." value='".$model->getItemCount()."'  style=' width:".huh_loanpreparation::ITEMCOUNT_SIZE ."em;  '  maxlength='".huh_loanpreparation::ITEMCOUNT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::NONSPECIMENCOUNT.">NONSPECIMENCOUNT</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loanpreparation::NONSPECIMENCOUNT." id=".huh_loanpreparation::NONSPECIMENCOUNT." value='".$model->getNonSpecimenCount()."'  style=' width:".huh_loanpreparation::NONSPECIMENCOUNT_SIZE ."em;  '  maxlength='".huh_loanpreparation::NONSPECIMENCOUNT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::OUTCOMMENTS.">OUTCOMMENTS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_loanpreparation::OUTCOMMENTS." id=".huh_loanpreparation::OUTCOMMENTS." >".$model->getOutComments()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::QUANTITYRESOLVED.">QUANTITYRESOLVED</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loanpreparation::QUANTITYRESOLVED." id=".huh_loanpreparation::QUANTITYRESOLVED." value='".$model->getQuantityResolved()."'  style=' width:".huh_loanpreparation::QUANTITYRESOLVED_SIZE ."em;  '  maxlength='".huh_loanpreparation::QUANTITYRESOLVED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::QUANTITYRETURNED.">QUANTITYRETURNED</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loanpreparation::QUANTITYRETURNED." id=".huh_loanpreparation::QUANTITYRETURNED." value='".$model->getQuantityReturned()."'  style=' width:".huh_loanpreparation::QUANTITYRETURNED_SIZE ."em;  '  maxlength='".huh_loanpreparation::QUANTITYRETURNED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::RECEIVEDCOMMENTS.">RECEIVEDCOMMENTS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_loanpreparation::RECEIVEDCOMMENTS." id=".huh_loanpreparation::RECEIVEDCOMMENTS." >".$model->getReceivedComments()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::SRCTAXONOMY.">SRCTAXONOMY</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_loanpreparation::SRCTAXONOMY." id=".huh_loanpreparation::SRCTAXONOMY." >".$model->getSrcTaxonomy()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::TYPECOUNT.">TYPECOUNT</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loanpreparation::TYPECOUNT." id=".huh_loanpreparation::TYPECOUNT." value='".$model->getTypeCount()."'  style=' width:".huh_loanpreparation::TYPECOUNT_SIZE ."em;  '  maxlength='".huh_loanpreparation::TYPECOUNT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loanpreparation::CREATEDBYAGENTID." id=".huh_loanpreparation::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_loanpreparation::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_loanpreparation::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::DISCIPLINEID.">DISCIPLINEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loanpreparation::DISCIPLINEID." id=".huh_loanpreparation::DISCIPLINEID." value='".$model->getDisciplineID()."'  style=' width:".huh_loanpreparation::DISCIPLINEID_SIZE ."em;  '  maxlength='".huh_loanpreparation::DISCIPLINEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::PREPARATIONID.">PREPARATIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loanpreparation::PREPARATIONID." id=".huh_loanpreparation::PREPARATIONID." value='".$model->getPreparationID()."'  style=' width:".huh_loanpreparation::PREPARATIONID_SIZE ."em;  '  maxlength='".huh_loanpreparation::PREPARATIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loanpreparation::MODIFIEDBYAGENTID." id=".huh_loanpreparation::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_loanpreparation::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_loanpreparation::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loanpreparation::LOANID.">LOANID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loanpreparation::LOANID." id=".huh_loanpreparation::LOANID." value='".$model->getLoanID()."'  style=' width:".huh_loanpreparation::LOANID_SIZE ."em;  '  maxlength='".huh_loanpreparation::LOANID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_loanpreparation">';
       $returnvalue .= '<input type=hidden name=LoanPreparationID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_loanpreparation">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>LOANPREPARATIONID<input type=text name=".huh_loanpreparation::LOANPREPARATIONID." id=".huh_loanpreparation::LOANPREPARATIONID." value='".$model->getLoanPreparationID()."'  size='".huh_loanpreparation::LOANPREPARATIONID_SIZE ."'  maxlength='".huh_loanpreparation::LOANPREPARATIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_loanpreparation::TIMESTAMPCREATED." id=".huh_loanpreparation::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_loanpreparation::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_loanpreparation::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_loanpreparation::TIMESTAMPMODIFIED." id=".huh_loanpreparation::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_loanpreparation::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_loanpreparation::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_loanpreparation::VERSION." id=".huh_loanpreparation::VERSION." value='".$model->getVersion()."'  size='".huh_loanpreparation::VERSION_SIZE ."'  maxlength='".huh_loanpreparation::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DESCRIPTIONOFMATERIAL<input type=text name=".huh_loanpreparation::DESCRIPTIONOFMATERIAL." id=".huh_loanpreparation::DESCRIPTIONOFMATERIAL." value='".$model->getDescriptionOfMaterial()."'  size='51'  maxlength='".huh_loanpreparation::DESCRIPTIONOFMATERIAL_SIZE ."' ></li>\n";
       $returnvalue .= "<li>INCOMMENTS<input type=text name=".huh_loanpreparation::INCOMMENTS." id=".huh_loanpreparation::INCOMMENTS." value='".$model->getInComments()."'  size='51'  maxlength='".huh_loanpreparation::INCOMMENTS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISRESOLVED<input type=text name=".huh_loanpreparation::ISRESOLVED." id=".huh_loanpreparation::ISRESOLVED." value='".$model->getIsResolved()."'  size='".huh_loanpreparation::ISRESOLVED_SIZE ."'  maxlength='".huh_loanpreparation::ISRESOLVED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ITEMCOUNT<input type=text name=".huh_loanpreparation::ITEMCOUNT." id=".huh_loanpreparation::ITEMCOUNT." value='".$model->getItemCount()."'  size='".huh_loanpreparation::ITEMCOUNT_SIZE ."'  maxlength='".huh_loanpreparation::ITEMCOUNT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NONSPECIMENCOUNT<input type=text name=".huh_loanpreparation::NONSPECIMENCOUNT." id=".huh_loanpreparation::NONSPECIMENCOUNT." value='".$model->getNonSpecimenCount()."'  size='".huh_loanpreparation::NONSPECIMENCOUNT_SIZE ."'  maxlength='".huh_loanpreparation::NONSPECIMENCOUNT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>OUTCOMMENTS<input type=text name=".huh_loanpreparation::OUTCOMMENTS." id=".huh_loanpreparation::OUTCOMMENTS." value='".$model->getOutComments()."'  size='51'  maxlength='".huh_loanpreparation::OUTCOMMENTS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>QUANTITYRESOLVED<input type=text name=".huh_loanpreparation::QUANTITYRESOLVED." id=".huh_loanpreparation::QUANTITYRESOLVED." value='".$model->getQuantityResolved()."'  size='".huh_loanpreparation::QUANTITYRESOLVED_SIZE ."'  maxlength='".huh_loanpreparation::QUANTITYRESOLVED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>QUANTITYRETURNED<input type=text name=".huh_loanpreparation::QUANTITYRETURNED." id=".huh_loanpreparation::QUANTITYRETURNED." value='".$model->getQuantityReturned()."'  size='".huh_loanpreparation::QUANTITYRETURNED_SIZE ."'  maxlength='".huh_loanpreparation::QUANTITYRETURNED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RECEIVEDCOMMENTS<input type=text name=".huh_loanpreparation::RECEIVEDCOMMENTS." id=".huh_loanpreparation::RECEIVEDCOMMENTS." value='".$model->getReceivedComments()."'  size='51'  maxlength='".huh_loanpreparation::RECEIVEDCOMMENTS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SRCTAXONOMY<input type=text name=".huh_loanpreparation::SRCTAXONOMY." id=".huh_loanpreparation::SRCTAXONOMY." value='".$model->getSrcTaxonomy()."'  size='51'  maxlength='".huh_loanpreparation::SRCTAXONOMY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TYPECOUNT<input type=text name=".huh_loanpreparation::TYPECOUNT." id=".huh_loanpreparation::TYPECOUNT." value='".$model->getTypeCount()."'  size='".huh_loanpreparation::TYPECOUNT_SIZE ."'  maxlength='".huh_loanpreparation::TYPECOUNT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_loanpreparation::CREATEDBYAGENTID." id=".huh_loanpreparation::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_loanpreparation::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_loanpreparation::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISCIPLINEID<input type=text name=".huh_loanpreparation::DISCIPLINEID." id=".huh_loanpreparation::DISCIPLINEID." value='".$model->getDisciplineID()."'  size='".huh_loanpreparation::DISCIPLINEID_SIZE ."'  maxlength='".huh_loanpreparation::DISCIPLINEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PREPARATIONID<input type=text name=".huh_loanpreparation::PREPARATIONID." id=".huh_loanpreparation::PREPARATIONID." value='".$model->getPreparationID()."'  size='".huh_loanpreparation::PREPARATIONID_SIZE ."'  maxlength='".huh_loanpreparation::PREPARATIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_loanpreparation::MODIFIEDBYAGENTID." id=".huh_loanpreparation::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_loanpreparation::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_loanpreparation::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LOANID<input type=text name=".huh_loanpreparation::LOANID." id=".huh_loanpreparation::LOANID." value='".$model->getLoanID()."'  size='".huh_loanpreparation::LOANID_SIZE ."'  maxlength='".huh_loanpreparation::LOANID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
