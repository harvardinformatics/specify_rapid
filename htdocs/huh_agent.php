<?php
//==============================================================================
//===   agent.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_agent implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const AGENTID_SIZE         = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const ABBREVIATION_SIZE    = 20; //YEAR
   const AGENTTYPE_SIZE       = 4; //TINYINT
   const DATEOFBIRTH_SIZE     = 12; //DATE
   const DATEOFBIRTHCONFIDENCE_SIZE = 4; //4
   const DATEOFBIRTHPRECISION_SIZE = 4; //TINYINT
   const DATEOFDEATH_SIZE     = 12; //DATE
   const DATEOFDEATHCONFIDENCE_SIZE = 4; //4
   const DATEOFDEATHPRECISION_SIZE = 4; //TINYINT
   const DATESTYPE_SIZE       = 4; //TINYINT
   const EMAIL_SIZE           = 20; //YEAR
   const FIRSTNAME_SIZE       = 20; //YEAR
   const GUID_SIZE            = 128; //128
   const INITIALS_SIZE        = 8; //8
   const INTERESTS_SIZE       = 255; //255
   const JOBTITLE_SIZE        = 20; //YEAR
   const LASTNAME_SIZE        = 200; //200
   const MIDDLEINITIAL_SIZE   = 20; //YEAR
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const TITLE_SIZE           = 20; //YEAR
   const URL_SIZE             = 255; //LONGVARCHAR
   const INSTITUTIONCCID_SIZE = 11; //INTEGER
   const COLLECTIONCCID_SIZE  = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const SPECIFYUSERID_SIZE   = 11; //INTEGER
   const COLLECTIONTCID_SIZE  = 11; //INTEGER
   const DIVISIONID_SIZE      = 11; //INTEGER
   const INSTITUTIONTCID_SIZE = 11; //INTEGER
   const PARENTORGANIZATIONID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const AGENTID           = 'AgentID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const ABBREVIATION      = 'Abbreviation';
   const AGENTTYPE         = 'AgentType';
   const DATEOFBIRTH       = 'DateOfBirth';
   const DATEOFBIRTHCONFIDENCE = 'DateOfBirthConfidence';
   const DATEOFBIRTHPRECISION = 'DateOfBirthPrecision';
   const DATEOFDEATH       = 'DateOfDeath';
   const DATEOFDEATHCONFIDENCE = 'DateOfDeathConfidence';
   const DATEOFDEATHPRECISION = 'DateOfDeathPrecision';
   const DATESTYPE         = 'DatesType';
   const EMAIL             = 'Email';
   const FIRSTNAME         = 'FirstName';
   const GUID              = 'GUID';
   const INITIALS          = 'Initials';
   const INTERESTS         = 'Interests';
   const JOBTITLE          = 'JobTitle';
   const LASTNAME          = 'LastName';
   const MIDDLEINITIAL     = 'MiddleInitial';
   const REMARKS           = 'Remarks';
   const TITLE             = 'Title';
   const URL               = 'URL';
   const INSTITUTIONCCID   = 'InstitutionCCID';
   const COLLECTIONCCID    = 'CollectionCCID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const SPECIFYUSERID     = 'SpecifyUserID';
   const COLLECTIONTCID    = 'CollectionTCID';
   const DIVISIONID        = 'DivisionID';
   const INSTITUTIONTCID   = 'InstitutionTCID';
   const PARENTORGANIZATIONID = 'ParentOrganizationID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $AgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AgentID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $Abbreviation = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Abbreviation']), 0, 20);
  $AgentType = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['AgentType']), 0, 4);
  $DateOfBirth = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateOfBirth']), 0, 12);
  $DateOfBirthConfidence = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateOfBirthConfidence']), 0, 4);
  $DateOfBirthPrecision = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateOfBirthPrecision']), 0, 4);
  $DateOfDeath = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateOfDeath']), 0, 12);
  $DateOfDeathConfidence = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateOfDeathConfidence']), 0, 4);
  $DateOfDeathPrecision = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateOfDeathPrecision']), 0, 4);
  $DatesType = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DatesType']), 0, 4);
  $Email = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Email']), 0, 20);
  $FirstName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FirstName']), 0, 20);
  $GUID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GUID']), 0, 128);
  $Initials = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Initials']), 0, 8);
  $Interests = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Interests']), 0, 255);
  $JobTitle = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['JobTitle']), 0, 20);
  $LastName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['LastName']), 0, 200);
  $MiddleInitial = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['MiddleInitial']), 0, 20);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $Title = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Title']), 0, 20);
  $URL = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['URL']), 0, 255);
  $InstitutionCCID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['InstitutionCCID']), 0, 11);
  $CollectionCCID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionCCID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $SpecifyUserID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['SpecifyUserID']), 0, 11);
  $CollectionTCID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionTCID']), 0, 11);
  $DivisionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DivisionID']), 0, 11);
  $InstitutionTCID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['InstitutionTCID']), 0, 11);
  $ParentOrganizationID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ParentOrganizationID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $AgentID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $Abbreviation; // YEAR 
   private $AgentType; // TINYINT 
   private $DateOfBirth; // DATE 
   private $DateOfBirthConfidence; // VARCHAR(4) 
   private $DateOfBirthPrecision; // TINYINT 
   private $DateOfDeath; // DATE 
   private $DateOfDeathConfidence; // VARCHAR(4) 
   private $DateOfDeathPrecision; // TINYINT 
   private $DatesType; // TINYINT 
   private $Email; // YEAR 
   private $FirstName; // YEAR 
   private $GUID; // VARCHAR(128) 
   private $Initials; // VARCHAR(8) 
   private $Interests; // VARCHAR(255) 
   private $JobTitle; // YEAR 
   private $LastName; // VARCHAR(200) 
   private $MiddleInitial; // YEAR 
   private $Remarks; // LONGVARCHAR 
   private $Title; // YEAR 
   private $URL; // LONGVARCHAR 
   private $InstitutionCCID; // INTEGER 
   private $CollectionCCID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $SpecifyUserID; // INTEGER 
   private $CollectionTCID; // INTEGER 
   private $DivisionID; // INTEGER 
   private $InstitutionTCID; // INTEGER 
   private $ParentOrganizationID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' AgentID, TimestampCreated, TimestampModified, Version, Abbreviation, AgentType, DateOfBirth, DateOfBirthConfidence, DateOfBirthPrecision, DateOfDeath, DateOfDeathConfidence, DateOfDeathPrecision, DatesType, Email, FirstName, GUID, Initials, Interests, JobTitle, LastName, MiddleInitial, Remarks, Title, URL, InstitutionCCID, CollectionCCID, CreatedByAgentID, ModifiedByAgentID, SpecifyUserID, CollectionTCID, DivisionID, InstitutionTCID, ParentOrganizationID, ';
   const PKFIELDLIST = ' AgentID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'AgentID'  ) ;
   private $allFieldsArray = array( 0 => 'AgentID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'Abbreviation' , 5 => 'AgentType' , 6 => 'DateOfBirth' , 7 => 'DateOfBirthConfidence' , 8 => 'DateOfBirthPrecision' , 9 => 'DateOfDeath' , 10 => 'DateOfDeathConfidence' , 11 => 'DateOfDeathPrecision' , 12 => 'DatesType' , 13 => 'Email' , 14 => 'FirstName' , 15 => 'GUID' , 16 => 'Initials' , 17 => 'Interests' , 18 => 'JobTitle' , 19 => 'LastName' , 20 => 'MiddleInitial' , 21 => 'Remarks' , 22 => 'Title' , 23 => 'URL' , 24 => 'InstitutionCCID' , 25 => 'CollectionCCID' , 26 => 'CreatedByAgentID' , 27 => 'ModifiedByAgentID' , 28 => 'SpecifyUserID' , 29 => 'CollectionTCID' , 30 => 'DivisionID' , 31 => 'InstitutionTCID' , 32 => 'ParentOrganizationID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'Abbreviation' , 5 => 'AgentType' , 14 => 'FirstName' , 15 => 'GUID' , 19 => 'LastName' , 24 => 'InstitutionCCID' , 25 => 'CollectionCCID' , 26 => 'CreatedByAgentID' , 27 => 'ModifiedByAgentID' , 28 => 'SpecifyUserID' , 29 => 'CollectionTCID' , 30 => 'DivisionID' , 31 => 'InstitutionTCID' , 32 => 'ParentOrganizationID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_agent(){
       $this->AgentID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->Abbreviation = '';
       $this->AgentType = '';
       $this->DateOfBirth = '';
       $this->DateOfBirthConfidence = '';
       $this->DateOfBirthPrecision = '';
       $this->DateOfDeath = '';
       $this->DateOfDeathConfidence = '';
       $this->DateOfDeathPrecision = '';
       $this->DatesType = '';
       $this->Email = '';
       $this->FirstName = '';
       $this->GUID = '';
       $this->Initials = '';
       $this->Interests = '';
       $this->JobTitle = '';
       $this->LastName = '';
       $this->MiddleInitial = '';
       $this->Remarks = '';
       $this->Title = '';
       $this->URL = '';
       $this->InstitutionCCID = '';
       $this->CollectionCCID = '';
       $this->CreatedByAgentID = '';
       $this->ModifiedByAgentID = '';
       $this->SpecifyUserID = '';
       $this->CollectionTCID = '';
       $this->DivisionID = '';
       $this->InstitutionTCID = '';
       $this->ParentOrganizationID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='AgentID') { $returnvalue = $this->setAgentID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='Abbreviation') { $returnvalue = $this->setAbbreviation($value); } 
             if ($fieldname=='AgentType') { $returnvalue = $this->setAgentType($value); } 
             if ($fieldname=='DateOfBirth') { $returnvalue = $this->setDateOfBirth($value); } 
             if ($fieldname=='DateOfBirthConfidence') { $returnvalue = $this->setDateOfBirthConfidence($value); } 
             if ($fieldname=='DateOfBirthPrecision') { $returnvalue = $this->setDateOfBirthPrecision($value); } 
             if ($fieldname=='DateOfDeath') { $returnvalue = $this->setDateOfDeath($value); } 
             if ($fieldname=='DateOfDeathConfidence') { $returnvalue = $this->setDateOfDeathConfidence($value); } 
             if ($fieldname=='DateOfDeathPrecision') { $returnvalue = $this->setDateOfDeathPrecision($value); } 
             if ($fieldname=='DatesType') { $returnvalue = $this->setDatesType($value); } 
             if ($fieldname=='Email') { $returnvalue = $this->setEmail($value); } 
             if ($fieldname=='FirstName') { $returnvalue = $this->setFirstName($value); } 
             if ($fieldname=='GUID') { $returnvalue = $this->setGUID($value); } 
             if ($fieldname=='Initials') { $returnvalue = $this->setInitials($value); } 
             if ($fieldname=='Interests') { $returnvalue = $this->setInterests($value); } 
             if ($fieldname=='JobTitle') { $returnvalue = $this->setJobTitle($value); } 
             if ($fieldname=='LastName') { $returnvalue = $this->setLastName($value); } 
             if ($fieldname=='MiddleInitial') { $returnvalue = $this->setMiddleInitial($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='Title') { $returnvalue = $this->setTitle($value); } 
             if ($fieldname=='URL') { $returnvalue = $this->setURL($value); } 
             if ($fieldname=='InstitutionCCID') { $returnvalue = $this->setInstitutionCCID($value); } 
             if ($fieldname=='CollectionCCID') { $returnvalue = $this->setCollectionCCID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='SpecifyUserID') { $returnvalue = $this->setSpecifyUserID($value); } 
             if ($fieldname=='CollectionTCID') { $returnvalue = $this->setCollectionTCID($value); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->setDivisionID($value); } 
             if ($fieldname=='InstitutionTCID') { $returnvalue = $this->setInstitutionTCID($value); } 
             if ($fieldname=='ParentOrganizationID') { $returnvalue = $this->setParentOrganizationID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='AgentID') { $returnvalue = $this->getAgentID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='Abbreviation') { $returnvalue = $this->getAbbreviation(); } 
             if ($fieldname=='AgentType') { $returnvalue = $this->getAgentType(); } 
             if ($fieldname=='DateOfBirth') { $returnvalue = $this->getDateOfBirth(); } 
             if ($fieldname=='DateOfBirthConfidence') { $returnvalue = $this->getDateOfBirthConfidence(); } 
             if ($fieldname=='DateOfBirthPrecision') { $returnvalue = $this->getDateOfBirthPrecision(); } 
             if ($fieldname=='DateOfDeath') { $returnvalue = $this->getDateOfDeath(); } 
             if ($fieldname=='DateOfDeathConfidence') { $returnvalue = $this->getDateOfDeathConfidence(); } 
             if ($fieldname=='DateOfDeathPrecision') { $returnvalue = $this->getDateOfDeathPrecision(); } 
             if ($fieldname=='DatesType') { $returnvalue = $this->getDatesType(); } 
             if ($fieldname=='Email') { $returnvalue = $this->getEmail(); } 
             if ($fieldname=='FirstName') { $returnvalue = $this->getFirstName(); } 
             if ($fieldname=='GUID') { $returnvalue = $this->getGUID(); } 
             if ($fieldname=='Initials') { $returnvalue = $this->getInitials(); } 
             if ($fieldname=='Interests') { $returnvalue = $this->getInterests(); } 
             if ($fieldname=='JobTitle') { $returnvalue = $this->getJobTitle(); } 
             if ($fieldname=='LastName') { $returnvalue = $this->getLastName(); } 
             if ($fieldname=='MiddleInitial') { $returnvalue = $this->getMiddleInitial(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='Title') { $returnvalue = $this->getTitle(); } 
             if ($fieldname=='URL') { $returnvalue = $this->getURL(); } 
             if ($fieldname=='InstitutionCCID') { $returnvalue = $this->getInstitutionCCID(); } 
             if ($fieldname=='CollectionCCID') { $returnvalue = $this->getCollectionCCID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='SpecifyUserID') { $returnvalue = $this->getSpecifyUserID(); } 
             if ($fieldname=='CollectionTCID') { $returnvalue = $this->getCollectionTCID(); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->getDivisionID(); } 
             if ($fieldname=='InstitutionTCID') { $returnvalue = $this->getInstitutionTCID(); } 
             if ($fieldname=='ParentOrganizationID') { $returnvalue = $this->getParentOrganizationID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*AgentID*/
   public function getAgentID() {
       if ($this->AgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AgentID));
       }
   }
   public function setAgentID($AgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$AgentID)) > huh_agent::AGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AgentID = trim($AgentID);
       if (!ctype_digit(strval($AgentID)) && trim(strval($AgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AgentID = $this->l_addslashes($AgentID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_agent::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_agent::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_agent::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*Abbreviation*/
   public function getAbbreviation() {
       if ($this->Abbreviation==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Abbreviation));
       }
   }
   public function setAbbreviation($Abbreviation) {
       if (strlen($Abbreviation) > huh_agent::ABBREVIATION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Abbreviation = $this->l_addslashes($Abbreviation);
       $this->dirty = true;
   }
/*AgentType*/
   public function getAgentType() {
       if ($this->AgentType==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AgentType));
       }
   }
   public function setAgentType($AgentType) {
       if (strlen($AgentType) > huh_agent::AGENTTYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->AgentType = $this->l_addslashes($AgentType);
       $this->dirty = true;
   }
/*DateOfBirth*/
   public function getDateOfBirth() {
       if ($this->DateOfBirth==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateOfBirth));
       }
   }
   public function setDateOfBirth($DateOfBirth) {
       if (strlen($DateOfBirth) > huh_agent::DATEOFBIRTH_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateOfBirth = $this->l_addslashes($DateOfBirth);
       $this->dirty = true;
   }
/*DateOfBirthConfidence*/
   public function getDateOfBirthConfidence() {
       if ($this->DateOfBirthConfidence==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateOfBirthConfidence));
       }
   }
   public function setDateOfBirthConfidence($DateOfBirthConfidence) {
       if (strlen($DateOfBirthConfidence) > huh_agent::DATEOFBIRTHCONFIDENCE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateOfBirthConfidence = $this->l_addslashes($DateOfBirthConfidence);
       $this->dirty = true;
   }
/*DateOfBirthPrecision*/
   public function getDateOfBirthPrecision() {
       if ($this->DateOfBirthPrecision==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateOfBirthPrecision));
       }
   }
   public function setDateOfBirthPrecision($DateOfBirthPrecision) {
       if (strlen($DateOfBirthPrecision) > huh_agent::DATEOFBIRTHPRECISION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateOfBirthPrecision = $this->l_addslashes($DateOfBirthPrecision);
       $this->dirty = true;
   }
/*DateOfDeath*/
   public function getDateOfDeath() {
       if ($this->DateOfDeath==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateOfDeath));
       }
   }
   public function setDateOfDeath($DateOfDeath) {
       if (strlen($DateOfDeath) > huh_agent::DATEOFDEATH_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateOfDeath = $this->l_addslashes($DateOfDeath);
       $this->dirty = true;
   }
/*DateOfDeathConfidence*/
   public function getDateOfDeathConfidence() {
       if ($this->DateOfDeathConfidence==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateOfDeathConfidence));
       }
   }
   public function setDateOfDeathConfidence($DateOfDeathConfidence) {
       if (strlen($DateOfDeathConfidence) > huh_agent::DATEOFDEATHCONFIDENCE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateOfDeathConfidence = $this->l_addslashes($DateOfDeathConfidence);
       $this->dirty = true;
   }
/*DateOfDeathPrecision*/
   public function getDateOfDeathPrecision() {
       if ($this->DateOfDeathPrecision==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateOfDeathPrecision));
       }
   }
   public function setDateOfDeathPrecision($DateOfDeathPrecision) {
       if (strlen($DateOfDeathPrecision) > huh_agent::DATEOFDEATHPRECISION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateOfDeathPrecision = $this->l_addslashes($DateOfDeathPrecision);
       $this->dirty = true;
   }
/*DatesType*/
   public function getDatesType() {
       if ($this->DatesType==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DatesType));
       }
   }
   public function setDatesType($DatesType) {
       if (strlen($DatesType) > huh_agent::DATESTYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DatesType = $this->l_addslashes($DatesType);
       $this->dirty = true;
   }
/*Email*/
   public function getEmail() {
       if ($this->Email==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Email));
       }
   }
   public function setEmail($Email) {
       if (strlen($Email) > huh_agent::EMAIL_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Email = $this->l_addslashes($Email);
       $this->dirty = true;
   }
/*FirstName*/
   public function getFirstName() {
       if ($this->FirstName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FirstName));
       }
   }
   public function setFirstName($FirstName) {
       if (strlen($FirstName) > huh_agent::FIRSTNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FirstName = $this->l_addslashes($FirstName);
       $this->dirty = true;
   }
/*GUID*/
   public function getGUID() {
       if ($this->GUID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GUID));
       }
   }
   public function setGUID($GUID) {
       if (strlen($GUID) > huh_agent::GUID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GUID = $this->l_addslashes($GUID);
       $this->dirty = true;
   }
/*Initials*/
   public function getInitials() {
       if ($this->Initials==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Initials));
       }
   }
   public function setInitials($Initials) {
       if (strlen($Initials) > huh_agent::INITIALS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Initials = $this->l_addslashes($Initials);
       $this->dirty = true;
   }
/*Interests*/
   public function getInterests() {
       if ($this->Interests==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Interests));
       }
   }
   public function setInterests($Interests) {
       if (strlen($Interests) > huh_agent::INTERESTS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Interests = $this->l_addslashes($Interests);
       $this->dirty = true;
   }
/*JobTitle*/
   public function getJobTitle() {
       if ($this->JobTitle==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->JobTitle));
       }
   }
   public function setJobTitle($JobTitle) {
       if (strlen($JobTitle) > huh_agent::JOBTITLE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->JobTitle = $this->l_addslashes($JobTitle);
       $this->dirty = true;
   }
/*LastName*/
   public function getLastName() {
       if ($this->LastName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LastName));
       }
   }
   public function setLastName($LastName) {
       if (strlen($LastName) > huh_agent::LASTNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->LastName = $this->l_addslashes($LastName);
       $this->dirty = true;
   }
/*MiddleInitial*/
   public function getMiddleInitial() {
       if ($this->MiddleInitial==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->MiddleInitial));
       }
   }
   public function setMiddleInitial($MiddleInitial) {
       if (strlen($MiddleInitial) > huh_agent::MIDDLEINITIAL_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->MiddleInitial = $this->l_addslashes($MiddleInitial);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_agent::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*Title*/
   public function getTitle() {
       if ($this->Title==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Title));
       }
   }
   public function setTitle($Title) {
       if (strlen($Title) > huh_agent::TITLE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Title = $this->l_addslashes($Title);
       $this->dirty = true;
   }
/*URL*/
   public function getURL() {
       if ($this->URL==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->URL));
       }
   }
   public function setURL($URL) {
       if (strlen($URL) > huh_agent::URL_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->URL = $this->l_addslashes($URL);
       $this->dirty = true;
   }
/*InstitutionCCID*/
   public function getInstitutionCCID() {
       if ($this->InstitutionCCID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->InstitutionCCID));
       }
   }
   public function setInstitutionCCID($InstitutionCCID) {
       if (strlen(preg_replace('/[^0-9]/','',$InstitutionCCID)) > huh_agent::INSTITUTIONCCID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $InstitutionCCID = trim($InstitutionCCID);
       if (!ctype_digit(strval($InstitutionCCID)) && trim(strval($InstitutionCCID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->InstitutionCCID = $this->l_addslashes($InstitutionCCID);
       $this->dirty = true;
   }
/*CollectionCCID*/
   public function getCollectionCCID() {
       if ($this->CollectionCCID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionCCID));
       }
   }
   public function setCollectionCCID($CollectionCCID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionCCID)) > huh_agent::COLLECTIONCCID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectionCCID = trim($CollectionCCID);
       if (!ctype_digit(strval($CollectionCCID)) && trim(strval($CollectionCCID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionCCID = $this->l_addslashes($CollectionCCID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_agent::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_agent::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*SpecifyUserID*/
   public function getSpecifyUserID() {
       if ($this->SpecifyUserID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SpecifyUserID));
       }
   }
   public function setSpecifyUserID($SpecifyUserID) {
       if (strlen(preg_replace('/[^0-9]/','',$SpecifyUserID)) > huh_agent::SPECIFYUSERID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $SpecifyUserID = trim($SpecifyUserID);
       if (!ctype_digit(strval($SpecifyUserID)) && trim(strval($SpecifyUserID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->SpecifyUserID = $this->l_addslashes($SpecifyUserID);
       $this->dirty = true;
   }
/*CollectionTCID*/
   public function getCollectionTCID() {
       if ($this->CollectionTCID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionTCID));
       }
   }
   public function setCollectionTCID($CollectionTCID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionTCID)) > huh_agent::COLLECTIONTCID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectionTCID = trim($CollectionTCID);
       if (!ctype_digit(strval($CollectionTCID)) && trim(strval($CollectionTCID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionTCID = $this->l_addslashes($CollectionTCID);
       $this->dirty = true;
   }
/*DivisionID*/
   public function getDivisionID() {
       if ($this->DivisionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DivisionID));
       }
   }
   public function setDivisionID($DivisionID) {
       if (strlen(preg_replace('/[^0-9]/','',$DivisionID)) > huh_agent::DIVISIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DivisionID = trim($DivisionID);
       if (!ctype_digit(strval($DivisionID)) && trim(strval($DivisionID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->DivisionID = $this->l_addslashes($DivisionID);
       $this->dirty = true;
   }
/*InstitutionTCID*/
   public function getInstitutionTCID() {
       if ($this->InstitutionTCID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->InstitutionTCID));
       }
   }
   public function setInstitutionTCID($InstitutionTCID) {
       if (strlen(preg_replace('/[^0-9]/','',$InstitutionTCID)) > huh_agent::INSTITUTIONTCID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $InstitutionTCID = trim($InstitutionTCID);
       if (!ctype_digit(strval($InstitutionTCID)) && trim(strval($InstitutionTCID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->InstitutionTCID = $this->l_addslashes($InstitutionTCID);
       $this->dirty = true;
   }
/*ParentOrganizationID*/
   public function getParentOrganizationID() {
       if ($this->ParentOrganizationID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ParentOrganizationID));
       }
   }
   public function setParentOrganizationID($ParentOrganizationID) {
       if (strlen(preg_replace('/[^0-9]/','',$ParentOrganizationID)) > huh_agent::PARENTORGANIZATIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ParentOrganizationID = trim($ParentOrganizationID);
       if (!ctype_digit(strval($ParentOrganizationID)) && trim(strval($ParentOrganizationID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ParentOrganizationID = $this->l_addslashes($ParentOrganizationID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getAgentID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['AgentID'] = $this->getAgentID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_AgentIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_AbbreviationMYSQLI_TYPE = 's';
  const C_AgentTypeMYSQLI_TYPE = 'i';
  const C_DateOfBirthMYSQLI_TYPE = 's';
  const C_DateOfBirthConfidenceMYSQLI_TYPE = 's';
  const C_DateOfBirthPrecisionMYSQLI_TYPE = 'i';
  const C_DateOfDeathMYSQLI_TYPE = 's';
  const C_DateOfDeathConfidenceMYSQLI_TYPE = 's';
  const C_DateOfDeathPrecisionMYSQLI_TYPE = 'i';
  const C_DatesTypeMYSQLI_TYPE = 'i';
  const C_EmailMYSQLI_TYPE = 's';
  const C_FirstNameMYSQLI_TYPE = 's';
  const C_GUIDMYSQLI_TYPE = 's';
  const C_InitialsMYSQLI_TYPE = 's';
  const C_InterestsMYSQLI_TYPE = 's';
  const C_JobTitleMYSQLI_TYPE = 's';
  const C_LastNameMYSQLI_TYPE = 's';
  const C_MiddleInitialMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_TitleMYSQLI_TYPE = 's';
  const C_URLMYSQLI_TYPE = 's';
  const C_InstitutionCCIDMYSQLI_TYPE = 'i';
  const C_CollectionCCIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_SpecifyUserIDMYSQLI_TYPE = 'i';
  const C_CollectionTCIDMYSQLI_TYPE = 'i';
  const C_DivisionIDMYSQLI_TYPE = 'i';
  const C_InstitutionTCIDMYSQLI_TYPE = 'i';
  const C_ParentOrganizationIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='AgentID') { $retval = self::C_AgentIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='Abbreviation') { $retval = self::C_AbbreviationMYSQLI_TYPE; }
      if ($aFieldname=='AgentType') { $retval = self::C_AgentTypeMYSQLI_TYPE; }
      if ($aFieldname=='DateOfBirth') { $retval = self::C_DateOfBirthMYSQLI_TYPE; }
      if ($aFieldname=='DateOfBirthConfidence') { $retval = self::C_DateOfBirthConfidenceMYSQLI_TYPE; }
      if ($aFieldname=='DateOfBirthPrecision') { $retval = self::C_DateOfBirthPrecisionMYSQLI_TYPE; }
      if ($aFieldname=='DateOfDeath') { $retval = self::C_DateOfDeathMYSQLI_TYPE; }
      if ($aFieldname=='DateOfDeathConfidence') { $retval = self::C_DateOfDeathConfidenceMYSQLI_TYPE; }
      if ($aFieldname=='DateOfDeathPrecision') { $retval = self::C_DateOfDeathPrecisionMYSQLI_TYPE; }
      if ($aFieldname=='DatesType') { $retval = self::C_DatesTypeMYSQLI_TYPE; }
      if ($aFieldname=='Email') { $retval = self::C_EmailMYSQLI_TYPE; }
      if ($aFieldname=='FirstName') { $retval = self::C_FirstNameMYSQLI_TYPE; }
      if ($aFieldname=='GUID') { $retval = self::C_GUIDMYSQLI_TYPE; }
      if ($aFieldname=='Initials') { $retval = self::C_InitialsMYSQLI_TYPE; }
      if ($aFieldname=='Interests') { $retval = self::C_InterestsMYSQLI_TYPE; }
      if ($aFieldname=='JobTitle') { $retval = self::C_JobTitleMYSQLI_TYPE; }
      if ($aFieldname=='LastName') { $retval = self::C_LastNameMYSQLI_TYPE; }
      if ($aFieldname=='MiddleInitial') { $retval = self::C_MiddleInitialMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='Title') { $retval = self::C_TitleMYSQLI_TYPE; }
      if ($aFieldname=='URL') { $retval = self::C_URLMYSQLI_TYPE; }
      if ($aFieldname=='InstitutionCCID') { $retval = self::C_InstitutionCCIDMYSQLI_TYPE; }
      if ($aFieldname=='CollectionCCID') { $retval = self::C_CollectionCCIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='SpecifyUserID') { $retval = self::C_SpecifyUserIDMYSQLI_TYPE; }
      if ($aFieldname=='CollectionTCID') { $retval = self::C_CollectionTCIDMYSQLI_TYPE; }
      if ($aFieldname=='DivisionID') { $retval = self::C_DivisionIDMYSQLI_TYPE; }
      if ($aFieldname=='InstitutionTCID') { $retval = self::C_InstitutionTCIDMYSQLI_TYPE; }
      if ($aFieldname=='ParentOrganizationID') { $retval = self::C_ParentOrganizationIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setAgentID($pk[AgentID]);
             } else { ;
                 $this->setAgentID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->AgentID != NULL) {
           $sql = 'SELECT AgentID, TimestampCreated, TimestampModified, Version, Abbreviation, AgentType, DateOfBirth, DateOfBirthConfidence, DateOfBirthPrecision, DateOfDeath, DateOfDeathConfidence, DateOfDeathPrecision, DatesType, Email, FirstName, GUID, Initials, Interests, JobTitle, LastName, MiddleInitial, Remarks, Title, URL, InstitutionCCID, CollectionCCID, CreatedByAgentID, ModifiedByAgentID, SpecifyUserID, CollectionTCID, DivisionID, InstitutionTCID, ParentOrganizationID FROM agent WHERE AgentID = '.$this->AgentID ;

           $preparesql = 'SELECT AgentID, TimestampCreated, TimestampModified, Version, Abbreviation, AgentType, DateOfBirth, DateOfBirthConfidence, DateOfBirthPrecision, DateOfDeath, DateOfDeathConfidence, DateOfDeathPrecision, DatesType, Email, FirstName, GUID, Initials, Interests, JobTitle, LastName, MiddleInitial, Remarks, Title, URL, InstitutionCCID, CollectionCCID, CreatedByAgentID, ModifiedByAgentID, SpecifyUserID, CollectionTCID, DivisionID, InstitutionTCID, ParentOrganizationID FROM agent WHERE AgentID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->AgentID);
              $statement->execute();
              $statement->bind_result($this->AgentID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Abbreviation, $this->AgentType, $this->DateOfBirth, $this->DateOfBirthConfidence, $this->DateOfBirthPrecision, $this->DateOfDeath, $this->DateOfDeathConfidence, $this->DateOfDeathPrecision, $this->DatesType, $this->Email, $this->FirstName, $this->GUID, $this->Initials, $this->Interests, $this->JobTitle, $this->LastName, $this->MiddleInitial, $this->Remarks, $this->Title, $this->URL, $this->InstitutionCCID, $this->CollectionCCID, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->SpecifyUserID, $this->CollectionTCID, $this->DivisionID, $this->InstitutionTCID, $this->ParentOrganizationID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->AgentID!= NULL) {
            $sql  = 'UPDATE  agent SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", Abbreviation = ? ";
            $sql .=  ", AgentType = ? ";
            $sql .=  ", DateOfBirth = ? ";
            $sql .=  ", DateOfBirthConfidence = ? ";
            $sql .=  ", DateOfBirthPrecision = ? ";
            $sql .=  ", DateOfDeath = ? ";
            $sql .=  ", DateOfDeathConfidence = ? ";
            $sql .=  ", DateOfDeathPrecision = ? ";
            $sql .=  ", DatesType = ? ";
            $sql .=  ", Email = ? ";
            $sql .=  ", FirstName = ? ";
            $sql .=  ", GUID = ? ";
            $sql .=  ", Initials = ? ";
            $sql .=  ", Interests = ? ";
            $sql .=  ", JobTitle = ? ";
            $sql .=  ", LastName = ? ";
            $sql .=  ", MiddleInitial = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", Title = ? ";
            $sql .=  ", URL = ? ";
            $sql .=  ", InstitutionCCID = ? ";
            $sql .=  ", CollectionCCID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", SpecifyUserID = ? ";
            $sql .=  ", CollectionTCID = ? ";
            $sql .=  ", DivisionID = ? ";
            $sql .=  ", InstitutionTCID = ? ";
            $sql .=  ", ParentOrganizationID = ? ";

            $sql .= "  WHERE AgentID = ? ";
        } else {
            $sql  = 'INSERT INTO agent ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( AgentID ,  TimestampCreated ,  TimestampModified ,  Version ,  Abbreviation ,  AgentType ,  DateOfBirth ,  DateOfBirthConfidence ,  DateOfBirthPrecision ,  DateOfDeath ,  DateOfDeathConfidence ,  DateOfDeathPrecision ,  DatesType ,  Email ,  FirstName ,  GUID ,  Initials ,  Interests ,  JobTitle ,  LastName ,  MiddleInitial ,  Remarks ,  Title ,  URL ,  InstitutionCCID ,  CollectionCCID ,  CreatedByAgentID ,  ModifiedByAgentID ,  SpecifyUserID ,  CollectionTCID ,  DivisionID ,  InstitutionTCID ,  ParentOrganizationID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->AgentID!= NULL ) {
              $statement->bind_param("issisississiisssssssssssiiiiiiiiii", $this->AgentID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Abbreviation , $this->AgentType , $this->DateOfBirth , $this->DateOfBirthConfidence , $this->DateOfBirthPrecision , $this->DateOfDeath , $this->DateOfDeathConfidence , $this->DateOfDeathPrecision , $this->DatesType , $this->Email , $this->FirstName , $this->GUID , $this->Initials , $this->Interests , $this->JobTitle , $this->LastName , $this->MiddleInitial , $this->Remarks , $this->Title , $this->URL , $this->InstitutionCCID , $this->CollectionCCID , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->SpecifyUserID , $this->CollectionTCID , $this->DivisionID , $this->InstitutionTCID , $this->ParentOrganizationID , $this->AgentID );
           } else { 
              $statement->bind_param("issisississiisssssssssssiiiiiiiii", $this->AgentID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Abbreviation , $this->AgentType , $this->DateOfBirth , $this->DateOfBirthConfidence , $this->DateOfBirthPrecision , $this->DateOfDeath , $this->DateOfDeathConfidence , $this->DateOfDeathPrecision , $this->DatesType , $this->Email , $this->FirstName , $this->GUID , $this->Initials , $this->Interests , $this->JobTitle , $this->LastName , $this->MiddleInitial , $this->Remarks , $this->Title , $this->URL , $this->InstitutionCCID , $this->CollectionCCID , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->SpecifyUserID , $this->CollectionTCID , $this->DivisionID , $this->InstitutionTCID , $this->ParentOrganizationID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->AgentID != NULL) {
           $sql = 'SELECT AgentID, TimestampCreated, TimestampModified, Version, Abbreviation, AgentType, DateOfBirth, DateOfBirthConfidence, DateOfBirthPrecision, DateOfDeath, DateOfDeathConfidence, DateOfDeathPrecision, DatesType, Email, FirstName, GUID, Initials, Interests, JobTitle, LastName, MiddleInitial, Remarks, Title, URL, InstitutionCCID, CollectionCCID, CreatedByAgentID, ModifiedByAgentID, SpecifyUserID, CollectionTCID, DivisionID, InstitutionTCID, ParentOrganizationID FROM agent WHERE AgentID = "'.$this->AgentID.'"  ' ;

           $preparedsql = 'SELECT  FROM agent WHERE  and AgentID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issisississiisssssssssssiiiiiiiii", $this->AgentID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Abbreviation, $this->AgentType, $this->DateOfBirth, $this->DateOfBirthConfidence, $this->DateOfBirthPrecision, $this->DateOfDeath, $this->DateOfDeathConfidence, $this->DateOfDeathPrecision, $this->DatesType, $this->Email, $this->FirstName, $this->GUID, $this->Initials, $this->Interests, $this->JobTitle, $this->LastName, $this->MiddleInitial, $this->Remarks, $this->Title, $this->URL, $this->InstitutionCCID, $this->CollectionCCID, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->SpecifyUserID, $this->CollectionTCID, $this->DivisionID, $this->InstitutionTCID, $this->ParentOrganizationID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM agent WHERE  and AgentID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issisississiisssssssssssiiiiiiiii", $this->AgentID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Abbreviation, $this->AgentType, $this->DateOfBirth, $this->DateOfBirthConfidence, $this->DateOfBirthPrecision, $this->DateOfDeath, $this->DateOfDeathConfidence, $this->DateOfDeathPrecision, $this->DatesType, $this->Email, $this->FirstName, $this->GUID, $this->Initials, $this->Interests, $this->JobTitle, $this->LastName, $this->MiddleInitial, $this->Remarks, $this->Title, $this->URL, $this->InstitutionCCID, $this->CollectionCCID, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->SpecifyUserID, $this->CollectionTCID, $this->DivisionID, $this->InstitutionTCID, $this->ParentOrganizationID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->AgentID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM agent';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT AgentID FROM agent $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_agent();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromaccession() { 
      // ForeignKey in: accession
      $t = new accession();
  } 
  public function loadLinkedFromaccessionagent() { 
      // ForeignKey in: accessionagent
      $t = new accessionagent();
  } 
  public function loadLinkedFromaccessionattachment() { 
      // ForeignKey in: accessionattachment
      $t = new accessionattachment();
  } 
  public function loadLinkedFromaccessionauthorization() { 
      // ForeignKey in: accessionauthorization
      $t = new accessionauthorization();
  } 
  public function loadLinkedFromaccessionpreparation() { 
      // ForeignKey in: accessionpreparation
      $t = new accessionpreparation();
  } 
  public function loadLinkedFromaddress() { 
      // ForeignKey in: address
      $t = new address();
  } 
  public function loadLinkedFromaddressofrecord() { 
      // ForeignKey in: addressofrecord
      $t = new addressofrecord();
  } 
  public function loadLinkedFromagent_discipline() { 
      // ForeignKey in: agent_discipline
      $t = new agent_discipline();
  } 
  public function loadLinkedFromagentattachment() { 
      // ForeignKey in: agentattachment
      $t = new agentattachment();
  } 
  public function loadLinkedFromagentcitation() { 
      // ForeignKey in: agentcitation
      $t = new agentcitation();
  } 
  public function loadLinkedFromagentgeography() { 
      // ForeignKey in: agentgeography
      $t = new agentgeography();
  } 
  public function loadLinkedFromagentspecialty() { 
      // ForeignKey in: agentspecialty
      $t = new agentspecialty();
  } 
  public function loadLinkedFromagentvariant() { 
      // ForeignKey in: agentvariant
      $t = new agentvariant();
  } 
  public function loadLinkedFromappraisal() { 
      // ForeignKey in: appraisal
      $t = new appraisal();
  } 
  public function loadLinkedFromattachment() { 
      // ForeignKey in: attachment
      $t = new attachment();
  } 
  public function loadLinkedFromattachmentmetadata() { 
      // ForeignKey in: attachmentmetadata
      $t = new attachmentmetadata();
  } 
  public function loadLinkedFromattachmenttag() { 
      // ForeignKey in: attachmenttag
      $t = new attachmenttag();
  } 
  public function loadLinkedFromattributedef() { 
      // ForeignKey in: attributedef
      $t = new attributedef();
  } 
  public function loadLinkedFromauthor() { 
      // ForeignKey in: author
      $t = new author();
  } 
  public function loadLinkedFromautonumberingscheme() { 
      // ForeignKey in: autonumberingscheme
      $t = new autonumberingscheme();
  } 
  public function loadLinkedFromborrow() { 
      // ForeignKey in: borrow
      $t = new borrow();
  } 
  public function loadLinkedFromborrowagent() { 
      // ForeignKey in: borrowagent
      $t = new borrowagent();
  } 
  public function loadLinkedFromborrowmaterial() { 
      // ForeignKey in: borrowmaterial
      $t = new borrowmaterial();
  } 
  public function loadLinkedFromborrowreturnmaterial() { 
      // ForeignKey in: borrowreturnmaterial
      $t = new borrowreturnmaterial();
  } 
  public function loadLinkedFromcollectingevent() { 
      // ForeignKey in: collectingevent
      $t = new collectingevent();
  } 
  public function loadLinkedFromcollectingeventattachment() { 
      // ForeignKey in: collectingeventattachment
      $t = new collectingeventattachment();
  } 
  public function loadLinkedFromcollectingeventattr() { 
      // ForeignKey in: collectingeventattr
      $t = new collectingeventattr();
  } 
  public function loadLinkedFromcollectingeventattribute() { 
      // ForeignKey in: collectingeventattribute
      $t = new collectingeventattribute();
  } 
  public function loadLinkedFromcollectingtrip() { 
      // ForeignKey in: collectingtrip
      $t = new collectingtrip();
  } 
  public function loadLinkedFromcollection() { 
      // ForeignKey in: collection
      $t = new collection();
  } 
  public function loadLinkedFromcollectionobject() { 
      // ForeignKey in: collectionobject
      $t = new collectionobject();
  } 
  public function loadLinkedFromcollectionobjectattachment() { 
      // ForeignKey in: collectionobjectattachment
      $t = new collectionobjectattachment();
  } 
  public function loadLinkedFromcollectionobjectattr() { 
      // ForeignKey in: collectionobjectattr
      $t = new collectionobjectattr();
  } 
  public function loadLinkedFromcollectionobjectattribute() { 
      // ForeignKey in: collectionobjectattribute
      $t = new collectionobjectattribute();
  } 
  public function loadLinkedFromcollectionrelationship() { 
      // ForeignKey in: collectionrelationship
      $t = new collectionrelationship();
  } 
  public function loadLinkedFromcollectionreltype() { 
      // ForeignKey in: collectionreltype
      $t = new collectionreltype();
  } 
  public function loadLinkedFromcollector() { 
      // ForeignKey in: collector
      $t = new collector();
  } 
  public function loadLinkedFromcommonnametx() { 
      // ForeignKey in: commonnametx
      $t = new commonnametx();
  } 
  public function loadLinkedFromcommonnametxcitation() { 
      // ForeignKey in: commonnametxcitation
      $t = new commonnametxcitation();
  } 
  public function loadLinkedFromconservdescription() { 
      // ForeignKey in: conservdescription
      $t = new conservdescription();
  } 
  public function loadLinkedFromconservdescriptionattachment() { 
      // ForeignKey in: conservdescriptionattachment
      $t = new conservdescriptionattachment();
  } 
  public function loadLinkedFromconservevent() { 
      // ForeignKey in: conservevent
      $t = new conservevent();
  } 
  public function loadLinkedFromconserveventattachment() { 
      // ForeignKey in: conserveventattachment
      $t = new conserveventattachment();
  } 
  public function loadLinkedFromcontainer() { 
      // ForeignKey in: container
      $t = new container();
  } 
  public function loadLinkedFromdatatype() { 
      // ForeignKey in: datatype
      $t = new datatype();
  } 
  public function loadLinkedFromdeaccession() { 
      // ForeignKey in: deaccession
      $t = new deaccession();
  } 
  public function loadLinkedFromdeaccessionagent() { 
      // ForeignKey in: deaccessionagent
      $t = new deaccessionagent();
  } 
  public function loadLinkedFromdeaccessionpreparation() { 
      // ForeignKey in: deaccessionpreparation
      $t = new deaccessionpreparation();
  } 
  public function loadLinkedFromdetermination() { 
      // ForeignKey in: determination
      $t = new determination();
  } 
  public function loadLinkedFromdeterminationcitation() { 
      // ForeignKey in: determinationcitation
      $t = new determinationcitation();
  } 
  public function loadLinkedFromdiscipline() { 
      // ForeignKey in: discipline
      $t = new discipline();
  } 
  public function loadLinkedFromdivision() { 
      // ForeignKey in: division
      $t = new division();
  } 
  public function loadLinkedFromdnasequence() { 
      // ForeignKey in: dnasequence
      $t = new dnasequence();
  } 
  public function loadLinkedFromdnasequenceattachment() { 
      // ForeignKey in: dnasequenceattachment
      $t = new dnasequenceattachment();
  } 
  public function loadLinkedFromdnasequencingrun() { 
      // ForeignKey in: dnasequencingrun
      $t = new dnasequencingrun();
  } 
  public function loadLinkedFromdnasequencingruncitation() { 
      // ForeignKey in: dnasequencingruncitation
      $t = new dnasequencingruncitation();
  } 
  public function loadLinkedFromexchangein() { 
      // ForeignKey in: exchangein
      $t = new exchangein();
  } 
  public function loadLinkedFromexchangeout() { 
      // ForeignKey in: exchangeout
      $t = new exchangeout();
  } 
  public function loadLinkedFromexchangeoutpreparation() { 
      // ForeignKey in: exchangeoutpreparation
      $t = new exchangeoutpreparation();
  } 
  public function loadLinkedFromfieldnotebook() { 
      // ForeignKey in: fieldnotebook
      $t = new fieldnotebook();
  } 
  public function loadLinkedFromfieldnotebookattachment() { 
      // ForeignKey in: fieldnotebookattachment
      $t = new fieldnotebookattachment();
  } 
  public function loadLinkedFromfieldnotebookpage() { 
      // ForeignKey in: fieldnotebookpage
      $t = new fieldnotebookpage();
  } 
  public function loadLinkedFromfieldnotebookpageattachment() { 
      // ForeignKey in: fieldnotebookpageattachment
      $t = new fieldnotebookpageattachment();
  } 
  public function loadLinkedFromfieldnotebookpageset() { 
      // ForeignKey in: fieldnotebookpageset
      $t = new fieldnotebookpageset();
  } 
  public function loadLinkedFromfieldnotebookpagesetattachment() { 
      // ForeignKey in: fieldnotebookpagesetattachment
      $t = new fieldnotebookpagesetattachment();
  } 
  public function loadLinkedFromfragment() { 
      // ForeignKey in: fragment
      $t = new fragment();
  } 
  public function loadLinkedFromfragmentattachment() { 
      // ForeignKey in: fragmentattachment
      $t = new fragmentattachment();
  } 
  public function loadLinkedFromfragmentcitation() { 
      // ForeignKey in: fragmentcitation
      $t = new fragmentcitation();
  } 
  public function loadLinkedFromgeocoorddetail() { 
      // ForeignKey in: geocoorddetail
      $t = new geocoorddetail();
  } 
  public function loadLinkedFromgeography() { 
      // ForeignKey in: geography
      $t = new geography();
  } 
  public function loadLinkedFromgeographytreedef() { 
      // ForeignKey in: geographytreedef
      $t = new geographytreedef();
  } 
  public function loadLinkedFromgeographytreedefitem() { 
      // ForeignKey in: geographytreedefitem
      $t = new geographytreedefitem();
  } 
  public function loadLinkedFromgeologictimeperiod() { 
      // ForeignKey in: geologictimeperiod
      $t = new geologictimeperiod();
  } 
  public function loadLinkedFromgeologictimeperiodtreedef() { 
      // ForeignKey in: geologictimeperiodtreedef
      $t = new geologictimeperiodtreedef();
  } 
  public function loadLinkedFromgeologictimeperiodtreedefitem() { 
      // ForeignKey in: geologictimeperiodtreedefitem
      $t = new geologictimeperiodtreedefitem();
  } 
  public function loadLinkedFromgift() { 
      // ForeignKey in: gift
      $t = new gift();
  } 
  public function loadLinkedFromgiftagent() { 
      // ForeignKey in: giftagent
      $t = new giftagent();
  } 
  public function loadLinkedFromgiftpreparation() { 
      // ForeignKey in: giftpreparation
      $t = new giftpreparation();
  } 
  public function loadLinkedFromgroupperson() { 
      // ForeignKey in: groupperson
      $t = new groupperson();
  } 
  public function loadLinkedFrominforequest() { 
      // ForeignKey in: inforequest
      $t = new inforequest();
  } 
  public function loadLinkedFrominstitution() { 
      // ForeignKey in: institution
      $t = new institution();
  } 
  public function loadLinkedFromjournal() { 
      // ForeignKey in: journal
      $t = new journal();
  } 
  public function loadLinkedFromlatlonpolygon() { 
      // ForeignKey in: latlonpolygon
      $t = new latlonpolygon();
  } 
  public function loadLinkedFromlithostrat() { 
      // ForeignKey in: lithostrat
      $t = new lithostrat();
  } 
  public function loadLinkedFromlithostrattreedef() { 
      // ForeignKey in: lithostrattreedef
      $t = new lithostrattreedef();
  } 
  public function loadLinkedFromlithostrattreedefitem() { 
      // ForeignKey in: lithostrattreedefitem
      $t = new lithostrattreedefitem();
  } 
  public function loadLinkedFromloan() { 
      // ForeignKey in: loan
      $t = new loan();
  } 
  public function loadLinkedFromloanagent() { 
      // ForeignKey in: loanagent
      $t = new loanagent();
  } 
  public function loadLinkedFromloanattachment() { 
      // ForeignKey in: loanattachment
      $t = new loanattachment();
  } 
  public function loadLinkedFromloanpreparation() { 
      // ForeignKey in: loanpreparation
      $t = new loanpreparation();
  } 
  public function loadLinkedFromloanreturnpreparation() { 
      // ForeignKey in: loanreturnpreparation
      $t = new loanreturnpreparation();
  } 
  public function loadLinkedFromlocality() { 
      // ForeignKey in: locality
      $t = new locality();
  } 
  public function loadLinkedFromlocalityattachment() { 
      // ForeignKey in: localityattachment
      $t = new localityattachment();
  } 
  public function loadLinkedFromlocalitycitation() { 
      // ForeignKey in: localitycitation
      $t = new localitycitation();
  } 
  public function loadLinkedFromlocalitydetail() { 
      // ForeignKey in: localitydetail
      $t = new localitydetail();
  } 
  public function loadLinkedFromlocalitynamealias() { 
      // ForeignKey in: localitynamealias
      $t = new localitynamealias();
  } 
  public function loadLinkedFromotheridentifier() { 
      // ForeignKey in: otheridentifier
      $t = new otheridentifier();
  } 
  public function loadLinkedFrompaleocontext() { 
      // ForeignKey in: paleocontext
      $t = new paleocontext();
  } 
  public function loadLinkedFrompermit() { 
      // ForeignKey in: permit
      $t = new permit();
  } 
  public function loadLinkedFrompermitattachment() { 
      // ForeignKey in: permitattachment
      $t = new permitattachment();
  } 
  public function loadLinkedFrompicklist() { 
      // ForeignKey in: picklist
      $t = new picklist();
  } 
  public function loadLinkedFrompicklistitem() { 
      // ForeignKey in: picklistitem
      $t = new picklistitem();
  } 
  public function loadLinkedFrompreparation() { 
      // ForeignKey in: preparation
      $t = new preparation();
  } 
  public function loadLinkedFrompreparationattachment() { 
      // ForeignKey in: preparationattachment
      $t = new preparationattachment();
  } 
  public function loadLinkedFrompreparationattr() { 
      // ForeignKey in: preparationattr
      $t = new preparationattr();
  } 
  public function loadLinkedFrompreparationattribute() { 
      // ForeignKey in: preparationattribute
      $t = new preparationattribute();
  } 
  public function loadLinkedFrompreptype() { 
      // ForeignKey in: preptype
      $t = new preptype();
  } 
  public function loadLinkedFromproject() { 
      // ForeignKey in: project
      $t = new project();
  } 
  public function loadLinkedFromrecordset() { 
      // ForeignKey in: recordset
      $t = new recordset();
  } 
  public function loadLinkedFromreferencework() { 
      // ForeignKey in: referencework
      $t = new referencework();
  } 
  public function loadLinkedFromreferenceworkidentifier() { 
      // ForeignKey in: referenceworkidentifier
      $t = new referenceworkidentifier();
  } 
  public function loadLinkedFromreferenceworkvariant() { 
      // ForeignKey in: referenceworkvariant
      $t = new referenceworkvariant();
  } 
  public function loadLinkedFromrepositoryagreement() { 
      // ForeignKey in: repositoryagreement
      $t = new repositoryagreement();
  } 
  public function loadLinkedFromrepositoryagreementattachment() { 
      // ForeignKey in: repositoryagreementattachment
      $t = new repositoryagreementattachment();
  } 
  public function loadLinkedFromshipment() { 
      // ForeignKey in: shipment
      $t = new shipment();
  } 
  public function loadLinkedFromspappresource() { 
      // ForeignKey in: spappresource
      $t = new spappresource();
  } 
  public function loadLinkedFromspappresourcedata() { 
      // ForeignKey in: spappresourcedata
      $t = new spappresourcedata();
  } 
  public function loadLinkedFromspappresourcedir() { 
      // ForeignKey in: spappresourcedir
      $t = new spappresourcedir();
  } 
  public function loadLinkedFromspauditlog() { 
      // ForeignKey in: spauditlog
      $t = new spauditlog();
  } 
  public function loadLinkedFromspauditlogfield() { 
      // ForeignKey in: spauditlogfield
      $t = new spauditlogfield();
  } 
  public function loadLinkedFromspecifyuser() { 
      // ForeignKey in: specifyuser
      $t = new specifyuser();
  } 
  public function loadLinkedFromspexportschema() { 
      // ForeignKey in: spexportschema
      $t = new spexportschema();
  } 
  public function loadLinkedFromspexportschemaitem() { 
      // ForeignKey in: spexportschemaitem
      $t = new spexportschemaitem();
  } 
  public function loadLinkedFromspexportschemaitemmapping() { 
      // ForeignKey in: spexportschemaitemmapping
      $t = new spexportschemaitemmapping();
  } 
  public function loadLinkedFromspexportschemamapping() { 
      // ForeignKey in: spexportschemamapping
      $t = new spexportschemamapping();
  } 
  public function loadLinkedFromspfieldvaluedefault() { 
      // ForeignKey in: spfieldvaluedefault
      $t = new spfieldvaluedefault();
  } 
  public function loadLinkedFromsplocalecontainer() { 
      // ForeignKey in: splocalecontainer
      $t = new splocalecontainer();
  } 
  public function loadLinkedFromsplocalecontaineritem() { 
      // ForeignKey in: splocalecontaineritem
      $t = new splocalecontaineritem();
  } 
  public function loadLinkedFromsplocaleitemstr() { 
      // ForeignKey in: splocaleitemstr
      $t = new splocaleitemstr();
  } 
  public function loadLinkedFromspprincipal() { 
      // ForeignKey in: spprincipal
      $t = new spprincipal();
  } 
  public function loadLinkedFromspquery() { 
      // ForeignKey in: spquery
      $t = new spquery();
  } 
  public function loadLinkedFromspqueryfield() { 
      // ForeignKey in: spqueryfield
      $t = new spqueryfield();
  } 
  public function loadLinkedFromspreport() { 
      // ForeignKey in: spreport
      $t = new spreport();
  } 
  public function loadLinkedFromsptasksemaphore() { 
      // ForeignKey in: sptasksemaphore
      $t = new sptasksemaphore();
  } 
  public function loadLinkedFromspversion() { 
      // ForeignKey in: spversion
      $t = new spversion();
  } 
  public function loadLinkedFromspviewsetobj() { 
      // ForeignKey in: spviewsetobj
      $t = new spviewsetobj();
  } 
  public function loadLinkedFromspvisualquery() { 
      // ForeignKey in: spvisualquery
      $t = new spvisualquery();
  } 
  public function loadLinkedFromstorage() { 
      // ForeignKey in: storage
      $t = new storage();
  } 
  public function loadLinkedFromstoragetreedef() { 
      // ForeignKey in: storagetreedef
      $t = new storagetreedef();
  } 
  public function loadLinkedFromstoragetreedefitem() { 
      // ForeignKey in: storagetreedefitem
      $t = new storagetreedefitem();
  } 
  public function loadLinkedFromtaxon() { 
      // ForeignKey in: taxon
      $t = new taxon();
  } 
  public function loadLinkedFromtaxonattachment() { 
      // ForeignKey in: taxonattachment
      $t = new taxonattachment();
  } 
  public function loadLinkedFromtaxoncitation() { 
      // ForeignKey in: taxoncitation
      $t = new taxoncitation();
  } 
  public function loadLinkedFromtaxontreedef() { 
      // ForeignKey in: taxontreedef
      $t = new taxontreedef();
  } 
  public function loadLinkedFromtaxontreedefitem() { 
      // ForeignKey in: taxontreedefitem
      $t = new taxontreedefitem();
  } 
  public function loadLinkedFromtreatmentevent() { 
      // ForeignKey in: treatmentevent
      $t = new treatmentevent();
  } 
  public function loadLinkedFromworkbench() { 
      // ForeignKey in: workbench
      $t = new workbench();
  } 
  public function loadLinkedFromworkbenchtemplate() { 
      // ForeignKey in: workbenchtemplate
      $t = new workbenchtemplate();
  } 
  public function loadLinkedFromworkbenchtemplatemappingitem() { 
      // ForeignKey in: workbenchtemplatemappingitem
      $t = new workbenchtemplatemappingitem();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: InstitutionCCID
      $t = new institution();
      $t->load(getInstitutionCCID());
      $returnvalue[InstitutionCCID] = $t;
       // fk: CollectionCCID
      $t = new collection();
      $t->load(getCollectionCCID());
      $returnvalue[CollectionCCID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: SpecifyUserID
      $t = new specifyuser();
      $t->load(getSpecifyUserID());
      $returnvalue[SpecifyUserID] = $t;
       // fk: CollectionTCID
      $t = new collection();
      $t->load(getCollectionTCID());
      $returnvalue[CollectionTCID] = $t;
       // fk: DivisionID
      $t = new division();
      $t->load(getDivisionID());
      $returnvalue[DivisionID] = $t;
       // fk: InstitutionTCID
      $t = new institution();
      $t->load(getInstitutionTCID());
      $returnvalue[InstitutionTCID] = $t;
       // fk: ParentOrganizationID
      $t = new agent();
      $t->load(getParentOrganizationID());
      $returnvalue[ParentOrganizationID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT AgentID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(Abbreviation,'') || ' ' || IFNULL(AgentType,'') || ' ' || IFNULL(DateOfBirth,'') || ' ' || IFNULL(DateOfBirthConfidence,'') || ' ' || IFNULL(DateOfBirthPrecision,'') || ' ' || IFNULL(DateOfDeath,'') || ' ' || IFNULL(DateOfDeathConfidence,'') || ' ' || IFNULL(DateOfDeathPrecision,'') || ' ' || IFNULL(DatesType,'') || ' ' || IFNULL(Email,'') || ' ' || IFNULL(FirstName,'') || ' ' || IFNULL(GUID,'') || ' ' || IFNULL(Initials,'') || ' ' || IFNULL(Interests,'') || ' ' || IFNULL(JobTitle,'') || ' ' || IFNULL(LastName,'') || ' ' || IFNULL(MiddleInitial,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(Title,'') || ' ' || IFNULL(URL,'') || ' ' || IFNULL(InstitutionCCID,'') || ' ' || IFNULL(CollectionCCID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(SpecifyUserID,'') || ' ' || IFNULL(CollectionTCID,'') || ' ' || IFNULL(DivisionID,'') || ' ' || IFNULL(InstitutionTCID,'') || ' ' || IFNULL(ParentOrganizationID,'')) FROM agent order by Abbreviation, AgentType, FirstName, GUID, LastName, InstitutionCCID, CollectionCCID, CreatedByAgentID, ModifiedByAgentID, SpecifyUserID, CollectionTCID, DivisionID, InstitutionTCID, ParentOrganizationID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM agent order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByAbbreviation($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE Abbreviation $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE Abbreviation $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAgentType($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE AgentType $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE AgentType $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByFirstName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE FirstName $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE FirstName $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGUID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE GUID $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE GUID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByLastName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE LastName $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE LastName $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByInstitutionCCID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE InstitutionCCID $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE InstitutionCCID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCollectionCCID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE CollectionCCID $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE CollectionCCID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayBySpecifyUserID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE SpecifyUserID $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE SpecifyUserID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCollectionTCID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE CollectionTCID $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE CollectionTCID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDivisionID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE DivisionID $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE DivisionID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByInstitutionTCID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE InstitutionTCID $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE InstitutionTCID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByParentOrganizationID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AgentID FROM agent WHERE ParentOrganizationID $operator '$searchTerm'";
        $preparedsql = "SELECT AgentID FROM agent WHERE ParentOrganizationID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_agent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctAbbreviation($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Abbreviation ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Abbreviation FROM agent group by Abbreviation order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Abbreviation=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAgentType($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AgentType ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AgentType FROM agent group by AgentType order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AgentType=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctFirstName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' FirstName ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, FirstName FROM agent group by FirstName order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&FirstName=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGUID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GUID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GUID FROM agent group by GUID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GUID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctLastName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' LastName ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, LastName FROM agent group by LastName order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&LastName=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctInstitutionCCID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' InstitutionCCID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, InstitutionCCID FROM agent group by InstitutionCCID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&InstitutionCCID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCollectionCCID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionCCID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectionCCID FROM agent group by CollectionCCID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectionCCID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM agent group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM agent group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctSpecifyUserID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' SpecifyUserID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, SpecifyUserID FROM agent group by SpecifyUserID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&SpecifyUserID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCollectionTCID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionTCID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectionTCID FROM agent group by CollectionTCID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectionTCID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDivisionID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DivisionID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DivisionID FROM agent group by DivisionID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DivisionID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctInstitutionTCID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' InstitutionTCID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, InstitutionTCID FROM agent group by InstitutionTCID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&InstitutionTCID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctParentOrganizationID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ParentOrganizationID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ParentOrganizationID FROM agent group by ParentOrganizationID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ParentOrganizationID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'Abbreviation':
             $returnvalue = $this->selectDistinctAbbreviation($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AgentType':
             $returnvalue = $this->selectDistinctAgentType($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'FirstName':
             $returnvalue = $this->selectDistinctFirstName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GUID':
             $returnvalue = $this->selectDistinctGUID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'LastName':
             $returnvalue = $this->selectDistinctLastName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'InstitutionCCID':
             $returnvalue = $this->selectDistinctInstitutionCCID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CollectionCCID':
             $returnvalue = $this->selectDistinctCollectionCCID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'SpecifyUserID':
             $returnvalue = $this->selectDistinctSpecifyUserID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CollectionTCID':
             $returnvalue = $this->selectDistinctCollectionTCID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DivisionID':
             $returnvalue = $this->selectDistinctDivisionID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'InstitutionTCID':
             $returnvalue = $this->selectDistinctInstitutionTCID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ParentOrganizationID':
             $returnvalue = $this->selectDistinctParentOrganizationID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the agent.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_agentView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_agent <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_agent::AGENTID.": ".$model->getAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_agent::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_agent::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_agent::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_agent::ABBREVIATION.": ".$model->getAbbreviation()."</li>\n";
       $returnvalue .= "<li>".huh_agent::AGENTTYPE.": ".$model->getAgentType()."</li>\n";
       $returnvalue .= "<li>".huh_agent::DATEOFBIRTH.": ".$model->getDateOfBirth()."</li>\n";
       $returnvalue .= "<li>".huh_agent::DATEOFBIRTHCONFIDENCE.": ".$model->getDateOfBirthConfidence()."</li>\n";
       $returnvalue .= "<li>".huh_agent::DATEOFBIRTHPRECISION.": ".$model->getDateOfBirthPrecision()."</li>\n";
       $returnvalue .= "<li>".huh_agent::DATEOFDEATH.": ".$model->getDateOfDeath()."</li>\n";
       $returnvalue .= "<li>".huh_agent::DATEOFDEATHCONFIDENCE.": ".$model->getDateOfDeathConfidence()."</li>\n";
       $returnvalue .= "<li>".huh_agent::DATEOFDEATHPRECISION.": ".$model->getDateOfDeathPrecision()."</li>\n";
       $returnvalue .= "<li>".huh_agent::DATESTYPE.": ".$model->getDatesType()."</li>\n";
       $returnvalue .= "<li>".huh_agent::EMAIL.": ".$model->getEmail()."</li>\n";
       $returnvalue .= "<li>".huh_agent::FIRSTNAME.": ".$model->getFirstName()."</li>\n";
       $returnvalue .= "<li>".huh_agent::GUID.": ".$model->getGUID()."</li>\n";
       $returnvalue .= "<li>".huh_agent::INITIALS.": ".$model->getInitials()."</li>\n";
       $returnvalue .= "<li>".huh_agent::INTERESTS.": ".$model->getInterests()."</li>\n";
       $returnvalue .= "<li>".huh_agent::JOBTITLE.": ".$model->getJobTitle()."</li>\n";
       $returnvalue .= "<li>".huh_agent::LASTNAME.": ".$model->getLastName()."</li>\n";
       $returnvalue .= "<li>".huh_agent::MIDDLEINITIAL.": ".$model->getMiddleInitial()."</li>\n";
       $returnvalue .= "<li>".huh_agent::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_agent::TITLE.": ".$model->getTitle()."</li>\n";
       $returnvalue .= "<li>".huh_agent::URL.": ".$model->getURL()."</li>\n";
       $returnvalue .= "<li>".huh_agent::INSTITUTIONCCID.": ".$model->getInstitutionCCID()."</li>\n";
       $returnvalue .= "<li>".huh_agent::COLLECTIONCCID.": ".$model->getCollectionCCID()."</li>\n";
       $returnvalue .= "<li>".huh_agent::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_agent::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_agent::SPECIFYUSERID.": ".$model->getSpecifyUserID()."</li>\n";
       $returnvalue .= "<li>".huh_agent::COLLECTIONTCID.": ".$model->getCollectionTCID()."</li>\n";
       $returnvalue .= "<li>".huh_agent::DIVISIONID.": ".$model->getDivisionID()."</li>\n";
       $returnvalue .= "<li>".huh_agent::INSTITUTIONTCID.": ".$model->getInstitutionTCID()."</li>\n";
       $returnvalue .= "<li>".huh_agent::PARENTORGANIZATIONID.": ".$model->getParentOrganizationID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>institution</li>";
           $t_institution = new huh_institution();
           $t_institutionView = new huh_institutionView();
           $t_institutionView->setModel($t_institution);
           if ($model->getInstitutionCCID() != '') { 
               $t_institution->load($model->getInstitutionCCID());
               $returnvalue .= $t_institutionView->getDetailsView(false);
           }
           $returnvalue .= "<li>collection</li>";
           $t_collection = new huh_collection();
           $t_collectionView = new huh_collectionView();
           $t_collectionView->setModel($t_collection);
           if ($model->getCollectionCCID() != '') { 
               $t_collection->load($model->getCollectionCCID());
               $returnvalue .= $t_collectionView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>specifyuser</li>";
           $t_specifyuser = new huh_specifyuser();
           $t_specifyuserView = new huh_specifyuserView();
           $t_specifyuserView->setModel($t_specifyuser);
           if ($model->getSpecifyUserID() != '') { 
               $t_specifyuser->load($model->getSpecifyUserID());
               $returnvalue .= $t_specifyuserView->getDetailsView(false);
           }
           $returnvalue .= "<li>collection</li>";
           $t_collection = new huh_collection();
           $t_collectionView = new huh_collectionView();
           $t_collectionView->setModel($t_collection);
           if ($model->getCollectionTCID() != '') { 
               $t_collection->load($model->getCollectionTCID());
               $returnvalue .= $t_collectionView->getDetailsView(false);
           }
           $returnvalue .= "<li>division</li>";
           $t_division = new huh_division();
           $t_divisionView = new huh_divisionView();
           $t_divisionView->setModel($t_division);
           if ($model->getDivisionID() != '') { 
               $t_division->load($model->getDivisionID());
               $returnvalue .= $t_divisionView->getDetailsView(false);
           }
           $returnvalue .= "<li>institution</li>";
           $t_institution = new huh_institution();
           $t_institutionView = new huh_institutionView();
           $t_institutionView->setModel($t_institution);
           if ($model->getInstitutionTCID() != '') { 
               $t_institution->load($model->getInstitutionTCID());
               $returnvalue .= $t_institutionView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getParentOrganizationID() != '') { 
               $t_agent->load($model->getParentOrganizationID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_agent::AGENTID.': "'.$model->getAgentID().'",';
       $returnvalue .= '"'.huh_agent::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_agent::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_agent::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_agent::ABBREVIATION.': "'.$model->getAbbreviation().'",';
       $returnvalue .= '"'.huh_agent::AGENTTYPE.': "'.$model->getAgentType().'",';
       $returnvalue .= '"'.huh_agent::DATEOFBIRTH.': "'.$model->getDateOfBirth().'",';
       $returnvalue .= '"'.huh_agent::DATEOFBIRTHCONFIDENCE.': "'.$model->getDateOfBirthConfidence().'",';
       $returnvalue .= '"'.huh_agent::DATEOFBIRTHPRECISION.': "'.$model->getDateOfBirthPrecision().'",';
       $returnvalue .= '"'.huh_agent::DATEOFDEATH.': "'.$model->getDateOfDeath().'",';
       $returnvalue .= '"'.huh_agent::DATEOFDEATHCONFIDENCE.': "'.$model->getDateOfDeathConfidence().'",';
       $returnvalue .= '"'.huh_agent::DATEOFDEATHPRECISION.': "'.$model->getDateOfDeathPrecision().'",';
       $returnvalue .= '"'.huh_agent::DATESTYPE.': "'.$model->getDatesType().'",';
       $returnvalue .= '"'.huh_agent::EMAIL.': "'.$model->getEmail().'",';
       $returnvalue .= '"'.huh_agent::FIRSTNAME.': "'.$model->getFirstName().'",';
       $returnvalue .= '"'.huh_agent::GUID.': "'.$model->getGUID().'",';
       $returnvalue .= '"'.huh_agent::INITIALS.': "'.$model->getInitials().'",';
       $returnvalue .= '"'.huh_agent::INTERESTS.': "'.$model->getInterests().'",';
       $returnvalue .= '"'.huh_agent::JOBTITLE.': "'.$model->getJobTitle().'",';
       $returnvalue .= '"'.huh_agent::LASTNAME.': "'.$model->getLastName().'",';
       $returnvalue .= '"'.huh_agent::MIDDLEINITIAL.': "'.$model->getMiddleInitial().'",';
       $returnvalue .= '"'.huh_agent::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_agent::TITLE.': "'.$model->getTitle().'",';
       $returnvalue .= '"'.huh_agent::URL.': "'.$model->getURL().'",';
       $returnvalue .= '"'.huh_agent::INSTITUTIONCCID.': "'.$model->getInstitutionCCID().'",';
       $returnvalue .= '"'.huh_agent::COLLECTIONCCID.': "'.$model->getCollectionCCID().'",';
       $returnvalue .= '"'.huh_agent::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_agent::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_agent::SPECIFYUSERID.': "'.$model->getSpecifyUserID().'",';
       $returnvalue .= '"'.huh_agent::COLLECTIONTCID.': "'.$model->getCollectionTCID().'",';
       $returnvalue .= '"'.huh_agent::DIVISIONID.': "'.$model->getDivisionID().'",';
       $returnvalue .= '"'.huh_agent::INSTITUTIONTCID.': "'.$model->getInstitutionTCID().'",';
       $returnvalue .= '"'.huh_agent::PARENTORGANIZATIONID.': "'.$model->getParentOrganizationID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getAbbreviation()."</td>\n";
       $returnvalue .= "<td>".$model->getAgentType()."</td>\n";
       $returnvalue .= "<td>".$model->getDateOfBirth()."</td>\n";
       $returnvalue .= "<td>".$model->getDateOfBirthConfidence()."</td>\n";
       $returnvalue .= "<td>".$model->getDateOfBirthPrecision()."</td>\n";
       $returnvalue .= "<td>".$model->getDateOfDeath()."</td>\n";
       $returnvalue .= "<td>".$model->getDateOfDeathConfidence()."</td>\n";
       $returnvalue .= "<td>".$model->getDateOfDeathPrecision()."</td>\n";
       $returnvalue .= "<td>".$model->getDatesType()."</td>\n";
       $returnvalue .= "<td>".$model->getEmail()."</td>\n";
       $returnvalue .= "<td>".$model->getFirstName()."</td>\n";
       $returnvalue .= "<td>".$model->getGUID()."</td>\n";
       $returnvalue .= "<td>".$model->getInitials()."</td>\n";
       $returnvalue .= "<td>".$model->getInterests()."</td>\n";
       $returnvalue .= "<td>".$model->getJobTitle()."</td>\n";
       $returnvalue .= "<td>".$model->getLastName()."</td>\n";
       $returnvalue .= "<td>".$model->getMiddleInitial()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getTitle()."</td>\n";
       $returnvalue .= "<td>".$model->getURL()."</td>\n";
       $returnvalue .= "<td>".$model->getInstitutionCCID()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionCCID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getSpecifyUserID()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionTCID()."</td>\n";
       $returnvalue .= "<td>".$model->getDivisionID()."</td>\n";
       $returnvalue .= "<td>".$model->getInstitutionTCID()."</td>\n";
       $returnvalue .= "<td>".$model->getParentOrganizationID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_agent::AGENTID."</th>\n";
       $returnvalue .= "<th>".huh_agent::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_agent::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_agent::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_agent::ABBREVIATION."</th>\n";
       $returnvalue .= "<th>".huh_agent::AGENTTYPE."</th>\n";
       $returnvalue .= "<th>".huh_agent::DATEOFBIRTH."</th>\n";
       $returnvalue .= "<th>".huh_agent::DATEOFBIRTHCONFIDENCE."</th>\n";
       $returnvalue .= "<th>".huh_agent::DATEOFBIRTHPRECISION."</th>\n";
       $returnvalue .= "<th>".huh_agent::DATEOFDEATH."</th>\n";
       $returnvalue .= "<th>".huh_agent::DATEOFDEATHCONFIDENCE."</th>\n";
       $returnvalue .= "<th>".huh_agent::DATEOFDEATHPRECISION."</th>\n";
       $returnvalue .= "<th>".huh_agent::DATESTYPE."</th>\n";
       $returnvalue .= "<th>".huh_agent::EMAIL."</th>\n";
       $returnvalue .= "<th>".huh_agent::FIRSTNAME."</th>\n";
       $returnvalue .= "<th>".huh_agent::GUID."</th>\n";
       $returnvalue .= "<th>".huh_agent::INITIALS."</th>\n";
       $returnvalue .= "<th>".huh_agent::INTERESTS."</th>\n";
       $returnvalue .= "<th>".huh_agent::JOBTITLE."</th>\n";
       $returnvalue .= "<th>".huh_agent::LASTNAME."</th>\n";
       $returnvalue .= "<th>".huh_agent::MIDDLEINITIAL."</th>\n";
       $returnvalue .= "<th>".huh_agent::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_agent::TITLE."</th>\n";
       $returnvalue .= "<th>".huh_agent::URL."</th>\n";
       $returnvalue .= "<th>".huh_agent::INSTITUTIONCCID."</th>\n";
       $returnvalue .= "<th>".huh_agent::COLLECTIONCCID."</th>\n";
       $returnvalue .= "<th>".huh_agent::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_agent::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_agent::SPECIFYUSERID."</th>\n";
       $returnvalue .= "<th>".huh_agent::COLLECTIONTCID."</th>\n";
       $returnvalue .= "<th>".huh_agent::DIVISIONID."</th>\n";
       $returnvalue .= "<th>".huh_agent::INSTITUTIONTCID."</th>\n";
       $returnvalue .= "<th>".huh_agent::PARENTORGANIZATIONID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_agent">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new AgentID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_agent::AGENTID.">AGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_agent::AGENTID." id=".huh_agent::AGENTID." value='".$model->getAgentID()."'  style=' width:".huh_agent::AGENTID_SIZE ."em;  '  maxlength='".huh_agent::AGENTID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_agent::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::TIMESTAMPCREATED." id=".huh_agent::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_agent::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_agent::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::TIMESTAMPMODIFIED." id=".huh_agent::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_agent::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_agent::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_agent::VERSION." id=".huh_agent::VERSION." value='".$model->getVersion()."'  style=' width:".huh_agent::VERSION_SIZE ."em;  '  maxlength='".huh_agent::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::ABBREVIATION.">ABBREVIATION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::ABBREVIATION." id=".huh_agent::ABBREVIATION." value='".$model->getAbbreviation()."'  style=' width:".huh_agent::ABBREVIATION_SIZE ."em;  '  maxlength='".huh_agent::ABBREVIATION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::AGENTTYPE.">AGENTTYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::AGENTTYPE." id=".huh_agent::AGENTTYPE." value='".$model->getAgentType()."'  style=' width:".huh_agent::AGENTTYPE_SIZE ."em;  '  maxlength='".huh_agent::AGENTTYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::DATEOFBIRTH.">DATEOFBIRTH</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::DATEOFBIRTH." id=".huh_agent::DATEOFBIRTH." value='".$model->getDateOfBirth()."'  style=' width:".huh_agent::DATEOFBIRTH_SIZE ."em;  '  maxlength='".huh_agent::DATEOFBIRTH_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::DATEOFBIRTHCONFIDENCE.">DATEOFBIRTHCONFIDENCE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::DATEOFBIRTHCONFIDENCE." id=".huh_agent::DATEOFBIRTHCONFIDENCE." value='".$model->getDateOfBirthConfidence()."'  style=' width:".huh_agent::DATEOFBIRTHCONFIDENCE_SIZE ."em;  '  maxlength='".huh_agent::DATEOFBIRTHCONFIDENCE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::DATEOFBIRTHPRECISION.">DATEOFBIRTHPRECISION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::DATEOFBIRTHPRECISION." id=".huh_agent::DATEOFBIRTHPRECISION." value='".$model->getDateOfBirthPrecision()."'  style=' width:".huh_agent::DATEOFBIRTHPRECISION_SIZE ."em;  '  maxlength='".huh_agent::DATEOFBIRTHPRECISION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::DATEOFDEATH.">DATEOFDEATH</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::DATEOFDEATH." id=".huh_agent::DATEOFDEATH." value='".$model->getDateOfDeath()."'  style=' width:".huh_agent::DATEOFDEATH_SIZE ."em;  '  maxlength='".huh_agent::DATEOFDEATH_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::DATEOFDEATHCONFIDENCE.">DATEOFDEATHCONFIDENCE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::DATEOFDEATHCONFIDENCE." id=".huh_agent::DATEOFDEATHCONFIDENCE." value='".$model->getDateOfDeathConfidence()."'  style=' width:".huh_agent::DATEOFDEATHCONFIDENCE_SIZE ."em;  '  maxlength='".huh_agent::DATEOFDEATHCONFIDENCE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::DATEOFDEATHPRECISION.">DATEOFDEATHPRECISION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::DATEOFDEATHPRECISION." id=".huh_agent::DATEOFDEATHPRECISION." value='".$model->getDateOfDeathPrecision()."'  style=' width:".huh_agent::DATEOFDEATHPRECISION_SIZE ."em;  '  maxlength='".huh_agent::DATEOFDEATHPRECISION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::DATESTYPE.">DATESTYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::DATESTYPE." id=".huh_agent::DATESTYPE." value='".$model->getDatesType()."'  style=' width:".huh_agent::DATESTYPE_SIZE ."em;  '  maxlength='".huh_agent::DATESTYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::EMAIL.">EMAIL</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::EMAIL." id=".huh_agent::EMAIL." value='".$model->getEmail()."'  style=' width:".huh_agent::EMAIL_SIZE ."em;  '  maxlength='".huh_agent::EMAIL_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::FIRSTNAME.">FIRSTNAME</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::FIRSTNAME." id=".huh_agent::FIRSTNAME." value='".$model->getFirstName()."'  style=' width:".huh_agent::FIRSTNAME_SIZE ."em;  '  maxlength='".huh_agent::FIRSTNAME_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::GUID.">GUID</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_agent::GUID." id=".huh_agent::GUID." >".$model->getGUID()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::INITIALS.">INITIALS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::INITIALS." id=".huh_agent::INITIALS." value='".$model->getInitials()."'  style=' width:".huh_agent::INITIALS_SIZE ."em;  '  maxlength='".huh_agent::INITIALS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::INTERESTS.">INTERESTS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_agent::INTERESTS." id=".huh_agent::INTERESTS." >".$model->getInterests()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::JOBTITLE.">JOBTITLE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::JOBTITLE." id=".huh_agent::JOBTITLE." value='".$model->getJobTitle()."'  style=' width:".huh_agent::JOBTITLE_SIZE ."em;  '  maxlength='".huh_agent::JOBTITLE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::LASTNAME.">LASTNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_agent::LASTNAME." id=".huh_agent::LASTNAME." >".$model->getLastName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::MIDDLEINITIAL.">MIDDLEINITIAL</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::MIDDLEINITIAL." id=".huh_agent::MIDDLEINITIAL." value='".$model->getMiddleInitial()."'  style=' width:".huh_agent::MIDDLEINITIAL_SIZE ."em;  '  maxlength='".huh_agent::MIDDLEINITIAL_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_agent::REMARKS." id=".huh_agent::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::TITLE.">TITLE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_agent::TITLE." id=".huh_agent::TITLE." value='".$model->getTitle()."'  style=' width:".huh_agent::TITLE_SIZE ."em;  '  maxlength='".huh_agent::TITLE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::URL.">URL</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_agent::URL." id=".huh_agent::URL." >".$model->getURL()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::INSTITUTIONCCID.">INSTITUTIONCCID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_agent::INSTITUTIONCCID." id=".huh_agent::INSTITUTIONCCID." value='".$model->getInstitutionCCID()."'  style=' width:".huh_agent::INSTITUTIONCCID_SIZE ."em;  '  maxlength='".huh_agent::INSTITUTIONCCID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::COLLECTIONCCID.">COLLECTIONCCID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_agent::COLLECTIONCCID." id=".huh_agent::COLLECTIONCCID." value='".$model->getCollectionCCID()."'  style=' width:".huh_agent::COLLECTIONCCID_SIZE ."em;  '  maxlength='".huh_agent::COLLECTIONCCID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_agent::CREATEDBYAGENTID." id=".huh_agent::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_agent::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_agent::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_agent::MODIFIEDBYAGENTID." id=".huh_agent::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_agent::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_agent::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::SPECIFYUSERID.">SPECIFYUSERID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_agent::SPECIFYUSERID." id=".huh_agent::SPECIFYUSERID." value='".$model->getSpecifyUserID()."'  style=' width:".huh_agent::SPECIFYUSERID_SIZE ."em;  '  maxlength='".huh_agent::SPECIFYUSERID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::COLLECTIONTCID.">COLLECTIONTCID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_agent::COLLECTIONTCID." id=".huh_agent::COLLECTIONTCID." value='".$model->getCollectionTCID()."'  style=' width:".huh_agent::COLLECTIONTCID_SIZE ."em;  '  maxlength='".huh_agent::COLLECTIONTCID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::DIVISIONID.">DIVISIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_agent::DIVISIONID." id=".huh_agent::DIVISIONID." value='".$model->getDivisionID()."'  style=' width:".huh_agent::DIVISIONID_SIZE ."em;  '  maxlength='".huh_agent::DIVISIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::INSTITUTIONTCID.">INSTITUTIONTCID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_agent::INSTITUTIONTCID." id=".huh_agent::INSTITUTIONTCID." value='".$model->getInstitutionTCID()."'  style=' width:".huh_agent::INSTITUTIONTCID_SIZE ."em;  '  maxlength='".huh_agent::INSTITUTIONTCID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_agent::PARENTORGANIZATIONID.">PARENTORGANIZATIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_agent::PARENTORGANIZATIONID." id=".huh_agent::PARENTORGANIZATIONID." value='".$model->getParentOrganizationID()."'  style=' width:".huh_agent::PARENTORGANIZATIONID_SIZE ."em;  '  maxlength='".huh_agent::PARENTORGANIZATIONID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_agent">';
       $returnvalue .= '<input type=hidden name=AgentID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_agent">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>AGENTID<input type=text name=".huh_agent::AGENTID." id=".huh_agent::AGENTID." value='".$model->getAgentID()."'  size='".huh_agent::AGENTID_SIZE ."'  maxlength='".huh_agent::AGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_agent::TIMESTAMPCREATED." id=".huh_agent::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_agent::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_agent::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_agent::TIMESTAMPMODIFIED." id=".huh_agent::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_agent::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_agent::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_agent::VERSION." id=".huh_agent::VERSION." value='".$model->getVersion()."'  size='".huh_agent::VERSION_SIZE ."'  maxlength='".huh_agent::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ABBREVIATION<input type=text name=".huh_agent::ABBREVIATION." id=".huh_agent::ABBREVIATION." value='".$model->getAbbreviation()."'  size='".huh_agent::ABBREVIATION_SIZE ."'  maxlength='".huh_agent::ABBREVIATION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>AGENTTYPE<input type=text name=".huh_agent::AGENTTYPE." id=".huh_agent::AGENTTYPE." value='".$model->getAgentType()."'  size='".huh_agent::AGENTTYPE_SIZE ."'  maxlength='".huh_agent::AGENTTYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATEOFBIRTH<input type=text name=".huh_agent::DATEOFBIRTH." id=".huh_agent::DATEOFBIRTH." value='".$model->getDateOfBirth()."'  size='".huh_agent::DATEOFBIRTH_SIZE ."'  maxlength='".huh_agent::DATEOFBIRTH_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATEOFBIRTHCONFIDENCE<input type=text name=".huh_agent::DATEOFBIRTHCONFIDENCE." id=".huh_agent::DATEOFBIRTHCONFIDENCE." value='".$model->getDateOfBirthConfidence()."'  size='".huh_agent::DATEOFBIRTHCONFIDENCE_SIZE ."'  maxlength='".huh_agent::DATEOFBIRTHCONFIDENCE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATEOFBIRTHPRECISION<input type=text name=".huh_agent::DATEOFBIRTHPRECISION." id=".huh_agent::DATEOFBIRTHPRECISION." value='".$model->getDateOfBirthPrecision()."'  size='".huh_agent::DATEOFBIRTHPRECISION_SIZE ."'  maxlength='".huh_agent::DATEOFBIRTHPRECISION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATEOFDEATH<input type=text name=".huh_agent::DATEOFDEATH." id=".huh_agent::DATEOFDEATH." value='".$model->getDateOfDeath()."'  size='".huh_agent::DATEOFDEATH_SIZE ."'  maxlength='".huh_agent::DATEOFDEATH_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATEOFDEATHCONFIDENCE<input type=text name=".huh_agent::DATEOFDEATHCONFIDENCE." id=".huh_agent::DATEOFDEATHCONFIDENCE." value='".$model->getDateOfDeathConfidence()."'  size='".huh_agent::DATEOFDEATHCONFIDENCE_SIZE ."'  maxlength='".huh_agent::DATEOFDEATHCONFIDENCE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATEOFDEATHPRECISION<input type=text name=".huh_agent::DATEOFDEATHPRECISION." id=".huh_agent::DATEOFDEATHPRECISION." value='".$model->getDateOfDeathPrecision()."'  size='".huh_agent::DATEOFDEATHPRECISION_SIZE ."'  maxlength='".huh_agent::DATEOFDEATHPRECISION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATESTYPE<input type=text name=".huh_agent::DATESTYPE." id=".huh_agent::DATESTYPE." value='".$model->getDatesType()."'  size='".huh_agent::DATESTYPE_SIZE ."'  maxlength='".huh_agent::DATESTYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>EMAIL<input type=text name=".huh_agent::EMAIL." id=".huh_agent::EMAIL." value='".$model->getEmail()."'  size='".huh_agent::EMAIL_SIZE ."'  maxlength='".huh_agent::EMAIL_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FIRSTNAME<input type=text name=".huh_agent::FIRSTNAME." id=".huh_agent::FIRSTNAME." value='".$model->getFirstName()."'  size='".huh_agent::FIRSTNAME_SIZE ."'  maxlength='".huh_agent::FIRSTNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GUID<input type=text name=".huh_agent::GUID." id=".huh_agent::GUID." value='".$model->getGUID()."'  size='51'  maxlength='".huh_agent::GUID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>INITIALS<input type=text name=".huh_agent::INITIALS." id=".huh_agent::INITIALS." value='".$model->getInitials()."'  size='".huh_agent::INITIALS_SIZE ."'  maxlength='".huh_agent::INITIALS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>INTERESTS<input type=text name=".huh_agent::INTERESTS." id=".huh_agent::INTERESTS." value='".$model->getInterests()."'  size='51'  maxlength='".huh_agent::INTERESTS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>JOBTITLE<input type=text name=".huh_agent::JOBTITLE." id=".huh_agent::JOBTITLE." value='".$model->getJobTitle()."'  size='".huh_agent::JOBTITLE_SIZE ."'  maxlength='".huh_agent::JOBTITLE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LASTNAME<input type=text name=".huh_agent::LASTNAME." id=".huh_agent::LASTNAME." value='".$model->getLastName()."'  size='51'  maxlength='".huh_agent::LASTNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MIDDLEINITIAL<input type=text name=".huh_agent::MIDDLEINITIAL." id=".huh_agent::MIDDLEINITIAL." value='".$model->getMiddleInitial()."'  size='".huh_agent::MIDDLEINITIAL_SIZE ."'  maxlength='".huh_agent::MIDDLEINITIAL_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_agent::REMARKS." id=".huh_agent::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_agent::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TITLE<input type=text name=".huh_agent::TITLE." id=".huh_agent::TITLE." value='".$model->getTitle()."'  size='".huh_agent::TITLE_SIZE ."'  maxlength='".huh_agent::TITLE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>URL<input type=text name=".huh_agent::URL." id=".huh_agent::URL." value='".$model->getURL()."'  size='51'  maxlength='".huh_agent::URL_SIZE ."' ></li>\n";
       $returnvalue .= "<li>INSTITUTIONCCID<input type=text name=".huh_agent::INSTITUTIONCCID." id=".huh_agent::INSTITUTIONCCID." value='".$model->getInstitutionCCID()."'  size='".huh_agent::INSTITUTIONCCID_SIZE ."'  maxlength='".huh_agent::INSTITUTIONCCID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONCCID<input type=text name=".huh_agent::COLLECTIONCCID." id=".huh_agent::COLLECTIONCCID." value='".$model->getCollectionCCID()."'  size='".huh_agent::COLLECTIONCCID_SIZE ."'  maxlength='".huh_agent::COLLECTIONCCID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_agent::CREATEDBYAGENTID." id=".huh_agent::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_agent::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_agent::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_agent::MODIFIEDBYAGENTID." id=".huh_agent::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_agent::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_agent::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SPECIFYUSERID<input type=text name=".huh_agent::SPECIFYUSERID." id=".huh_agent::SPECIFYUSERID." value='".$model->getSpecifyUserID()."'  size='".huh_agent::SPECIFYUSERID_SIZE ."'  maxlength='".huh_agent::SPECIFYUSERID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONTCID<input type=text name=".huh_agent::COLLECTIONTCID." id=".huh_agent::COLLECTIONTCID." value='".$model->getCollectionTCID()."'  size='".huh_agent::COLLECTIONTCID_SIZE ."'  maxlength='".huh_agent::COLLECTIONTCID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DIVISIONID<input type=text name=".huh_agent::DIVISIONID." id=".huh_agent::DIVISIONID." value='".$model->getDivisionID()."'  size='".huh_agent::DIVISIONID_SIZE ."'  maxlength='".huh_agent::DIVISIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>INSTITUTIONTCID<input type=text name=".huh_agent::INSTITUTIONTCID." id=".huh_agent::INSTITUTIONTCID." value='".$model->getInstitutionTCID()."'  size='".huh_agent::INSTITUTIONTCID_SIZE ."'  maxlength='".huh_agent::INSTITUTIONTCID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PARENTORGANIZATIONID<input type=text name=".huh_agent::PARENTORGANIZATIONID." id=".huh_agent::PARENTORGANIZATIONID." value='".$model->getParentOrganizationID()."'  size='".huh_agent::PARENTORGANIZATIONID_SIZE ."'  maxlength='".huh_agent::PARENTORGANIZATIONID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
