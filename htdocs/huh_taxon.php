<?php
//==============================================================================
//===   taxon.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_taxon implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const TAXONID_SIZE         = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const AUTHOR_SIZE          = 128; //128
   const CITESSTATUS_SIZE     = 32; //32
   const COLSTATUS_SIZE       = 32; //32
   const COMMONNAME_SIZE      = 128; //128
   const CULTIVARNAME_SIZE    = 32; //32
   const ENVIRONMENTALPROTECTIONSTATUS_SIZE = 64; //64
   const ESASTATUS_SIZE       = 64; //64
   const FULLNAME_SIZE        = 255; //255
   const GROUPNUMBER_SIZE     = 20; //20
   const GUID_SIZE            = 128; //128
   const HIGHESTCHILDNODENUMBER_SIZE = 11; //INTEGER
   const ISACCEPTED_SIZE      = 1; //1
   const ISHYBRID_SIZE        = 1; //1
   const ISISNUMBER_SIZE      = 16; //16
   const LABELFORMAT_SIZE     = 64; //64
   const NAME_SIZE            = 64; //64
   const NCBITAXONNUMBER_SIZE = 8; //8
   const NODENUMBER_SIZE      = 11; //INTEGER
   const NUMBER1_SIZE         = 11; //INTEGER
   const NUMBER2_SIZE         = 11; //INTEGER
   const RANKID_SIZE          = 11; //INTEGER
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const SOURCE_SIZE          = 64; //64
   const TAXONOMICSERIALNUMBER_SIZE = 20; //YEAR
   const TEXT1_SIZE           = 32; //32
   const TEXT2_SIZE           = 200; //200
   const UNITIND1_SIZE        = 20; //YEAR
   const UNITIND2_SIZE        = 20; //YEAR
   const UNITIND3_SIZE        = 20; //YEAR
   const UNITIND4_SIZE        = 20; //YEAR
   const UNITNAME1_SIZE       = 20; //YEAR
   const UNITNAME2_SIZE       = 20; //YEAR
   const UNITNAME3_SIZE       = 20; //YEAR
   const UNITNAME4_SIZE       = 20; //YEAR
   const USFWSCODE_SIZE       = 16; //16
   const VISIBILITY_SIZE      = 4; //TINYINT
   const ACCEPTEDID_SIZE      = 11; //INTEGER
   const STDEXAUTHORID_SIZE   = 11; //INTEGER
   const TAXONTREEDEFITEMID_SIZE = 11; //INTEGER
   const HYBRIDPARENT2ID_SIZE = 11; //INTEGER
   const STDAUTHORID_SIZE     = 11; //INTEGER
   const PARENTID_SIZE        = 11; //INTEGER
   const TAXONTREEDEFID_SIZE  = 11; //INTEGER
   const CITINAUTHORID_SIZE   = 11; //INTEGER
   const SANCTAUTHORID_SIZE   = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const PARAUTHORID_SIZE     = 11; //INTEGER
   const BASIONYMID_SIZE      = 11; //INTEGER
   const HYBRIDPARENT1ID_SIZE = 11; //INTEGER
   const PAREXAUTHORID_SIZE   = 11; //INTEGER
   const VISIBILITYSETBYID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const TAXONID           = 'TaxonID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const AUTHOR            = 'Author';
   const CITESSTATUS       = 'CitesStatus';
   const COLSTATUS         = 'COLStatus';
   const COMMONNAME        = 'CommonName';
   const CULTIVARNAME      = 'CultivarName';
   const ENVIRONMENTALPROTECTIONSTATUS = 'EnvironmentalProtectionStatus';
   const ESASTATUS         = 'EsaStatus';
   const FULLNAME          = 'FullName';
   const GROUPNUMBER       = 'GroupNumber';
   const GUID              = 'GUID';
   const HIGHESTCHILDNODENUMBER = 'HighestChildNodeNumber';
   const ISACCEPTED        = 'IsAccepted';
   const ISHYBRID          = 'IsHybrid';
   const ISISNUMBER        = 'IsisNumber';
   const LABELFORMAT       = 'LabelFormat';
   const NAME              = 'Name';
   const NCBITAXONNUMBER   = 'NcbiTaxonNumber';
   const NODENUMBER        = 'NodeNumber';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const RANKID            = 'RankID';
   const REMARKS           = 'Remarks';
   const SOURCE            = 'Source';
   const TAXONOMICSERIALNUMBER = 'TaxonomicSerialNumber';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const UNITIND1          = 'UnitInd1';
   const UNITIND2          = 'UnitInd2';
   const UNITIND3          = 'UnitInd3';
   const UNITIND4          = 'UnitInd4';
   const UNITNAME1         = 'UnitName1';
   const UNITNAME2         = 'UnitName2';
   const UNITNAME3         = 'UnitName3';
   const UNITNAME4         = 'UnitName4';
   const USFWSCODE         = 'UsfwsCode';
   const VISIBILITY        = 'Visibility';
   const ACCEPTEDID        = 'AcceptedID';
   const STDEXAUTHORID     = 'StdExAuthorID';
   const TAXONTREEDEFITEMID = 'TaxonTreeDefItemID';
   const HYBRIDPARENT2ID   = 'HybridParent2ID';
   const STDAUTHORID       = 'StdAuthorID';
   const PARENTID          = 'ParentID';
   const TAXONTREEDEFID    = 'TaxonTreeDefID';
   const CITINAUTHORID     = 'CitInAuthorID';
   const SANCTAUTHORID     = 'SanctAuthorID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const PARAUTHORID       = 'ParAuthorID';
   const BASIONYMID        = 'BasionymID';
   const HYBRIDPARENT1ID   = 'HybridParent1ID';
   const PAREXAUTHORID     = 'ParExAuthorID';
   const VISIBILITYSETBYID = 'VisibilitySetByID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $TaxonID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['TaxonID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $Author = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Author']), 0, 128);
  $CitesStatus = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CitesStatus']), 0, 32);
  $COLStatus = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['COLStatus']), 0, 32);
  $CommonName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CommonName']), 0, 128);
  $CultivarName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CultivarName']), 0, 32);
  $EnvironmentalProtectionStatus = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['EnvironmentalProtectionStatus']), 0, 64);
  $EsaStatus = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['EsaStatus']), 0, 64);
  $FullName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FullName']), 0, 255);
  $GroupNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GroupNumber']), 0, 20);
  $GUID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GUID']), 0, 128);
  $HighestChildNodeNumber = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['HighestChildNodeNumber']), 0, 11);
  $IsAccepted = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsAccepted']), 0, 1);
  $IsHybrid = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsHybrid']), 0, 1);
  $IsisNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsisNumber']), 0, 16);
  $LabelFormat = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['LabelFormat']), 0, 64);
  $Name = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Name']), 0, 64);
  $NcbiTaxonNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['NcbiTaxonNumber']), 0, 8);
  $NodeNumber = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['NodeNumber']), 0, 11);
  $Number1 = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Number1']), 0, 11);
  $Number2 = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Number2']), 0, 11);
  $RankID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['RankID']), 0, 11);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $Source = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Source']), 0, 64);
  $TaxonomicSerialNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TaxonomicSerialNumber']), 0, 20);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 32);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 200);
  $UnitInd1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UnitInd1']), 0, 20);
  $UnitInd2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UnitInd2']), 0, 20);
  $UnitInd3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UnitInd3']), 0, 20);
  $UnitInd4 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UnitInd4']), 0, 20);
  $UnitName1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UnitName1']), 0, 20);
  $UnitName2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UnitName2']), 0, 20);
  $UnitName3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UnitName3']), 0, 20);
  $UnitName4 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UnitName4']), 0, 20);
  $UsfwsCode = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UsfwsCode']), 0, 16);
  $Visibility = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Visibility']), 0, 4);
  $AcceptedID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AcceptedID']), 0, 11);
  $StdExAuthorID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['StdExAuthorID']), 0, 11);
  $TaxonTreeDefItemID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['TaxonTreeDefItemID']), 0, 11);
  $HybridParent2ID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['HybridParent2ID']), 0, 11);
  $StdAuthorID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['StdAuthorID']), 0, 11);
  $ParentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ParentID']), 0, 11);
  $TaxonTreeDefID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['TaxonTreeDefID']), 0, 11);
  $CitInAuthorID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CitInAuthorID']), 0, 11);
  $SanctAuthorID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['SanctAuthorID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ParAuthorID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ParAuthorID']), 0, 11);
  $BasionymID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['BasionymID']), 0, 11);
  $HybridParent1ID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['HybridParent1ID']), 0, 11);
  $ParExAuthorID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ParExAuthorID']), 0, 11);
  $VisibilitySetByID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['VisibilitySetByID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $TaxonID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $Author; // VARCHAR(128) 
   private $CitesStatus; // VARCHAR(32) 
   private $COLStatus; // VARCHAR(32) 
   private $CommonName; // VARCHAR(128) 
   private $CultivarName; // VARCHAR(32) 
   private $EnvironmentalProtectionStatus; // VARCHAR(64) 
   private $EsaStatus; // VARCHAR(64) 
   private $FullName; // VARCHAR(255) 
   private $GroupNumber; // VARCHAR(20) 
   private $GUID; // VARCHAR(128) 
   private $HighestChildNodeNumber; // INTEGER 
   private $IsAccepted; // BIT(1) 
   private $IsHybrid; // BIT(1) 
   private $IsisNumber; // VARCHAR(16) 
   private $LabelFormat; // VARCHAR(64) 
   private $Name; // VARCHAR(64) 
   private $NcbiTaxonNumber; // VARCHAR(8) 
   private $NodeNumber; // INTEGER 
   private $Number1; // INTEGER 
   private $Number2; // INTEGER 
   private $RankID; // INTEGER 
   private $Remarks; // LONGVARCHAR 
   private $Source; // VARCHAR(64) 
   private $TaxonomicSerialNumber; // YEAR 
   private $Text1; // VARCHAR(32) 
   private $Text2; // VARCHAR(200) 
   private $UnitInd1; // YEAR 
   private $UnitInd2; // YEAR 
   private $UnitInd3; // YEAR 
   private $UnitInd4; // YEAR 
   private $UnitName1; // YEAR 
   private $UnitName2; // YEAR 
   private $UnitName3; // YEAR 
   private $UnitName4; // YEAR 
   private $UsfwsCode; // VARCHAR(16) 
   private $Visibility; // TINYINT 
   private $AcceptedID; // INTEGER 
   private $StdExAuthorID; // INTEGER 
   private $TaxonTreeDefItemID; // INTEGER 
   private $HybridParent2ID; // INTEGER 
   private $StdAuthorID; // INTEGER 
   private $ParentID; // INTEGER 
   private $TaxonTreeDefID; // INTEGER 
   private $CitInAuthorID; // INTEGER 
   private $SanctAuthorID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $ParAuthorID; // INTEGER 
   private $BasionymID; // INTEGER 
   private $HybridParent1ID; // INTEGER 
   private $ParExAuthorID; // INTEGER 
   private $VisibilitySetByID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' TaxonID, TimestampCreated, TimestampModified, Version, Author, CitesStatus, COLStatus, CommonName, CultivarName, EnvironmentalProtectionStatus, EsaStatus, FullName, GroupNumber, GUID, HighestChildNodeNumber, IsAccepted, IsHybrid, IsisNumber, LabelFormat, Name, NcbiTaxonNumber, NodeNumber, Number1, Number2, RankID, Remarks, Source, TaxonomicSerialNumber, Text1, Text2, UnitInd1, UnitInd2, UnitInd3, UnitInd4, UnitName1, UnitName2, UnitName3, UnitName4, UsfwsCode, Visibility, AcceptedID, StdExAuthorID, TaxonTreeDefItemID, HybridParent2ID, StdAuthorID, ParentID, TaxonTreeDefID, CitInAuthorID, SanctAuthorID, ModifiedByAgentID, CreatedByAgentID, ParAuthorID, BasionymID, HybridParent1ID, ParExAuthorID, VisibilitySetByID, ';
   const PKFIELDLIST = ' TaxonID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'TaxonID'  ) ;
   private $allFieldsArray = array( 0 => 'TaxonID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'Author' , 5 => 'CitesStatus' , 6 => 'COLStatus' , 7 => 'CommonName' , 8 => 'CultivarName' , 9 => 'EnvironmentalProtectionStatus' , 10 => 'EsaStatus' , 11 => 'FullName' , 12 => 'GroupNumber' , 13 => 'GUID' , 14 => 'HighestChildNodeNumber' , 15 => 'IsAccepted' , 16 => 'IsHybrid' , 17 => 'IsisNumber' , 18 => 'LabelFormat' , 19 => 'Name' , 20 => 'NcbiTaxonNumber' , 21 => 'NodeNumber' , 22 => 'Number1' , 23 => 'Number2' , 24 => 'RankID' , 25 => 'Remarks' , 26 => 'Source' , 27 => 'TaxonomicSerialNumber' , 28 => 'Text1' , 29 => 'Text2' , 30 => 'UnitInd1' , 31 => 'UnitInd2' , 32 => 'UnitInd3' , 33 => 'UnitInd4' , 34 => 'UnitName1' , 35 => 'UnitName2' , 36 => 'UnitName3' , 37 => 'UnitName4' , 38 => 'UsfwsCode' , 39 => 'Visibility' , 40 => 'AcceptedID' , 41 => 'StdExAuthorID' , 42 => 'TaxonTreeDefItemID' , 43 => 'HybridParent2ID' , 44 => 'StdAuthorID' , 45 => 'ParentID' , 46 => 'TaxonTreeDefID' , 47 => 'CitInAuthorID' , 48 => 'SanctAuthorID' , 49 => 'ModifiedByAgentID' , 50 => 'CreatedByAgentID' , 51 => 'ParAuthorID' , 52 => 'BasionymID' , 53 => 'HybridParent1ID' , 54 => 'ParExAuthorID' , 55 => 'VisibilitySetByID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'Author' , 5 => 'CitesStatus' , 7 => 'CommonName' , 9 => 'EnvironmentalProtectionStatus' , 11 => 'FullName' , 13 => 'GUID' , 14 => 'HighestChildNodeNumber' , 19 => 'Name' , 21 => 'NodeNumber' , 24 => 'RankID' , 27 => 'TaxonomicSerialNumber' , 40 => 'AcceptedID' , 41 => 'StdExAuthorID' , 42 => 'TaxonTreeDefItemID' , 43 => 'HybridParent2ID' , 44 => 'StdAuthorID' , 45 => 'ParentID' , 46 => 'TaxonTreeDefID' , 47 => 'CitInAuthorID' , 48 => 'SanctAuthorID' , 49 => 'ModifiedByAgentID' , 50 => 'CreatedByAgentID' , 51 => 'ParAuthorID' , 52 => 'BasionymID' , 53 => 'HybridParent1ID' , 54 => 'ParExAuthorID' , 55 => 'VisibilitySetByID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_taxon(){
       $this->TaxonID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->Author = '';
       $this->CitesStatus = '';
       $this->COLStatus = '';
       $this->CommonName = '';
       $this->CultivarName = '';
       $this->EnvironmentalProtectionStatus = '';
       $this->EsaStatus = '';
       $this->FullName = '';
       $this->GroupNumber = '';
       $this->GUID = '';
       $this->HighestChildNodeNumber = '';
       $this->IsAccepted = '';
       $this->IsHybrid = '';
       $this->IsisNumber = '';
       $this->LabelFormat = '';
       $this->Name = '';
       $this->NcbiTaxonNumber = '';
       $this->NodeNumber = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->RankID = '';
       $this->Remarks = '';
       $this->Source = '';
       $this->TaxonomicSerialNumber = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->UnitInd1 = '';
       $this->UnitInd2 = '';
       $this->UnitInd3 = '';
       $this->UnitInd4 = '';
       $this->UnitName1 = '';
       $this->UnitName2 = '';
       $this->UnitName3 = '';
       $this->UnitName4 = '';
       $this->UsfwsCode = '';
       $this->Visibility = '';
       $this->AcceptedID = '';
       $this->StdExAuthorID = '';
       $this->TaxonTreeDefItemID = '';
       $this->HybridParent2ID = '';
       $this->StdAuthorID = '';
       $this->ParentID = '';
       $this->TaxonTreeDefID = '';
       $this->CitInAuthorID = '';
       $this->SanctAuthorID = '';
       $this->ModifiedByAgentID = '';
       $this->CreatedByAgentID = '';
       $this->ParAuthorID = '';
       $this->BasionymID = '';
       $this->HybridParent1ID = '';
       $this->ParExAuthorID = '';
       $this->VisibilitySetByID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='TaxonID') { $returnvalue = $this->setTaxonID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='Author') { $returnvalue = $this->setAuthor($value); } 
             if ($fieldname=='CitesStatus') { $returnvalue = $this->setCitesStatus($value); } 
             if ($fieldname=='COLStatus') { $returnvalue = $this->setCOLStatus($value); } 
             if ($fieldname=='CommonName') { $returnvalue = $this->setCommonName($value); } 
             if ($fieldname=='CultivarName') { $returnvalue = $this->setCultivarName($value); } 
             if ($fieldname=='EnvironmentalProtectionStatus') { $returnvalue = $this->setEnvironmentalProtectionStatus($value); } 
             if ($fieldname=='EsaStatus') { $returnvalue = $this->setEsaStatus($value); } 
             if ($fieldname=='FullName') { $returnvalue = $this->setFullName($value); } 
             if ($fieldname=='GroupNumber') { $returnvalue = $this->setGroupNumber($value); } 
             if ($fieldname=='GUID') { $returnvalue = $this->setGUID($value); } 
             if ($fieldname=='HighestChildNodeNumber') { $returnvalue = $this->setHighestChildNodeNumber($value); } 
             if ($fieldname=='IsAccepted') { $returnvalue = $this->setIsAccepted($value); } 
             if ($fieldname=='IsHybrid') { $returnvalue = $this->setIsHybrid($value); } 
             if ($fieldname=='IsisNumber') { $returnvalue = $this->setIsisNumber($value); } 
             if ($fieldname=='LabelFormat') { $returnvalue = $this->setLabelFormat($value); } 
             if ($fieldname=='Name') { $returnvalue = $this->setName($value); } 
             if ($fieldname=='NcbiTaxonNumber') { $returnvalue = $this->setNcbiTaxonNumber($value); } 
             if ($fieldname=='NodeNumber') { $returnvalue = $this->setNodeNumber($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='RankID') { $returnvalue = $this->setRankID($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='Source') { $returnvalue = $this->setSource($value); } 
             if ($fieldname=='TaxonomicSerialNumber') { $returnvalue = $this->setTaxonomicSerialNumber($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='UnitInd1') { $returnvalue = $this->setUnitInd1($value); } 
             if ($fieldname=='UnitInd2') { $returnvalue = $this->setUnitInd2($value); } 
             if ($fieldname=='UnitInd3') { $returnvalue = $this->setUnitInd3($value); } 
             if ($fieldname=='UnitInd4') { $returnvalue = $this->setUnitInd4($value); } 
             if ($fieldname=='UnitName1') { $returnvalue = $this->setUnitName1($value); } 
             if ($fieldname=='UnitName2') { $returnvalue = $this->setUnitName2($value); } 
             if ($fieldname=='UnitName3') { $returnvalue = $this->setUnitName3($value); } 
             if ($fieldname=='UnitName4') { $returnvalue = $this->setUnitName4($value); } 
             if ($fieldname=='UsfwsCode') { $returnvalue = $this->setUsfwsCode($value); } 
             if ($fieldname=='Visibility') { $returnvalue = $this->setVisibility($value); } 
             if ($fieldname=='AcceptedID') { $returnvalue = $this->setAcceptedID($value); } 
             if ($fieldname=='StdExAuthorID') { $returnvalue = $this->setStdExAuthorID($value); } 
             if ($fieldname=='TaxonTreeDefItemID') { $returnvalue = $this->setTaxonTreeDefItemID($value); } 
             if ($fieldname=='HybridParent2ID') { $returnvalue = $this->setHybridParent2ID($value); } 
             if ($fieldname=='StdAuthorID') { $returnvalue = $this->setStdAuthorID($value); } 
             if ($fieldname=='ParentID') { $returnvalue = $this->setParentID($value); } 
             if ($fieldname=='TaxonTreeDefID') { $returnvalue = $this->setTaxonTreeDefID($value); } 
             if ($fieldname=='CitInAuthorID') { $returnvalue = $this->setCitInAuthorID($value); } 
             if ($fieldname=='SanctAuthorID') { $returnvalue = $this->setSanctAuthorID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ParAuthorID') { $returnvalue = $this->setParAuthorID($value); } 
             if ($fieldname=='BasionymID') { $returnvalue = $this->setBasionymID($value); } 
             if ($fieldname=='HybridParent1ID') { $returnvalue = $this->setHybridParent1ID($value); } 
             if ($fieldname=='ParExAuthorID') { $returnvalue = $this->setParExAuthorID($value); } 
             if ($fieldname=='VisibilitySetByID') { $returnvalue = $this->setVisibilitySetByID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='TaxonID') { $returnvalue = $this->getTaxonID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='Author') { $returnvalue = $this->getAuthor(); } 
             if ($fieldname=='CitesStatus') { $returnvalue = $this->getCitesStatus(); } 
             if ($fieldname=='COLStatus') { $returnvalue = $this->getCOLStatus(); } 
             if ($fieldname=='CommonName') { $returnvalue = $this->getCommonName(); } 
             if ($fieldname=='CultivarName') { $returnvalue = $this->getCultivarName(); } 
             if ($fieldname=='EnvironmentalProtectionStatus') { $returnvalue = $this->getEnvironmentalProtectionStatus(); } 
             if ($fieldname=='EsaStatus') { $returnvalue = $this->getEsaStatus(); } 
             if ($fieldname=='FullName') { $returnvalue = $this->getFullName(); } 
             if ($fieldname=='GroupNumber') { $returnvalue = $this->getGroupNumber(); } 
             if ($fieldname=='GUID') { $returnvalue = $this->getGUID(); } 
             if ($fieldname=='HighestChildNodeNumber') { $returnvalue = $this->getHighestChildNodeNumber(); } 
             if ($fieldname=='IsAccepted') { $returnvalue = $this->getIsAccepted(); } 
             if ($fieldname=='IsHybrid') { $returnvalue = $this->getIsHybrid(); } 
             if ($fieldname=='IsisNumber') { $returnvalue = $this->getIsisNumber(); } 
             if ($fieldname=='LabelFormat') { $returnvalue = $this->getLabelFormat(); } 
             if ($fieldname=='Name') { $returnvalue = $this->getName(); } 
             if ($fieldname=='NcbiTaxonNumber') { $returnvalue = $this->getNcbiTaxonNumber(); } 
             if ($fieldname=='NodeNumber') { $returnvalue = $this->getNodeNumber(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='RankID') { $returnvalue = $this->getRankID(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='Source') { $returnvalue = $this->getSource(); } 
             if ($fieldname=='TaxonomicSerialNumber') { $returnvalue = $this->getTaxonomicSerialNumber(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='UnitInd1') { $returnvalue = $this->getUnitInd1(); } 
             if ($fieldname=='UnitInd2') { $returnvalue = $this->getUnitInd2(); } 
             if ($fieldname=='UnitInd3') { $returnvalue = $this->getUnitInd3(); } 
             if ($fieldname=='UnitInd4') { $returnvalue = $this->getUnitInd4(); } 
             if ($fieldname=='UnitName1') { $returnvalue = $this->getUnitName1(); } 
             if ($fieldname=='UnitName2') { $returnvalue = $this->getUnitName2(); } 
             if ($fieldname=='UnitName3') { $returnvalue = $this->getUnitName3(); } 
             if ($fieldname=='UnitName4') { $returnvalue = $this->getUnitName4(); } 
             if ($fieldname=='UsfwsCode') { $returnvalue = $this->getUsfwsCode(); } 
             if ($fieldname=='Visibility') { $returnvalue = $this->getVisibility(); } 
             if ($fieldname=='AcceptedID') { $returnvalue = $this->getAcceptedID(); } 
             if ($fieldname=='StdExAuthorID') { $returnvalue = $this->getStdExAuthorID(); } 
             if ($fieldname=='TaxonTreeDefItemID') { $returnvalue = $this->getTaxonTreeDefItemID(); } 
             if ($fieldname=='HybridParent2ID') { $returnvalue = $this->getHybridParent2ID(); } 
             if ($fieldname=='StdAuthorID') { $returnvalue = $this->getStdAuthorID(); } 
             if ($fieldname=='ParentID') { $returnvalue = $this->getParentID(); } 
             if ($fieldname=='TaxonTreeDefID') { $returnvalue = $this->getTaxonTreeDefID(); } 
             if ($fieldname=='CitInAuthorID') { $returnvalue = $this->getCitInAuthorID(); } 
             if ($fieldname=='SanctAuthorID') { $returnvalue = $this->getSanctAuthorID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ParAuthorID') { $returnvalue = $this->getParAuthorID(); } 
             if ($fieldname=='BasionymID') { $returnvalue = $this->getBasionymID(); } 
             if ($fieldname=='HybridParent1ID') { $returnvalue = $this->getHybridParent1ID(); } 
             if ($fieldname=='ParExAuthorID') { $returnvalue = $this->getParExAuthorID(); } 
             if ($fieldname=='VisibilitySetByID') { $returnvalue = $this->getVisibilitySetByID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*TaxonID*/
   public function getTaxonID() {
       if ($this->TaxonID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TaxonID));
       }
   }
   public function setTaxonID($TaxonID) {
       if (strlen(preg_replace('/[^0-9]/','',$TaxonID)) > huh_taxon::TAXONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $TaxonID = trim($TaxonID);
       if (!ctype_digit(strval($TaxonID)) && trim(strval($TaxonID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->TaxonID = $this->l_addslashes($TaxonID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_taxon::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_taxon::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_taxon::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*Author*/
   public function getAuthor() {
       if ($this->Author==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Author));
       }
   }
   public function setAuthor($Author) {
       if (strlen($Author) > huh_taxon::AUTHOR_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Author = $this->l_addslashes($Author);
       $this->dirty = true;
   }
/*CitesStatus*/
   public function getCitesStatus() {
       if ($this->CitesStatus==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CitesStatus));
       }
   }
   public function setCitesStatus($CitesStatus) {
       if (strlen($CitesStatus) > huh_taxon::CITESSTATUS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CitesStatus = $this->l_addslashes($CitesStatus);
       $this->dirty = true;
   }
/*COLStatus*/
   public function getCOLStatus() {
       if ($this->COLStatus==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->COLStatus));
       }
   }
   public function setCOLStatus($COLStatus) {
       if (strlen($COLStatus) > huh_taxon::COLSTATUS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->COLStatus = $this->l_addslashes($COLStatus);
       $this->dirty = true;
   }
/*CommonName*/
   public function getCommonName() {
       if ($this->CommonName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CommonName));
       }
   }
   public function setCommonName($CommonName) {
       if (strlen($CommonName) > huh_taxon::COMMONNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CommonName = $this->l_addslashes($CommonName);
       $this->dirty = true;
   }
/*CultivarName*/
   public function getCultivarName() {
       if ($this->CultivarName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CultivarName));
       }
   }
   public function setCultivarName($CultivarName) {
       if (strlen($CultivarName) > huh_taxon::CULTIVARNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CultivarName = $this->l_addslashes($CultivarName);
       $this->dirty = true;
   }
/*EnvironmentalProtectionStatus*/
   public function getEnvironmentalProtectionStatus() {
       if ($this->EnvironmentalProtectionStatus==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->EnvironmentalProtectionStatus));
       }
   }
   public function setEnvironmentalProtectionStatus($EnvironmentalProtectionStatus) {
       if (strlen($EnvironmentalProtectionStatus) > huh_taxon::ENVIRONMENTALPROTECTIONSTATUS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->EnvironmentalProtectionStatus = $this->l_addslashes($EnvironmentalProtectionStatus);
       $this->dirty = true;
   }
/*EsaStatus*/
   public function getEsaStatus() {
       if ($this->EsaStatus==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->EsaStatus));
       }
   }
   public function setEsaStatus($EsaStatus) {
       if (strlen($EsaStatus) > huh_taxon::ESASTATUS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->EsaStatus = $this->l_addslashes($EsaStatus);
       $this->dirty = true;
   }
/*FullName*/
   public function getFullName() {
       if ($this->FullName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FullName));
       }
   }
   public function setFullName($FullName) {
       if (strlen($FullName) > huh_taxon::FULLNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FullName = $this->l_addslashes($FullName);
       $this->dirty = true;
   }
/*GroupNumber*/
   public function getGroupNumber() {
       if ($this->GroupNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GroupNumber));
       }
   }
   public function setGroupNumber($GroupNumber) {
       if (strlen($GroupNumber) > huh_taxon::GROUPNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GroupNumber = $this->l_addslashes($GroupNumber);
       $this->dirty = true;
   }
/*GUID*/
   public function getGUID() {
       if ($this->GUID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GUID));
       }
   }
   public function setGUID($GUID) {
       if (strlen($GUID) > huh_taxon::GUID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GUID = $this->l_addslashes($GUID);
       $this->dirty = true;
   }
/*HighestChildNodeNumber*/
   public function getHighestChildNodeNumber() {
       if ($this->HighestChildNodeNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->HighestChildNodeNumber));
       }
   }
   public function setHighestChildNodeNumber($HighestChildNodeNumber) {
       if (strlen(preg_replace('/[^0-9]/','',$HighestChildNodeNumber)) > huh_taxon::HIGHESTCHILDNODENUMBER_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $HighestChildNodeNumber = trim($HighestChildNodeNumber);
       if (!ctype_digit(strval($HighestChildNodeNumber)) && trim(strval($HighestChildNodeNumber))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->HighestChildNodeNumber = $this->l_addslashes($HighestChildNodeNumber);
       $this->dirty = true;
   }
/*IsAccepted*/
   public function getIsAccepted() {
       if ($this->IsAccepted==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsAccepted));
       }
   }
   public function setIsAccepted($IsAccepted) {
       if (strlen($IsAccepted) > huh_taxon::ISACCEPTED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsAccepted = $this->l_addslashes($IsAccepted);
       $this->dirty = true;
   }
/*IsHybrid*/
   public function getIsHybrid() {
       if ($this->IsHybrid==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsHybrid));
       }
   }
   public function setIsHybrid($IsHybrid) {
       if (strlen($IsHybrid) > huh_taxon::ISHYBRID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsHybrid = $this->l_addslashes($IsHybrid);
       $this->dirty = true;
   }
/*IsisNumber*/
   public function getIsisNumber() {
       if ($this->IsisNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsisNumber));
       }
   }
   public function setIsisNumber($IsisNumber) {
       if (strlen($IsisNumber) > huh_taxon::ISISNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsisNumber = $this->l_addslashes($IsisNumber);
       $this->dirty = true;
   }
/*LabelFormat*/
   public function getLabelFormat() {
       if ($this->LabelFormat==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LabelFormat));
       }
   }
   public function setLabelFormat($LabelFormat) {
       if (strlen($LabelFormat) > huh_taxon::LABELFORMAT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->LabelFormat = $this->l_addslashes($LabelFormat);
       $this->dirty = true;
   }
/*Name*/
   public function getName() {
       if ($this->Name==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Name));
       }
   }
   public function setName($Name) {
       if (strlen($Name) > huh_taxon::NAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Name = $this->l_addslashes($Name);
       $this->dirty = true;
   }
/*NcbiTaxonNumber*/
   public function getNcbiTaxonNumber() {
       if ($this->NcbiTaxonNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NcbiTaxonNumber));
       }
   }
   public function setNcbiTaxonNumber($NcbiTaxonNumber) {
       if (strlen($NcbiTaxonNumber) > huh_taxon::NCBITAXONNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->NcbiTaxonNumber = $this->l_addslashes($NcbiTaxonNumber);
       $this->dirty = true;
   }
/*NodeNumber*/
   public function getNodeNumber() {
       if ($this->NodeNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NodeNumber));
       }
   }
   public function setNodeNumber($NodeNumber) {
       if (strlen(preg_replace('/[^0-9]/','',$NodeNumber)) > huh_taxon::NODENUMBER_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $NodeNumber = trim($NodeNumber);
       if (!ctype_digit(strval($NodeNumber)) && trim(strval($NodeNumber))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->NodeNumber = $this->l_addslashes($NodeNumber);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen(preg_replace('/[^0-9]/','',$Number1)) > huh_taxon::NUMBER1_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Number1 = trim($Number1);
       if (!ctype_digit(strval($Number1)) && trim(strval($Number1))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen(preg_replace('/[^0-9]/','',$Number2)) > huh_taxon::NUMBER2_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Number2 = trim($Number2);
       if (!ctype_digit(strval($Number2)) && trim(strval($Number2))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*RankID*/
   public function getRankID() {
       if ($this->RankID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RankID));
       }
   }
   public function setRankID($RankID) {
       if (strlen(preg_replace('/[^0-9]/','',$RankID)) > huh_taxon::RANKID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $RankID = trim($RankID);
       if (!ctype_digit(strval($RankID))) {
             throw new Exception("Value must be an integer");
       }
       $this->RankID = $this->l_addslashes($RankID);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_taxon::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*Source*/
   public function getSource() {
       if ($this->Source==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Source));
       }
   }
   public function setSource($Source) {
       if (strlen($Source) > huh_taxon::SOURCE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Source = $this->l_addslashes($Source);
       $this->dirty = true;
   }
/*TaxonomicSerialNumber*/
   public function getTaxonomicSerialNumber() {
       if ($this->TaxonomicSerialNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TaxonomicSerialNumber));
       }
   }
   public function setTaxonomicSerialNumber($TaxonomicSerialNumber) {
       if (strlen($TaxonomicSerialNumber) > huh_taxon::TAXONOMICSERIALNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TaxonomicSerialNumber = $this->l_addslashes($TaxonomicSerialNumber);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_taxon::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_taxon::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*UnitInd1*/
   public function getUnitInd1() {
       if ($this->UnitInd1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UnitInd1));
       }
   }
   public function setUnitInd1($UnitInd1) {
       if (strlen($UnitInd1) > huh_taxon::UNITIND1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UnitInd1 = $this->l_addslashes($UnitInd1);
       $this->dirty = true;
   }
/*UnitInd2*/
   public function getUnitInd2() {
       if ($this->UnitInd2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UnitInd2));
       }
   }
   public function setUnitInd2($UnitInd2) {
       if (strlen($UnitInd2) > huh_taxon::UNITIND2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UnitInd2 = $this->l_addslashes($UnitInd2);
       $this->dirty = true;
   }
/*UnitInd3*/
   public function getUnitInd3() {
       if ($this->UnitInd3==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UnitInd3));
       }
   }
   public function setUnitInd3($UnitInd3) {
       if (strlen($UnitInd3) > huh_taxon::UNITIND3_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UnitInd3 = $this->l_addslashes($UnitInd3);
       $this->dirty = true;
   }
/*UnitInd4*/
   public function getUnitInd4() {
       if ($this->UnitInd4==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UnitInd4));
       }
   }
   public function setUnitInd4($UnitInd4) {
       if (strlen($UnitInd4) > huh_taxon::UNITIND4_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UnitInd4 = $this->l_addslashes($UnitInd4);
       $this->dirty = true;
   }
/*UnitName1*/
   public function getUnitName1() {
       if ($this->UnitName1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UnitName1));
       }
   }
   public function setUnitName1($UnitName1) {
       if (strlen($UnitName1) > huh_taxon::UNITNAME1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UnitName1 = $this->l_addslashes($UnitName1);
       $this->dirty = true;
   }
/*UnitName2*/
   public function getUnitName2() {
       if ($this->UnitName2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UnitName2));
       }
   }
   public function setUnitName2($UnitName2) {
       if (strlen($UnitName2) > huh_taxon::UNITNAME2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UnitName2 = $this->l_addslashes($UnitName2);
       $this->dirty = true;
   }
/*UnitName3*/
   public function getUnitName3() {
       if ($this->UnitName3==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UnitName3));
       }
   }
   public function setUnitName3($UnitName3) {
       if (strlen($UnitName3) > huh_taxon::UNITNAME3_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UnitName3 = $this->l_addslashes($UnitName3);
       $this->dirty = true;
   }
/*UnitName4*/
   public function getUnitName4() {
       if ($this->UnitName4==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UnitName4));
       }
   }
   public function setUnitName4($UnitName4) {
       if (strlen($UnitName4) > huh_taxon::UNITNAME4_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UnitName4 = $this->l_addslashes($UnitName4);
       $this->dirty = true;
   }
/*UsfwsCode*/
   public function getUsfwsCode() {
       if ($this->UsfwsCode==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UsfwsCode));
       }
   }
   public function setUsfwsCode($UsfwsCode) {
       if (strlen($UsfwsCode) > huh_taxon::USFWSCODE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UsfwsCode = $this->l_addslashes($UsfwsCode);
       $this->dirty = true;
   }
/*Visibility*/
   public function getVisibility() {
       if ($this->Visibility==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Visibility));
       }
   }
   public function setVisibility($Visibility) {
       if (strlen($Visibility) > huh_taxon::VISIBILITY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Visibility = $this->l_addslashes($Visibility);
       $this->dirty = true;
   }
/*AcceptedID*/
   public function getAcceptedID() {
       if ($this->AcceptedID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AcceptedID));
       }
   }
   public function setAcceptedID($AcceptedID) {
       if (strlen(preg_replace('/[^0-9]/','',$AcceptedID)) > huh_taxon::ACCEPTEDID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AcceptedID = trim($AcceptedID);
       if (!ctype_digit(strval($AcceptedID)) && trim(strval($AcceptedID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AcceptedID = $this->l_addslashes($AcceptedID);
       $this->dirty = true;
   }
/*StdExAuthorID*/
   public function getStdExAuthorID() {
       if ($this->StdExAuthorID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StdExAuthorID));
       }
   }
   public function setStdExAuthorID($StdExAuthorID) {
       if (strlen(preg_replace('/[^0-9]/','',$StdExAuthorID)) > huh_taxon::STDEXAUTHORID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $StdExAuthorID = trim($StdExAuthorID);
       if (!ctype_digit(strval($StdExAuthorID)) && trim(strval($StdExAuthorID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->StdExAuthorID = $this->l_addslashes($StdExAuthorID);
       $this->dirty = true;
   }
/*TaxonTreeDefItemID*/
   public function getTaxonTreeDefItemID() {
       if ($this->TaxonTreeDefItemID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TaxonTreeDefItemID));
       }
   }
   public function setTaxonTreeDefItemID($TaxonTreeDefItemID) {
       if (strlen(preg_replace('/[^0-9]/','',$TaxonTreeDefItemID)) > huh_taxon::TAXONTREEDEFITEMID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $TaxonTreeDefItemID = trim($TaxonTreeDefItemID);
       if (!ctype_digit(strval($TaxonTreeDefItemID))) {
             throw new Exception("Value must be an integer");
       }
       $this->TaxonTreeDefItemID = $this->l_addslashes($TaxonTreeDefItemID);
       $this->dirty = true;
   }
/*HybridParent2ID*/
   public function getHybridParent2ID() {
       if ($this->HybridParent2ID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->HybridParent2ID));
       }
   }
   public function setHybridParent2ID($HybridParent2ID) {
       if (strlen(preg_replace('/[^0-9]/','',$HybridParent2ID)) > huh_taxon::HYBRIDPARENT2ID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $HybridParent2ID = trim($HybridParent2ID);
       if (!ctype_digit(strval($HybridParent2ID)) && trim(strval($HybridParent2ID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->HybridParent2ID = $this->l_addslashes($HybridParent2ID);
       $this->dirty = true;
   }
/*StdAuthorID*/
   public function getStdAuthorID() {
       if ($this->StdAuthorID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StdAuthorID));
       }
   }
   public function setStdAuthorID($StdAuthorID) {
       if (strlen(preg_replace('/[^0-9]/','',$StdAuthorID)) > huh_taxon::STDAUTHORID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $StdAuthorID = trim($StdAuthorID);
       if (!ctype_digit(strval($StdAuthorID)) && trim(strval($StdAuthorID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->StdAuthorID = $this->l_addslashes($StdAuthorID);
       $this->dirty = true;
   }
/*ParentID*/
   public function getParentID() {
       if ($this->ParentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ParentID));
       }
   }
   public function setParentID($ParentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ParentID)) > huh_taxon::PARENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ParentID = trim($ParentID);
       if (!ctype_digit(strval($ParentID)) && trim(strval($ParentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ParentID = $this->l_addslashes($ParentID);
       $this->dirty = true;
   }
/*TaxonTreeDefID*/
   public function getTaxonTreeDefID() {
       if ($this->TaxonTreeDefID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TaxonTreeDefID));
       }
   }
   public function setTaxonTreeDefID($TaxonTreeDefID) {
       if (strlen(preg_replace('/[^0-9]/','',$TaxonTreeDefID)) > huh_taxon::TAXONTREEDEFID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $TaxonTreeDefID = trim($TaxonTreeDefID);
       if (!ctype_digit(strval($TaxonTreeDefID))) {
             throw new Exception("Value must be an integer");
       }
       $this->TaxonTreeDefID = $this->l_addslashes($TaxonTreeDefID);
       $this->dirty = true;
   }
/*CitInAuthorID*/
   public function getCitInAuthorID() {
       if ($this->CitInAuthorID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CitInAuthorID));
       }
   }
   public function setCitInAuthorID($CitInAuthorID) {
       if (strlen(preg_replace('/[^0-9]/','',$CitInAuthorID)) > huh_taxon::CITINAUTHORID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CitInAuthorID = trim($CitInAuthorID);
       if (!ctype_digit(strval($CitInAuthorID)) && trim(strval($CitInAuthorID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CitInAuthorID = $this->l_addslashes($CitInAuthorID);
       $this->dirty = true;
   }
/*SanctAuthorID*/
   public function getSanctAuthorID() {
       if ($this->SanctAuthorID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SanctAuthorID));
       }
   }
   public function setSanctAuthorID($SanctAuthorID) {
       if (strlen(preg_replace('/[^0-9]/','',$SanctAuthorID)) > huh_taxon::SANCTAUTHORID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $SanctAuthorID = trim($SanctAuthorID);
       if (!ctype_digit(strval($SanctAuthorID)) && trim(strval($SanctAuthorID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->SanctAuthorID = $this->l_addslashes($SanctAuthorID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_taxon::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_taxon::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ParAuthorID*/
   public function getParAuthorID() {
       if ($this->ParAuthorID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ParAuthorID));
       }
   }
   public function setParAuthorID($ParAuthorID) {
       if (strlen(preg_replace('/[^0-9]/','',$ParAuthorID)) > huh_taxon::PARAUTHORID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ParAuthorID = trim($ParAuthorID);
       if (!ctype_digit(strval($ParAuthorID)) && trim(strval($ParAuthorID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ParAuthorID = $this->l_addslashes($ParAuthorID);
       $this->dirty = true;
   }
/*BasionymID*/
   public function getBasionymID() {
       if ($this->BasionymID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->BasionymID));
       }
   }
   public function setBasionymID($BasionymID) {
       if (strlen(preg_replace('/[^0-9]/','',$BasionymID)) > huh_taxon::BASIONYMID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $BasionymID = trim($BasionymID);
       if (!ctype_digit(strval($BasionymID)) && trim(strval($BasionymID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->BasionymID = $this->l_addslashes($BasionymID);
       $this->dirty = true;
   }
/*HybridParent1ID*/
   public function getHybridParent1ID() {
       if ($this->HybridParent1ID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->HybridParent1ID));
       }
   }
   public function setHybridParent1ID($HybridParent1ID) {
       if (strlen(preg_replace('/[^0-9]/','',$HybridParent1ID)) > huh_taxon::HYBRIDPARENT1ID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $HybridParent1ID = trim($HybridParent1ID);
       if (!ctype_digit(strval($HybridParent1ID)) && trim(strval($HybridParent1ID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->HybridParent1ID = $this->l_addslashes($HybridParent1ID);
       $this->dirty = true;
   }
/*ParExAuthorID*/
   public function getParExAuthorID() {
       if ($this->ParExAuthorID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ParExAuthorID));
       }
   }
   public function setParExAuthorID($ParExAuthorID) {
       if (strlen(preg_replace('/[^0-9]/','',$ParExAuthorID)) > huh_taxon::PAREXAUTHORID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ParExAuthorID = trim($ParExAuthorID);
       if (!ctype_digit(strval($ParExAuthorID)) && trim(strval($ParExAuthorID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ParExAuthorID = $this->l_addslashes($ParExAuthorID);
       $this->dirty = true;
   }
/*VisibilitySetByID*/
   public function getVisibilitySetByID() {
       if ($this->VisibilitySetByID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->VisibilitySetByID));
       }
   }
   public function setVisibilitySetByID($VisibilitySetByID) {
       if (strlen(preg_replace('/[^0-9]/','',$VisibilitySetByID)) > huh_taxon::VISIBILITYSETBYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $VisibilitySetByID = trim($VisibilitySetByID);
       if (!ctype_digit(strval($VisibilitySetByID)) && trim(strval($VisibilitySetByID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->VisibilitySetByID = $this->l_addslashes($VisibilitySetByID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getTaxonID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['TaxonID'] = $this->getTaxonID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_TaxonIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_AuthorMYSQLI_TYPE = 's';
  const C_CitesStatusMYSQLI_TYPE = 's';
  const C_COLStatusMYSQLI_TYPE = 's';
  const C_CommonNameMYSQLI_TYPE = 's';
  const C_CultivarNameMYSQLI_TYPE = 's';
  const C_EnvironmentalProtectionStatusMYSQLI_TYPE = 's';
  const C_EsaStatusMYSQLI_TYPE = 's';
  const C_FullNameMYSQLI_TYPE = 's';
  const C_GroupNumberMYSQLI_TYPE = 's';
  const C_GUIDMYSQLI_TYPE = 's';
  const C_HighestChildNodeNumberMYSQLI_TYPE = 'i';
  const C_IsAcceptedMYSQLI_TYPE = 'i';
  const C_IsHybridMYSQLI_TYPE = 'i';
  const C_IsisNumberMYSQLI_TYPE = 's';
  const C_LabelFormatMYSQLI_TYPE = 's';
  const C_NameMYSQLI_TYPE = 's';
  const C_NcbiTaxonNumberMYSQLI_TYPE = 's';
  const C_NodeNumberMYSQLI_TYPE = 'i';
  const C_Number1MYSQLI_TYPE = 'i';
  const C_Number2MYSQLI_TYPE = 'i';
  const C_RankIDMYSQLI_TYPE = 'i';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_SourceMYSQLI_TYPE = 's';
  const C_TaxonomicSerialNumberMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_UnitInd1MYSQLI_TYPE = 's';
  const C_UnitInd2MYSQLI_TYPE = 's';
  const C_UnitInd3MYSQLI_TYPE = 's';
  const C_UnitInd4MYSQLI_TYPE = 's';
  const C_UnitName1MYSQLI_TYPE = 's';
  const C_UnitName2MYSQLI_TYPE = 's';
  const C_UnitName3MYSQLI_TYPE = 's';
  const C_UnitName4MYSQLI_TYPE = 's';
  const C_UsfwsCodeMYSQLI_TYPE = 's';
  const C_VisibilityMYSQLI_TYPE = 'i';
  const C_AcceptedIDMYSQLI_TYPE = 'i';
  const C_StdExAuthorIDMYSQLI_TYPE = 'i';
  const C_TaxonTreeDefItemIDMYSQLI_TYPE = 'i';
  const C_HybridParent2IDMYSQLI_TYPE = 'i';
  const C_StdAuthorIDMYSQLI_TYPE = 'i';
  const C_ParentIDMYSQLI_TYPE = 'i';
  const C_TaxonTreeDefIDMYSQLI_TYPE = 'i';
  const C_CitInAuthorIDMYSQLI_TYPE = 'i';
  const C_SanctAuthorIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ParAuthorIDMYSQLI_TYPE = 'i';
  const C_BasionymIDMYSQLI_TYPE = 'i';
  const C_HybridParent1IDMYSQLI_TYPE = 'i';
  const C_ParExAuthorIDMYSQLI_TYPE = 'i';
  const C_VisibilitySetByIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='TaxonID') { $retval = self::C_TaxonIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='Author') { $retval = self::C_AuthorMYSQLI_TYPE; }
      if ($aFieldname=='CitesStatus') { $retval = self::C_CitesStatusMYSQLI_TYPE; }
      if ($aFieldname=='COLStatus') { $retval = self::C_COLStatusMYSQLI_TYPE; }
      if ($aFieldname=='CommonName') { $retval = self::C_CommonNameMYSQLI_TYPE; }
      if ($aFieldname=='CultivarName') { $retval = self::C_CultivarNameMYSQLI_TYPE; }
      if ($aFieldname=='EnvironmentalProtectionStatus') { $retval = self::C_EnvironmentalProtectionStatusMYSQLI_TYPE; }
      if ($aFieldname=='EsaStatus') { $retval = self::C_EsaStatusMYSQLI_TYPE; }
      if ($aFieldname=='FullName') { $retval = self::C_FullNameMYSQLI_TYPE; }
      if ($aFieldname=='GroupNumber') { $retval = self::C_GroupNumberMYSQLI_TYPE; }
      if ($aFieldname=='GUID') { $retval = self::C_GUIDMYSQLI_TYPE; }
      if ($aFieldname=='HighestChildNodeNumber') { $retval = self::C_HighestChildNodeNumberMYSQLI_TYPE; }
      if ($aFieldname=='IsAccepted') { $retval = self::C_IsAcceptedMYSQLI_TYPE; }
      if ($aFieldname=='IsHybrid') { $retval = self::C_IsHybridMYSQLI_TYPE; }
      if ($aFieldname=='IsisNumber') { $retval = self::C_IsisNumberMYSQLI_TYPE; }
      if ($aFieldname=='LabelFormat') { $retval = self::C_LabelFormatMYSQLI_TYPE; }
      if ($aFieldname=='Name') { $retval = self::C_NameMYSQLI_TYPE; }
      if ($aFieldname=='NcbiTaxonNumber') { $retval = self::C_NcbiTaxonNumberMYSQLI_TYPE; }
      if ($aFieldname=='NodeNumber') { $retval = self::C_NodeNumberMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='RankID') { $retval = self::C_RankIDMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='Source') { $retval = self::C_SourceMYSQLI_TYPE; }
      if ($aFieldname=='TaxonomicSerialNumber') { $retval = self::C_TaxonomicSerialNumberMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='UnitInd1') { $retval = self::C_UnitInd1MYSQLI_TYPE; }
      if ($aFieldname=='UnitInd2') { $retval = self::C_UnitInd2MYSQLI_TYPE; }
      if ($aFieldname=='UnitInd3') { $retval = self::C_UnitInd3MYSQLI_TYPE; }
      if ($aFieldname=='UnitInd4') { $retval = self::C_UnitInd4MYSQLI_TYPE; }
      if ($aFieldname=='UnitName1') { $retval = self::C_UnitName1MYSQLI_TYPE; }
      if ($aFieldname=='UnitName2') { $retval = self::C_UnitName2MYSQLI_TYPE; }
      if ($aFieldname=='UnitName3') { $retval = self::C_UnitName3MYSQLI_TYPE; }
      if ($aFieldname=='UnitName4') { $retval = self::C_UnitName4MYSQLI_TYPE; }
      if ($aFieldname=='UsfwsCode') { $retval = self::C_UsfwsCodeMYSQLI_TYPE; }
      if ($aFieldname=='Visibility') { $retval = self::C_VisibilityMYSQLI_TYPE; }
      if ($aFieldname=='AcceptedID') { $retval = self::C_AcceptedIDMYSQLI_TYPE; }
      if ($aFieldname=='StdExAuthorID') { $retval = self::C_StdExAuthorIDMYSQLI_TYPE; }
      if ($aFieldname=='TaxonTreeDefItemID') { $retval = self::C_TaxonTreeDefItemIDMYSQLI_TYPE; }
      if ($aFieldname=='HybridParent2ID') { $retval = self::C_HybridParent2IDMYSQLI_TYPE; }
      if ($aFieldname=='StdAuthorID') { $retval = self::C_StdAuthorIDMYSQLI_TYPE; }
      if ($aFieldname=='ParentID') { $retval = self::C_ParentIDMYSQLI_TYPE; }
      if ($aFieldname=='TaxonTreeDefID') { $retval = self::C_TaxonTreeDefIDMYSQLI_TYPE; }
      if ($aFieldname=='CitInAuthorID') { $retval = self::C_CitInAuthorIDMYSQLI_TYPE; }
      if ($aFieldname=='SanctAuthorID') { $retval = self::C_SanctAuthorIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ParAuthorID') { $retval = self::C_ParAuthorIDMYSQLI_TYPE; }
      if ($aFieldname=='BasionymID') { $retval = self::C_BasionymIDMYSQLI_TYPE; }
      if ($aFieldname=='HybridParent1ID') { $retval = self::C_HybridParent1IDMYSQLI_TYPE; }
      if ($aFieldname=='ParExAuthorID') { $retval = self::C_ParExAuthorIDMYSQLI_TYPE; }
      if ($aFieldname=='VisibilitySetByID') { $retval = self::C_VisibilitySetByIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setTaxonID($pk[TaxonID]);
             } else { ;
                 $this->setTaxonID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->TaxonID != NULL) {
           $sql = 'SELECT TaxonID, TimestampCreated, TimestampModified, Version, Author, CitesStatus, COLStatus, CommonName, CultivarName, EnvironmentalProtectionStatus, EsaStatus, FullName, GroupNumber, GUID, HighestChildNodeNumber, IsAccepted, IsHybrid, IsisNumber, LabelFormat, Name, NcbiTaxonNumber, NodeNumber, Number1, Number2, RankID, Remarks, Source, TaxonomicSerialNumber, Text1, Text2, UnitInd1, UnitInd2, UnitInd3, UnitInd4, UnitName1, UnitName2, UnitName3, UnitName4, UsfwsCode, Visibility, AcceptedID, StdExAuthorID, TaxonTreeDefItemID, HybridParent2ID, StdAuthorID, ParentID, TaxonTreeDefID, CitInAuthorID, SanctAuthorID, ModifiedByAgentID, CreatedByAgentID, ParAuthorID, BasionymID, HybridParent1ID, ParExAuthorID, VisibilitySetByID FROM taxon WHERE TaxonID = '.$this->TaxonID ;

           $preparesql = 'SELECT TaxonID, TimestampCreated, TimestampModified, Version, Author, CitesStatus, COLStatus, CommonName, CultivarName, EnvironmentalProtectionStatus, EsaStatus, FullName, GroupNumber, GUID, HighestChildNodeNumber, IsAccepted, IsHybrid, IsisNumber, LabelFormat, Name, NcbiTaxonNumber, NodeNumber, Number1, Number2, RankID, Remarks, Source, TaxonomicSerialNumber, Text1, Text2, UnitInd1, UnitInd2, UnitInd3, UnitInd4, UnitName1, UnitName2, UnitName3, UnitName4, UsfwsCode, Visibility, AcceptedID, StdExAuthorID, TaxonTreeDefItemID, HybridParent2ID, StdAuthorID, ParentID, TaxonTreeDefID, CitInAuthorID, SanctAuthorID, ModifiedByAgentID, CreatedByAgentID, ParAuthorID, BasionymID, HybridParent1ID, ParExAuthorID, VisibilitySetByID FROM taxon WHERE TaxonID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->TaxonID);
              $statement->execute();
              $statement->bind_result($this->TaxonID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Author, $this->CitesStatus, $this->COLStatus, $this->CommonName, $this->CultivarName, $this->EnvironmentalProtectionStatus, $this->EsaStatus, $this->FullName, $this->GroupNumber, $this->GUID, $this->HighestChildNodeNumber, $this->IsAccepted, $this->IsHybrid, $this->IsisNumber, $this->LabelFormat, $this->Name, $this->NcbiTaxonNumber, $this->NodeNumber, $this->Number1, $this->Number2, $this->RankID, $this->Remarks, $this->Source, $this->TaxonomicSerialNumber, $this->Text1, $this->Text2, $this->UnitInd1, $this->UnitInd2, $this->UnitInd3, $this->UnitInd4, $this->UnitName1, $this->UnitName2, $this->UnitName3, $this->UnitName4, $this->UsfwsCode, $this->Visibility, $this->AcceptedID, $this->StdExAuthorID, $this->TaxonTreeDefItemID, $this->HybridParent2ID, $this->StdAuthorID, $this->ParentID, $this->TaxonTreeDefID, $this->CitInAuthorID, $this->SanctAuthorID, $this->ModifiedByAgentID, $this->CreatedByAgentID, $this->ParAuthorID, $this->BasionymID, $this->HybridParent1ID, $this->ParExAuthorID, $this->VisibilitySetByID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->TaxonID!= NULL) {
            $sql  = 'UPDATE  taxon SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", Author = ? ";
            $sql .=  ", CitesStatus = ? ";
            $sql .=  ", COLStatus = ? ";
            $sql .=  ", CommonName = ? ";
            $sql .=  ", CultivarName = ? ";
            $sql .=  ", EnvironmentalProtectionStatus = ? ";
            $sql .=  ", EsaStatus = ? ";
            $sql .=  ", FullName = ? ";
            $sql .=  ", GroupNumber = ? ";
            $sql .=  ", GUID = ? ";
            $sql .=  ", HighestChildNodeNumber = ? ";
            $sql .=  ", IsAccepted = ? ";
            $sql .=  ", IsHybrid = ? ";
            $sql .=  ", IsisNumber = ? ";
            $sql .=  ", LabelFormat = ? ";
            $sql .=  ", Name = ? ";
            $sql .=  ", NcbiTaxonNumber = ? ";
            $sql .=  ", NodeNumber = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", RankID = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", Source = ? ";
            $sql .=  ", TaxonomicSerialNumber = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", UnitInd1 = ? ";
            $sql .=  ", UnitInd2 = ? ";
            $sql .=  ", UnitInd3 = ? ";
            $sql .=  ", UnitInd4 = ? ";
            $sql .=  ", UnitName1 = ? ";
            $sql .=  ", UnitName2 = ? ";
            $sql .=  ", UnitName3 = ? ";
            $sql .=  ", UnitName4 = ? ";
            $sql .=  ", UsfwsCode = ? ";
            $sql .=  ", Visibility = ? ";
            $sql .=  ", AcceptedID = ? ";
            $sql .=  ", StdExAuthorID = ? ";
            $sql .=  ", TaxonTreeDefItemID = ? ";
            $sql .=  ", HybridParent2ID = ? ";
            $sql .=  ", StdAuthorID = ? ";
            $sql .=  ", ParentID = ? ";
            $sql .=  ", TaxonTreeDefID = ? ";
            $sql .=  ", CitInAuthorID = ? ";
            $sql .=  ", SanctAuthorID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ParAuthorID = ? ";
            $sql .=  ", BasionymID = ? ";
            $sql .=  ", HybridParent1ID = ? ";
            $sql .=  ", ParExAuthorID = ? ";
            $sql .=  ", VisibilitySetByID = ? ";

            $sql .= "  WHERE TaxonID = ? ";
        } else {
            $sql  = 'INSERT INTO taxon ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( TaxonID ,  TimestampCreated ,  TimestampModified ,  Version ,  Author ,  CitesStatus ,  COLStatus ,  CommonName ,  CultivarName ,  EnvironmentalProtectionStatus ,  EsaStatus ,  FullName ,  GroupNumber ,  GUID ,  HighestChildNodeNumber ,  IsAccepted ,  IsHybrid ,  IsisNumber ,  LabelFormat ,  Name ,  NcbiTaxonNumber ,  NodeNumber ,  Number1 ,  Number2 ,  RankID ,  Remarks ,  Source ,  TaxonomicSerialNumber ,  Text1 ,  Text2 ,  UnitInd1 ,  UnitInd2 ,  UnitInd3 ,  UnitInd4 ,  UnitName1 ,  UnitName2 ,  UnitName3 ,  UnitName4 ,  UsfwsCode ,  Visibility ,  AcceptedID ,  StdExAuthorID ,  TaxonTreeDefItemID ,  HybridParent2ID ,  StdAuthorID ,  ParentID ,  TaxonTreeDefID ,  CitInAuthorID ,  SanctAuthorID ,  ModifiedByAgentID ,  CreatedByAgentID ,  ParAuthorID ,  BasionymID ,  HybridParent1ID ,  ParExAuthorID ,  VisibilitySetByID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->TaxonID!= NULL ) {
              $statement->bind_param("ississssssssssiiissssiiiissssssssssssssiiiiiiiiiiiiiiiiii", $this->TaxonID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Author , $this->CitesStatus , $this->COLStatus , $this->CommonName , $this->CultivarName , $this->EnvironmentalProtectionStatus , $this->EsaStatus , $this->FullName , $this->GroupNumber , $this->GUID , $this->HighestChildNodeNumber , $this->IsAccepted , $this->IsHybrid , $this->IsisNumber , $this->LabelFormat , $this->Name , $this->NcbiTaxonNumber , $this->NodeNumber , $this->Number1 , $this->Number2 , $this->RankID , $this->Remarks , $this->Source , $this->TaxonomicSerialNumber , $this->Text1 , $this->Text2 , $this->UnitInd1 , $this->UnitInd2 , $this->UnitInd3 , $this->UnitInd4 , $this->UnitName1 , $this->UnitName2 , $this->UnitName3 , $this->UnitName4 , $this->UsfwsCode , $this->Visibility , $this->AcceptedID , $this->StdExAuthorID , $this->TaxonTreeDefItemID , $this->HybridParent2ID , $this->StdAuthorID , $this->ParentID , $this->TaxonTreeDefID , $this->CitInAuthorID , $this->SanctAuthorID , $this->ModifiedByAgentID , $this->CreatedByAgentID , $this->ParAuthorID , $this->BasionymID , $this->HybridParent1ID , $this->ParExAuthorID , $this->VisibilitySetByID , $this->TaxonID );
           } else { 
              $statement->bind_param("ississssssssssiiissssiiiissssssssssssssiiiiiiiiiiiiiiiii", $this->TaxonID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Author , $this->CitesStatus , $this->COLStatus , $this->CommonName , $this->CultivarName , $this->EnvironmentalProtectionStatus , $this->EsaStatus , $this->FullName , $this->GroupNumber , $this->GUID , $this->HighestChildNodeNumber , $this->IsAccepted , $this->IsHybrid , $this->IsisNumber , $this->LabelFormat , $this->Name , $this->NcbiTaxonNumber , $this->NodeNumber , $this->Number1 , $this->Number2 , $this->RankID , $this->Remarks , $this->Source , $this->TaxonomicSerialNumber , $this->Text1 , $this->Text2 , $this->UnitInd1 , $this->UnitInd2 , $this->UnitInd3 , $this->UnitInd4 , $this->UnitName1 , $this->UnitName2 , $this->UnitName3 , $this->UnitName4 , $this->UsfwsCode , $this->Visibility , $this->AcceptedID , $this->StdExAuthorID , $this->TaxonTreeDefItemID , $this->HybridParent2ID , $this->StdAuthorID , $this->ParentID , $this->TaxonTreeDefID , $this->CitInAuthorID , $this->SanctAuthorID , $this->ModifiedByAgentID , $this->CreatedByAgentID , $this->ParAuthorID , $this->BasionymID , $this->HybridParent1ID , $this->ParExAuthorID , $this->VisibilitySetByID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->TaxonID != NULL) {
           $sql = 'SELECT TaxonID, TimestampCreated, TimestampModified, Version, Author, CitesStatus, COLStatus, CommonName, CultivarName, EnvironmentalProtectionStatus, EsaStatus, FullName, GroupNumber, GUID, HighestChildNodeNumber, IsAccepted, IsHybrid, IsisNumber, LabelFormat, Name, NcbiTaxonNumber, NodeNumber, Number1, Number2, RankID, Remarks, Source, TaxonomicSerialNumber, Text1, Text2, UnitInd1, UnitInd2, UnitInd3, UnitInd4, UnitName1, UnitName2, UnitName3, UnitName4, UsfwsCode, Visibility, AcceptedID, StdExAuthorID, TaxonTreeDefItemID, HybridParent2ID, StdAuthorID, ParentID, TaxonTreeDefID, CitInAuthorID, SanctAuthorID, ModifiedByAgentID, CreatedByAgentID, ParAuthorID, BasionymID, HybridParent1ID, ParExAuthorID, VisibilitySetByID FROM taxon WHERE TaxonID = "'.$this->TaxonID.'"  ' ;

           $preparedsql = 'SELECT  FROM taxon WHERE  and TaxonID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississssssssssiiissssiiiissssssssssssssiiiiiiiiiiiiiiiii", $this->TaxonID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Author, $this->CitesStatus, $this->COLStatus, $this->CommonName, $this->CultivarName, $this->EnvironmentalProtectionStatus, $this->EsaStatus, $this->FullName, $this->GroupNumber, $this->GUID, $this->HighestChildNodeNumber, $this->IsAccepted, $this->IsHybrid, $this->IsisNumber, $this->LabelFormat, $this->Name, $this->NcbiTaxonNumber, $this->NodeNumber, $this->Number1, $this->Number2, $this->RankID, $this->Remarks, $this->Source, $this->TaxonomicSerialNumber, $this->Text1, $this->Text2, $this->UnitInd1, $this->UnitInd2, $this->UnitInd3, $this->UnitInd4, $this->UnitName1, $this->UnitName2, $this->UnitName3, $this->UnitName4, $this->UsfwsCode, $this->Visibility, $this->AcceptedID, $this->StdExAuthorID, $this->TaxonTreeDefItemID, $this->HybridParent2ID, $this->StdAuthorID, $this->ParentID, $this->TaxonTreeDefID, $this->CitInAuthorID, $this->SanctAuthorID, $this->ModifiedByAgentID, $this->CreatedByAgentID, $this->ParAuthorID, $this->BasionymID, $this->HybridParent1ID, $this->ParExAuthorID, $this->VisibilitySetByID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM taxon WHERE  and TaxonID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississssssssssiiissssiiiissssssssssssssiiiiiiiiiiiiiiiii", $this->TaxonID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Author, $this->CitesStatus, $this->COLStatus, $this->CommonName, $this->CultivarName, $this->EnvironmentalProtectionStatus, $this->EsaStatus, $this->FullName, $this->GroupNumber, $this->GUID, $this->HighestChildNodeNumber, $this->IsAccepted, $this->IsHybrid, $this->IsisNumber, $this->LabelFormat, $this->Name, $this->NcbiTaxonNumber, $this->NodeNumber, $this->Number1, $this->Number2, $this->RankID, $this->Remarks, $this->Source, $this->TaxonomicSerialNumber, $this->Text1, $this->Text2, $this->UnitInd1, $this->UnitInd2, $this->UnitInd3, $this->UnitInd4, $this->UnitName1, $this->UnitName2, $this->UnitName3, $this->UnitName4, $this->UsfwsCode, $this->Visibility, $this->AcceptedID, $this->StdExAuthorID, $this->TaxonTreeDefItemID, $this->HybridParent2ID, $this->StdAuthorID, $this->ParentID, $this->TaxonTreeDefID, $this->CitInAuthorID, $this->SanctAuthorID, $this->ModifiedByAgentID, $this->CreatedByAgentID, $this->ParAuthorID, $this->BasionymID, $this->HybridParent1ID, $this->ParExAuthorID, $this->VisibilitySetByID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->TaxonID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM taxon';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT TaxonID FROM taxon $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_taxon();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromborrowmaterial() { 
      // ForeignKey in: borrowmaterial
      $t = new borrowmaterial();
  } 
  public function loadLinkedFromcollectingeventattribute() { 
      // ForeignKey in: collectingeventattribute
      $t = new collectingeventattribute();
  } 
  public function loadLinkedFromcommonnametx() { 
      // ForeignKey in: commonnametx
      $t = new commonnametx();
  } 
  public function loadLinkedFromdetermination() { 
      // ForeignKey in: determination
      $t = new determination();
  } 
  public function loadLinkedFrompreparation() { 
      // ForeignKey in: preparation
      $t = new preparation();
  } 
  public function loadLinkedFromtaxonattachment() { 
      // ForeignKey in: taxonattachment
      $t = new taxonattachment();
  } 
  public function loadLinkedFromtaxoncitation() { 
      // ForeignKey in: taxoncitation
      $t = new taxoncitation();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: AcceptedID
      $t = new taxon();
      $t->load(getAcceptedID());
      $returnvalue[AcceptedID] = $t;
       // fk: StdExAuthorID
      $t = new agent();
      $t->load(getStdExAuthorID());
      $returnvalue[StdExAuthorID] = $t;
       // fk: TaxonTreeDefItemID
      $t = new taxontreedefitem();
      $t->load(getTaxonTreeDefItemID());
      $returnvalue[TaxonTreeDefItemID] = $t;
       // fk: HybridParent2ID
      $t = new taxon();
      $t->load(getHybridParent2ID());
      $returnvalue[HybridParent2ID] = $t;
       // fk: StdAuthorID
      $t = new agent();
      $t->load(getStdAuthorID());
      $returnvalue[StdAuthorID] = $t;
       // fk: ParentID
      $t = new taxon();
      $t->load(getParentID());
      $returnvalue[ParentID] = $t;
       // fk: TaxonTreeDefID
      $t = new taxontreedef();
      $t->load(getTaxonTreeDefID());
      $returnvalue[TaxonTreeDefID] = $t;
       // fk: CitInAuthorID
      $t = new agent();
      $t->load(getCitInAuthorID());
      $returnvalue[CitInAuthorID] = $t;
       // fk: SanctAuthorID
      $t = new agent();
      $t->load(getSanctAuthorID());
      $returnvalue[SanctAuthorID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ParAuthorID
      $t = new agent();
      $t->load(getParAuthorID());
      $returnvalue[ParAuthorID] = $t;
       // fk: BasionymID
      $t = new taxon();
      $t->load(getBasionymID());
      $returnvalue[BasionymID] = $t;
       // fk: HybridParent1ID
      $t = new taxon();
      $t->load(getHybridParent1ID());
      $returnvalue[HybridParent1ID] = $t;
       // fk: ParExAuthorID
      $t = new agent();
      $t->load(getParExAuthorID());
      $returnvalue[ParExAuthorID] = $t;
       // fk: VisibilitySetByID
      $t = new specifyuser();
      $t->load(getVisibilitySetByID());
      $returnvalue[VisibilitySetByID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT TaxonID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(Author,'') || ' ' || IFNULL(CitesStatus,'') || ' ' || IFNULL(COLStatus,'') || ' ' || IFNULL(CommonName,'') || ' ' || IFNULL(CultivarName,'') || ' ' || IFNULL(EnvironmentalProtectionStatus,'') || ' ' || IFNULL(EsaStatus,'') || ' ' || IFNULL(FullName,'') || ' ' || IFNULL(GroupNumber,'') || ' ' || IFNULL(GUID,'') || ' ' || IFNULL(HighestChildNodeNumber,'') || ' ' || IFNULL(IsAccepted,'') || ' ' || IFNULL(IsHybrid,'') || ' ' || IFNULL(IsisNumber,'') || ' ' || IFNULL(LabelFormat,'') || ' ' || IFNULL(Name,'') || ' ' || IFNULL(NcbiTaxonNumber,'') || ' ' || IFNULL(NodeNumber,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(RankID,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(Source,'') || ' ' || IFNULL(TaxonomicSerialNumber,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(UnitInd1,'') || ' ' || IFNULL(UnitInd2,'') || ' ' || IFNULL(UnitInd3,'') || ' ' || IFNULL(UnitInd4,'') || ' ' || IFNULL(UnitName1,'') || ' ' || IFNULL(UnitName2,'') || ' ' || IFNULL(UnitName3,'') || ' ' || IFNULL(UnitName4,'') || ' ' || IFNULL(UsfwsCode,'') || ' ' || IFNULL(Visibility,'') || ' ' || IFNULL(AcceptedID,'') || ' ' || IFNULL(StdExAuthorID,'') || ' ' || IFNULL(TaxonTreeDefItemID,'') || ' ' || IFNULL(HybridParent2ID,'') || ' ' || IFNULL(StdAuthorID,'') || ' ' || IFNULL(ParentID,'') || ' ' || IFNULL(TaxonTreeDefID,'') || ' ' || IFNULL(CitInAuthorID,'') || ' ' || IFNULL(SanctAuthorID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ParAuthorID,'') || ' ' || IFNULL(BasionymID,'') || ' ' || IFNULL(HybridParent1ID,'') || ' ' || IFNULL(ParExAuthorID,'') || ' ' || IFNULL(VisibilitySetByID,'')) FROM taxon order by Author, CitesStatus, CommonName, EnvironmentalProtectionStatus, FullName, GUID, HighestChildNodeNumber, Name, NodeNumber, RankID, TaxonomicSerialNumber, AcceptedID, StdExAuthorID, TaxonTreeDefItemID, HybridParent2ID, StdAuthorID, ParentID, TaxonTreeDefID, CitInAuthorID, SanctAuthorID, ModifiedByAgentID, CreatedByAgentID, ParAuthorID, BasionymID, HybridParent1ID, ParExAuthorID, VisibilitySetByID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM taxon order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByAuthor($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE Author $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE Author $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCitesStatus($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE CitesStatus $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE CitesStatus $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCommonName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE CommonName $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE CommonName $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByEnvironmentalProtectionStatus($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE EnvironmentalProtectionStatus $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE EnvironmentalProtectionStatus $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByFullName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE FullName $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE FullName $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGUID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE GUID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE GUID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByHighestChildNodeNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE HighestChildNodeNumber $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE HighestChildNodeNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE Name $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE Name $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByNodeNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE NodeNumber $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE NodeNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByRankID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE RankID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE RankID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByTaxonomicSerialNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE TaxonomicSerialNumber $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE TaxonomicSerialNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAcceptedID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE AcceptedID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE AcceptedID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByStdExAuthorID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE StdExAuthorID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE StdExAuthorID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByTaxonTreeDefItemID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE TaxonTreeDefItemID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE TaxonTreeDefItemID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByHybridParent2ID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE HybridParent2ID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE HybridParent2ID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByStdAuthorID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE StdAuthorID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE StdAuthorID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByParentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE ParentID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE ParentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByTaxonTreeDefID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE TaxonTreeDefID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE TaxonTreeDefID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCitInAuthorID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE CitInAuthorID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE CitInAuthorID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayBySanctAuthorID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE SanctAuthorID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE SanctAuthorID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByParAuthorID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE ParAuthorID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE ParAuthorID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByBasionymID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE BasionymID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE BasionymID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByHybridParent1ID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE HybridParent1ID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE HybridParent1ID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByParExAuthorID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE ParExAuthorID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE ParExAuthorID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByVisibilitySetByID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TaxonID FROM taxon WHERE VisibilitySetByID $operator '$searchTerm'";
        $preparedsql = "SELECT TaxonID FROM taxon WHERE VisibilitySetByID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_taxon();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctAuthor($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Author ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Author FROM taxon group by Author order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Author=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCitesStatus($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CitesStatus ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CitesStatus FROM taxon group by CitesStatus order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CitesStatus=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCommonName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CommonName ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CommonName FROM taxon group by CommonName order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CommonName=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctEnvironmentalProtectionStatus($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' EnvironmentalProtectionStatus ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, EnvironmentalProtectionStatus FROM taxon group by EnvironmentalProtectionStatus order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&EnvironmentalProtectionStatus=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctFullName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' FullName ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, FullName FROM taxon group by FullName order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&FullName=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGUID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GUID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GUID FROM taxon group by GUID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GUID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctHighestChildNodeNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' HighestChildNodeNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, HighestChildNodeNumber FROM taxon group by HighestChildNodeNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&HighestChildNodeNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Name ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Name FROM taxon group by Name order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Name=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctNodeNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' NodeNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, NodeNumber FROM taxon group by NodeNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&NodeNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctRankID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' RankID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, RankID FROM taxon group by RankID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&RankID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctTaxonomicSerialNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' TaxonomicSerialNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, TaxonomicSerialNumber FROM taxon group by TaxonomicSerialNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&TaxonomicSerialNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAcceptedID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AcceptedID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AcceptedID FROM taxon group by AcceptedID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AcceptedID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctStdExAuthorID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' StdExAuthorID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, StdExAuthorID FROM taxon group by StdExAuthorID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&StdExAuthorID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctTaxonTreeDefItemID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' TaxonTreeDefItemID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, TaxonTreeDefItemID FROM taxon group by TaxonTreeDefItemID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&TaxonTreeDefItemID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctHybridParent2ID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' HybridParent2ID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, HybridParent2ID FROM taxon group by HybridParent2ID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&HybridParent2ID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctStdAuthorID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' StdAuthorID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, StdAuthorID FROM taxon group by StdAuthorID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&StdAuthorID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctParentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ParentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ParentID FROM taxon group by ParentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ParentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctTaxonTreeDefID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' TaxonTreeDefID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, TaxonTreeDefID FROM taxon group by TaxonTreeDefID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&TaxonTreeDefID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCitInAuthorID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CitInAuthorID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CitInAuthorID FROM taxon group by CitInAuthorID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CitInAuthorID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctSanctAuthorID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' SanctAuthorID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, SanctAuthorID FROM taxon group by SanctAuthorID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&SanctAuthorID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM taxon group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM taxon group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctParAuthorID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ParAuthorID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ParAuthorID FROM taxon group by ParAuthorID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ParAuthorID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctBasionymID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' BasionymID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, BasionymID FROM taxon group by BasionymID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&BasionymID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctHybridParent1ID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' HybridParent1ID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, HybridParent1ID FROM taxon group by HybridParent1ID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&HybridParent1ID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctParExAuthorID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ParExAuthorID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ParExAuthorID FROM taxon group by ParExAuthorID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ParExAuthorID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctVisibilitySetByID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' VisibilitySetByID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, VisibilitySetByID FROM taxon group by VisibilitySetByID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&VisibilitySetByID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'Author':
             $returnvalue = $this->selectDistinctAuthor($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CitesStatus':
             $returnvalue = $this->selectDistinctCitesStatus($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CommonName':
             $returnvalue = $this->selectDistinctCommonName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'EnvironmentalProtectionStatus':
             $returnvalue = $this->selectDistinctEnvironmentalProtectionStatus($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'FullName':
             $returnvalue = $this->selectDistinctFullName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GUID':
             $returnvalue = $this->selectDistinctGUID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'HighestChildNodeNumber':
             $returnvalue = $this->selectDistinctHighestChildNodeNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'Name':
             $returnvalue = $this->selectDistinctName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'NodeNumber':
             $returnvalue = $this->selectDistinctNodeNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'RankID':
             $returnvalue = $this->selectDistinctRankID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'TaxonomicSerialNumber':
             $returnvalue = $this->selectDistinctTaxonomicSerialNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AcceptedID':
             $returnvalue = $this->selectDistinctAcceptedID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'StdExAuthorID':
             $returnvalue = $this->selectDistinctStdExAuthorID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'TaxonTreeDefItemID':
             $returnvalue = $this->selectDistinctTaxonTreeDefItemID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'HybridParent2ID':
             $returnvalue = $this->selectDistinctHybridParent2ID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'StdAuthorID':
             $returnvalue = $this->selectDistinctStdAuthorID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ParentID':
             $returnvalue = $this->selectDistinctParentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'TaxonTreeDefID':
             $returnvalue = $this->selectDistinctTaxonTreeDefID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CitInAuthorID':
             $returnvalue = $this->selectDistinctCitInAuthorID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'SanctAuthorID':
             $returnvalue = $this->selectDistinctSanctAuthorID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ParAuthorID':
             $returnvalue = $this->selectDistinctParAuthorID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'BasionymID':
             $returnvalue = $this->selectDistinctBasionymID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'HybridParent1ID':
             $returnvalue = $this->selectDistinctHybridParent1ID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ParExAuthorID':
             $returnvalue = $this->selectDistinctParExAuthorID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'VisibilitySetByID':
             $returnvalue = $this->selectDistinctVisibilitySetByID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the taxon.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_taxonView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_taxon <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_taxon::TAXONID.": ".$model->getTaxonID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::AUTHOR.": ".$model->getAuthor()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::CITESSTATUS.": ".$model->getCitesStatus()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::COLSTATUS.": ".$model->getCOLStatus()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::COMMONNAME.": ".$model->getCommonName()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::CULTIVARNAME.": ".$model->getCultivarName()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::ENVIRONMENTALPROTECTIONSTATUS.": ".$model->getEnvironmentalProtectionStatus()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::ESASTATUS.": ".$model->getEsaStatus()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::FULLNAME.": ".$model->getFullName()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::GROUPNUMBER.": ".$model->getGroupNumber()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::GUID.": ".$model->getGUID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::HIGHESTCHILDNODENUMBER.": ".$model->getHighestChildNodeNumber()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::ISACCEPTED.": ".$model->getIsAccepted()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::ISHYBRID.": ".$model->getIsHybrid()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::ISISNUMBER.": ".$model->getIsisNumber()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::LABELFORMAT.": ".$model->getLabelFormat()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::NAME.": ".$model->getName()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::NCBITAXONNUMBER.": ".$model->getNcbiTaxonNumber()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::NODENUMBER.": ".$model->getNodeNumber()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::RANKID.": ".$model->getRankID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::SOURCE.": ".$model->getSource()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::TAXONOMICSERIALNUMBER.": ".$model->getTaxonomicSerialNumber()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::UNITIND1.": ".$model->getUnitInd1()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::UNITIND2.": ".$model->getUnitInd2()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::UNITIND3.": ".$model->getUnitInd3()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::UNITIND4.": ".$model->getUnitInd4()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::UNITNAME1.": ".$model->getUnitName1()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::UNITNAME2.": ".$model->getUnitName2()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::UNITNAME3.": ".$model->getUnitName3()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::UNITNAME4.": ".$model->getUnitName4()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::USFWSCODE.": ".$model->getUsfwsCode()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::VISIBILITY.": ".$model->getVisibility()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::ACCEPTEDID.": ".$model->getAcceptedID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::STDEXAUTHORID.": ".$model->getStdExAuthorID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::TAXONTREEDEFITEMID.": ".$model->getTaxonTreeDefItemID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::HYBRIDPARENT2ID.": ".$model->getHybridParent2ID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::STDAUTHORID.": ".$model->getStdAuthorID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::PARENTID.": ".$model->getParentID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::TAXONTREEDEFID.": ".$model->getTaxonTreeDefID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::CITINAUTHORID.": ".$model->getCitInAuthorID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::SANCTAUTHORID.": ".$model->getSanctAuthorID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::PARAUTHORID.": ".$model->getParAuthorID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::BASIONYMID.": ".$model->getBasionymID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::HYBRIDPARENT1ID.": ".$model->getHybridParent1ID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::PAREXAUTHORID.": ".$model->getParExAuthorID()."</li>\n";
       $returnvalue .= "<li>".huh_taxon::VISIBILITYSETBYID.": ".$model->getVisibilitySetByID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>taxon</li>";
           $t_taxon = new huh_taxon();
           $t_taxonView = new huh_taxonView();
           $t_taxonView->setModel($t_taxon);
           if ($model->getAcceptedID() != '') { 
               $t_taxon->load($model->getAcceptedID());
               $returnvalue .= $t_taxonView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getStdExAuthorID() != '') { 
               $t_agent->load($model->getStdExAuthorID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>taxontreedefitem</li>";
           $t_taxontreedefitem = new huh_taxontreedefitem();
           $t_taxontreedefitemView = new huh_taxontreedefitemView();
           $t_taxontreedefitemView->setModel($t_taxontreedefitem);
           if ($model->getTaxonTreeDefItemID() != '') { 
               $t_taxontreedefitem->load($model->getTaxonTreeDefItemID());
               $returnvalue .= $t_taxontreedefitemView->getDetailsView(false);
           }
           $returnvalue .= "<li>taxon</li>";
           $t_taxon = new huh_taxon();
           $t_taxonView = new huh_taxonView();
           $t_taxonView->setModel($t_taxon);
           if ($model->getHybridParent2ID() != '') { 
               $t_taxon->load($model->getHybridParent2ID());
               $returnvalue .= $t_taxonView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getStdAuthorID() != '') { 
               $t_agent->load($model->getStdAuthorID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>taxon</li>";
           $t_taxon = new huh_taxon();
           $t_taxonView = new huh_taxonView();
           $t_taxonView->setModel($t_taxon);
           if ($model->getParentID() != '') { 
               $t_taxon->load($model->getParentID());
               $returnvalue .= $t_taxonView->getDetailsView(false);
           }
           $returnvalue .= "<li>taxontreedef</li>";
           $t_taxontreedef = new huh_taxontreedef();
           $t_taxontreedefView = new huh_taxontreedefView();
           $t_taxontreedefView->setModel($t_taxontreedef);
           if ($model->getTaxonTreeDefID() != '') { 
               $t_taxontreedef->load($model->getTaxonTreeDefID());
               $returnvalue .= $t_taxontreedefView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCitInAuthorID() != '') { 
               $t_agent->load($model->getCitInAuthorID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getSanctAuthorID() != '') { 
               $t_agent->load($model->getSanctAuthorID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getParAuthorID() != '') { 
               $t_agent->load($model->getParAuthorID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>taxon</li>";
           $t_taxon = new huh_taxon();
           $t_taxonView = new huh_taxonView();
           $t_taxonView->setModel($t_taxon);
           if ($model->getBasionymID() != '') { 
               $t_taxon->load($model->getBasionymID());
               $returnvalue .= $t_taxonView->getDetailsView(false);
           }
           $returnvalue .= "<li>taxon</li>";
           $t_taxon = new huh_taxon();
           $t_taxonView = new huh_taxonView();
           $t_taxonView->setModel($t_taxon);
           if ($model->getHybridParent1ID() != '') { 
               $t_taxon->load($model->getHybridParent1ID());
               $returnvalue .= $t_taxonView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getParExAuthorID() != '') { 
               $t_agent->load($model->getParExAuthorID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>specifyuser</li>";
           $t_specifyuser = new huh_specifyuser();
           $t_specifyuserView = new huh_specifyuserView();
           $t_specifyuserView->setModel($t_specifyuser);
           if ($model->getVisibilitySetByID() != '') { 
               $t_specifyuser->load($model->getVisibilitySetByID());
               $returnvalue .= $t_specifyuserView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_taxon::TAXONID.': "'.$model->getTaxonID().'",';
       $returnvalue .= '"'.huh_taxon::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_taxon::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_taxon::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_taxon::AUTHOR.': "'.$model->getAuthor().'",';
       $returnvalue .= '"'.huh_taxon::CITESSTATUS.': "'.$model->getCitesStatus().'",';
       $returnvalue .= '"'.huh_taxon::COLSTATUS.': "'.$model->getCOLStatus().'",';
       $returnvalue .= '"'.huh_taxon::COMMONNAME.': "'.$model->getCommonName().'",';
       $returnvalue .= '"'.huh_taxon::CULTIVARNAME.': "'.$model->getCultivarName().'",';
       $returnvalue .= '"'.huh_taxon::ENVIRONMENTALPROTECTIONSTATUS.': "'.$model->getEnvironmentalProtectionStatus().'",';
       $returnvalue .= '"'.huh_taxon::ESASTATUS.': "'.$model->getEsaStatus().'",';
       $returnvalue .= '"'.huh_taxon::FULLNAME.': "'.$model->getFullName().'",';
       $returnvalue .= '"'.huh_taxon::GROUPNUMBER.': "'.$model->getGroupNumber().'",';
       $returnvalue .= '"'.huh_taxon::GUID.': "'.$model->getGUID().'",';
       $returnvalue .= '"'.huh_taxon::HIGHESTCHILDNODENUMBER.': "'.$model->getHighestChildNodeNumber().'",';
       $returnvalue .= '"'.huh_taxon::ISACCEPTED.': "'.$model->getIsAccepted().'",';
       $returnvalue .= '"'.huh_taxon::ISHYBRID.': "'.$model->getIsHybrid().'",';
       $returnvalue .= '"'.huh_taxon::ISISNUMBER.': "'.$model->getIsisNumber().'",';
       $returnvalue .= '"'.huh_taxon::LABELFORMAT.': "'.$model->getLabelFormat().'",';
       $returnvalue .= '"'.huh_taxon::NAME.': "'.$model->getName().'",';
       $returnvalue .= '"'.huh_taxon::NCBITAXONNUMBER.': "'.$model->getNcbiTaxonNumber().'",';
       $returnvalue .= '"'.huh_taxon::NODENUMBER.': "'.$model->getNodeNumber().'",';
       $returnvalue .= '"'.huh_taxon::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_taxon::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_taxon::RANKID.': "'.$model->getRankID().'",';
       $returnvalue .= '"'.huh_taxon::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_taxon::SOURCE.': "'.$model->getSource().'",';
       $returnvalue .= '"'.huh_taxon::TAXONOMICSERIALNUMBER.': "'.$model->getTaxonomicSerialNumber().'",';
       $returnvalue .= '"'.huh_taxon::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_taxon::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_taxon::UNITIND1.': "'.$model->getUnitInd1().'",';
       $returnvalue .= '"'.huh_taxon::UNITIND2.': "'.$model->getUnitInd2().'",';
       $returnvalue .= '"'.huh_taxon::UNITIND3.': "'.$model->getUnitInd3().'",';
       $returnvalue .= '"'.huh_taxon::UNITIND4.': "'.$model->getUnitInd4().'",';
       $returnvalue .= '"'.huh_taxon::UNITNAME1.': "'.$model->getUnitName1().'",';
       $returnvalue .= '"'.huh_taxon::UNITNAME2.': "'.$model->getUnitName2().'",';
       $returnvalue .= '"'.huh_taxon::UNITNAME3.': "'.$model->getUnitName3().'",';
       $returnvalue .= '"'.huh_taxon::UNITNAME4.': "'.$model->getUnitName4().'",';
       $returnvalue .= '"'.huh_taxon::USFWSCODE.': "'.$model->getUsfwsCode().'",';
       $returnvalue .= '"'.huh_taxon::VISIBILITY.': "'.$model->getVisibility().'",';
       $returnvalue .= '"'.huh_taxon::ACCEPTEDID.': "'.$model->getAcceptedID().'",';
       $returnvalue .= '"'.huh_taxon::STDEXAUTHORID.': "'.$model->getStdExAuthorID().'",';
       $returnvalue .= '"'.huh_taxon::TAXONTREEDEFITEMID.': "'.$model->getTaxonTreeDefItemID().'",';
       $returnvalue .= '"'.huh_taxon::HYBRIDPARENT2ID.': "'.$model->getHybridParent2ID().'",';
       $returnvalue .= '"'.huh_taxon::STDAUTHORID.': "'.$model->getStdAuthorID().'",';
       $returnvalue .= '"'.huh_taxon::PARENTID.': "'.$model->getParentID().'",';
       $returnvalue .= '"'.huh_taxon::TAXONTREEDEFID.': "'.$model->getTaxonTreeDefID().'",';
       $returnvalue .= '"'.huh_taxon::CITINAUTHORID.': "'.$model->getCitInAuthorID().'",';
       $returnvalue .= '"'.huh_taxon::SANCTAUTHORID.': "'.$model->getSanctAuthorID().'",';
       $returnvalue .= '"'.huh_taxon::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_taxon::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_taxon::PARAUTHORID.': "'.$model->getParAuthorID().'",';
       $returnvalue .= '"'.huh_taxon::BASIONYMID.': "'.$model->getBasionymID().'",';
       $returnvalue .= '"'.huh_taxon::HYBRIDPARENT1ID.': "'.$model->getHybridParent1ID().'",';
       $returnvalue .= '"'.huh_taxon::PAREXAUTHORID.': "'.$model->getParExAuthorID().'",';
       $returnvalue .= '"'.huh_taxon::VISIBILITYSETBYID.': "'.$model->getVisibilitySetByID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getTaxonID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getAuthor()."</td>\n";
       $returnvalue .= "<td>".$model->getCitesStatus()."</td>\n";
       $returnvalue .= "<td>".$model->getCOLStatus()."</td>\n";
       $returnvalue .= "<td>".$model->getCommonName()."</td>\n";
       $returnvalue .= "<td>".$model->getCultivarName()."</td>\n";
       $returnvalue .= "<td>".$model->getEnvironmentalProtectionStatus()."</td>\n";
       $returnvalue .= "<td>".$model->getEsaStatus()."</td>\n";
       $returnvalue .= "<td>".$model->getFullName()."</td>\n";
       $returnvalue .= "<td>".$model->getGroupNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getGUID()."</td>\n";
       $returnvalue .= "<td>".$model->getHighestChildNodeNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getIsAccepted()."</td>\n";
       $returnvalue .= "<td>".$model->getIsHybrid()."</td>\n";
       $returnvalue .= "<td>".$model->getIsisNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getLabelFormat()."</td>\n";
       $returnvalue .= "<td>".$model->getName()."</td>\n";
       $returnvalue .= "<td>".$model->getNcbiTaxonNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getNodeNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getRankID()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getSource()."</td>\n";
       $returnvalue .= "<td>".$model->getTaxonomicSerialNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getUnitInd1()."</td>\n";
       $returnvalue .= "<td>".$model->getUnitInd2()."</td>\n";
       $returnvalue .= "<td>".$model->getUnitInd3()."</td>\n";
       $returnvalue .= "<td>".$model->getUnitInd4()."</td>\n";
       $returnvalue .= "<td>".$model->getUnitName1()."</td>\n";
       $returnvalue .= "<td>".$model->getUnitName2()."</td>\n";
       $returnvalue .= "<td>".$model->getUnitName3()."</td>\n";
       $returnvalue .= "<td>".$model->getUnitName4()."</td>\n";
       $returnvalue .= "<td>".$model->getUsfwsCode()."</td>\n";
       $returnvalue .= "<td>".$model->getVisibility()."</td>\n";
       $returnvalue .= "<td>".$model->getAcceptedID()."</td>\n";
       $returnvalue .= "<td>".$model->getStdExAuthorID()."</td>\n";
       $returnvalue .= "<td>".$model->getTaxonTreeDefItemID()."</td>\n";
       $returnvalue .= "<td>".$model->getHybridParent2ID()."</td>\n";
       $returnvalue .= "<td>".$model->getStdAuthorID()."</td>\n";
       $returnvalue .= "<td>".$model->getParentID()."</td>\n";
       $returnvalue .= "<td>".$model->getTaxonTreeDefID()."</td>\n";
       $returnvalue .= "<td>".$model->getCitInAuthorID()."</td>\n";
       $returnvalue .= "<td>".$model->getSanctAuthorID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getParAuthorID()."</td>\n";
       $returnvalue .= "<td>".$model->getBasionymID()."</td>\n";
       $returnvalue .= "<td>".$model->getHybridParent1ID()."</td>\n";
       $returnvalue .= "<td>".$model->getParExAuthorID()."</td>\n";
       $returnvalue .= "<td>".$model->getVisibilitySetByID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_taxon::TAXONID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_taxon::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_taxon::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_taxon::AUTHOR."</th>\n";
       $returnvalue .= "<th>".huh_taxon::CITESSTATUS."</th>\n";
       $returnvalue .= "<th>".huh_taxon::COLSTATUS."</th>\n";
       $returnvalue .= "<th>".huh_taxon::COMMONNAME."</th>\n";
       $returnvalue .= "<th>".huh_taxon::CULTIVARNAME."</th>\n";
       $returnvalue .= "<th>".huh_taxon::ENVIRONMENTALPROTECTIONSTATUS."</th>\n";
       $returnvalue .= "<th>".huh_taxon::ESASTATUS."</th>\n";
       $returnvalue .= "<th>".huh_taxon::FULLNAME."</th>\n";
       $returnvalue .= "<th>".huh_taxon::GROUPNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_taxon::GUID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::HIGHESTCHILDNODENUMBER."</th>\n";
       $returnvalue .= "<th>".huh_taxon::ISACCEPTED."</th>\n";
       $returnvalue .= "<th>".huh_taxon::ISHYBRID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::ISISNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_taxon::LABELFORMAT."</th>\n";
       $returnvalue .= "<th>".huh_taxon::NAME."</th>\n";
       $returnvalue .= "<th>".huh_taxon::NCBITAXONNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_taxon::NODENUMBER."</th>\n";
       $returnvalue .= "<th>".huh_taxon::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_taxon::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_taxon::RANKID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_taxon::SOURCE."</th>\n";
       $returnvalue .= "<th>".huh_taxon::TAXONOMICSERIALNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_taxon::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_taxon::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_taxon::UNITIND1."</th>\n";
       $returnvalue .= "<th>".huh_taxon::UNITIND2."</th>\n";
       $returnvalue .= "<th>".huh_taxon::UNITIND3."</th>\n";
       $returnvalue .= "<th>".huh_taxon::UNITIND4."</th>\n";
       $returnvalue .= "<th>".huh_taxon::UNITNAME1."</th>\n";
       $returnvalue .= "<th>".huh_taxon::UNITNAME2."</th>\n";
       $returnvalue .= "<th>".huh_taxon::UNITNAME3."</th>\n";
       $returnvalue .= "<th>".huh_taxon::UNITNAME4."</th>\n";
       $returnvalue .= "<th>".huh_taxon::USFWSCODE."</th>\n";
       $returnvalue .= "<th>".huh_taxon::VISIBILITY."</th>\n";
       $returnvalue .= "<th>".huh_taxon::ACCEPTEDID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::STDEXAUTHORID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::TAXONTREEDEFITEMID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::HYBRIDPARENT2ID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::STDAUTHORID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::PARENTID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::TAXONTREEDEFID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::CITINAUTHORID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::SANCTAUTHORID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::PARAUTHORID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::BASIONYMID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::HYBRIDPARENT1ID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::PAREXAUTHORID."</th>\n";
       $returnvalue .= "<th>".huh_taxon::VISIBILITYSETBYID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_taxon">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new TaxonID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_taxon::TAXONID.">TAXONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::TAXONID." id=".huh_taxon::TAXONID." value='".$model->getTaxonID()."'  style=' width:".huh_taxon::TAXONID_SIZE ."em;  '  maxlength='".huh_taxon::TAXONID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_taxon::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::TIMESTAMPCREATED." id=".huh_taxon::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_taxon::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_taxon::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::TIMESTAMPMODIFIED." id=".huh_taxon::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_taxon::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_taxon::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::VERSION." id=".huh_taxon::VERSION." value='".$model->getVersion()."'  style=' width:".huh_taxon::VERSION_SIZE ."em;  '  maxlength='".huh_taxon::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::AUTHOR.">AUTHOR</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_taxon::AUTHOR." id=".huh_taxon::AUTHOR." >".$model->getAuthor()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::CITESSTATUS.">CITESSTATUS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::CITESSTATUS." id=".huh_taxon::CITESSTATUS." value='".$model->getCitesStatus()."'  style=' width:".huh_taxon::CITESSTATUS_SIZE ."em;  '  maxlength='".huh_taxon::CITESSTATUS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::COLSTATUS.">COLSTATUS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::COLSTATUS." id=".huh_taxon::COLSTATUS." value='".$model->getCOLStatus()."'  style=' width:".huh_taxon::COLSTATUS_SIZE ."em;  '  maxlength='".huh_taxon::COLSTATUS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::COMMONNAME.">COMMONNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_taxon::COMMONNAME." id=".huh_taxon::COMMONNAME." >".$model->getCommonName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::CULTIVARNAME.">CULTIVARNAME</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::CULTIVARNAME." id=".huh_taxon::CULTIVARNAME." value='".$model->getCultivarName()."'  style=' width:".huh_taxon::CULTIVARNAME_SIZE ."em;  '  maxlength='".huh_taxon::CULTIVARNAME_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::ENVIRONMENTALPROTECTIONSTATUS.">ENVIRONMENTALPROTECTIONSTATUS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_taxon::ENVIRONMENTALPROTECTIONSTATUS." id=".huh_taxon::ENVIRONMENTALPROTECTIONSTATUS." >".$model->getEnvironmentalProtectionStatus()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::ESASTATUS.">ESASTATUS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_taxon::ESASTATUS." id=".huh_taxon::ESASTATUS." >".$model->getEsaStatus()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::FULLNAME.">FULLNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_taxon::FULLNAME." id=".huh_taxon::FULLNAME." >".$model->getFullName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::GROUPNUMBER.">GROUPNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::GROUPNUMBER." id=".huh_taxon::GROUPNUMBER." value='".$model->getGroupNumber()."'  style=' width:".huh_taxon::GROUPNUMBER_SIZE ."em;  '  maxlength='".huh_taxon::GROUPNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::GUID.">GUID</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_taxon::GUID." id=".huh_taxon::GUID." >".$model->getGUID()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::HIGHESTCHILDNODENUMBER.">HIGHESTCHILDNODENUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::HIGHESTCHILDNODENUMBER." id=".huh_taxon::HIGHESTCHILDNODENUMBER." value='".$model->getHighestChildNodeNumber()."'  style=' width:".huh_taxon::HIGHESTCHILDNODENUMBER_SIZE ."em;  '  maxlength='".huh_taxon::HIGHESTCHILDNODENUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::ISACCEPTED.">ISACCEPTED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::ISACCEPTED." id=".huh_taxon::ISACCEPTED." value='".$model->getIsAccepted()."'  style=' width:".huh_taxon::ISACCEPTED_SIZE ."em;  '  maxlength='".huh_taxon::ISACCEPTED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::ISHYBRID.">ISHYBRID</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::ISHYBRID." id=".huh_taxon::ISHYBRID." value='".$model->getIsHybrid()."'  style=' width:".huh_taxon::ISHYBRID_SIZE ."em;  '  maxlength='".huh_taxon::ISHYBRID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::ISISNUMBER.">ISISNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::ISISNUMBER." id=".huh_taxon::ISISNUMBER." value='".$model->getIsisNumber()."'  style=' width:".huh_taxon::ISISNUMBER_SIZE ."em;  '  maxlength='".huh_taxon::ISISNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::LABELFORMAT.">LABELFORMAT</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_taxon::LABELFORMAT." id=".huh_taxon::LABELFORMAT." >".$model->getLabelFormat()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::NAME.">NAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_taxon::NAME." id=".huh_taxon::NAME." >".$model->getName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::NCBITAXONNUMBER.">NCBITAXONNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::NCBITAXONNUMBER." id=".huh_taxon::NCBITAXONNUMBER." value='".$model->getNcbiTaxonNumber()."'  style=' width:".huh_taxon::NCBITAXONNUMBER_SIZE ."em;  '  maxlength='".huh_taxon::NCBITAXONNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::NODENUMBER.">NODENUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::NODENUMBER." id=".huh_taxon::NODENUMBER." value='".$model->getNodeNumber()."'  style=' width:".huh_taxon::NODENUMBER_SIZE ."em;  '  maxlength='".huh_taxon::NODENUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::NUMBER1." id=".huh_taxon::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_taxon::NUMBER1_SIZE ."em;  '  maxlength='".huh_taxon::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::NUMBER2." id=".huh_taxon::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_taxon::NUMBER2_SIZE ."em;  '  maxlength='".huh_taxon::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::RANKID.">RANKID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::RANKID." id=".huh_taxon::RANKID." value='".$model->getRankID()."'  style=' width:".huh_taxon::RANKID_SIZE ."em;  '  maxlength='".huh_taxon::RANKID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_taxon::REMARKS." id=".huh_taxon::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::SOURCE.">SOURCE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_taxon::SOURCE." id=".huh_taxon::SOURCE." >".$model->getSource()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::TAXONOMICSERIALNUMBER.">TAXONOMICSERIALNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::TAXONOMICSERIALNUMBER." id=".huh_taxon::TAXONOMICSERIALNUMBER." value='".$model->getTaxonomicSerialNumber()."'  style=' width:".huh_taxon::TAXONOMICSERIALNUMBER_SIZE ."em;  '  maxlength='".huh_taxon::TAXONOMICSERIALNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::TEXT1.">TEXT1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::TEXT1." id=".huh_taxon::TEXT1." value='".$model->getText1()."'  style=' width:".huh_taxon::TEXT1_SIZE ."em;  '  maxlength='".huh_taxon::TEXT1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_taxon::TEXT2." id=".huh_taxon::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::UNITIND1.">UNITIND1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::UNITIND1." id=".huh_taxon::UNITIND1." value='".$model->getUnitInd1()."'  style=' width:".huh_taxon::UNITIND1_SIZE ."em;  '  maxlength='".huh_taxon::UNITIND1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::UNITIND2.">UNITIND2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::UNITIND2." id=".huh_taxon::UNITIND2." value='".$model->getUnitInd2()."'  style=' width:".huh_taxon::UNITIND2_SIZE ."em;  '  maxlength='".huh_taxon::UNITIND2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::UNITIND3.">UNITIND3</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::UNITIND3." id=".huh_taxon::UNITIND3." value='".$model->getUnitInd3()."'  style=' width:".huh_taxon::UNITIND3_SIZE ."em;  '  maxlength='".huh_taxon::UNITIND3_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::UNITIND4.">UNITIND4</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::UNITIND4." id=".huh_taxon::UNITIND4." value='".$model->getUnitInd4()."'  style=' width:".huh_taxon::UNITIND4_SIZE ."em;  '  maxlength='".huh_taxon::UNITIND4_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::UNITNAME1.">UNITNAME1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::UNITNAME1." id=".huh_taxon::UNITNAME1." value='".$model->getUnitName1()."'  style=' width:".huh_taxon::UNITNAME1_SIZE ."em;  '  maxlength='".huh_taxon::UNITNAME1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::UNITNAME2.">UNITNAME2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::UNITNAME2." id=".huh_taxon::UNITNAME2." value='".$model->getUnitName2()."'  style=' width:".huh_taxon::UNITNAME2_SIZE ."em;  '  maxlength='".huh_taxon::UNITNAME2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::UNITNAME3.">UNITNAME3</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::UNITNAME3." id=".huh_taxon::UNITNAME3." value='".$model->getUnitName3()."'  style=' width:".huh_taxon::UNITNAME3_SIZE ."em;  '  maxlength='".huh_taxon::UNITNAME3_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::UNITNAME4.">UNITNAME4</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::UNITNAME4." id=".huh_taxon::UNITNAME4." value='".$model->getUnitName4()."'  style=' width:".huh_taxon::UNITNAME4_SIZE ."em;  '  maxlength='".huh_taxon::UNITNAME4_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::USFWSCODE.">USFWSCODE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::USFWSCODE." id=".huh_taxon::USFWSCODE." value='".$model->getUsfwsCode()."'  style=' width:".huh_taxon::USFWSCODE_SIZE ."em;  '  maxlength='".huh_taxon::USFWSCODE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::VISIBILITY.">VISIBILITY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_taxon::VISIBILITY." id=".huh_taxon::VISIBILITY." value='".$model->getVisibility()."'  style=' width:".huh_taxon::VISIBILITY_SIZE ."em;  '  maxlength='".huh_taxon::VISIBILITY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::ACCEPTEDID.">ACCEPTEDID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::ACCEPTEDID." id=".huh_taxon::ACCEPTEDID." value='".$model->getAcceptedID()."'  style=' width:".huh_taxon::ACCEPTEDID_SIZE ."em;  '  maxlength='".huh_taxon::ACCEPTEDID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::STDEXAUTHORID.">STDEXAUTHORID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::STDEXAUTHORID." id=".huh_taxon::STDEXAUTHORID." value='".$model->getStdExAuthorID()."'  style=' width:".huh_taxon::STDEXAUTHORID_SIZE ."em;  '  maxlength='".huh_taxon::STDEXAUTHORID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::TAXONTREEDEFITEMID.">TAXONTREEDEFITEMID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::TAXONTREEDEFITEMID." id=".huh_taxon::TAXONTREEDEFITEMID." value='".$model->getTaxonTreeDefItemID()."'  style=' width:".huh_taxon::TAXONTREEDEFITEMID_SIZE ."em;  '  maxlength='".huh_taxon::TAXONTREEDEFITEMID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::HYBRIDPARENT2ID.">HYBRIDPARENT2ID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::HYBRIDPARENT2ID." id=".huh_taxon::HYBRIDPARENT2ID." value='".$model->getHybridParent2ID()."'  style=' width:".huh_taxon::HYBRIDPARENT2ID_SIZE ."em;  '  maxlength='".huh_taxon::HYBRIDPARENT2ID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::STDAUTHORID.">STDAUTHORID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::STDAUTHORID." id=".huh_taxon::STDAUTHORID." value='".$model->getStdAuthorID()."'  style=' width:".huh_taxon::STDAUTHORID_SIZE ."em;  '  maxlength='".huh_taxon::STDAUTHORID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::PARENTID.">PARENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::PARENTID." id=".huh_taxon::PARENTID." value='".$model->getParentID()."'  style=' width:".huh_taxon::PARENTID_SIZE ."em;  '  maxlength='".huh_taxon::PARENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::TAXONTREEDEFID.">TAXONTREEDEFID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::TAXONTREEDEFID." id=".huh_taxon::TAXONTREEDEFID." value='".$model->getTaxonTreeDefID()."'  style=' width:".huh_taxon::TAXONTREEDEFID_SIZE ."em;  '  maxlength='".huh_taxon::TAXONTREEDEFID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::CITINAUTHORID.">CITINAUTHORID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::CITINAUTHORID." id=".huh_taxon::CITINAUTHORID." value='".$model->getCitInAuthorID()."'  style=' width:".huh_taxon::CITINAUTHORID_SIZE ."em;  '  maxlength='".huh_taxon::CITINAUTHORID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::SANCTAUTHORID.">SANCTAUTHORID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::SANCTAUTHORID." id=".huh_taxon::SANCTAUTHORID." value='".$model->getSanctAuthorID()."'  style=' width:".huh_taxon::SANCTAUTHORID_SIZE ."em;  '  maxlength='".huh_taxon::SANCTAUTHORID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::MODIFIEDBYAGENTID." id=".huh_taxon::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_taxon::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_taxon::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::CREATEDBYAGENTID." id=".huh_taxon::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_taxon::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_taxon::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::PARAUTHORID.">PARAUTHORID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::PARAUTHORID." id=".huh_taxon::PARAUTHORID." value='".$model->getParAuthorID()."'  style=' width:".huh_taxon::PARAUTHORID_SIZE ."em;  '  maxlength='".huh_taxon::PARAUTHORID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::BASIONYMID.">BASIONYMID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::BASIONYMID." id=".huh_taxon::BASIONYMID." value='".$model->getBasionymID()."'  style=' width:".huh_taxon::BASIONYMID_SIZE ."em;  '  maxlength='".huh_taxon::BASIONYMID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::HYBRIDPARENT1ID.">HYBRIDPARENT1ID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::HYBRIDPARENT1ID." id=".huh_taxon::HYBRIDPARENT1ID." value='".$model->getHybridParent1ID()."'  style=' width:".huh_taxon::HYBRIDPARENT1ID_SIZE ."em;  '  maxlength='".huh_taxon::HYBRIDPARENT1ID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::PAREXAUTHORID.">PAREXAUTHORID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::PAREXAUTHORID." id=".huh_taxon::PAREXAUTHORID." value='".$model->getParExAuthorID()."'  style=' width:".huh_taxon::PAREXAUTHORID_SIZE ."em;  '  maxlength='".huh_taxon::PAREXAUTHORID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_taxon::VISIBILITYSETBYID.">VISIBILITYSETBYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_taxon::VISIBILITYSETBYID." id=".huh_taxon::VISIBILITYSETBYID." value='".$model->getVisibilitySetByID()."'  style=' width:".huh_taxon::VISIBILITYSETBYID_SIZE ."em;  '  maxlength='".huh_taxon::VISIBILITYSETBYID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_taxon">';
       $returnvalue .= '<input type=hidden name=TaxonID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_taxon">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>TAXONID<input type=text name=".huh_taxon::TAXONID." id=".huh_taxon::TAXONID." value='".$model->getTaxonID()."'  size='".huh_taxon::TAXONID_SIZE ."'  maxlength='".huh_taxon::TAXONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_taxon::TIMESTAMPCREATED." id=".huh_taxon::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_taxon::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_taxon::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_taxon::TIMESTAMPMODIFIED." id=".huh_taxon::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_taxon::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_taxon::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_taxon::VERSION." id=".huh_taxon::VERSION." value='".$model->getVersion()."'  size='".huh_taxon::VERSION_SIZE ."'  maxlength='".huh_taxon::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>AUTHOR<input type=text name=".huh_taxon::AUTHOR." id=".huh_taxon::AUTHOR." value='".$model->getAuthor()."'  size='51'  maxlength='".huh_taxon::AUTHOR_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CITESSTATUS<input type=text name=".huh_taxon::CITESSTATUS." id=".huh_taxon::CITESSTATUS." value='".$model->getCitesStatus()."'  size='".huh_taxon::CITESSTATUS_SIZE ."'  maxlength='".huh_taxon::CITESSTATUS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLSTATUS<input type=text name=".huh_taxon::COLSTATUS." id=".huh_taxon::COLSTATUS." value='".$model->getCOLStatus()."'  size='".huh_taxon::COLSTATUS_SIZE ."'  maxlength='".huh_taxon::COLSTATUS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COMMONNAME<input type=text name=".huh_taxon::COMMONNAME." id=".huh_taxon::COMMONNAME." value='".$model->getCommonName()."'  size='51'  maxlength='".huh_taxon::COMMONNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CULTIVARNAME<input type=text name=".huh_taxon::CULTIVARNAME." id=".huh_taxon::CULTIVARNAME." value='".$model->getCultivarName()."'  size='".huh_taxon::CULTIVARNAME_SIZE ."'  maxlength='".huh_taxon::CULTIVARNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ENVIRONMENTALPROTECTIONSTATUS<input type=text name=".huh_taxon::ENVIRONMENTALPROTECTIONSTATUS." id=".huh_taxon::ENVIRONMENTALPROTECTIONSTATUS." value='".$model->getEnvironmentalProtectionStatus()."'  size='51'  maxlength='".huh_taxon::ENVIRONMENTALPROTECTIONSTATUS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ESASTATUS<input type=text name=".huh_taxon::ESASTATUS." id=".huh_taxon::ESASTATUS." value='".$model->getEsaStatus()."'  size='51'  maxlength='".huh_taxon::ESASTATUS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FULLNAME<input type=text name=".huh_taxon::FULLNAME." id=".huh_taxon::FULLNAME." value='".$model->getFullName()."'  size='51'  maxlength='".huh_taxon::FULLNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GROUPNUMBER<input type=text name=".huh_taxon::GROUPNUMBER." id=".huh_taxon::GROUPNUMBER." value='".$model->getGroupNumber()."'  size='".huh_taxon::GROUPNUMBER_SIZE ."'  maxlength='".huh_taxon::GROUPNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GUID<input type=text name=".huh_taxon::GUID." id=".huh_taxon::GUID." value='".$model->getGUID()."'  size='51'  maxlength='".huh_taxon::GUID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>HIGHESTCHILDNODENUMBER<input type=text name=".huh_taxon::HIGHESTCHILDNODENUMBER." id=".huh_taxon::HIGHESTCHILDNODENUMBER." value='".$model->getHighestChildNodeNumber()."'  size='".huh_taxon::HIGHESTCHILDNODENUMBER_SIZE ."'  maxlength='".huh_taxon::HIGHESTCHILDNODENUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISACCEPTED<input type=text name=".huh_taxon::ISACCEPTED." id=".huh_taxon::ISACCEPTED." value='".$model->getIsAccepted()."'  size='".huh_taxon::ISACCEPTED_SIZE ."'  maxlength='".huh_taxon::ISACCEPTED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISHYBRID<input type=text name=".huh_taxon::ISHYBRID." id=".huh_taxon::ISHYBRID." value='".$model->getIsHybrid()."'  size='".huh_taxon::ISHYBRID_SIZE ."'  maxlength='".huh_taxon::ISHYBRID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISISNUMBER<input type=text name=".huh_taxon::ISISNUMBER." id=".huh_taxon::ISISNUMBER." value='".$model->getIsisNumber()."'  size='".huh_taxon::ISISNUMBER_SIZE ."'  maxlength='".huh_taxon::ISISNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LABELFORMAT<input type=text name=".huh_taxon::LABELFORMAT." id=".huh_taxon::LABELFORMAT." value='".$model->getLabelFormat()."'  size='51'  maxlength='".huh_taxon::LABELFORMAT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NAME<input type=text name=".huh_taxon::NAME." id=".huh_taxon::NAME." value='".$model->getName()."'  size='51'  maxlength='".huh_taxon::NAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NCBITAXONNUMBER<input type=text name=".huh_taxon::NCBITAXONNUMBER." id=".huh_taxon::NCBITAXONNUMBER." value='".$model->getNcbiTaxonNumber()."'  size='".huh_taxon::NCBITAXONNUMBER_SIZE ."'  maxlength='".huh_taxon::NCBITAXONNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NODENUMBER<input type=text name=".huh_taxon::NODENUMBER." id=".huh_taxon::NODENUMBER." value='".$model->getNodeNumber()."'  size='".huh_taxon::NODENUMBER_SIZE ."'  maxlength='".huh_taxon::NODENUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_taxon::NUMBER1." id=".huh_taxon::NUMBER1." value='".$model->getNumber1()."'  size='".huh_taxon::NUMBER1_SIZE ."'  maxlength='".huh_taxon::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_taxon::NUMBER2." id=".huh_taxon::NUMBER2." value='".$model->getNumber2()."'  size='".huh_taxon::NUMBER2_SIZE ."'  maxlength='".huh_taxon::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RANKID<input type=text name=".huh_taxon::RANKID." id=".huh_taxon::RANKID." value='".$model->getRankID()."'  size='".huh_taxon::RANKID_SIZE ."'  maxlength='".huh_taxon::RANKID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_taxon::REMARKS." id=".huh_taxon::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_taxon::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SOURCE<input type=text name=".huh_taxon::SOURCE." id=".huh_taxon::SOURCE." value='".$model->getSource()."'  size='51'  maxlength='".huh_taxon::SOURCE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TAXONOMICSERIALNUMBER<input type=text name=".huh_taxon::TAXONOMICSERIALNUMBER." id=".huh_taxon::TAXONOMICSERIALNUMBER." value='".$model->getTaxonomicSerialNumber()."'  size='".huh_taxon::TAXONOMICSERIALNUMBER_SIZE ."'  maxlength='".huh_taxon::TAXONOMICSERIALNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_taxon::TEXT1." id=".huh_taxon::TEXT1." value='".$model->getText1()."'  size='".huh_taxon::TEXT1_SIZE ."'  maxlength='".huh_taxon::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_taxon::TEXT2." id=".huh_taxon::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_taxon::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UNITIND1<input type=text name=".huh_taxon::UNITIND1." id=".huh_taxon::UNITIND1." value='".$model->getUnitInd1()."'  size='".huh_taxon::UNITIND1_SIZE ."'  maxlength='".huh_taxon::UNITIND1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UNITIND2<input type=text name=".huh_taxon::UNITIND2." id=".huh_taxon::UNITIND2." value='".$model->getUnitInd2()."'  size='".huh_taxon::UNITIND2_SIZE ."'  maxlength='".huh_taxon::UNITIND2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UNITIND3<input type=text name=".huh_taxon::UNITIND3." id=".huh_taxon::UNITIND3." value='".$model->getUnitInd3()."'  size='".huh_taxon::UNITIND3_SIZE ."'  maxlength='".huh_taxon::UNITIND3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UNITIND4<input type=text name=".huh_taxon::UNITIND4." id=".huh_taxon::UNITIND4." value='".$model->getUnitInd4()."'  size='".huh_taxon::UNITIND4_SIZE ."'  maxlength='".huh_taxon::UNITIND4_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UNITNAME1<input type=text name=".huh_taxon::UNITNAME1." id=".huh_taxon::UNITNAME1." value='".$model->getUnitName1()."'  size='".huh_taxon::UNITNAME1_SIZE ."'  maxlength='".huh_taxon::UNITNAME1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UNITNAME2<input type=text name=".huh_taxon::UNITNAME2." id=".huh_taxon::UNITNAME2." value='".$model->getUnitName2()."'  size='".huh_taxon::UNITNAME2_SIZE ."'  maxlength='".huh_taxon::UNITNAME2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UNITNAME3<input type=text name=".huh_taxon::UNITNAME3." id=".huh_taxon::UNITNAME3." value='".$model->getUnitName3()."'  size='".huh_taxon::UNITNAME3_SIZE ."'  maxlength='".huh_taxon::UNITNAME3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UNITNAME4<input type=text name=".huh_taxon::UNITNAME4." id=".huh_taxon::UNITNAME4." value='".$model->getUnitName4()."'  size='".huh_taxon::UNITNAME4_SIZE ."'  maxlength='".huh_taxon::UNITNAME4_SIZE ."' ></li>\n";
       $returnvalue .= "<li>USFWSCODE<input type=text name=".huh_taxon::USFWSCODE." id=".huh_taxon::USFWSCODE." value='".$model->getUsfwsCode()."'  size='".huh_taxon::USFWSCODE_SIZE ."'  maxlength='".huh_taxon::USFWSCODE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VISIBILITY<input type=text name=".huh_taxon::VISIBILITY." id=".huh_taxon::VISIBILITY." value='".$model->getVisibility()."'  size='".huh_taxon::VISIBILITY_SIZE ."'  maxlength='".huh_taxon::VISIBILITY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ACCEPTEDID<input type=text name=".huh_taxon::ACCEPTEDID." id=".huh_taxon::ACCEPTEDID." value='".$model->getAcceptedID()."'  size='".huh_taxon::ACCEPTEDID_SIZE ."'  maxlength='".huh_taxon::ACCEPTEDID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STDEXAUTHORID<input type=text name=".huh_taxon::STDEXAUTHORID." id=".huh_taxon::STDEXAUTHORID." value='".$model->getStdExAuthorID()."'  size='".huh_taxon::STDEXAUTHORID_SIZE ."'  maxlength='".huh_taxon::STDEXAUTHORID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TAXONTREEDEFITEMID<input type=text name=".huh_taxon::TAXONTREEDEFITEMID." id=".huh_taxon::TAXONTREEDEFITEMID." value='".$model->getTaxonTreeDefItemID()."'  size='".huh_taxon::TAXONTREEDEFITEMID_SIZE ."'  maxlength='".huh_taxon::TAXONTREEDEFITEMID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>HYBRIDPARENT2ID<input type=text name=".huh_taxon::HYBRIDPARENT2ID." id=".huh_taxon::HYBRIDPARENT2ID." value='".$model->getHybridParent2ID()."'  size='".huh_taxon::HYBRIDPARENT2ID_SIZE ."'  maxlength='".huh_taxon::HYBRIDPARENT2ID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STDAUTHORID<input type=text name=".huh_taxon::STDAUTHORID." id=".huh_taxon::STDAUTHORID." value='".$model->getStdAuthorID()."'  size='".huh_taxon::STDAUTHORID_SIZE ."'  maxlength='".huh_taxon::STDAUTHORID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PARENTID<input type=text name=".huh_taxon::PARENTID." id=".huh_taxon::PARENTID." value='".$model->getParentID()."'  size='".huh_taxon::PARENTID_SIZE ."'  maxlength='".huh_taxon::PARENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TAXONTREEDEFID<input type=text name=".huh_taxon::TAXONTREEDEFID." id=".huh_taxon::TAXONTREEDEFID." value='".$model->getTaxonTreeDefID()."'  size='".huh_taxon::TAXONTREEDEFID_SIZE ."'  maxlength='".huh_taxon::TAXONTREEDEFID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CITINAUTHORID<input type=text name=".huh_taxon::CITINAUTHORID." id=".huh_taxon::CITINAUTHORID." value='".$model->getCitInAuthorID()."'  size='".huh_taxon::CITINAUTHORID_SIZE ."'  maxlength='".huh_taxon::CITINAUTHORID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SANCTAUTHORID<input type=text name=".huh_taxon::SANCTAUTHORID." id=".huh_taxon::SANCTAUTHORID." value='".$model->getSanctAuthorID()."'  size='".huh_taxon::SANCTAUTHORID_SIZE ."'  maxlength='".huh_taxon::SANCTAUTHORID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_taxon::MODIFIEDBYAGENTID." id=".huh_taxon::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_taxon::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_taxon::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_taxon::CREATEDBYAGENTID." id=".huh_taxon::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_taxon::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_taxon::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PARAUTHORID<input type=text name=".huh_taxon::PARAUTHORID." id=".huh_taxon::PARAUTHORID." value='".$model->getParAuthorID()."'  size='".huh_taxon::PARAUTHORID_SIZE ."'  maxlength='".huh_taxon::PARAUTHORID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>BASIONYMID<input type=text name=".huh_taxon::BASIONYMID." id=".huh_taxon::BASIONYMID." value='".$model->getBasionymID()."'  size='".huh_taxon::BASIONYMID_SIZE ."'  maxlength='".huh_taxon::BASIONYMID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>HYBRIDPARENT1ID<input type=text name=".huh_taxon::HYBRIDPARENT1ID." id=".huh_taxon::HYBRIDPARENT1ID." value='".$model->getHybridParent1ID()."'  size='".huh_taxon::HYBRIDPARENT1ID_SIZE ."'  maxlength='".huh_taxon::HYBRIDPARENT1ID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PAREXAUTHORID<input type=text name=".huh_taxon::PAREXAUTHORID." id=".huh_taxon::PAREXAUTHORID." value='".$model->getParExAuthorID()."'  size='".huh_taxon::PAREXAUTHORID_SIZE ."'  maxlength='".huh_taxon::PAREXAUTHORID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VISIBILITYSETBYID<input type=text name=".huh_taxon::VISIBILITYSETBYID." id=".huh_taxon::VISIBILITYSETBYID." value='".$model->getVisibilitySetByID()."'  size='".huh_taxon::VISIBILITYSETBYID_SIZE ."'  maxlength='".huh_taxon::VISIBILITYSETBYID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
