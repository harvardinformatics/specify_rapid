<?php
//==============================================================================
//===   storage.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_storage implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const STORAGEID_SIZE       = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const ABBREV_SIZE          = 16; //16
   const FULLNAME_SIZE        = 255; //255
   const HIGHESTCHILDNODENUMBER_SIZE = 11; //INTEGER
   const ISACCEPTED_SIZE      = 1; //1
   const NAME_SIZE            = 255; //255
   const NODENUMBER_SIZE      = 11; //INTEGER
   const NUMBER1_SIZE         = 11; //INTEGER
   const NUMBER2_SIZE         = 11; //INTEGER
   const RANKID_SIZE          = 11; //INTEGER
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const TEXT1_SIZE           = 20; //YEAR
   const TEXT2_SIZE           = 32; //32
   const TIMESTAMPVERSION_SIZE = 21; //TIMESTAMP
   const STORAGETREEDEFID_SIZE = 11; //INTEGER
   const STORAGETREEDEFITEMID_SIZE = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const PARENTID_SIZE        = 11; //INTEGER
   const ACCEPTEDID_SIZE      = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const STORAGEID         = 'StorageID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const ABBREV            = 'Abbrev';
   const FULLNAME          = 'FullName';
   const HIGHESTCHILDNODENUMBER = 'HighestChildNodeNumber';
   const ISACCEPTED        = 'IsAccepted';
   const NAME              = 'name';
   const NODENUMBER        = 'NodeNumber';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const RANKID            = 'RankID';
   const REMARKS           = 'Remarks';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const TIMESTAMPVERSION  = 'TimestampVersion';
   const STORAGETREEDEFID  = 'StorageTreeDefID';
   const STORAGETREEDEFITEMID = 'StorageTreeDefItemID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const PARENTID          = 'ParentID';
   const ACCEPTEDID        = 'AcceptedID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $StorageID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['StorageID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $Abbrev = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Abbrev']), 0, 16);
  $FullName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FullName']), 0, 255);
  $HighestChildNodeNumber = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['HighestChildNodeNumber']), 0, 11);
  $IsAccepted = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsAccepted']), 0, 1);
  $name = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['name']), 0, 255);
  $NodeNumber = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['NodeNumber']), 0, 11);
  $Number1 = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Number1']), 0, 11);
  $Number2 = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Number2']), 0, 11);
  $RankID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['RankID']), 0, 11);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 20);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 32);
  $TimestampVersion = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampVersion']), 0, 21);
  $StorageTreeDefID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['StorageTreeDefID']), 0, 11);
  $StorageTreeDefItemID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['StorageTreeDefItemID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $ParentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ParentID']), 0, 11);
  $AcceptedID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AcceptedID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $StorageID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $Abbrev; // VARCHAR(16) 
   private $FullName; // VARCHAR(255) 
   private $HighestChildNodeNumber; // INTEGER 
   private $IsAccepted; // BIT(1) 
   private $name; // VARCHAR(255) 
   private $NodeNumber; // INTEGER 
   private $Number1; // INTEGER 
   private $Number2; // INTEGER 
   private $RankID; // INTEGER 
   private $Remarks; // LONGVARCHAR 
   private $Text1; // YEAR 
   private $Text2; // VARCHAR(32) 
   private $TimestampVersion; // TIMESTAMP 
   private $StorageTreeDefID; // INTEGER 
   private $StorageTreeDefItemID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $ParentID; // INTEGER 
   private $AcceptedID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' StorageID, TimestampCreated, TimestampModified, Version, Abbrev, FullName, HighestChildNodeNumber, IsAccepted, name, NodeNumber, Number1, Number2, RankID, Remarks, Text1, Text2, TimestampVersion, StorageTreeDefID, StorageTreeDefItemID, CreatedByAgentID, ModifiedByAgentID, ParentID, AcceptedID, ';
   const PKFIELDLIST = ' StorageID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'StorageID'  ) ;
   private $allFieldsArray = array( 0 => 'StorageID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'Abbrev' , 5 => 'FullName' , 6 => 'HighestChildNodeNumber' , 7 => 'IsAccepted' , 8 => 'name' , 9 => 'NodeNumber' , 10 => 'Number1' , 11 => 'Number2' , 12 => 'RankID' , 13 => 'Remarks' , 14 => 'Text1' , 15 => 'Text2' , 16 => 'TimestampVersion' , 17 => 'StorageTreeDefID' , 18 => 'StorageTreeDefItemID' , 19 => 'CreatedByAgentID' , 20 => 'ModifiedByAgentID' , 21 => 'ParentID' , 22 => 'AcceptedID'  ) ;
   private $selectDistinctFieldsArray = array( 5 => 'FullName' , 6 => 'HighestChildNodeNumber' , 8 => 'name' , 9 => 'NodeNumber' , 17 => 'StorageTreeDefID' , 18 => 'StorageTreeDefItemID' , 19 => 'CreatedByAgentID' , 20 => 'ModifiedByAgentID' , 21 => 'ParentID' , 22 => 'AcceptedID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_storage(){
       $this->StorageID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->Abbrev = '';
       $this->FullName = '';
       $this->HighestChildNodeNumber = '';
       $this->IsAccepted = '';
       $this->name = '';
       $this->NodeNumber = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->RankID = '';
       $this->Remarks = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->TimestampVersion = '';
       $this->StorageTreeDefID = '';
       $this->StorageTreeDefItemID = '';
       $this->CreatedByAgentID = '';
       $this->ModifiedByAgentID = '';
       $this->ParentID = '';
       $this->AcceptedID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='StorageID') { $returnvalue = $this->setStorageID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='Abbrev') { $returnvalue = $this->setAbbrev($value); } 
             if ($fieldname=='FullName') { $returnvalue = $this->setFullName($value); } 
             if ($fieldname=='HighestChildNodeNumber') { $returnvalue = $this->setHighestChildNodeNumber($value); } 
             if ($fieldname=='IsAccepted') { $returnvalue = $this->setIsAccepted($value); } 
             if ($fieldname=='name') { $returnvalue = $this->setname($value); } 
             if ($fieldname=='NodeNumber') { $returnvalue = $this->setNodeNumber($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='RankID') { $returnvalue = $this->setRankID($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='TimestampVersion') { $returnvalue = $this->setTimestampVersion($value); } 
             if ($fieldname=='StorageTreeDefID') { $returnvalue = $this->setStorageTreeDefID($value); } 
             if ($fieldname=='StorageTreeDefItemID') { $returnvalue = $this->setStorageTreeDefItemID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='ParentID') { $returnvalue = $this->setParentID($value); } 
             if ($fieldname=='AcceptedID') { $returnvalue = $this->setAcceptedID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='StorageID') { $returnvalue = $this->getStorageID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='Abbrev') { $returnvalue = $this->getAbbrev(); } 
             if ($fieldname=='FullName') { $returnvalue = $this->getFullName(); } 
             if ($fieldname=='HighestChildNodeNumber') { $returnvalue = $this->getHighestChildNodeNumber(); } 
             if ($fieldname=='IsAccepted') { $returnvalue = $this->getIsAccepted(); } 
             if ($fieldname=='name') { $returnvalue = $this->getname(); } 
             if ($fieldname=='NodeNumber') { $returnvalue = $this->getNodeNumber(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='RankID') { $returnvalue = $this->getRankID(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='TimestampVersion') { $returnvalue = $this->getTimestampVersion(); } 
             if ($fieldname=='StorageTreeDefID') { $returnvalue = $this->getStorageTreeDefID(); } 
             if ($fieldname=='StorageTreeDefItemID') { $returnvalue = $this->getStorageTreeDefItemID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='ParentID') { $returnvalue = $this->getParentID(); } 
             if ($fieldname=='AcceptedID') { $returnvalue = $this->getAcceptedID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*StorageID*/
   public function getStorageID() {
       if ($this->StorageID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StorageID));
       }
   }
   public function setStorageID($StorageID) {
       if (strlen(preg_replace('/[^0-9]/','',$StorageID)) > huh_storage::STORAGEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $StorageID = trim($StorageID);
       if (!ctype_digit(strval($StorageID)) && trim(strval($StorageID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->StorageID = $this->l_addslashes($StorageID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_storage::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_storage::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_storage::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*Abbrev*/
   public function getAbbrev() {
       if ($this->Abbrev==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Abbrev));
       }
   }
   public function setAbbrev($Abbrev) {
       if (strlen($Abbrev) > huh_storage::ABBREV_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Abbrev = $this->l_addslashes($Abbrev);
       $this->dirty = true;
   }
/*FullName*/
   public function getFullName() {
       if ($this->FullName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FullName));
       }
   }
   public function setFullName($FullName) {
       if (strlen($FullName) > huh_storage::FULLNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FullName = $this->l_addslashes($FullName);
       $this->dirty = true;
   }
/*HighestChildNodeNumber*/
   public function getHighestChildNodeNumber() {
       if ($this->HighestChildNodeNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->HighestChildNodeNumber));
       }
   }
   public function setHighestChildNodeNumber($HighestChildNodeNumber) {
       if (strlen(preg_replace('/[^0-9]/','',$HighestChildNodeNumber)) > huh_storage::HIGHESTCHILDNODENUMBER_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $HighestChildNodeNumber = trim($HighestChildNodeNumber);
       if (!ctype_digit(strval($HighestChildNodeNumber)) && trim(strval($HighestChildNodeNumber))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->HighestChildNodeNumber = $this->l_addslashes($HighestChildNodeNumber);
       $this->dirty = true;
   }
/*IsAccepted*/
   public function getIsAccepted() {
       if ($this->IsAccepted==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsAccepted));
       }
   }
   public function setIsAccepted($IsAccepted) {
       if (strlen($IsAccepted) > huh_storage::ISACCEPTED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsAccepted = $this->l_addslashes($IsAccepted);
       $this->dirty = true;
   }
/*name*/
   public function getname() {
       if ($this->name==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->name));
       }
   }
   public function setname($name) {
       if (strlen($name) > huh_storage::NAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->name = $this->l_addslashes($name);
       $this->dirty = true;
   }
/*NodeNumber*/
   public function getNodeNumber() {
       if ($this->NodeNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NodeNumber));
       }
   }
   public function setNodeNumber($NodeNumber) {
       if (strlen(preg_replace('/[^0-9]/','',$NodeNumber)) > huh_storage::NODENUMBER_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $NodeNumber = trim($NodeNumber);
       if (!ctype_digit(strval($NodeNumber)) && trim(strval($NodeNumber))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->NodeNumber = $this->l_addslashes($NodeNumber);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen(preg_replace('/[^0-9]/','',$Number1)) > huh_storage::NUMBER1_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Number1 = trim($Number1);
       if (!ctype_digit(strval($Number1)) && trim(strval($Number1))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen(preg_replace('/[^0-9]/','',$Number2)) > huh_storage::NUMBER2_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Number2 = trim($Number2);
       if (!ctype_digit(strval($Number2)) && trim(strval($Number2))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*RankID*/
   public function getRankID() {
       if ($this->RankID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RankID));
       }
   }
   public function setRankID($RankID) {
       if (strlen(preg_replace('/[^0-9]/','',$RankID)) > huh_storage::RANKID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $RankID = trim($RankID);
       if (!ctype_digit(strval($RankID))) {
             throw new Exception("Value must be an integer");
       }
       $this->RankID = $this->l_addslashes($RankID);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_storage::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_storage::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_storage::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*TimestampVersion*/
   public function getTimestampVersion() {
       if ($this->TimestampVersion==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampVersion));
       }
   }
   public function setTimestampVersion($TimestampVersion) {
       if (strlen($TimestampVersion) > huh_storage::TIMESTAMPVERSION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampVersion = $this->l_addslashes($TimestampVersion);
       $this->dirty = true;
   }
/*StorageTreeDefID*/
   public function getStorageTreeDefID() {
       if ($this->StorageTreeDefID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StorageTreeDefID));
       }
   }
   public function setStorageTreeDefID($StorageTreeDefID) {
       if (strlen(preg_replace('/[^0-9]/','',$StorageTreeDefID)) > huh_storage::STORAGETREEDEFID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $StorageTreeDefID = trim($StorageTreeDefID);
       if (!ctype_digit(strval($StorageTreeDefID))) {
             throw new Exception("Value must be an integer");
       }
       $this->StorageTreeDefID = $this->l_addslashes($StorageTreeDefID);
       $this->dirty = true;
   }
/*StorageTreeDefItemID*/
   public function getStorageTreeDefItemID() {
       if ($this->StorageTreeDefItemID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StorageTreeDefItemID));
       }
   }
   public function setStorageTreeDefItemID($StorageTreeDefItemID) {
       if (strlen(preg_replace('/[^0-9]/','',$StorageTreeDefItemID)) > huh_storage::STORAGETREEDEFITEMID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $StorageTreeDefItemID = trim($StorageTreeDefItemID);
       if (!ctype_digit(strval($StorageTreeDefItemID))) {
             throw new Exception("Value must be an integer");
       }
       $this->StorageTreeDefItemID = $this->l_addslashes($StorageTreeDefItemID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_storage::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_storage::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*ParentID*/
   public function getParentID() {
       if ($this->ParentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ParentID));
       }
   }
   public function setParentID($ParentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ParentID)) > huh_storage::PARENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ParentID = trim($ParentID);
       if (!ctype_digit(strval($ParentID)) && trim(strval($ParentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ParentID = $this->l_addslashes($ParentID);
       $this->dirty = true;
   }
/*AcceptedID*/
   public function getAcceptedID() {
       if ($this->AcceptedID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AcceptedID));
       }
   }
   public function setAcceptedID($AcceptedID) {
       if (strlen(preg_replace('/[^0-9]/','',$AcceptedID)) > huh_storage::ACCEPTEDID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AcceptedID = trim($AcceptedID);
       if (!ctype_digit(strval($AcceptedID)) && trim(strval($AcceptedID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AcceptedID = $this->l_addslashes($AcceptedID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getStorageID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['StorageID'] = $this->getStorageID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_StorageIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_AbbrevMYSQLI_TYPE = 's';
  const C_FullNameMYSQLI_TYPE = 's';
  const C_HighestChildNodeNumberMYSQLI_TYPE = 'i';
  const C_IsAcceptedMYSQLI_TYPE = 'i';
  const C_nameMYSQLI_TYPE = 's';
  const C_NodeNumberMYSQLI_TYPE = 'i';
  const C_Number1MYSQLI_TYPE = 'i';
  const C_Number2MYSQLI_TYPE = 'i';
  const C_RankIDMYSQLI_TYPE = 'i';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_TimestampVersionMYSQLI_TYPE = 's';
  const C_StorageTreeDefIDMYSQLI_TYPE = 'i';
  const C_StorageTreeDefItemIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_ParentIDMYSQLI_TYPE = 'i';
  const C_AcceptedIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='StorageID') { $retval = self::C_StorageIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='Abbrev') { $retval = self::C_AbbrevMYSQLI_TYPE; }
      if ($aFieldname=='FullName') { $retval = self::C_FullNameMYSQLI_TYPE; }
      if ($aFieldname=='HighestChildNodeNumber') { $retval = self::C_HighestChildNodeNumberMYSQLI_TYPE; }
      if ($aFieldname=='IsAccepted') { $retval = self::C_IsAcceptedMYSQLI_TYPE; }
      if ($aFieldname=='name') { $retval = self::C_nameMYSQLI_TYPE; }
      if ($aFieldname=='NodeNumber') { $retval = self::C_NodeNumberMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='RankID') { $retval = self::C_RankIDMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='TimestampVersion') { $retval = self::C_TimestampVersionMYSQLI_TYPE; }
      if ($aFieldname=='StorageTreeDefID') { $retval = self::C_StorageTreeDefIDMYSQLI_TYPE; }
      if ($aFieldname=='StorageTreeDefItemID') { $retval = self::C_StorageTreeDefItemIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ParentID') { $retval = self::C_ParentIDMYSQLI_TYPE; }
      if ($aFieldname=='AcceptedID') { $retval = self::C_AcceptedIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setStorageID($pk[StorageID]);
             } else { ;
                 $this->setStorageID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->StorageID != NULL) {
           $sql = 'SELECT StorageID, TimestampCreated, TimestampModified, Version, Abbrev, FullName, HighestChildNodeNumber, IsAccepted, name, NodeNumber, Number1, Number2, RankID, Remarks, Text1, Text2, TimestampVersion, StorageTreeDefID, StorageTreeDefItemID, CreatedByAgentID, ModifiedByAgentID, ParentID, AcceptedID FROM storage WHERE StorageID = '.$this->StorageID ;

           $preparesql = 'SELECT StorageID, TimestampCreated, TimestampModified, Version, Abbrev, FullName, HighestChildNodeNumber, IsAccepted, name, NodeNumber, Number1, Number2, RankID, Remarks, Text1, Text2, TimestampVersion, StorageTreeDefID, StorageTreeDefItemID, CreatedByAgentID, ModifiedByAgentID, ParentID, AcceptedID FROM storage WHERE StorageID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->StorageID);
              $statement->execute();
              $statement->bind_result($this->StorageID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Abbrev, $this->FullName, $this->HighestChildNodeNumber, $this->IsAccepted, $this->name, $this->NodeNumber, $this->Number1, $this->Number2, $this->RankID, $this->Remarks, $this->Text1, $this->Text2, $this->TimestampVersion, $this->StorageTreeDefID, $this->StorageTreeDefItemID, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->ParentID, $this->AcceptedID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->StorageID!= NULL) {
            $sql  = 'UPDATE  storage SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", Abbrev = ? ";
            $sql .=  ", FullName = ? ";
            $sql .=  ", HighestChildNodeNumber = ? ";
            $sql .=  ", IsAccepted = ? ";
            $sql .=  ", name = ? ";
            $sql .=  ", NodeNumber = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", RankID = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", TimestampVersion = ? ";
            $sql .=  ", StorageTreeDefID = ? ";
            $sql .=  ", StorageTreeDefItemID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", ParentID = ? ";
            $sql .=  ", AcceptedID = ? ";

            $sql .= "  WHERE StorageID = ? ";
        } else {
            $sql  = 'INSERT INTO storage ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( StorageID ,  TimestampCreated ,  TimestampModified ,  Version ,  Abbrev ,  FullName ,  HighestChildNodeNumber ,  IsAccepted ,  name ,  NodeNumber ,  Number1 ,  Number2 ,  RankID ,  Remarks ,  Text1 ,  Text2 ,  TimestampVersion ,  StorageTreeDefID ,  StorageTreeDefItemID ,  CreatedByAgentID ,  ModifiedByAgentID ,  ParentID ,  AcceptedID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->StorageID!= NULL ) {
              $statement->bind_param("ississiisiiiissssiiiiiii", $this->StorageID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Abbrev , $this->FullName , $this->HighestChildNodeNumber , $this->IsAccepted , $this->name , $this->NodeNumber , $this->Number1 , $this->Number2 , $this->RankID , $this->Remarks , $this->Text1 , $this->Text2 , $this->TimestampVersion , $this->StorageTreeDefID , $this->StorageTreeDefItemID , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->ParentID , $this->AcceptedID , $this->StorageID );
           } else { 
              $statement->bind_param("ississiisiiiissssiiiiii", $this->StorageID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Abbrev , $this->FullName , $this->HighestChildNodeNumber , $this->IsAccepted , $this->name , $this->NodeNumber , $this->Number1 , $this->Number2 , $this->RankID , $this->Remarks , $this->Text1 , $this->Text2 , $this->TimestampVersion , $this->StorageTreeDefID , $this->StorageTreeDefItemID , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->ParentID , $this->AcceptedID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->StorageID != NULL) {
           $sql = 'SELECT StorageID, TimestampCreated, TimestampModified, Version, Abbrev, FullName, HighestChildNodeNumber, IsAccepted, name, NodeNumber, Number1, Number2, RankID, Remarks, Text1, Text2, TimestampVersion, StorageTreeDefID, StorageTreeDefItemID, CreatedByAgentID, ModifiedByAgentID, ParentID, AcceptedID FROM storage WHERE StorageID = "'.$this->StorageID.'"  ' ;

           $preparedsql = 'SELECT  FROM storage WHERE  and StorageID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississiisiiiissssiiiiii", $this->StorageID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Abbrev, $this->FullName, $this->HighestChildNodeNumber, $this->IsAccepted, $this->name, $this->NodeNumber, $this->Number1, $this->Number2, $this->RankID, $this->Remarks, $this->Text1, $this->Text2, $this->TimestampVersion, $this->StorageTreeDefID, $this->StorageTreeDefItemID, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->ParentID, $this->AcceptedID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM storage WHERE  and StorageID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississiisiiiissssiiiiii", $this->StorageID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Abbrev, $this->FullName, $this->HighestChildNodeNumber, $this->IsAccepted, $this->name, $this->NodeNumber, $this->Number1, $this->Number2, $this->RankID, $this->Remarks, $this->Text1, $this->Text2, $this->TimestampVersion, $this->StorageTreeDefID, $this->StorageTreeDefItemID, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->ParentID, $this->AcceptedID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->StorageID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM storage';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT StorageID FROM storage $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_storage();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFrompreparation() { 
      // ForeignKey in: preparation
      $t = new preparation();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: StorageTreeDefID
      $t = new storagetreedef();
      $t->load(getStorageTreeDefID());
      $returnvalue[StorageTreeDefID] = $t;
       // fk: StorageTreeDefItemID
      $t = new storagetreedefitem();
      $t->load(getStorageTreeDefItemID());
      $returnvalue[StorageTreeDefItemID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: ParentID
      $t = new storage();
      $t->load(getParentID());
      $returnvalue[ParentID] = $t;
       // fk: AcceptedID
      $t = new storage();
      $t->load(getAcceptedID());
      $returnvalue[AcceptedID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT StorageID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(Abbrev,'') || ' ' || IFNULL(FullName,'') || ' ' || IFNULL(HighestChildNodeNumber,'') || ' ' || IFNULL(IsAccepted,'') || ' ' || IFNULL(name,'') || ' ' || IFNULL(NodeNumber,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(RankID,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(TimestampVersion,'') || ' ' || IFNULL(StorageTreeDefID,'') || ' ' || IFNULL(StorageTreeDefItemID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(ParentID,'') || ' ' || IFNULL(AcceptedID,'')) FROM storage order by FullName, HighestChildNodeNumber, name, NodeNumber, StorageTreeDefID, StorageTreeDefItemID, CreatedByAgentID, ModifiedByAgentID, ParentID, AcceptedID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM storage order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByFullName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT StorageID FROM storage WHERE FullName $operator '$searchTerm'";
        $preparedsql = "SELECT StorageID FROM storage WHERE FullName $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_storage();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByHighestChildNodeNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT StorageID FROM storage WHERE HighestChildNodeNumber $operator '$searchTerm'";
        $preparedsql = "SELECT StorageID FROM storage WHERE HighestChildNodeNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_storage();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByname($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT StorageID FROM storage WHERE name $operator '$searchTerm'";
        $preparedsql = "SELECT StorageID FROM storage WHERE name $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_storage();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByNodeNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT StorageID FROM storage WHERE NodeNumber $operator '$searchTerm'";
        $preparedsql = "SELECT StorageID FROM storage WHERE NodeNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_storage();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByStorageTreeDefID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT StorageID FROM storage WHERE StorageTreeDefID $operator '$searchTerm'";
        $preparedsql = "SELECT StorageID FROM storage WHERE StorageTreeDefID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_storage();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByStorageTreeDefItemID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT StorageID FROM storage WHERE StorageTreeDefItemID $operator '$searchTerm'";
        $preparedsql = "SELECT StorageID FROM storage WHERE StorageTreeDefItemID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_storage();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT StorageID FROM storage WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT StorageID FROM storage WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_storage();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT StorageID FROM storage WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT StorageID FROM storage WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_storage();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByParentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT StorageID FROM storage WHERE ParentID $operator '$searchTerm'";
        $preparedsql = "SELECT StorageID FROM storage WHERE ParentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_storage();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAcceptedID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT StorageID FROM storage WHERE AcceptedID $operator '$searchTerm'";
        $preparedsql = "SELECT StorageID FROM storage WHERE AcceptedID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_storage();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctFullName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' FullName ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, FullName FROM storage group by FullName order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&FullName=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctHighestChildNodeNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' HighestChildNodeNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, HighestChildNodeNumber FROM storage group by HighestChildNodeNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&HighestChildNodeNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctname($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' name ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, name FROM storage group by name order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&name=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctNodeNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' NodeNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, NodeNumber FROM storage group by NodeNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&NodeNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctStorageTreeDefID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' StorageTreeDefID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, StorageTreeDefID FROM storage group by StorageTreeDefID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&StorageTreeDefID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctStorageTreeDefItemID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' StorageTreeDefItemID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, StorageTreeDefItemID FROM storage group by StorageTreeDefItemID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&StorageTreeDefItemID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM storage group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM storage group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctParentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ParentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ParentID FROM storage group by ParentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ParentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAcceptedID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AcceptedID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AcceptedID FROM storage group by AcceptedID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AcceptedID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'FullName':
             $returnvalue = $this->selectDistinctFullName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'HighestChildNodeNumber':
             $returnvalue = $this->selectDistinctHighestChildNodeNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'name':
             $returnvalue = $this->selectDistinctname($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'NodeNumber':
             $returnvalue = $this->selectDistinctNodeNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'StorageTreeDefID':
             $returnvalue = $this->selectDistinctStorageTreeDefID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'StorageTreeDefItemID':
             $returnvalue = $this->selectDistinctStorageTreeDefItemID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ParentID':
             $returnvalue = $this->selectDistinctParentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AcceptedID':
             $returnvalue = $this->selectDistinctAcceptedID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the storage.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_storageView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_storage <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_storage::STORAGEID.": ".$model->getStorageID()."</li>\n";
       $returnvalue .= "<li>".huh_storage::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_storage::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_storage::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_storage::ABBREV.": ".$model->getAbbrev()."</li>\n";
       $returnvalue .= "<li>".huh_storage::FULLNAME.": ".$model->getFullName()."</li>\n";
       $returnvalue .= "<li>".huh_storage::HIGHESTCHILDNODENUMBER.": ".$model->getHighestChildNodeNumber()."</li>\n";
       $returnvalue .= "<li>".huh_storage::ISACCEPTED.": ".$model->getIsAccepted()."</li>\n";
       $returnvalue .= "<li>".huh_storage::NAME.": ".$model->getname()."</li>\n";
       $returnvalue .= "<li>".huh_storage::NODENUMBER.": ".$model->getNodeNumber()."</li>\n";
       $returnvalue .= "<li>".huh_storage::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_storage::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_storage::RANKID.": ".$model->getRankID()."</li>\n";
       $returnvalue .= "<li>".huh_storage::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_storage::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_storage::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_storage::TIMESTAMPVERSION.": ".$model->getTimestampVersion()."</li>\n";
       $returnvalue .= "<li>".huh_storage::STORAGETREEDEFID.": ".$model->getStorageTreeDefID()."</li>\n";
       $returnvalue .= "<li>".huh_storage::STORAGETREEDEFITEMID.": ".$model->getStorageTreeDefItemID()."</li>\n";
       $returnvalue .= "<li>".huh_storage::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_storage::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_storage::PARENTID.": ".$model->getParentID()."</li>\n";
       $returnvalue .= "<li>".huh_storage::ACCEPTEDID.": ".$model->getAcceptedID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>storagetreedef</li>";
           $t_storagetreedef = new huh_storagetreedef();
           $t_storagetreedefView = new huh_storagetreedefView();
           $t_storagetreedefView->setModel($t_storagetreedef);
           if ($model->getStorageTreeDefID() != '') { 
               $t_storagetreedef->load($model->getStorageTreeDefID());
               $returnvalue .= $t_storagetreedefView->getDetailsView(false);
           }
           $returnvalue .= "<li>storagetreedefitem</li>";
           $t_storagetreedefitem = new huh_storagetreedefitem();
           $t_storagetreedefitemView = new huh_storagetreedefitemView();
           $t_storagetreedefitemView->setModel($t_storagetreedefitem);
           if ($model->getStorageTreeDefItemID() != '') { 
               $t_storagetreedefitem->load($model->getStorageTreeDefItemID());
               $returnvalue .= $t_storagetreedefitemView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>storage</li>";
           $t_storage = new huh_storage();
           $t_storageView = new huh_storageView();
           $t_storageView->setModel($t_storage);
           if ($model->getParentID() != '') { 
               $t_storage->load($model->getParentID());
               $returnvalue .= $t_storageView->getDetailsView(false);
           }
           $returnvalue .= "<li>storage</li>";
           $t_storage = new huh_storage();
           $t_storageView = new huh_storageView();
           $t_storageView->setModel($t_storage);
           if ($model->getAcceptedID() != '') { 
               $t_storage->load($model->getAcceptedID());
               $returnvalue .= $t_storageView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_storage::STORAGEID.': "'.$model->getStorageID().'",';
       $returnvalue .= '"'.huh_storage::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_storage::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_storage::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_storage::ABBREV.': "'.$model->getAbbrev().'",';
       $returnvalue .= '"'.huh_storage::FULLNAME.': "'.$model->getFullName().'",';
       $returnvalue .= '"'.huh_storage::HIGHESTCHILDNODENUMBER.': "'.$model->getHighestChildNodeNumber().'",';
       $returnvalue .= '"'.huh_storage::ISACCEPTED.': "'.$model->getIsAccepted().'",';
       $returnvalue .= '"'.huh_storage::NAME.': "'.$model->getname().'",';
       $returnvalue .= '"'.huh_storage::NODENUMBER.': "'.$model->getNodeNumber().'",';
       $returnvalue .= '"'.huh_storage::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_storage::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_storage::RANKID.': "'.$model->getRankID().'",';
       $returnvalue .= '"'.huh_storage::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_storage::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_storage::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_storage::TIMESTAMPVERSION.': "'.$model->getTimestampVersion().'",';
       $returnvalue .= '"'.huh_storage::STORAGETREEDEFID.': "'.$model->getStorageTreeDefID().'",';
       $returnvalue .= '"'.huh_storage::STORAGETREEDEFITEMID.': "'.$model->getStorageTreeDefItemID().'",';
       $returnvalue .= '"'.huh_storage::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_storage::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_storage::PARENTID.': "'.$model->getParentID().'",';
       $returnvalue .= '"'.huh_storage::ACCEPTEDID.': "'.$model->getAcceptedID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getStorageID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getAbbrev()."</td>\n";
       $returnvalue .= "<td>".$model->getFullName()."</td>\n";
       $returnvalue .= "<td>".$model->getHighestChildNodeNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getIsAccepted()."</td>\n";
       $returnvalue .= "<td>".$model->getname()."</td>\n";
       $returnvalue .= "<td>".$model->getNodeNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getRankID()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getStorageTreeDefID()."</td>\n";
       $returnvalue .= "<td>".$model->getStorageTreeDefItemID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getParentID()."</td>\n";
       $returnvalue .= "<td>".$model->getAcceptedID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_storage::STORAGEID."</th>\n";
       $returnvalue .= "<th>".huh_storage::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_storage::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_storage::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_storage::ABBREV."</th>\n";
       $returnvalue .= "<th>".huh_storage::FULLNAME."</th>\n";
       $returnvalue .= "<th>".huh_storage::HIGHESTCHILDNODENUMBER."</th>\n";
       $returnvalue .= "<th>".huh_storage::ISACCEPTED."</th>\n";
       $returnvalue .= "<th>".huh_storage::NAME."</th>\n";
       $returnvalue .= "<th>".huh_storage::NODENUMBER."</th>\n";
       $returnvalue .= "<th>".huh_storage::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_storage::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_storage::RANKID."</th>\n";
       $returnvalue .= "<th>".huh_storage::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_storage::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_storage::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_storage::TIMESTAMPVERSION."</th>\n";
       $returnvalue .= "<th>".huh_storage::STORAGETREEDEFID."</th>\n";
       $returnvalue .= "<th>".huh_storage::STORAGETREEDEFITEMID."</th>\n";
       $returnvalue .= "<th>".huh_storage::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_storage::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_storage::PARENTID."</th>\n";
       $returnvalue .= "<th>".huh_storage::ACCEPTEDID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_storage">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new StorageID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_storage::STORAGEID.">STORAGEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::STORAGEID." id=".huh_storage::STORAGEID." value='".$model->getStorageID()."'  style=' width:".huh_storage::STORAGEID_SIZE ."em;  '  maxlength='".huh_storage::STORAGEID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_storage::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_storage::TIMESTAMPCREATED." id=".huh_storage::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_storage::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_storage::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_storage::TIMESTAMPMODIFIED." id=".huh_storage::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_storage::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_storage::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::VERSION." id=".huh_storage::VERSION." value='".$model->getVersion()."'  style=' width:".huh_storage::VERSION_SIZE ."em;  '  maxlength='".huh_storage::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::ABBREV.">ABBREV</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_storage::ABBREV." id=".huh_storage::ABBREV." value='".$model->getAbbrev()."'  style=' width:".huh_storage::ABBREV_SIZE ."em;  '  maxlength='".huh_storage::ABBREV_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::FULLNAME.">FULLNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_storage::FULLNAME." id=".huh_storage::FULLNAME." >".$model->getFullName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::HIGHESTCHILDNODENUMBER.">HIGHESTCHILDNODENUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::HIGHESTCHILDNODENUMBER." id=".huh_storage::HIGHESTCHILDNODENUMBER." value='".$model->getHighestChildNodeNumber()."'  style=' width:".huh_storage::HIGHESTCHILDNODENUMBER_SIZE ."em;  '  maxlength='".huh_storage::HIGHESTCHILDNODENUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::ISACCEPTED.">ISACCEPTED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_storage::ISACCEPTED." id=".huh_storage::ISACCEPTED." value='".$model->getIsAccepted()."'  style=' width:".huh_storage::ISACCEPTED_SIZE ."em;  '  maxlength='".huh_storage::ISACCEPTED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::NAME.">NAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_storage::NAME." id=".huh_storage::NAME." >".$model->getname()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::NODENUMBER.">NODENUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::NODENUMBER." id=".huh_storage::NODENUMBER." value='".$model->getNodeNumber()."'  style=' width:".huh_storage::NODENUMBER_SIZE ."em;  '  maxlength='".huh_storage::NODENUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::NUMBER1." id=".huh_storage::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_storage::NUMBER1_SIZE ."em;  '  maxlength='".huh_storage::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::NUMBER2." id=".huh_storage::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_storage::NUMBER2_SIZE ."em;  '  maxlength='".huh_storage::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::RANKID.">RANKID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::RANKID." id=".huh_storage::RANKID." value='".$model->getRankID()."'  style=' width:".huh_storage::RANKID_SIZE ."em;  '  maxlength='".huh_storage::RANKID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_storage::REMARKS." id=".huh_storage::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::TEXT1.">TEXT1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_storage::TEXT1." id=".huh_storage::TEXT1." value='".$model->getText1()."'  style=' width:".huh_storage::TEXT1_SIZE ."em;  '  maxlength='".huh_storage::TEXT1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::TEXT2.">TEXT2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_storage::TEXT2." id=".huh_storage::TEXT2." value='".$model->getText2()."'  style=' width:".huh_storage::TEXT2_SIZE ."em;  '  maxlength='".huh_storage::TEXT2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::TIMESTAMPVERSION.">TIMESTAMPVERSION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_storage::TIMESTAMPVERSION." id=".huh_storage::TIMESTAMPVERSION." value='".$model->getTimestampVersion()."'  style=' width:".huh_storage::TIMESTAMPVERSION_SIZE ."em;  '  maxlength='".huh_storage::TIMESTAMPVERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::STORAGETREEDEFID.">STORAGETREEDEFID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::STORAGETREEDEFID." id=".huh_storage::STORAGETREEDEFID." value='".$model->getStorageTreeDefID()."'  style=' width:".huh_storage::STORAGETREEDEFID_SIZE ."em;  '  maxlength='".huh_storage::STORAGETREEDEFID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::STORAGETREEDEFITEMID.">STORAGETREEDEFITEMID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::STORAGETREEDEFITEMID." id=".huh_storage::STORAGETREEDEFITEMID." value='".$model->getStorageTreeDefItemID()."'  style=' width:".huh_storage::STORAGETREEDEFITEMID_SIZE ."em;  '  maxlength='".huh_storage::STORAGETREEDEFITEMID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::CREATEDBYAGENTID." id=".huh_storage::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_storage::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_storage::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::MODIFIEDBYAGENTID." id=".huh_storage::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_storage::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_storage::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::PARENTID.">PARENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::PARENTID." id=".huh_storage::PARENTID." value='".$model->getParentID()."'  style=' width:".huh_storage::PARENTID_SIZE ."em;  '  maxlength='".huh_storage::PARENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_storage::ACCEPTEDID.">ACCEPTEDID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_storage::ACCEPTEDID." id=".huh_storage::ACCEPTEDID." value='".$model->getAcceptedID()."'  style=' width:".huh_storage::ACCEPTEDID_SIZE ."em;  '  maxlength='".huh_storage::ACCEPTEDID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_storage">';
       $returnvalue .= '<input type=hidden name=StorageID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_storage">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>STORAGEID<input type=text name=".huh_storage::STORAGEID." id=".huh_storage::STORAGEID." value='".$model->getStorageID()."'  size='".huh_storage::STORAGEID_SIZE ."'  maxlength='".huh_storage::STORAGEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_storage::TIMESTAMPCREATED." id=".huh_storage::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_storage::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_storage::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_storage::TIMESTAMPMODIFIED." id=".huh_storage::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_storage::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_storage::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_storage::VERSION." id=".huh_storage::VERSION." value='".$model->getVersion()."'  size='".huh_storage::VERSION_SIZE ."'  maxlength='".huh_storage::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ABBREV<input type=text name=".huh_storage::ABBREV." id=".huh_storage::ABBREV." value='".$model->getAbbrev()."'  size='".huh_storage::ABBREV_SIZE ."'  maxlength='".huh_storage::ABBREV_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FULLNAME<input type=text name=".huh_storage::FULLNAME." id=".huh_storage::FULLNAME." value='".$model->getFullName()."'  size='51'  maxlength='".huh_storage::FULLNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>HIGHESTCHILDNODENUMBER<input type=text name=".huh_storage::HIGHESTCHILDNODENUMBER." id=".huh_storage::HIGHESTCHILDNODENUMBER." value='".$model->getHighestChildNodeNumber()."'  size='".huh_storage::HIGHESTCHILDNODENUMBER_SIZE ."'  maxlength='".huh_storage::HIGHESTCHILDNODENUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISACCEPTED<input type=text name=".huh_storage::ISACCEPTED." id=".huh_storage::ISACCEPTED." value='".$model->getIsAccepted()."'  size='".huh_storage::ISACCEPTED_SIZE ."'  maxlength='".huh_storage::ISACCEPTED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NAME<input type=text name=".huh_storage::NAME." id=".huh_storage::NAME." value='".$model->getname()."'  size='51'  maxlength='".huh_storage::NAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NODENUMBER<input type=text name=".huh_storage::NODENUMBER." id=".huh_storage::NODENUMBER." value='".$model->getNodeNumber()."'  size='".huh_storage::NODENUMBER_SIZE ."'  maxlength='".huh_storage::NODENUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_storage::NUMBER1." id=".huh_storage::NUMBER1." value='".$model->getNumber1()."'  size='".huh_storage::NUMBER1_SIZE ."'  maxlength='".huh_storage::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_storage::NUMBER2." id=".huh_storage::NUMBER2." value='".$model->getNumber2()."'  size='".huh_storage::NUMBER2_SIZE ."'  maxlength='".huh_storage::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RANKID<input type=text name=".huh_storage::RANKID." id=".huh_storage::RANKID." value='".$model->getRankID()."'  size='".huh_storage::RANKID_SIZE ."'  maxlength='".huh_storage::RANKID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_storage::REMARKS." id=".huh_storage::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_storage::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_storage::TEXT1." id=".huh_storage::TEXT1." value='".$model->getText1()."'  size='".huh_storage::TEXT1_SIZE ."'  maxlength='".huh_storage::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_storage::TEXT2." id=".huh_storage::TEXT2." value='".$model->getText2()."'  size='".huh_storage::TEXT2_SIZE ."'  maxlength='".huh_storage::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPVERSION<input type=text name=".huh_storage::TIMESTAMPVERSION." id=".huh_storage::TIMESTAMPVERSION." value='".$model->getTimestampVersion()."'  size='".huh_storage::TIMESTAMPVERSION_SIZE ."'  maxlength='".huh_storage::TIMESTAMPVERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STORAGETREEDEFID<input type=text name=".huh_storage::STORAGETREEDEFID." id=".huh_storage::STORAGETREEDEFID." value='".$model->getStorageTreeDefID()."'  size='".huh_storage::STORAGETREEDEFID_SIZE ."'  maxlength='".huh_storage::STORAGETREEDEFID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STORAGETREEDEFITEMID<input type=text name=".huh_storage::STORAGETREEDEFITEMID." id=".huh_storage::STORAGETREEDEFITEMID." value='".$model->getStorageTreeDefItemID()."'  size='".huh_storage::STORAGETREEDEFITEMID_SIZE ."'  maxlength='".huh_storage::STORAGETREEDEFITEMID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_storage::CREATEDBYAGENTID." id=".huh_storage::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_storage::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_storage::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_storage::MODIFIEDBYAGENTID." id=".huh_storage::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_storage::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_storage::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PARENTID<input type=text name=".huh_storage::PARENTID." id=".huh_storage::PARENTID." value='".$model->getParentID()."'  size='".huh_storage::PARENTID_SIZE ."'  maxlength='".huh_storage::PARENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ACCEPTEDID<input type=text name=".huh_storage::ACCEPTEDID." id=".huh_storage::ACCEPTEDID." value='".$model->getAcceptedID()."'  size='".huh_storage::ACCEPTEDID_SIZE ."'  maxlength='".huh_storage::ACCEPTEDID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
