<?php
//==============================================================================
//===   shipment.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_shipment implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const SHIPMENTID_SIZE      = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const INSUREDFORAMOUNT_SIZE = 20; //YEAR
   const NUMBER1_SIZE         = 20; //REAL
   const NUMBER2_SIZE         = 20; //REAL
   const NUMBER3_SIZE         = 20; //REAL
   const NUMBEROFPACKAGES_SIZE = 6; //SMALLINT
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const SHIPMENTDATE_SIZE    = 12; //DATE
   const SHIPMENTMETHOD_SIZE  = 20; //YEAR
   const SHIPMENTNUMBER_SIZE  = 20; //YEAR
   const TEXT1_SIZE           = 255; //LONGVARCHAR
   const TEXT2_SIZE           = 255; //LONGVARCHAR
   const WEIGHT_SIZE          = 20; //YEAR
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const SHIPPEDTOID_SIZE     = 11; //INTEGER
   const SHIPPERID_SIZE       = 11; //INTEGER
   const BORROWID_SIZE        = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const SHIPPEDBYID_SIZE     = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const EXCHANGEOUTID_SIZE   = 11; //INTEGER
   const GIFTID_SIZE          = 11; //INTEGER
   const LOANID_SIZE          = 11; //INTEGER
   const DISCIPLINEID_SIZE    = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const SHIPMENTID        = 'ShipmentID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const INSUREDFORAMOUNT  = 'InsuredForAmount';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const NUMBER3           = 'Number3';
   const NUMBEROFPACKAGES  = 'NumberOfPackages';
   const REMARKS           = 'Remarks';
   const SHIPMENTDATE      = 'ShipmentDate';
   const SHIPMENTMETHOD    = 'ShipmentMethod';
   const SHIPMENTNUMBER    = 'ShipmentNumber';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const WEIGHT            = 'Weight';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const SHIPPEDTOID       = 'ShippedToID';
   const SHIPPERID         = 'ShipperID';
   const BORROWID          = 'BorrowID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const SHIPPEDBYID       = 'ShippedByID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const EXCHANGEOUTID     = 'ExchangeOutID';
   const GIFTID            = 'GiftID';
   const LOANID            = 'LoanID';
   const DISCIPLINEID      = 'DisciplineID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $ShipmentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ShipmentID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $InsuredForAmount = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['InsuredForAmount']), 0, 20);
  $Number1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number1']), 0, 20);
  $Number2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number2']), 0, 20);
  $Number3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number3']), 0, 20);
  $NumberOfPackages = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['NumberOfPackages']), 0, 6);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $ShipmentDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ShipmentDate']), 0, 12);
  $ShipmentMethod = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ShipmentMethod']), 0, 20);
  $ShipmentNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ShipmentNumber']), 0, 20);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 255);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 255);
  $Weight = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Weight']), 0, 20);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $ShippedToID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ShippedToID']), 0, 11);
  $ShipperID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ShipperID']), 0, 11);
  $BorrowID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['BorrowID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $ShippedByID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ShippedByID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ExchangeOutID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ExchangeOutID']), 0, 11);
  $GiftID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['GiftID']), 0, 11);
  $LoanID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['LoanID']), 0, 11);
  $DisciplineID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DisciplineID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $ShipmentID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $InsuredForAmount; // YEAR 
   private $Number1; // REAL 
   private $Number2; // REAL 
   private $Number3; // REAL 
   private $NumberOfPackages; // SMALLINT 
   private $Remarks; // LONGVARCHAR 
   private $ShipmentDate; // DATE 
   private $ShipmentMethod; // YEAR 
   private $ShipmentNumber; // YEAR 
   private $Text1; // LONGVARCHAR 
   private $Text2; // LONGVARCHAR 
   private $Weight; // YEAR 
   private $YesNo1; // BIT(1) 
   private $YesNo2; // BIT(1) 
   private $ShippedToID; // INTEGER 
   private $ShipperID; // INTEGER 
   private $BorrowID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $ShippedByID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $ExchangeOutID; // INTEGER 
   private $GiftID; // INTEGER 
   private $LoanID; // INTEGER 
   private $DisciplineID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' ShipmentID, TimestampCreated, TimestampModified, Version, InsuredForAmount, Number1, Number2, Number3, NumberOfPackages, Remarks, ShipmentDate, ShipmentMethod, ShipmentNumber, Text1, Text2, Weight, YesNo1, YesNo2, ShippedToID, ShipperID, BorrowID, ModifiedByAgentID, ShippedByID, CreatedByAgentID, ExchangeOutID, GiftID, LoanID, DisciplineID, ';
   const PKFIELDLIST = ' ShipmentID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'ShipmentID'  ) ;
   private $allFieldsArray = array( 0 => 'ShipmentID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'InsuredForAmount' , 5 => 'Number1' , 6 => 'Number2' , 7 => 'Number3' , 8 => 'NumberOfPackages' , 9 => 'Remarks' , 10 => 'ShipmentDate' , 11 => 'ShipmentMethod' , 12 => 'ShipmentNumber' , 13 => 'Text1' , 14 => 'Text2' , 15 => 'Weight' , 16 => 'YesNo1' , 17 => 'YesNo2' , 18 => 'ShippedToID' , 19 => 'ShipperID' , 20 => 'BorrowID' , 21 => 'ModifiedByAgentID' , 22 => 'ShippedByID' , 23 => 'CreatedByAgentID' , 24 => 'ExchangeOutID' , 25 => 'GiftID' , 26 => 'LoanID' , 27 => 'DisciplineID'  ) ;
   private $selectDistinctFieldsArray = array( 10 => 'ShipmentDate' , 11 => 'ShipmentMethod' , 12 => 'ShipmentNumber' , 18 => 'ShippedToID' , 19 => 'ShipperID' , 20 => 'BorrowID' , 21 => 'ModifiedByAgentID' , 22 => 'ShippedByID' , 23 => 'CreatedByAgentID' , 24 => 'ExchangeOutID' , 25 => 'GiftID' , 26 => 'LoanID' , 27 => 'DisciplineID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_shipment(){
       $this->ShipmentID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->InsuredForAmount = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->Number3 = '';
       $this->NumberOfPackages = '';
       $this->Remarks = '';
       $this->ShipmentDate = '';
       $this->ShipmentMethod = '';
       $this->ShipmentNumber = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->Weight = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->ShippedToID = '';
       $this->ShipperID = '';
       $this->BorrowID = '';
       $this->ModifiedByAgentID = '';
       $this->ShippedByID = '';
       $this->CreatedByAgentID = '';
       $this->ExchangeOutID = '';
       $this->GiftID = '';
       $this->LoanID = '';
       $this->DisciplineID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='ShipmentID') { $returnvalue = $this->setShipmentID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='InsuredForAmount') { $returnvalue = $this->setInsuredForAmount($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='Number3') { $returnvalue = $this->setNumber3($value); } 
             if ($fieldname=='NumberOfPackages') { $returnvalue = $this->setNumberOfPackages($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='ShipmentDate') { $returnvalue = $this->setShipmentDate($value); } 
             if ($fieldname=='ShipmentMethod') { $returnvalue = $this->setShipmentMethod($value); } 
             if ($fieldname=='ShipmentNumber') { $returnvalue = $this->setShipmentNumber($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='Weight') { $returnvalue = $this->setWeight($value); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); } 
             if ($fieldname=='ShippedToID') { $returnvalue = $this->setShippedToID($value); } 
             if ($fieldname=='ShipperID') { $returnvalue = $this->setShipperID($value); } 
             if ($fieldname=='BorrowID') { $returnvalue = $this->setBorrowID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='ShippedByID') { $returnvalue = $this->setShippedByID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ExchangeOutID') { $returnvalue = $this->setExchangeOutID($value); } 
             if ($fieldname=='GiftID') { $returnvalue = $this->setGiftID($value); } 
             if ($fieldname=='LoanID') { $returnvalue = $this->setLoanID($value); } 
             if ($fieldname=='DisciplineID') { $returnvalue = $this->setDisciplineID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='ShipmentID') { $returnvalue = $this->getShipmentID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='InsuredForAmount') { $returnvalue = $this->getInsuredForAmount(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='Number3') { $returnvalue = $this->getNumber3(); } 
             if ($fieldname=='NumberOfPackages') { $returnvalue = $this->getNumberOfPackages(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='ShipmentDate') { $returnvalue = $this->getShipmentDate(); } 
             if ($fieldname=='ShipmentMethod') { $returnvalue = $this->getShipmentMethod(); } 
             if ($fieldname=='ShipmentNumber') { $returnvalue = $this->getShipmentNumber(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='Weight') { $returnvalue = $this->getWeight(); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); } 
             if ($fieldname=='ShippedToID') { $returnvalue = $this->getShippedToID(); } 
             if ($fieldname=='ShipperID') { $returnvalue = $this->getShipperID(); } 
             if ($fieldname=='BorrowID') { $returnvalue = $this->getBorrowID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='ShippedByID') { $returnvalue = $this->getShippedByID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ExchangeOutID') { $returnvalue = $this->getExchangeOutID(); } 
             if ($fieldname=='GiftID') { $returnvalue = $this->getGiftID(); } 
             if ($fieldname=='LoanID') { $returnvalue = $this->getLoanID(); } 
             if ($fieldname=='DisciplineID') { $returnvalue = $this->getDisciplineID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*ShipmentID*/
   public function getShipmentID() {
       if ($this->ShipmentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ShipmentID));
       }
   }
   public function setShipmentID($ShipmentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ShipmentID)) > huh_shipment::SHIPMENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ShipmentID = trim($ShipmentID);
       if (!ctype_digit(strval($ShipmentID)) && trim(strval($ShipmentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ShipmentID = $this->l_addslashes($ShipmentID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_shipment::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_shipment::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_shipment::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*InsuredForAmount*/
   public function getInsuredForAmount() {
       if ($this->InsuredForAmount==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->InsuredForAmount));
       }
   }
   public function setInsuredForAmount($InsuredForAmount) {
       if (strlen($InsuredForAmount) > huh_shipment::INSUREDFORAMOUNT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->InsuredForAmount = $this->l_addslashes($InsuredForAmount);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen($Number1) > huh_shipment::NUMBER1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen($Number2) > huh_shipment::NUMBER2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*Number3*/
   public function getNumber3() {
       if ($this->Number3==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number3));
       }
   }
   public function setNumber3($Number3) {
       if (strlen($Number3) > huh_shipment::NUMBER3_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number3 = $this->l_addslashes($Number3);
       $this->dirty = true;
   }
/*NumberOfPackages*/
   public function getNumberOfPackages() {
       if ($this->NumberOfPackages==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NumberOfPackages));
       }
   }
   public function setNumberOfPackages($NumberOfPackages) {
       if (strlen($NumberOfPackages) > huh_shipment::NUMBEROFPACKAGES_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->NumberOfPackages = $this->l_addslashes($NumberOfPackages);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_shipment::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*ShipmentDate*/
   public function getShipmentDate() {
       if ($this->ShipmentDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ShipmentDate));
       }
   }
   public function setShipmentDate($ShipmentDate) {
       if (strlen($ShipmentDate) > huh_shipment::SHIPMENTDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ShipmentDate = $this->l_addslashes($ShipmentDate);
       $this->dirty = true;
   }
/*ShipmentMethod*/
   public function getShipmentMethod() {
       if ($this->ShipmentMethod==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ShipmentMethod));
       }
   }
   public function setShipmentMethod($ShipmentMethod) {
       if (strlen($ShipmentMethod) > huh_shipment::SHIPMENTMETHOD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ShipmentMethod = $this->l_addslashes($ShipmentMethod);
       $this->dirty = true;
   }
/*ShipmentNumber*/
   public function getShipmentNumber() {
       if ($this->ShipmentNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ShipmentNumber));
       }
   }
   public function setShipmentNumber($ShipmentNumber) {
       if (strlen($ShipmentNumber) > huh_shipment::SHIPMENTNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ShipmentNumber = $this->l_addslashes($ShipmentNumber);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_shipment::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_shipment::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*Weight*/
   public function getWeight() {
       if ($this->Weight==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Weight));
       }
   }
   public function setWeight($Weight) {
       if (strlen($Weight) > huh_shipment::WEIGHT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Weight = $this->l_addslashes($Weight);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_shipment::YESNO1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_shipment::YESNO2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*ShippedToID*/
   public function getShippedToID() {
       if ($this->ShippedToID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ShippedToID));
       }
   }
   public function setShippedToID($ShippedToID) {
       if (strlen(preg_replace('/[^0-9]/','',$ShippedToID)) > huh_shipment::SHIPPEDTOID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ShippedToID = trim($ShippedToID);
       if (!ctype_digit(strval($ShippedToID)) && trim(strval($ShippedToID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ShippedToID = $this->l_addslashes($ShippedToID);
       $this->dirty = true;
   }
/*ShipperID*/
   public function getShipperID() {
       if ($this->ShipperID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ShipperID));
       }
   }
   public function setShipperID($ShipperID) {
       if (strlen(preg_replace('/[^0-9]/','',$ShipperID)) > huh_shipment::SHIPPERID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ShipperID = trim($ShipperID);
       if (!ctype_digit(strval($ShipperID)) && trim(strval($ShipperID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ShipperID = $this->l_addslashes($ShipperID);
       $this->dirty = true;
   }
/*BorrowID*/
   public function getBorrowID() {
       if ($this->BorrowID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->BorrowID));
       }
   }
   public function setBorrowID($BorrowID) {
       if (strlen(preg_replace('/[^0-9]/','',$BorrowID)) > huh_shipment::BORROWID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $BorrowID = trim($BorrowID);
       if (!ctype_digit(strval($BorrowID)) && trim(strval($BorrowID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->BorrowID = $this->l_addslashes($BorrowID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_shipment::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*ShippedByID*/
   public function getShippedByID() {
       if ($this->ShippedByID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ShippedByID));
       }
   }
   public function setShippedByID($ShippedByID) {
       if (strlen(preg_replace('/[^0-9]/','',$ShippedByID)) > huh_shipment::SHIPPEDBYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ShippedByID = trim($ShippedByID);
       if (!ctype_digit(strval($ShippedByID)) && trim(strval($ShippedByID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ShippedByID = $this->l_addslashes($ShippedByID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_shipment::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ExchangeOutID*/
   public function getExchangeOutID() {
       if ($this->ExchangeOutID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ExchangeOutID));
       }
   }
   public function setExchangeOutID($ExchangeOutID) {
       if (strlen(preg_replace('/[^0-9]/','',$ExchangeOutID)) > huh_shipment::EXCHANGEOUTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ExchangeOutID = trim($ExchangeOutID);
       if (!ctype_digit(strval($ExchangeOutID)) && trim(strval($ExchangeOutID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ExchangeOutID = $this->l_addslashes($ExchangeOutID);
       $this->dirty = true;
   }
/*GiftID*/
   public function getGiftID() {
       if ($this->GiftID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GiftID));
       }
   }
   public function setGiftID($GiftID) {
       if (strlen(preg_replace('/[^0-9]/','',$GiftID)) > huh_shipment::GIFTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $GiftID = trim($GiftID);
       if (!ctype_digit(strval($GiftID)) && trim(strval($GiftID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->GiftID = $this->l_addslashes($GiftID);
       $this->dirty = true;
   }
/*LoanID*/
   public function getLoanID() {
       if ($this->LoanID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LoanID));
       }
   }
   public function setLoanID($LoanID) {
       if (strlen(preg_replace('/[^0-9]/','',$LoanID)) > huh_shipment::LOANID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $LoanID = trim($LoanID);
       if (!ctype_digit(strval($LoanID)) && trim(strval($LoanID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->LoanID = $this->l_addslashes($LoanID);
       $this->dirty = true;
   }
/*DisciplineID*/
   public function getDisciplineID() {
       if ($this->DisciplineID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DisciplineID));
       }
   }
   public function setDisciplineID($DisciplineID) {
       if (strlen(preg_replace('/[^0-9]/','',$DisciplineID)) > huh_shipment::DISCIPLINEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DisciplineID = trim($DisciplineID);
       if (!ctype_digit(strval($DisciplineID))) {
             throw new Exception("Value must be an integer");
       }
       $this->DisciplineID = $this->l_addslashes($DisciplineID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getShipmentID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['ShipmentID'] = $this->getShipmentID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_ShipmentIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_InsuredForAmountMYSQLI_TYPE = 's';
  const C_Number1MYSQLI_TYPE = 's';
  const C_Number2MYSQLI_TYPE = 's';
  const C_Number3MYSQLI_TYPE = 's';
  const C_NumberOfPackagesMYSQLI_TYPE = 'i';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_ShipmentDateMYSQLI_TYPE = 's';
  const C_ShipmentMethodMYSQLI_TYPE = 's';
  const C_ShipmentNumberMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_WeightMYSQLI_TYPE = 's';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_ShippedToIDMYSQLI_TYPE = 'i';
  const C_ShipperIDMYSQLI_TYPE = 'i';
  const C_BorrowIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_ShippedByIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ExchangeOutIDMYSQLI_TYPE = 'i';
  const C_GiftIDMYSQLI_TYPE = 'i';
  const C_LoanIDMYSQLI_TYPE = 'i';
  const C_DisciplineIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='ShipmentID') { $retval = self::C_ShipmentIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='InsuredForAmount') { $retval = self::C_InsuredForAmountMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='Number3') { $retval = self::C_Number3MYSQLI_TYPE; }
      if ($aFieldname=='NumberOfPackages') { $retval = self::C_NumberOfPackagesMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='ShipmentDate') { $retval = self::C_ShipmentDateMYSQLI_TYPE; }
      if ($aFieldname=='ShipmentMethod') { $retval = self::C_ShipmentMethodMYSQLI_TYPE; }
      if ($aFieldname=='ShipmentNumber') { $retval = self::C_ShipmentNumberMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='Weight') { $retval = self::C_WeightMYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='ShippedToID') { $retval = self::C_ShippedToIDMYSQLI_TYPE; }
      if ($aFieldname=='ShipperID') { $retval = self::C_ShipperIDMYSQLI_TYPE; }
      if ($aFieldname=='BorrowID') { $retval = self::C_BorrowIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ShippedByID') { $retval = self::C_ShippedByIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ExchangeOutID') { $retval = self::C_ExchangeOutIDMYSQLI_TYPE; }
      if ($aFieldname=='GiftID') { $retval = self::C_GiftIDMYSQLI_TYPE; }
      if ($aFieldname=='LoanID') { $retval = self::C_LoanIDMYSQLI_TYPE; }
      if ($aFieldname=='DisciplineID') { $retval = self::C_DisciplineIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setShipmentID($pk[ShipmentID]);
             } else { ;
                 $this->setShipmentID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->ShipmentID != NULL) {
           $sql = 'SELECT ShipmentID, TimestampCreated, TimestampModified, Version, InsuredForAmount, Number1, Number2, Number3, NumberOfPackages, Remarks, ShipmentDate, ShipmentMethod, ShipmentNumber, Text1, Text2, Weight, YesNo1, YesNo2, ShippedToID, ShipperID, BorrowID, ModifiedByAgentID, ShippedByID, CreatedByAgentID, ExchangeOutID, GiftID, LoanID, DisciplineID FROM shipment WHERE ShipmentID = '.$this->ShipmentID ;

           $preparesql = 'SELECT ShipmentID, TimestampCreated, TimestampModified, Version, InsuredForAmount, Number1, Number2, Number3, NumberOfPackages, Remarks, ShipmentDate, ShipmentMethod, ShipmentNumber, Text1, Text2, Weight, YesNo1, YesNo2, ShippedToID, ShipperID, BorrowID, ModifiedByAgentID, ShippedByID, CreatedByAgentID, ExchangeOutID, GiftID, LoanID, DisciplineID FROM shipment WHERE ShipmentID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->ShipmentID);
              $statement->execute();
              $statement->bind_result($this->ShipmentID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->InsuredForAmount, $this->Number1, $this->Number2, $this->Number3, $this->NumberOfPackages, $this->Remarks, $this->ShipmentDate, $this->ShipmentMethod, $this->ShipmentNumber, $this->Text1, $this->Text2, $this->Weight, $this->YesNo1, $this->YesNo2, $this->ShippedToID, $this->ShipperID, $this->BorrowID, $this->ModifiedByAgentID, $this->ShippedByID, $this->CreatedByAgentID, $this->ExchangeOutID, $this->GiftID, $this->LoanID, $this->DisciplineID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->ShipmentID!= NULL) {
            $sql  = 'UPDATE  shipment SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", InsuredForAmount = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", Number3 = ? ";
            $sql .=  ", NumberOfPackages = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", ShipmentDate = ? ";
            $sql .=  ", ShipmentMethod = ? ";
            $sql .=  ", ShipmentNumber = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", Weight = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", ShippedToID = ? ";
            $sql .=  ", ShipperID = ? ";
            $sql .=  ", BorrowID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", ShippedByID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ExchangeOutID = ? ";
            $sql .=  ", GiftID = ? ";
            $sql .=  ", LoanID = ? ";
            $sql .=  ", DisciplineID = ? ";

            $sql .= "  WHERE ShipmentID = ? ";
        } else {
            $sql  = 'INSERT INTO shipment ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( ShipmentID ,  TimestampCreated ,  TimestampModified ,  Version ,  InsuredForAmount ,  Number1 ,  Number2 ,  Number3 ,  NumberOfPackages ,  Remarks ,  ShipmentDate ,  ShipmentMethod ,  ShipmentNumber ,  Text1 ,  Text2 ,  Weight ,  YesNo1 ,  YesNo2 ,  ShippedToID ,  ShipperID ,  BorrowID ,  ModifiedByAgentID ,  ShippedByID ,  CreatedByAgentID ,  ExchangeOutID ,  GiftID ,  LoanID ,  DisciplineID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->ShipmentID!= NULL ) {
              $statement->bind_param("ississssisssssssiiiiiiiiiiiii", $this->ShipmentID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->InsuredForAmount , $this->Number1 , $this->Number2 , $this->Number3 , $this->NumberOfPackages , $this->Remarks , $this->ShipmentDate , $this->ShipmentMethod , $this->ShipmentNumber , $this->Text1 , $this->Text2 , $this->Weight , $this->YesNo1 , $this->YesNo2 , $this->ShippedToID , $this->ShipperID , $this->BorrowID , $this->ModifiedByAgentID , $this->ShippedByID , $this->CreatedByAgentID , $this->ExchangeOutID , $this->GiftID , $this->LoanID , $this->DisciplineID , $this->ShipmentID );
           } else { 
              $statement->bind_param("ississssisssssssiiiiiiiiiiii", $this->ShipmentID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->InsuredForAmount , $this->Number1 , $this->Number2 , $this->Number3 , $this->NumberOfPackages , $this->Remarks , $this->ShipmentDate , $this->ShipmentMethod , $this->ShipmentNumber , $this->Text1 , $this->Text2 , $this->Weight , $this->YesNo1 , $this->YesNo2 , $this->ShippedToID , $this->ShipperID , $this->BorrowID , $this->ModifiedByAgentID , $this->ShippedByID , $this->CreatedByAgentID , $this->ExchangeOutID , $this->GiftID , $this->LoanID , $this->DisciplineID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->ShipmentID != NULL) {
           $sql = 'SELECT ShipmentID, TimestampCreated, TimestampModified, Version, InsuredForAmount, Number1, Number2, Number3, NumberOfPackages, Remarks, ShipmentDate, ShipmentMethod, ShipmentNumber, Text1, Text2, Weight, YesNo1, YesNo2, ShippedToID, ShipperID, BorrowID, ModifiedByAgentID, ShippedByID, CreatedByAgentID, ExchangeOutID, GiftID, LoanID, DisciplineID FROM shipment WHERE ShipmentID = "'.$this->ShipmentID.'"  ' ;

           $preparedsql = 'SELECT  FROM shipment WHERE  and ShipmentID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississssisssssssiiiiiiiiiiii", $this->ShipmentID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->InsuredForAmount, $this->Number1, $this->Number2, $this->Number3, $this->NumberOfPackages, $this->Remarks, $this->ShipmentDate, $this->ShipmentMethod, $this->ShipmentNumber, $this->Text1, $this->Text2, $this->Weight, $this->YesNo1, $this->YesNo2, $this->ShippedToID, $this->ShipperID, $this->BorrowID, $this->ModifiedByAgentID, $this->ShippedByID, $this->CreatedByAgentID, $this->ExchangeOutID, $this->GiftID, $this->LoanID, $this->DisciplineID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM shipment WHERE  and ShipmentID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississssisssssssiiiiiiiiiiii", $this->ShipmentID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->InsuredForAmount, $this->Number1, $this->Number2, $this->Number3, $this->NumberOfPackages, $this->Remarks, $this->ShipmentDate, $this->ShipmentMethod, $this->ShipmentNumber, $this->Text1, $this->Text2, $this->Weight, $this->YesNo1, $this->YesNo2, $this->ShippedToID, $this->ShipperID, $this->BorrowID, $this->ModifiedByAgentID, $this->ShippedByID, $this->CreatedByAgentID, $this->ExchangeOutID, $this->GiftID, $this->LoanID, $this->DisciplineID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->ShipmentID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM shipment';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT ShipmentID FROM shipment $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_shipment();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: ShippedToID
      $t = new agent();
      $t->load(getShippedToID());
      $returnvalue[ShippedToID] = $t;
       // fk: ShipperID
      $t = new agent();
      $t->load(getShipperID());
      $returnvalue[ShipperID] = $t;
       // fk: BorrowID
      $t = new borrow();
      $t->load(getBorrowID());
      $returnvalue[BorrowID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: ShippedByID
      $t = new agent();
      $t->load(getShippedByID());
      $returnvalue[ShippedByID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ExchangeOutID
      $t = new exchangeout();
      $t->load(getExchangeOutID());
      $returnvalue[ExchangeOutID] = $t;
       // fk: GiftID
      $t = new gift();
      $t->load(getGiftID());
      $returnvalue[GiftID] = $t;
       // fk: LoanID
      $t = new loan();
      $t->load(getLoanID());
      $returnvalue[LoanID] = $t;
       // fk: DisciplineID
      $t = new discipline();
      $t->load(getDisciplineID());
      $returnvalue[DisciplineID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT ShipmentID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(InsuredForAmount,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(Number3,'') || ' ' || IFNULL(NumberOfPackages,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(ShipmentDate,'') || ' ' || IFNULL(ShipmentMethod,'') || ' ' || IFNULL(ShipmentNumber,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(Weight,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(ShippedToID,'') || ' ' || IFNULL(ShipperID,'') || ' ' || IFNULL(BorrowID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(ShippedByID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ExchangeOutID,'') || ' ' || IFNULL(GiftID,'') || ' ' || IFNULL(LoanID,'') || ' ' || IFNULL(DisciplineID,'')) FROM shipment order by ShipmentDate, ShipmentMethod, ShipmentNumber, ShippedToID, ShipperID, BorrowID, ModifiedByAgentID, ShippedByID, CreatedByAgentID, ExchangeOutID, GiftID, LoanID, DisciplineID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM shipment order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByShipmentDate($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE ShipmentDate $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE ShipmentDate $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByShipmentMethod($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE ShipmentMethod $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE ShipmentMethod $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByShipmentNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE ShipmentNumber $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE ShipmentNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByShippedToID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE ShippedToID $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE ShippedToID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByShipperID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE ShipperID $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE ShipperID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByBorrowID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE BorrowID $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE BorrowID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByShippedByID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE ShippedByID $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE ShippedByID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByExchangeOutID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE ExchangeOutID $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE ExchangeOutID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGiftID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE GiftID $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE GiftID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByLoanID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE LoanID $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE LoanID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDisciplineID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ShipmentID FROM shipment WHERE DisciplineID $operator '$searchTerm'";
        $preparedsql = "SELECT ShipmentID FROM shipment WHERE DisciplineID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_shipment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctShipmentDate($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ShipmentDate ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ShipmentDate FROM shipment group by ShipmentDate order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ShipmentDate=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctShipmentMethod($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ShipmentMethod ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ShipmentMethod FROM shipment group by ShipmentMethod order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ShipmentMethod=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctShipmentNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ShipmentNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ShipmentNumber FROM shipment group by ShipmentNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ShipmentNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctShippedToID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ShippedToID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ShippedToID FROM shipment group by ShippedToID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ShippedToID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctShipperID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ShipperID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ShipperID FROM shipment group by ShipperID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ShipperID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctBorrowID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' BorrowID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, BorrowID FROM shipment group by BorrowID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&BorrowID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM shipment group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctShippedByID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ShippedByID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ShippedByID FROM shipment group by ShippedByID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ShippedByID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM shipment group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctExchangeOutID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ExchangeOutID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ExchangeOutID FROM shipment group by ExchangeOutID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ExchangeOutID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGiftID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GiftID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GiftID FROM shipment group by GiftID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GiftID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctLoanID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' LoanID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, LoanID FROM shipment group by LoanID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&LoanID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDisciplineID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DisciplineID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DisciplineID FROM shipment group by DisciplineID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DisciplineID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'ShipmentDate':
             $returnvalue = $this->selectDistinctShipmentDate($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ShipmentMethod':
             $returnvalue = $this->selectDistinctShipmentMethod($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ShipmentNumber':
             $returnvalue = $this->selectDistinctShipmentNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ShippedToID':
             $returnvalue = $this->selectDistinctShippedToID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ShipperID':
             $returnvalue = $this->selectDistinctShipperID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'BorrowID':
             $returnvalue = $this->selectDistinctBorrowID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ShippedByID':
             $returnvalue = $this->selectDistinctShippedByID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ExchangeOutID':
             $returnvalue = $this->selectDistinctExchangeOutID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GiftID':
             $returnvalue = $this->selectDistinctGiftID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'LoanID':
             $returnvalue = $this->selectDistinctLoanID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DisciplineID':
             $returnvalue = $this->selectDistinctDisciplineID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the shipment.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_shipmentView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_shipment <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_shipment::SHIPMENTID.": ".$model->getShipmentID()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::INSUREDFORAMOUNT.": ".$model->getInsuredForAmount()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::NUMBER3.": ".$model->getNumber3()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::NUMBEROFPACKAGES.": ".$model->getNumberOfPackages()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::SHIPMENTDATE.": ".$model->getShipmentDate()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::SHIPMENTMETHOD.": ".$model->getShipmentMethod()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::SHIPMENTNUMBER.": ".$model->getShipmentNumber()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::WEIGHT.": ".$model->getWeight()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::SHIPPEDTOID.": ".$model->getShippedToID()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::SHIPPERID.": ".$model->getShipperID()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::BORROWID.": ".$model->getBorrowID()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::SHIPPEDBYID.": ".$model->getShippedByID()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::EXCHANGEOUTID.": ".$model->getExchangeOutID()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::GIFTID.": ".$model->getGiftID()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::LOANID.": ".$model->getLoanID()."</li>\n";
       $returnvalue .= "<li>".huh_shipment::DISCIPLINEID.": ".$model->getDisciplineID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getShippedToID() != '') { 
               $t_agent->load($model->getShippedToID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getShipperID() != '') { 
               $t_agent->load($model->getShipperID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>borrow</li>";
           $t_borrow = new huh_borrow();
           $t_borrowView = new huh_borrowView();
           $t_borrowView->setModel($t_borrow);
           if ($model->getBorrowID() != '') { 
               $t_borrow->load($model->getBorrowID());
               $returnvalue .= $t_borrowView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getShippedByID() != '') { 
               $t_agent->load($model->getShippedByID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>exchangeout</li>";
           $t_exchangeout = new huh_exchangeout();
           $t_exchangeoutView = new huh_exchangeoutView();
           $t_exchangeoutView->setModel($t_exchangeout);
           if ($model->getExchangeOutID() != '') { 
               $t_exchangeout->load($model->getExchangeOutID());
               $returnvalue .= $t_exchangeoutView->getDetailsView(false);
           }
           $returnvalue .= "<li>gift</li>";
           $t_gift = new huh_gift();
           $t_giftView = new huh_giftView();
           $t_giftView->setModel($t_gift);
           if ($model->getGiftID() != '') { 
               $t_gift->load($model->getGiftID());
               $returnvalue .= $t_giftView->getDetailsView(false);
           }
           $returnvalue .= "<li>loan</li>";
           $t_loan = new huh_loan();
           $t_loanView = new huh_loanView();
           $t_loanView->setModel($t_loan);
           if ($model->getLoanID() != '') { 
               $t_loan->load($model->getLoanID());
               $returnvalue .= $t_loanView->getDetailsView(false);
           }
           $returnvalue .= "<li>discipline</li>";
           $t_discipline = new huh_discipline();
           $t_disciplineView = new huh_disciplineView();
           $t_disciplineView->setModel($t_discipline);
           if ($model->getDisciplineID() != '') { 
               $t_discipline->load($model->getDisciplineID());
               $returnvalue .= $t_disciplineView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_shipment::SHIPMENTID.': "'.$model->getShipmentID().'",';
       $returnvalue .= '"'.huh_shipment::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_shipment::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_shipment::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_shipment::INSUREDFORAMOUNT.': "'.$model->getInsuredForAmount().'",';
       $returnvalue .= '"'.huh_shipment::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_shipment::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_shipment::NUMBER3.': "'.$model->getNumber3().'",';
       $returnvalue .= '"'.huh_shipment::NUMBEROFPACKAGES.': "'.$model->getNumberOfPackages().'",';
       $returnvalue .= '"'.huh_shipment::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_shipment::SHIPMENTDATE.': "'.$model->getShipmentDate().'",';
       $returnvalue .= '"'.huh_shipment::SHIPMENTMETHOD.': "'.$model->getShipmentMethod().'",';
       $returnvalue .= '"'.huh_shipment::SHIPMENTNUMBER.': "'.$model->getShipmentNumber().'",';
       $returnvalue .= '"'.huh_shipment::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_shipment::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_shipment::WEIGHT.': "'.$model->getWeight().'",';
       $returnvalue .= '"'.huh_shipment::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_shipment::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_shipment::SHIPPEDTOID.': "'.$model->getShippedToID().'",';
       $returnvalue .= '"'.huh_shipment::SHIPPERID.': "'.$model->getShipperID().'",';
       $returnvalue .= '"'.huh_shipment::BORROWID.': "'.$model->getBorrowID().'",';
       $returnvalue .= '"'.huh_shipment::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_shipment::SHIPPEDBYID.': "'.$model->getShippedByID().'",';
       $returnvalue .= '"'.huh_shipment::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_shipment::EXCHANGEOUTID.': "'.$model->getExchangeOutID().'",';
       $returnvalue .= '"'.huh_shipment::GIFTID.': "'.$model->getGiftID().'",';
       $returnvalue .= '"'.huh_shipment::LOANID.': "'.$model->getLoanID().'",';
       $returnvalue .= '"'.huh_shipment::DISCIPLINEID.': "'.$model->getDisciplineID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getShipmentID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getInsuredForAmount()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber3()."</td>\n";
       $returnvalue .= "<td>".$model->getNumberOfPackages()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getShipmentDate()."</td>\n";
       $returnvalue .= "<td>".$model->getShipmentMethod()."</td>\n";
       $returnvalue .= "<td>".$model->getShipmentNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getWeight()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getShippedToID()."</td>\n";
       $returnvalue .= "<td>".$model->getShipperID()."</td>\n";
       $returnvalue .= "<td>".$model->getBorrowID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getShippedByID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getExchangeOutID()."</td>\n";
       $returnvalue .= "<td>".$model->getGiftID()."</td>\n";
       $returnvalue .= "<td>".$model->getLoanID()."</td>\n";
       $returnvalue .= "<td>".$model->getDisciplineID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_shipment::SHIPMENTID."</th>\n";
       $returnvalue .= "<th>".huh_shipment::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_shipment::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_shipment::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_shipment::INSUREDFORAMOUNT."</th>\n";
       $returnvalue .= "<th>".huh_shipment::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_shipment::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_shipment::NUMBER3."</th>\n";
       $returnvalue .= "<th>".huh_shipment::NUMBEROFPACKAGES."</th>\n";
       $returnvalue .= "<th>".huh_shipment::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_shipment::SHIPMENTDATE."</th>\n";
       $returnvalue .= "<th>".huh_shipment::SHIPMENTMETHOD."</th>\n";
       $returnvalue .= "<th>".huh_shipment::SHIPMENTNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_shipment::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_shipment::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_shipment::WEIGHT."</th>\n";
       $returnvalue .= "<th>".huh_shipment::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_shipment::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_shipment::SHIPPEDTOID."</th>\n";
       $returnvalue .= "<th>".huh_shipment::SHIPPERID."</th>\n";
       $returnvalue .= "<th>".huh_shipment::BORROWID."</th>\n";
       $returnvalue .= "<th>".huh_shipment::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_shipment::SHIPPEDBYID."</th>\n";
       $returnvalue .= "<th>".huh_shipment::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_shipment::EXCHANGEOUTID."</th>\n";
       $returnvalue .= "<th>".huh_shipment::GIFTID."</th>\n";
       $returnvalue .= "<th>".huh_shipment::LOANID."</th>\n";
       $returnvalue .= "<th>".huh_shipment::DISCIPLINEID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_shipment">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new ShipmentID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_shipment::SHIPMENTID.">SHIPMENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_shipment::SHIPMENTID." id=".huh_shipment::SHIPMENTID." value='".$model->getShipmentID()."'  style=' width:".huh_shipment::SHIPMENTID_SIZE ."em;  '  maxlength='".huh_shipment::SHIPMENTID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_shipment::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::TIMESTAMPCREATED." id=".huh_shipment::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_shipment::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_shipment::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::TIMESTAMPMODIFIED." id=".huh_shipment::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_shipment::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_shipment::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_shipment::VERSION." id=".huh_shipment::VERSION." value='".$model->getVersion()."'  style=' width:".huh_shipment::VERSION_SIZE ."em;  '  maxlength='".huh_shipment::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::INSUREDFORAMOUNT.">INSUREDFORAMOUNT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::INSUREDFORAMOUNT." id=".huh_shipment::INSUREDFORAMOUNT." value='".$model->getInsuredForAmount()."'  style=' width:".huh_shipment::INSUREDFORAMOUNT_SIZE ."em;  '  maxlength='".huh_shipment::INSUREDFORAMOUNT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::NUMBER1." id=".huh_shipment::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_shipment::NUMBER1_SIZE ."em;  '  maxlength='".huh_shipment::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::NUMBER2." id=".huh_shipment::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_shipment::NUMBER2_SIZE ."em;  '  maxlength='".huh_shipment::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::NUMBER3.">NUMBER3</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::NUMBER3." id=".huh_shipment::NUMBER3." value='".$model->getNumber3()."'  style=' width:".huh_shipment::NUMBER3_SIZE ."em;  '  maxlength='".huh_shipment::NUMBER3_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::NUMBEROFPACKAGES.">NUMBEROFPACKAGES</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::NUMBEROFPACKAGES." id=".huh_shipment::NUMBEROFPACKAGES." value='".$model->getNumberOfPackages()."'  style=' width:".huh_shipment::NUMBEROFPACKAGES_SIZE ."em;  '  maxlength='".huh_shipment::NUMBEROFPACKAGES_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_shipment::REMARKS." id=".huh_shipment::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::SHIPMENTDATE.">SHIPMENTDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::SHIPMENTDATE." id=".huh_shipment::SHIPMENTDATE." value='".$model->getShipmentDate()."'  style=' width:".huh_shipment::SHIPMENTDATE_SIZE ."em;  '  maxlength='".huh_shipment::SHIPMENTDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::SHIPMENTMETHOD.">SHIPMENTMETHOD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::SHIPMENTMETHOD." id=".huh_shipment::SHIPMENTMETHOD." value='".$model->getShipmentMethod()."'  style=' width:".huh_shipment::SHIPMENTMETHOD_SIZE ."em;  '  maxlength='".huh_shipment::SHIPMENTMETHOD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::SHIPMENTNUMBER.">SHIPMENTNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::SHIPMENTNUMBER." id=".huh_shipment::SHIPMENTNUMBER." value='".$model->getShipmentNumber()."'  style=' width:".huh_shipment::SHIPMENTNUMBER_SIZE ."em;  '  maxlength='".huh_shipment::SHIPMENTNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::TEXT1.">TEXT1</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_shipment::TEXT1." id=".huh_shipment::TEXT1." >".$model->getText1()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_shipment::TEXT2." id=".huh_shipment::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::WEIGHT.">WEIGHT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::WEIGHT." id=".huh_shipment::WEIGHT." value='".$model->getWeight()."'  style=' width:".huh_shipment::WEIGHT_SIZE ."em;  '  maxlength='".huh_shipment::WEIGHT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::YESNO1." id=".huh_shipment::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_shipment::YESNO1_SIZE ."em;  '  maxlength='".huh_shipment::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_shipment::YESNO2." id=".huh_shipment::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_shipment::YESNO2_SIZE ."em;  '  maxlength='".huh_shipment::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::SHIPPEDTOID.">SHIPPEDTOID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_shipment::SHIPPEDTOID." id=".huh_shipment::SHIPPEDTOID." value='".$model->getShippedToID()."'  style=' width:".huh_shipment::SHIPPEDTOID_SIZE ."em;  '  maxlength='".huh_shipment::SHIPPEDTOID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::SHIPPERID.">SHIPPERID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_shipment::SHIPPERID." id=".huh_shipment::SHIPPERID." value='".$model->getShipperID()."'  style=' width:".huh_shipment::SHIPPERID_SIZE ."em;  '  maxlength='".huh_shipment::SHIPPERID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::BORROWID.">BORROWID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_shipment::BORROWID." id=".huh_shipment::BORROWID." value='".$model->getBorrowID()."'  style=' width:".huh_shipment::BORROWID_SIZE ."em;  '  maxlength='".huh_shipment::BORROWID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_shipment::MODIFIEDBYAGENTID." id=".huh_shipment::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_shipment::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_shipment::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::SHIPPEDBYID.">SHIPPEDBYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_shipment::SHIPPEDBYID." id=".huh_shipment::SHIPPEDBYID." value='".$model->getShippedByID()."'  style=' width:".huh_shipment::SHIPPEDBYID_SIZE ."em;  '  maxlength='".huh_shipment::SHIPPEDBYID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_shipment::CREATEDBYAGENTID." id=".huh_shipment::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_shipment::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_shipment::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::EXCHANGEOUTID.">EXCHANGEOUTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_shipment::EXCHANGEOUTID." id=".huh_shipment::EXCHANGEOUTID." value='".$model->getExchangeOutID()."'  style=' width:".huh_shipment::EXCHANGEOUTID_SIZE ."em;  '  maxlength='".huh_shipment::EXCHANGEOUTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::GIFTID.">GIFTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_shipment::GIFTID." id=".huh_shipment::GIFTID." value='".$model->getGiftID()."'  style=' width:".huh_shipment::GIFTID_SIZE ."em;  '  maxlength='".huh_shipment::GIFTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::LOANID.">LOANID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_shipment::LOANID." id=".huh_shipment::LOANID." value='".$model->getLoanID()."'  style=' width:".huh_shipment::LOANID_SIZE ."em;  '  maxlength='".huh_shipment::LOANID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_shipment::DISCIPLINEID.">DISCIPLINEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_shipment::DISCIPLINEID." id=".huh_shipment::DISCIPLINEID." value='".$model->getDisciplineID()."'  style=' width:".huh_shipment::DISCIPLINEID_SIZE ."em;  '  maxlength='".huh_shipment::DISCIPLINEID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_shipment">';
       $returnvalue .= '<input type=hidden name=ShipmentID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_shipment">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>SHIPMENTID<input type=text name=".huh_shipment::SHIPMENTID." id=".huh_shipment::SHIPMENTID." value='".$model->getShipmentID()."'  size='".huh_shipment::SHIPMENTID_SIZE ."'  maxlength='".huh_shipment::SHIPMENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_shipment::TIMESTAMPCREATED." id=".huh_shipment::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_shipment::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_shipment::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_shipment::TIMESTAMPMODIFIED." id=".huh_shipment::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_shipment::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_shipment::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_shipment::VERSION." id=".huh_shipment::VERSION." value='".$model->getVersion()."'  size='".huh_shipment::VERSION_SIZE ."'  maxlength='".huh_shipment::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>INSUREDFORAMOUNT<input type=text name=".huh_shipment::INSUREDFORAMOUNT." id=".huh_shipment::INSUREDFORAMOUNT." value='".$model->getInsuredForAmount()."'  size='".huh_shipment::INSUREDFORAMOUNT_SIZE ."'  maxlength='".huh_shipment::INSUREDFORAMOUNT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_shipment::NUMBER1." id=".huh_shipment::NUMBER1." value='".$model->getNumber1()."'  size='".huh_shipment::NUMBER1_SIZE ."'  maxlength='".huh_shipment::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_shipment::NUMBER2." id=".huh_shipment::NUMBER2." value='".$model->getNumber2()."'  size='".huh_shipment::NUMBER2_SIZE ."'  maxlength='".huh_shipment::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER3<input type=text name=".huh_shipment::NUMBER3." id=".huh_shipment::NUMBER3." value='".$model->getNumber3()."'  size='".huh_shipment::NUMBER3_SIZE ."'  maxlength='".huh_shipment::NUMBER3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBEROFPACKAGES<input type=text name=".huh_shipment::NUMBEROFPACKAGES." id=".huh_shipment::NUMBEROFPACKAGES." value='".$model->getNumberOfPackages()."'  size='".huh_shipment::NUMBEROFPACKAGES_SIZE ."'  maxlength='".huh_shipment::NUMBEROFPACKAGES_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_shipment::REMARKS." id=".huh_shipment::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_shipment::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SHIPMENTDATE<input type=text name=".huh_shipment::SHIPMENTDATE." id=".huh_shipment::SHIPMENTDATE." value='".$model->getShipmentDate()."'  size='".huh_shipment::SHIPMENTDATE_SIZE ."'  maxlength='".huh_shipment::SHIPMENTDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SHIPMENTMETHOD<input type=text name=".huh_shipment::SHIPMENTMETHOD." id=".huh_shipment::SHIPMENTMETHOD." value='".$model->getShipmentMethod()."'  size='".huh_shipment::SHIPMENTMETHOD_SIZE ."'  maxlength='".huh_shipment::SHIPMENTMETHOD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SHIPMENTNUMBER<input type=text name=".huh_shipment::SHIPMENTNUMBER." id=".huh_shipment::SHIPMENTNUMBER." value='".$model->getShipmentNumber()."'  size='".huh_shipment::SHIPMENTNUMBER_SIZE ."'  maxlength='".huh_shipment::SHIPMENTNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_shipment::TEXT1." id=".huh_shipment::TEXT1." value='".$model->getText1()."'  size='51'  maxlength='".huh_shipment::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_shipment::TEXT2." id=".huh_shipment::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_shipment::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>WEIGHT<input type=text name=".huh_shipment::WEIGHT." id=".huh_shipment::WEIGHT." value='".$model->getWeight()."'  size='".huh_shipment::WEIGHT_SIZE ."'  maxlength='".huh_shipment::WEIGHT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_shipment::YESNO1." id=".huh_shipment::YESNO1." value='".$model->getYesNo1()."'  size='".huh_shipment::YESNO1_SIZE ."'  maxlength='".huh_shipment::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_shipment::YESNO2." id=".huh_shipment::YESNO2." value='".$model->getYesNo2()."'  size='".huh_shipment::YESNO2_SIZE ."'  maxlength='".huh_shipment::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SHIPPEDTOID<input type=text name=".huh_shipment::SHIPPEDTOID." id=".huh_shipment::SHIPPEDTOID." value='".$model->getShippedToID()."'  size='".huh_shipment::SHIPPEDTOID_SIZE ."'  maxlength='".huh_shipment::SHIPPEDTOID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SHIPPERID<input type=text name=".huh_shipment::SHIPPERID." id=".huh_shipment::SHIPPERID." value='".$model->getShipperID()."'  size='".huh_shipment::SHIPPERID_SIZE ."'  maxlength='".huh_shipment::SHIPPERID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>BORROWID<input type=text name=".huh_shipment::BORROWID." id=".huh_shipment::BORROWID." value='".$model->getBorrowID()."'  size='".huh_shipment::BORROWID_SIZE ."'  maxlength='".huh_shipment::BORROWID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_shipment::MODIFIEDBYAGENTID." id=".huh_shipment::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_shipment::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_shipment::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SHIPPEDBYID<input type=text name=".huh_shipment::SHIPPEDBYID." id=".huh_shipment::SHIPPEDBYID." value='".$model->getShippedByID()."'  size='".huh_shipment::SHIPPEDBYID_SIZE ."'  maxlength='".huh_shipment::SHIPPEDBYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_shipment::CREATEDBYAGENTID." id=".huh_shipment::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_shipment::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_shipment::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>EXCHANGEOUTID<input type=text name=".huh_shipment::EXCHANGEOUTID." id=".huh_shipment::EXCHANGEOUTID." value='".$model->getExchangeOutID()."'  size='".huh_shipment::EXCHANGEOUTID_SIZE ."'  maxlength='".huh_shipment::EXCHANGEOUTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GIFTID<input type=text name=".huh_shipment::GIFTID." id=".huh_shipment::GIFTID." value='".$model->getGiftID()."'  size='".huh_shipment::GIFTID_SIZE ."'  maxlength='".huh_shipment::GIFTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LOANID<input type=text name=".huh_shipment::LOANID." id=".huh_shipment::LOANID." value='".$model->getLoanID()."'  size='".huh_shipment::LOANID_SIZE ."'  maxlength='".huh_shipment::LOANID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISCIPLINEID<input type=text name=".huh_shipment::DISCIPLINEID." id=".huh_shipment::DISCIPLINEID." value='".$model->getDisciplineID()."'  size='".huh_shipment::DISCIPLINEID_SIZE ."'  maxlength='".huh_shipment::DISCIPLINEID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
