<?php
//==============================================================================
//===   conservevent.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_conservevent implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const CONSERVEVENTID_SIZE  = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const ADVTESTINGEXAM_SIZE  = 255; //LONGVARCHAR
   const ADVTESTINGEXAMRESULTS_SIZE = 255; //LONGVARCHAR
   const COMPLETEDCOMMENTS_SIZE = 255; //LONGVARCHAR
   const COMPLETEDDATE_SIZE   = 12; //DATE
   const CONDITIONREPORT_SIZE = 255; //LONGVARCHAR
   const CURATORAPPROVALDATE_SIZE = 12; //DATE
   const EXAMDATE_SIZE        = 12; //DATE
   const PHOTODOCS_SIZE       = 255; //LONGVARCHAR
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const TREATMENTCOMPDATE_SIZE = 12; //DATE
   const TREATMENTREPORT_SIZE = 255; //LONGVARCHAR
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const EXAMINEDBYAGENTID_SIZE = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const CURATORID_SIZE       = 11; //INTEGER
   const CONSERVDESCRIPTIONID_SIZE = 11; //INTEGER
   const TREATEDBYAGENTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const CONSERVEVENTID    = 'ConservEventID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const ADVTESTINGEXAM    = 'AdvTestingExam';
   const ADVTESTINGEXAMRESULTS = 'AdvTestingExamResults';
   const COMPLETEDCOMMENTS = 'CompletedComments';
   const COMPLETEDDATE     = 'CompletedDate';
   const CONDITIONREPORT   = 'ConditionReport';
   const CURATORAPPROVALDATE = 'CuratorApprovalDate';
   const EXAMDATE          = 'ExamDate';
   const PHOTODOCS         = 'PhotoDocs';
   const REMARKS           = 'Remarks';
   const TREATMENTCOMPDATE = 'TreatmentCompDate';
   const TREATMENTREPORT   = 'TreatmentReport';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const EXAMINEDBYAGENTID = 'ExaminedByAgentID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const CURATORID         = 'CuratorID';
   const CONSERVDESCRIPTIONID = 'ConservDescriptionID';
   const TREATEDBYAGENTID  = 'TreatedByAgentID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $ConservEventID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ConservEventID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $AdvTestingExam = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['AdvTestingExam']), 0, 255);
  $AdvTestingExamResults = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['AdvTestingExamResults']), 0, 255);
  $CompletedComments = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CompletedComments']), 0, 255);
  $CompletedDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CompletedDate']), 0, 12);
  $ConditionReport = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ConditionReport']), 0, 255);
  $CuratorApprovalDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CuratorApprovalDate']), 0, 12);
  $ExamDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ExamDate']), 0, 12);
  $PhotoDocs = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PhotoDocs']), 0, 255);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $TreatmentCompDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TreatmentCompDate']), 0, 12);
  $TreatmentReport = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TreatmentReport']), 0, 255);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $ExaminedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ExaminedByAgentID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $CuratorID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CuratorID']), 0, 11);
  $ConservDescriptionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ConservDescriptionID']), 0, 11);
  $TreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['TreatedByAgentID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $ConservEventID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $AdvTestingExam; // LONGVARCHAR 
   private $AdvTestingExamResults; // LONGVARCHAR 
   private $CompletedComments; // LONGVARCHAR 
   private $CompletedDate; // DATE 
   private $ConditionReport; // LONGVARCHAR 
   private $CuratorApprovalDate; // DATE 
   private $ExamDate; // DATE 
   private $PhotoDocs; // LONGVARCHAR 
   private $Remarks; // LONGVARCHAR 
   private $TreatmentCompDate; // DATE 
   private $TreatmentReport; // LONGVARCHAR 
   private $ModifiedByAgentID; // INTEGER 
   private $ExaminedByAgentID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $CuratorID; // INTEGER 
   private $ConservDescriptionID; // INTEGER 
   private $TreatedByAgentID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' ConservEventID, TimestampCreated, TimestampModified, Version, AdvTestingExam, AdvTestingExamResults, CompletedComments, CompletedDate, ConditionReport, CuratorApprovalDate, ExamDate, PhotoDocs, Remarks, TreatmentCompDate, TreatmentReport, ModifiedByAgentID, ExaminedByAgentID, CreatedByAgentID, CuratorID, ConservDescriptionID, TreatedByAgentID, ';
   const PKFIELDLIST = ' ConservEventID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'ConservEventID'  ) ;
   private $allFieldsArray = array( 0 => 'ConservEventID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'AdvTestingExam' , 5 => 'AdvTestingExamResults' , 6 => 'CompletedComments' , 7 => 'CompletedDate' , 8 => 'ConditionReport' , 9 => 'CuratorApprovalDate' , 10 => 'ExamDate' , 11 => 'PhotoDocs' , 12 => 'Remarks' , 13 => 'TreatmentCompDate' , 14 => 'TreatmentReport' , 15 => 'ModifiedByAgentID' , 16 => 'ExaminedByAgentID' , 17 => 'CreatedByAgentID' , 18 => 'CuratorID' , 19 => 'ConservDescriptionID' , 20 => 'TreatedByAgentID'  ) ;
   private $selectDistinctFieldsArray = array( 7 => 'CompletedDate' , 10 => 'ExamDate' , 15 => 'ModifiedByAgentID' , 16 => 'ExaminedByAgentID' , 17 => 'CreatedByAgentID' , 18 => 'CuratorID' , 19 => 'ConservDescriptionID' , 20 => 'TreatedByAgentID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_conservevent(){
       $this->ConservEventID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->AdvTestingExam = '';
       $this->AdvTestingExamResults = '';
       $this->CompletedComments = '';
       $this->CompletedDate = '';
       $this->ConditionReport = '';
       $this->CuratorApprovalDate = '';
       $this->ExamDate = '';
       $this->PhotoDocs = '';
       $this->Remarks = '';
       $this->TreatmentCompDate = '';
       $this->TreatmentReport = '';
       $this->ModifiedByAgentID = '';
       $this->ExaminedByAgentID = '';
       $this->CreatedByAgentID = '';
       $this->CuratorID = '';
       $this->ConservDescriptionID = '';
       $this->TreatedByAgentID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='ConservEventID') { $returnvalue = $this->setConservEventID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='AdvTestingExam') { $returnvalue = $this->setAdvTestingExam($value); } 
             if ($fieldname=='AdvTestingExamResults') { $returnvalue = $this->setAdvTestingExamResults($value); } 
             if ($fieldname=='CompletedComments') { $returnvalue = $this->setCompletedComments($value); } 
             if ($fieldname=='CompletedDate') { $returnvalue = $this->setCompletedDate($value); } 
             if ($fieldname=='ConditionReport') { $returnvalue = $this->setConditionReport($value); } 
             if ($fieldname=='CuratorApprovalDate') { $returnvalue = $this->setCuratorApprovalDate($value); } 
             if ($fieldname=='ExamDate') { $returnvalue = $this->setExamDate($value); } 
             if ($fieldname=='PhotoDocs') { $returnvalue = $this->setPhotoDocs($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='TreatmentCompDate') { $returnvalue = $this->setTreatmentCompDate($value); } 
             if ($fieldname=='TreatmentReport') { $returnvalue = $this->setTreatmentReport($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='ExaminedByAgentID') { $returnvalue = $this->setExaminedByAgentID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='CuratorID') { $returnvalue = $this->setCuratorID($value); } 
             if ($fieldname=='ConservDescriptionID') { $returnvalue = $this->setConservDescriptionID($value); } 
             if ($fieldname=='TreatedByAgentID') { $returnvalue = $this->setTreatedByAgentID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='ConservEventID') { $returnvalue = $this->getConservEventID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='AdvTestingExam') { $returnvalue = $this->getAdvTestingExam(); } 
             if ($fieldname=='AdvTestingExamResults') { $returnvalue = $this->getAdvTestingExamResults(); } 
             if ($fieldname=='CompletedComments') { $returnvalue = $this->getCompletedComments(); } 
             if ($fieldname=='CompletedDate') { $returnvalue = $this->getCompletedDate(); } 
             if ($fieldname=='ConditionReport') { $returnvalue = $this->getConditionReport(); } 
             if ($fieldname=='CuratorApprovalDate') { $returnvalue = $this->getCuratorApprovalDate(); } 
             if ($fieldname=='ExamDate') { $returnvalue = $this->getExamDate(); } 
             if ($fieldname=='PhotoDocs') { $returnvalue = $this->getPhotoDocs(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='TreatmentCompDate') { $returnvalue = $this->getTreatmentCompDate(); } 
             if ($fieldname=='TreatmentReport') { $returnvalue = $this->getTreatmentReport(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='ExaminedByAgentID') { $returnvalue = $this->getExaminedByAgentID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='CuratorID') { $returnvalue = $this->getCuratorID(); } 
             if ($fieldname=='ConservDescriptionID') { $returnvalue = $this->getConservDescriptionID(); } 
             if ($fieldname=='TreatedByAgentID') { $returnvalue = $this->getTreatedByAgentID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*ConservEventID*/
   public function getConservEventID() {
       if ($this->ConservEventID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ConservEventID));
       }
   }
   public function setConservEventID($ConservEventID) {
       if (strlen(preg_replace('/[^0-9]/','',$ConservEventID)) > huh_conservevent::CONSERVEVENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ConservEventID = trim($ConservEventID);
       if (!ctype_digit(strval($ConservEventID)) && trim(strval($ConservEventID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ConservEventID = $this->l_addslashes($ConservEventID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_conservevent::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_conservevent::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_conservevent::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*AdvTestingExam*/
   public function getAdvTestingExam() {
       if ($this->AdvTestingExam==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AdvTestingExam));
       }
   }
   public function setAdvTestingExam($AdvTestingExam) {
       if (strlen($AdvTestingExam) > huh_conservevent::ADVTESTINGEXAM_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->AdvTestingExam = $this->l_addslashes($AdvTestingExam);
       $this->dirty = true;
   }
/*AdvTestingExamResults*/
   public function getAdvTestingExamResults() {
       if ($this->AdvTestingExamResults==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AdvTestingExamResults));
       }
   }
   public function setAdvTestingExamResults($AdvTestingExamResults) {
       if (strlen($AdvTestingExamResults) > huh_conservevent::ADVTESTINGEXAMRESULTS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->AdvTestingExamResults = $this->l_addslashes($AdvTestingExamResults);
       $this->dirty = true;
   }
/*CompletedComments*/
   public function getCompletedComments() {
       if ($this->CompletedComments==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CompletedComments));
       }
   }
   public function setCompletedComments($CompletedComments) {
       if (strlen($CompletedComments) > huh_conservevent::COMPLETEDCOMMENTS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CompletedComments = $this->l_addslashes($CompletedComments);
       $this->dirty = true;
   }
/*CompletedDate*/
   public function getCompletedDate() {
       if ($this->CompletedDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CompletedDate));
       }
   }
   public function setCompletedDate($CompletedDate) {
       if (strlen($CompletedDate) > huh_conservevent::COMPLETEDDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CompletedDate = $this->l_addslashes($CompletedDate);
       $this->dirty = true;
   }
/*ConditionReport*/
   public function getConditionReport() {
       if ($this->ConditionReport==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ConditionReport));
       }
   }
   public function setConditionReport($ConditionReport) {
       if (strlen($ConditionReport) > huh_conservevent::CONDITIONREPORT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ConditionReport = $this->l_addslashes($ConditionReport);
       $this->dirty = true;
   }
/*CuratorApprovalDate*/
   public function getCuratorApprovalDate() {
       if ($this->CuratorApprovalDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CuratorApprovalDate));
       }
   }
   public function setCuratorApprovalDate($CuratorApprovalDate) {
       if (strlen($CuratorApprovalDate) > huh_conservevent::CURATORAPPROVALDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CuratorApprovalDate = $this->l_addslashes($CuratorApprovalDate);
       $this->dirty = true;
   }
/*ExamDate*/
   public function getExamDate() {
       if ($this->ExamDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ExamDate));
       }
   }
   public function setExamDate($ExamDate) {
       if (strlen($ExamDate) > huh_conservevent::EXAMDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ExamDate = $this->l_addslashes($ExamDate);
       $this->dirty = true;
   }
/*PhotoDocs*/
   public function getPhotoDocs() {
       if ($this->PhotoDocs==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PhotoDocs));
       }
   }
   public function setPhotoDocs($PhotoDocs) {
       if (strlen($PhotoDocs) > huh_conservevent::PHOTODOCS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PhotoDocs = $this->l_addslashes($PhotoDocs);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_conservevent::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*TreatmentCompDate*/
   public function getTreatmentCompDate() {
       if ($this->TreatmentCompDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TreatmentCompDate));
       }
   }
   public function setTreatmentCompDate($TreatmentCompDate) {
       if (strlen($TreatmentCompDate) > huh_conservevent::TREATMENTCOMPDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TreatmentCompDate = $this->l_addslashes($TreatmentCompDate);
       $this->dirty = true;
   }
/*TreatmentReport*/
   public function getTreatmentReport() {
       if ($this->TreatmentReport==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TreatmentReport));
       }
   }
   public function setTreatmentReport($TreatmentReport) {
       if (strlen($TreatmentReport) > huh_conservevent::TREATMENTREPORT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TreatmentReport = $this->l_addslashes($TreatmentReport);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_conservevent::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*ExaminedByAgentID*/
   public function getExaminedByAgentID() {
       if ($this->ExaminedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ExaminedByAgentID));
       }
   }
   public function setExaminedByAgentID($ExaminedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ExaminedByAgentID)) > huh_conservevent::EXAMINEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ExaminedByAgentID = trim($ExaminedByAgentID);
       if (!ctype_digit(strval($ExaminedByAgentID)) && trim(strval($ExaminedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ExaminedByAgentID = $this->l_addslashes($ExaminedByAgentID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_conservevent::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*CuratorID*/
   public function getCuratorID() {
       if ($this->CuratorID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CuratorID));
       }
   }
   public function setCuratorID($CuratorID) {
       if (strlen(preg_replace('/[^0-9]/','',$CuratorID)) > huh_conservevent::CURATORID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CuratorID = trim($CuratorID);
       if (!ctype_digit(strval($CuratorID)) && trim(strval($CuratorID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CuratorID = $this->l_addslashes($CuratorID);
       $this->dirty = true;
   }
/*ConservDescriptionID*/
   public function getConservDescriptionID() {
       if ($this->ConservDescriptionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ConservDescriptionID));
       }
   }
   public function setConservDescriptionID($ConservDescriptionID) {
       if (strlen(preg_replace('/[^0-9]/','',$ConservDescriptionID)) > huh_conservevent::CONSERVDESCRIPTIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ConservDescriptionID = trim($ConservDescriptionID);
       if (!ctype_digit(strval($ConservDescriptionID))) {
             throw new Exception("Value must be an integer");
       }
       $this->ConservDescriptionID = $this->l_addslashes($ConservDescriptionID);
       $this->dirty = true;
   }
/*TreatedByAgentID*/
   public function getTreatedByAgentID() {
       if ($this->TreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TreatedByAgentID));
       }
   }
   public function setTreatedByAgentID($TreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$TreatedByAgentID)) > huh_conservevent::TREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $TreatedByAgentID = trim($TreatedByAgentID);
       if (!ctype_digit(strval($TreatedByAgentID)) && trim(strval($TreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->TreatedByAgentID = $this->l_addslashes($TreatedByAgentID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getConservEventID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['ConservEventID'] = $this->getConservEventID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_ConservEventIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_AdvTestingExamMYSQLI_TYPE = 's';
  const C_AdvTestingExamResultsMYSQLI_TYPE = 's';
  const C_CompletedCommentsMYSQLI_TYPE = 's';
  const C_CompletedDateMYSQLI_TYPE = 's';
  const C_ConditionReportMYSQLI_TYPE = 's';
  const C_CuratorApprovalDateMYSQLI_TYPE = 's';
  const C_ExamDateMYSQLI_TYPE = 's';
  const C_PhotoDocsMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_TreatmentCompDateMYSQLI_TYPE = 's';
  const C_TreatmentReportMYSQLI_TYPE = 's';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_ExaminedByAgentIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_CuratorIDMYSQLI_TYPE = 'i';
  const C_ConservDescriptionIDMYSQLI_TYPE = 'i';
  const C_TreatedByAgentIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='ConservEventID') { $retval = self::C_ConservEventIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='AdvTestingExam') { $retval = self::C_AdvTestingExamMYSQLI_TYPE; }
      if ($aFieldname=='AdvTestingExamResults') { $retval = self::C_AdvTestingExamResultsMYSQLI_TYPE; }
      if ($aFieldname=='CompletedComments') { $retval = self::C_CompletedCommentsMYSQLI_TYPE; }
      if ($aFieldname=='CompletedDate') { $retval = self::C_CompletedDateMYSQLI_TYPE; }
      if ($aFieldname=='ConditionReport') { $retval = self::C_ConditionReportMYSQLI_TYPE; }
      if ($aFieldname=='CuratorApprovalDate') { $retval = self::C_CuratorApprovalDateMYSQLI_TYPE; }
      if ($aFieldname=='ExamDate') { $retval = self::C_ExamDateMYSQLI_TYPE; }
      if ($aFieldname=='PhotoDocs') { $retval = self::C_PhotoDocsMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='TreatmentCompDate') { $retval = self::C_TreatmentCompDateMYSQLI_TYPE; }
      if ($aFieldname=='TreatmentReport') { $retval = self::C_TreatmentReportMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ExaminedByAgentID') { $retval = self::C_ExaminedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='CuratorID') { $retval = self::C_CuratorIDMYSQLI_TYPE; }
      if ($aFieldname=='ConservDescriptionID') { $retval = self::C_ConservDescriptionIDMYSQLI_TYPE; }
      if ($aFieldname=='TreatedByAgentID') { $retval = self::C_TreatedByAgentIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setConservEventID($pk[ConservEventID]);
             } else { ;
                 $this->setConservEventID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->ConservEventID != NULL) {
           $sql = 'SELECT ConservEventID, TimestampCreated, TimestampModified, Version, AdvTestingExam, AdvTestingExamResults, CompletedComments, CompletedDate, ConditionReport, CuratorApprovalDate, ExamDate, PhotoDocs, Remarks, TreatmentCompDate, TreatmentReport, ModifiedByAgentID, ExaminedByAgentID, CreatedByAgentID, CuratorID, ConservDescriptionID, TreatedByAgentID FROM conservevent WHERE ConservEventID = '.$this->ConservEventID ;

           $preparesql = 'SELECT ConservEventID, TimestampCreated, TimestampModified, Version, AdvTestingExam, AdvTestingExamResults, CompletedComments, CompletedDate, ConditionReport, CuratorApprovalDate, ExamDate, PhotoDocs, Remarks, TreatmentCompDate, TreatmentReport, ModifiedByAgentID, ExaminedByAgentID, CreatedByAgentID, CuratorID, ConservDescriptionID, TreatedByAgentID FROM conservevent WHERE ConservEventID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->ConservEventID);
              $statement->execute();
              $statement->bind_result($this->ConservEventID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->AdvTestingExam, $this->AdvTestingExamResults, $this->CompletedComments, $this->CompletedDate, $this->ConditionReport, $this->CuratorApprovalDate, $this->ExamDate, $this->PhotoDocs, $this->Remarks, $this->TreatmentCompDate, $this->TreatmentReport, $this->ModifiedByAgentID, $this->ExaminedByAgentID, $this->CreatedByAgentID, $this->CuratorID, $this->ConservDescriptionID, $this->TreatedByAgentID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->ConservEventID!= NULL) {
            $sql  = 'UPDATE  conservevent SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", AdvTestingExam = ? ";
            $sql .=  ", AdvTestingExamResults = ? ";
            $sql .=  ", CompletedComments = ? ";
            $sql .=  ", CompletedDate = ? ";
            $sql .=  ", ConditionReport = ? ";
            $sql .=  ", CuratorApprovalDate = ? ";
            $sql .=  ", ExamDate = ? ";
            $sql .=  ", PhotoDocs = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", TreatmentCompDate = ? ";
            $sql .=  ", TreatmentReport = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", ExaminedByAgentID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", CuratorID = ? ";
            $sql .=  ", ConservDescriptionID = ? ";
            $sql .=  ", TreatedByAgentID = ? ";

            $sql .= "  WHERE ConservEventID = ? ";
        } else {
            $sql  = 'INSERT INTO conservevent ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( ConservEventID ,  TimestampCreated ,  TimestampModified ,  Version ,  AdvTestingExam ,  AdvTestingExamResults ,  CompletedComments ,  CompletedDate ,  ConditionReport ,  CuratorApprovalDate ,  ExamDate ,  PhotoDocs ,  Remarks ,  TreatmentCompDate ,  TreatmentReport ,  ModifiedByAgentID ,  ExaminedByAgentID ,  CreatedByAgentID ,  CuratorID ,  ConservDescriptionID ,  TreatedByAgentID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->ConservEventID!= NULL ) {
              $statement->bind_param("ississsssssssssiiiiiii", $this->ConservEventID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->AdvTestingExam , $this->AdvTestingExamResults , $this->CompletedComments , $this->CompletedDate , $this->ConditionReport , $this->CuratorApprovalDate , $this->ExamDate , $this->PhotoDocs , $this->Remarks , $this->TreatmentCompDate , $this->TreatmentReport , $this->ModifiedByAgentID , $this->ExaminedByAgentID , $this->CreatedByAgentID , $this->CuratorID , $this->ConservDescriptionID , $this->TreatedByAgentID , $this->ConservEventID );
           } else { 
              $statement->bind_param("ississsssssssssiiiiii", $this->ConservEventID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->AdvTestingExam , $this->AdvTestingExamResults , $this->CompletedComments , $this->CompletedDate , $this->ConditionReport , $this->CuratorApprovalDate , $this->ExamDate , $this->PhotoDocs , $this->Remarks , $this->TreatmentCompDate , $this->TreatmentReport , $this->ModifiedByAgentID , $this->ExaminedByAgentID , $this->CreatedByAgentID , $this->CuratorID , $this->ConservDescriptionID , $this->TreatedByAgentID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->ConservEventID != NULL) {
           $sql = 'SELECT ConservEventID, TimestampCreated, TimestampModified, Version, AdvTestingExam, AdvTestingExamResults, CompletedComments, CompletedDate, ConditionReport, CuratorApprovalDate, ExamDate, PhotoDocs, Remarks, TreatmentCompDate, TreatmentReport, ModifiedByAgentID, ExaminedByAgentID, CreatedByAgentID, CuratorID, ConservDescriptionID, TreatedByAgentID FROM conservevent WHERE ConservEventID = "'.$this->ConservEventID.'"  ' ;

           $preparedsql = 'SELECT  FROM conservevent WHERE  and ConservEventID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississsssssssssiiiiii", $this->ConservEventID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->AdvTestingExam, $this->AdvTestingExamResults, $this->CompletedComments, $this->CompletedDate, $this->ConditionReport, $this->CuratorApprovalDate, $this->ExamDate, $this->PhotoDocs, $this->Remarks, $this->TreatmentCompDate, $this->TreatmentReport, $this->ModifiedByAgentID, $this->ExaminedByAgentID, $this->CreatedByAgentID, $this->CuratorID, $this->ConservDescriptionID, $this->TreatedByAgentID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM conservevent WHERE  and ConservEventID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississsssssssssiiiiii", $this->ConservEventID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->AdvTestingExam, $this->AdvTestingExamResults, $this->CompletedComments, $this->CompletedDate, $this->ConditionReport, $this->CuratorApprovalDate, $this->ExamDate, $this->PhotoDocs, $this->Remarks, $this->TreatmentCompDate, $this->TreatmentReport, $this->ModifiedByAgentID, $this->ExaminedByAgentID, $this->CreatedByAgentID, $this->CuratorID, $this->ConservDescriptionID, $this->TreatedByAgentID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->ConservEventID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM conservevent';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT ConservEventID FROM conservevent $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_conservevent();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromconserveventattachment() { 
      // ForeignKey in: conserveventattachment
      $t = new conserveventattachment();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: ExaminedByAgentID
      $t = new agent();
      $t->load(getExaminedByAgentID());
      $returnvalue[ExaminedByAgentID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: CuratorID
      $t = new agent();
      $t->load(getCuratorID());
      $returnvalue[CuratorID] = $t;
       // fk: ConservDescriptionID
      $t = new conservdescription();
      $t->load(getConservDescriptionID());
      $returnvalue[ConservDescriptionID] = $t;
       // fk: TreatedByAgentID
      $t = new agent();
      $t->load(getTreatedByAgentID());
      $returnvalue[TreatedByAgentID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT ConservEventID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(AdvTestingExam,'') || ' ' || IFNULL(AdvTestingExamResults,'') || ' ' || IFNULL(CompletedComments,'') || ' ' || IFNULL(CompletedDate,'') || ' ' || IFNULL(ConditionReport,'') || ' ' || IFNULL(CuratorApprovalDate,'') || ' ' || IFNULL(ExamDate,'') || ' ' || IFNULL(PhotoDocs,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(TreatmentCompDate,'') || ' ' || IFNULL(TreatmentReport,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(ExaminedByAgentID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(CuratorID,'') || ' ' || IFNULL(ConservDescriptionID,'') || ' ' || IFNULL(TreatedByAgentID,'')) FROM conservevent order by CompletedDate, ExamDate, ModifiedByAgentID, ExaminedByAgentID, CreatedByAgentID, CuratorID, ConservDescriptionID, TreatedByAgentID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM conservevent order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCompletedDate($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservEventID FROM conservevent WHERE CompletedDate $operator '$searchTerm'";
        $preparedsql = "SELECT ConservEventID FROM conservevent WHERE CompletedDate $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByExamDate($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservEventID FROM conservevent WHERE ExamDate $operator '$searchTerm'";
        $preparedsql = "SELECT ConservEventID FROM conservevent WHERE ExamDate $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservEventID FROM conservevent WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT ConservEventID FROM conservevent WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByExaminedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservEventID FROM conservevent WHERE ExaminedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT ConservEventID FROM conservevent WHERE ExaminedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservEventID FROM conservevent WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT ConservEventID FROM conservevent WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCuratorID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservEventID FROM conservevent WHERE CuratorID $operator '$searchTerm'";
        $preparedsql = "SELECT ConservEventID FROM conservevent WHERE CuratorID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByConservDescriptionID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservEventID FROM conservevent WHERE ConservDescriptionID $operator '$searchTerm'";
        $preparedsql = "SELECT ConservEventID FROM conservevent WHERE ConservDescriptionID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByTreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservEventID FROM conservevent WHERE TreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT ConservEventID FROM conservevent WHERE TreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCompletedDate($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CompletedDate ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CompletedDate FROM conservevent group by CompletedDate order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CompletedDate=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctExamDate($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ExamDate ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ExamDate FROM conservevent group by ExamDate order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ExamDate=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM conservevent group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctExaminedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ExaminedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ExaminedByAgentID FROM conservevent group by ExaminedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ExaminedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM conservevent group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCuratorID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CuratorID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CuratorID FROM conservevent group by CuratorID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CuratorID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctConservDescriptionID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ConservDescriptionID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ConservDescriptionID FROM conservevent group by ConservDescriptionID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ConservDescriptionID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctTreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' TreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, TreatedByAgentID FROM conservevent group by TreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&TreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'CompletedDate':
             $returnvalue = $this->selectDistinctCompletedDate($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ExamDate':
             $returnvalue = $this->selectDistinctExamDate($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ExaminedByAgentID':
             $returnvalue = $this->selectDistinctExaminedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CuratorID':
             $returnvalue = $this->selectDistinctCuratorID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ConservDescriptionID':
             $returnvalue = $this->selectDistinctConservDescriptionID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'TreatedByAgentID':
             $returnvalue = $this->selectDistinctTreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the conservevent.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_conserveventView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_conservevent <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_conservevent::CONSERVEVENTID.": ".$model->getConservEventID()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::ADVTESTINGEXAM.": ".$model->getAdvTestingExam()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::ADVTESTINGEXAMRESULTS.": ".$model->getAdvTestingExamResults()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::COMPLETEDCOMMENTS.": ".$model->getCompletedComments()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::COMPLETEDDATE.": ".$model->getCompletedDate()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::CONDITIONREPORT.": ".$model->getConditionReport()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::CURATORAPPROVALDATE.": ".$model->getCuratorApprovalDate()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::EXAMDATE.": ".$model->getExamDate()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::PHOTODOCS.": ".$model->getPhotoDocs()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::TREATMENTCOMPDATE.": ".$model->getTreatmentCompDate()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::TREATMENTREPORT.": ".$model->getTreatmentReport()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::EXAMINEDBYAGENTID.": ".$model->getExaminedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::CURATORID.": ".$model->getCuratorID()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::CONSERVDESCRIPTIONID.": ".$model->getConservDescriptionID()."</li>\n";
       $returnvalue .= "<li>".huh_conservevent::TREATEDBYAGENTID.": ".$model->getTreatedByAgentID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getExaminedByAgentID() != '') { 
               $t_agent->load($model->getExaminedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCuratorID() != '') { 
               $t_agent->load($model->getCuratorID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>conservdescription</li>";
           $t_conservdescription = new huh_conservdescription();
           $t_conservdescriptionView = new huh_conservdescriptionView();
           $t_conservdescriptionView->setModel($t_conservdescription);
           if ($model->getConservDescriptionID() != '') { 
               $t_conservdescription->load($model->getConservDescriptionID());
               $returnvalue .= $t_conservdescriptionView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getTreatedByAgentID() != '') { 
               $t_agent->load($model->getTreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_conservevent::CONSERVEVENTID.': "'.$model->getConservEventID().'",';
       $returnvalue .= '"'.huh_conservevent::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_conservevent::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_conservevent::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_conservevent::ADVTESTINGEXAM.': "'.$model->getAdvTestingExam().'",';
       $returnvalue .= '"'.huh_conservevent::ADVTESTINGEXAMRESULTS.': "'.$model->getAdvTestingExamResults().'",';
       $returnvalue .= '"'.huh_conservevent::COMPLETEDCOMMENTS.': "'.$model->getCompletedComments().'",';
       $returnvalue .= '"'.huh_conservevent::COMPLETEDDATE.': "'.$model->getCompletedDate().'",';
       $returnvalue .= '"'.huh_conservevent::CONDITIONREPORT.': "'.$model->getConditionReport().'",';
       $returnvalue .= '"'.huh_conservevent::CURATORAPPROVALDATE.': "'.$model->getCuratorApprovalDate().'",';
       $returnvalue .= '"'.huh_conservevent::EXAMDATE.': "'.$model->getExamDate().'",';
       $returnvalue .= '"'.huh_conservevent::PHOTODOCS.': "'.$model->getPhotoDocs().'",';
       $returnvalue .= '"'.huh_conservevent::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_conservevent::TREATMENTCOMPDATE.': "'.$model->getTreatmentCompDate().'",';
       $returnvalue .= '"'.huh_conservevent::TREATMENTREPORT.': "'.$model->getTreatmentReport().'",';
       $returnvalue .= '"'.huh_conservevent::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_conservevent::EXAMINEDBYAGENTID.': "'.$model->getExaminedByAgentID().'",';
       $returnvalue .= '"'.huh_conservevent::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_conservevent::CURATORID.': "'.$model->getCuratorID().'",';
       $returnvalue .= '"'.huh_conservevent::CONSERVDESCRIPTIONID.': "'.$model->getConservDescriptionID().'",';
       $returnvalue .= '"'.huh_conservevent::TREATEDBYAGENTID.': "'.$model->getTreatedByAgentID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getConservEventID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getAdvTestingExam()."</td>\n";
       $returnvalue .= "<td>".$model->getAdvTestingExamResults()."</td>\n";
       $returnvalue .= "<td>".$model->getCompletedComments()."</td>\n";
       $returnvalue .= "<td>".$model->getCompletedDate()."</td>\n";
       $returnvalue .= "<td>".$model->getConditionReport()."</td>\n";
       $returnvalue .= "<td>".$model->getCuratorApprovalDate()."</td>\n";
       $returnvalue .= "<td>".$model->getExamDate()."</td>\n";
       $returnvalue .= "<td>".$model->getPhotoDocs()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getTreatmentCompDate()."</td>\n";
       $returnvalue .= "<td>".$model->getTreatmentReport()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getExaminedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getCuratorID()."</td>\n";
       $returnvalue .= "<td>".$model->getConservDescriptionID()."</td>\n";
       $returnvalue .= "<td>".$model->getTreatedByAgentID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_conservevent::CONSERVEVENTID."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::ADVTESTINGEXAM."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::ADVTESTINGEXAMRESULTS."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::COMPLETEDCOMMENTS."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::COMPLETEDDATE."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::CONDITIONREPORT."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::CURATORAPPROVALDATE."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::EXAMDATE."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::PHOTODOCS."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::TREATMENTCOMPDATE."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::TREATMENTREPORT."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::EXAMINEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::CURATORID."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::CONSERVDESCRIPTIONID."</th>\n";
       $returnvalue .= "<th>".huh_conservevent::TREATEDBYAGENTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_conservevent">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new ConservEventID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_conservevent::CONSERVEVENTID.">CONSERVEVENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservevent::CONSERVEVENTID." id=".huh_conservevent::CONSERVEVENTID." value='".$model->getConservEventID()."'  style=' width:".huh_conservevent::CONSERVEVENTID_SIZE ."em;  '  maxlength='".huh_conservevent::CONSERVEVENTID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_conservevent::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_conservevent::TIMESTAMPCREATED." id=".huh_conservevent::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_conservevent::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_conservevent::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_conservevent::TIMESTAMPMODIFIED." id=".huh_conservevent::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_conservevent::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_conservevent::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservevent::VERSION." id=".huh_conservevent::VERSION." value='".$model->getVersion()."'  style=' width:".huh_conservevent::VERSION_SIZE ."em;  '  maxlength='".huh_conservevent::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::ADVTESTINGEXAM.">ADVTESTINGEXAM</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservevent::ADVTESTINGEXAM." id=".huh_conservevent::ADVTESTINGEXAM." >".$model->getAdvTestingExam()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::ADVTESTINGEXAMRESULTS.">ADVTESTINGEXAMRESULTS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservevent::ADVTESTINGEXAMRESULTS." id=".huh_conservevent::ADVTESTINGEXAMRESULTS." >".$model->getAdvTestingExamResults()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::COMPLETEDCOMMENTS.">COMPLETEDCOMMENTS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservevent::COMPLETEDCOMMENTS." id=".huh_conservevent::COMPLETEDCOMMENTS." >".$model->getCompletedComments()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::COMPLETEDDATE.">COMPLETEDDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_conservevent::COMPLETEDDATE." id=".huh_conservevent::COMPLETEDDATE." value='".$model->getCompletedDate()."'  style=' width:".huh_conservevent::COMPLETEDDATE_SIZE ."em;  '  maxlength='".huh_conservevent::COMPLETEDDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::CONDITIONREPORT.">CONDITIONREPORT</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservevent::CONDITIONREPORT." id=".huh_conservevent::CONDITIONREPORT." >".$model->getConditionReport()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::CURATORAPPROVALDATE.">CURATORAPPROVALDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_conservevent::CURATORAPPROVALDATE." id=".huh_conservevent::CURATORAPPROVALDATE." value='".$model->getCuratorApprovalDate()."'  style=' width:".huh_conservevent::CURATORAPPROVALDATE_SIZE ."em;  '  maxlength='".huh_conservevent::CURATORAPPROVALDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::EXAMDATE.">EXAMDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_conservevent::EXAMDATE." id=".huh_conservevent::EXAMDATE." value='".$model->getExamDate()."'  style=' width:".huh_conservevent::EXAMDATE_SIZE ."em;  '  maxlength='".huh_conservevent::EXAMDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::PHOTODOCS.">PHOTODOCS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservevent::PHOTODOCS." id=".huh_conservevent::PHOTODOCS." >".$model->getPhotoDocs()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservevent::REMARKS." id=".huh_conservevent::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::TREATMENTCOMPDATE.">TREATMENTCOMPDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_conservevent::TREATMENTCOMPDATE." id=".huh_conservevent::TREATMENTCOMPDATE." value='".$model->getTreatmentCompDate()."'  style=' width:".huh_conservevent::TREATMENTCOMPDATE_SIZE ."em;  '  maxlength='".huh_conservevent::TREATMENTCOMPDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::TREATMENTREPORT.">TREATMENTREPORT</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservevent::TREATMENTREPORT." id=".huh_conservevent::TREATMENTREPORT." >".$model->getTreatmentReport()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservevent::MODIFIEDBYAGENTID." id=".huh_conservevent::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_conservevent::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_conservevent::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::EXAMINEDBYAGENTID.">EXAMINEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservevent::EXAMINEDBYAGENTID." id=".huh_conservevent::EXAMINEDBYAGENTID." value='".$model->getExaminedByAgentID()."'  style=' width:".huh_conservevent::EXAMINEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_conservevent::EXAMINEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservevent::CREATEDBYAGENTID." id=".huh_conservevent::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_conservevent::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_conservevent::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::CURATORID.">CURATORID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservevent::CURATORID." id=".huh_conservevent::CURATORID." value='".$model->getCuratorID()."'  style=' width:".huh_conservevent::CURATORID_SIZE ."em;  '  maxlength='".huh_conservevent::CURATORID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::CONSERVDESCRIPTIONID.">CONSERVDESCRIPTIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservevent::CONSERVDESCRIPTIONID." id=".huh_conservevent::CONSERVDESCRIPTIONID." value='".$model->getConservDescriptionID()."'  style=' width:".huh_conservevent::CONSERVDESCRIPTIONID_SIZE ."em;  '  maxlength='".huh_conservevent::CONSERVDESCRIPTIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservevent::TREATEDBYAGENTID.">TREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservevent::TREATEDBYAGENTID." id=".huh_conservevent::TREATEDBYAGENTID." value='".$model->getTreatedByAgentID()."'  style=' width:".huh_conservevent::TREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_conservevent::TREATEDBYAGENTID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_conservevent">';
       $returnvalue .= '<input type=hidden name=ConservEventID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_conservevent">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>CONSERVEVENTID<input type=text name=".huh_conservevent::CONSERVEVENTID." id=".huh_conservevent::CONSERVEVENTID." value='".$model->getConservEventID()."'  size='".huh_conservevent::CONSERVEVENTID_SIZE ."'  maxlength='".huh_conservevent::CONSERVEVENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_conservevent::TIMESTAMPCREATED." id=".huh_conservevent::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_conservevent::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_conservevent::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_conservevent::TIMESTAMPMODIFIED." id=".huh_conservevent::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_conservevent::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_conservevent::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_conservevent::VERSION." id=".huh_conservevent::VERSION." value='".$model->getVersion()."'  size='".huh_conservevent::VERSION_SIZE ."'  maxlength='".huh_conservevent::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ADVTESTINGEXAM<input type=text name=".huh_conservevent::ADVTESTINGEXAM." id=".huh_conservevent::ADVTESTINGEXAM." value='".$model->getAdvTestingExam()."'  size='51'  maxlength='".huh_conservevent::ADVTESTINGEXAM_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ADVTESTINGEXAMRESULTS<input type=text name=".huh_conservevent::ADVTESTINGEXAMRESULTS." id=".huh_conservevent::ADVTESTINGEXAMRESULTS." value='".$model->getAdvTestingExamResults()."'  size='51'  maxlength='".huh_conservevent::ADVTESTINGEXAMRESULTS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COMPLETEDCOMMENTS<input type=text name=".huh_conservevent::COMPLETEDCOMMENTS." id=".huh_conservevent::COMPLETEDCOMMENTS." value='".$model->getCompletedComments()."'  size='51'  maxlength='".huh_conservevent::COMPLETEDCOMMENTS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COMPLETEDDATE<input type=text name=".huh_conservevent::COMPLETEDDATE." id=".huh_conservevent::COMPLETEDDATE." value='".$model->getCompletedDate()."'  size='".huh_conservevent::COMPLETEDDATE_SIZE ."'  maxlength='".huh_conservevent::COMPLETEDDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CONDITIONREPORT<input type=text name=".huh_conservevent::CONDITIONREPORT." id=".huh_conservevent::CONDITIONREPORT." value='".$model->getConditionReport()."'  size='51'  maxlength='".huh_conservevent::CONDITIONREPORT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CURATORAPPROVALDATE<input type=text name=".huh_conservevent::CURATORAPPROVALDATE." id=".huh_conservevent::CURATORAPPROVALDATE." value='".$model->getCuratorApprovalDate()."'  size='".huh_conservevent::CURATORAPPROVALDATE_SIZE ."'  maxlength='".huh_conservevent::CURATORAPPROVALDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>EXAMDATE<input type=text name=".huh_conservevent::EXAMDATE." id=".huh_conservevent::EXAMDATE." value='".$model->getExamDate()."'  size='".huh_conservevent::EXAMDATE_SIZE ."'  maxlength='".huh_conservevent::EXAMDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PHOTODOCS<input type=text name=".huh_conservevent::PHOTODOCS." id=".huh_conservevent::PHOTODOCS." value='".$model->getPhotoDocs()."'  size='51'  maxlength='".huh_conservevent::PHOTODOCS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_conservevent::REMARKS." id=".huh_conservevent::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_conservevent::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TREATMENTCOMPDATE<input type=text name=".huh_conservevent::TREATMENTCOMPDATE." id=".huh_conservevent::TREATMENTCOMPDATE." value='".$model->getTreatmentCompDate()."'  size='".huh_conservevent::TREATMENTCOMPDATE_SIZE ."'  maxlength='".huh_conservevent::TREATMENTCOMPDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TREATMENTREPORT<input type=text name=".huh_conservevent::TREATMENTREPORT." id=".huh_conservevent::TREATMENTREPORT." value='".$model->getTreatmentReport()."'  size='51'  maxlength='".huh_conservevent::TREATMENTREPORT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_conservevent::MODIFIEDBYAGENTID." id=".huh_conservevent::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_conservevent::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_conservevent::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>EXAMINEDBYAGENTID<input type=text name=".huh_conservevent::EXAMINEDBYAGENTID." id=".huh_conservevent::EXAMINEDBYAGENTID." value='".$model->getExaminedByAgentID()."'  size='".huh_conservevent::EXAMINEDBYAGENTID_SIZE ."'  maxlength='".huh_conservevent::EXAMINEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_conservevent::CREATEDBYAGENTID." id=".huh_conservevent::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_conservevent::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_conservevent::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CURATORID<input type=text name=".huh_conservevent::CURATORID." id=".huh_conservevent::CURATORID." value='".$model->getCuratorID()."'  size='".huh_conservevent::CURATORID_SIZE ."'  maxlength='".huh_conservevent::CURATORID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CONSERVDESCRIPTIONID<input type=text name=".huh_conservevent::CONSERVDESCRIPTIONID." id=".huh_conservevent::CONSERVDESCRIPTIONID." value='".$model->getConservDescriptionID()."'  size='".huh_conservevent::CONSERVDESCRIPTIONID_SIZE ."'  maxlength='".huh_conservevent::CONSERVDESCRIPTIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TREATEDBYAGENTID<input type=text name=".huh_conservevent::TREATEDBYAGENTID." id=".huh_conservevent::TREATEDBYAGENTID." value='".$model->getTreatedByAgentID()."'  size='".huh_conservevent::TREATEDBYAGENTID_SIZE ."'  maxlength='".huh_conservevent::TREATEDBYAGENTID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
