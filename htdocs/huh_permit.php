<?php
//==============================================================================
//===   permit.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_permit implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const PERMITID_SIZE        = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const ENDDATE_SIZE         = 12; //DATE
   const ISSUEDDATE_SIZE      = 12; //DATE
   const NUMBER1_SIZE         = 20; //REAL
   const NUMBER2_SIZE         = 20; //REAL
   const PERMITNUMBER_SIZE    = 20; //YEAR
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const RENEWALDATE_SIZE     = 12; //DATE
   const STARTDATE_SIZE       = 12; //DATE
   const TEXT1_SIZE           = 255; //LONGVARCHAR
   const TEXT2_SIZE           = 255; //LONGVARCHAR
   const TYPE_SIZE            = 20; //YEAR
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const ISSUEDTOID_SIZE      = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const ISSUEDBYID_SIZE      = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const PERMITID          = 'PermitID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const ENDDATE           = 'EndDate';
   const ISSUEDDATE        = 'IssuedDate';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const PERMITNUMBER      = 'PermitNumber';
   const REMARKS           = 'Remarks';
   const RENEWALDATE       = 'RenewalDate';
   const STARTDATE         = 'StartDate';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const TYPE              = 'Type';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const ISSUEDTOID        = 'IssuedToID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const ISSUEDBYID        = 'IssuedByID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $PermitID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PermitID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $EndDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['EndDate']), 0, 12);
  $IssuedDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IssuedDate']), 0, 12);
  $Number1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number1']), 0, 20);
  $Number2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number2']), 0, 20);
  $PermitNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PermitNumber']), 0, 20);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $RenewalDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['RenewalDate']), 0, 12);
  $StartDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StartDate']), 0, 12);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 255);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 255);
  $Type = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Type']), 0, 20);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $IssuedToID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['IssuedToID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $IssuedByID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['IssuedByID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $PermitID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $EndDate; // DATE 
   private $IssuedDate; // DATE 
   private $Number1; // REAL 
   private $Number2; // REAL 
   private $PermitNumber; // YEAR 
   private $Remarks; // LONGVARCHAR 
   private $RenewalDate; // DATE 
   private $StartDate; // DATE 
   private $Text1; // LONGVARCHAR 
   private $Text2; // LONGVARCHAR 
   private $Type; // YEAR 
   private $YesNo1; // BIT(1) 
   private $YesNo2; // BIT(1) 
   private $IssuedToID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $IssuedByID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' PermitID, TimestampCreated, TimestampModified, Version, EndDate, IssuedDate, Number1, Number2, PermitNumber, Remarks, RenewalDate, StartDate, Text1, Text2, Type, YesNo1, YesNo2, IssuedToID, ModifiedByAgentID, IssuedByID, CreatedByAgentID, ';
   const PKFIELDLIST = ' PermitID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'PermitID'  ) ;
   private $allFieldsArray = array( 0 => 'PermitID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'EndDate' , 5 => 'IssuedDate' , 6 => 'Number1' , 7 => 'Number2' , 8 => 'PermitNumber' , 9 => 'Remarks' , 10 => 'RenewalDate' , 11 => 'StartDate' , 12 => 'Text1' , 13 => 'Text2' , 14 => 'Type' , 15 => 'YesNo1' , 16 => 'YesNo2' , 17 => 'IssuedToID' , 18 => 'ModifiedByAgentID' , 19 => 'IssuedByID' , 20 => 'CreatedByAgentID'  ) ;
   private $selectDistinctFieldsArray = array( 5 => 'IssuedDate' , 8 => 'PermitNumber' , 17 => 'IssuedToID' , 18 => 'ModifiedByAgentID' , 19 => 'IssuedByID' , 20 => 'CreatedByAgentID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_permit(){
       $this->PermitID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->EndDate = '';
       $this->IssuedDate = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->PermitNumber = '';
       $this->Remarks = '';
       $this->RenewalDate = '';
       $this->StartDate = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->Type = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->IssuedToID = '';
       $this->ModifiedByAgentID = '';
       $this->IssuedByID = '';
       $this->CreatedByAgentID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='PermitID') { $returnvalue = $this->setPermitID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='EndDate') { $returnvalue = $this->setEndDate($value); } 
             if ($fieldname=='IssuedDate') { $returnvalue = $this->setIssuedDate($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='PermitNumber') { $returnvalue = $this->setPermitNumber($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='RenewalDate') { $returnvalue = $this->setRenewalDate($value); } 
             if ($fieldname=='StartDate') { $returnvalue = $this->setStartDate($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='Type') { $returnvalue = $this->setType($value); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); } 
             if ($fieldname=='IssuedToID') { $returnvalue = $this->setIssuedToID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='IssuedByID') { $returnvalue = $this->setIssuedByID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='PermitID') { $returnvalue = $this->getPermitID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='EndDate') { $returnvalue = $this->getEndDate(); } 
             if ($fieldname=='IssuedDate') { $returnvalue = $this->getIssuedDate(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='PermitNumber') { $returnvalue = $this->getPermitNumber(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='RenewalDate') { $returnvalue = $this->getRenewalDate(); } 
             if ($fieldname=='StartDate') { $returnvalue = $this->getStartDate(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='Type') { $returnvalue = $this->getType(); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); } 
             if ($fieldname=='IssuedToID') { $returnvalue = $this->getIssuedToID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='IssuedByID') { $returnvalue = $this->getIssuedByID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*PermitID*/
   public function getPermitID() {
       if ($this->PermitID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PermitID));
       }
   }
   public function setPermitID($PermitID) {
       if (strlen(preg_replace('/[^0-9]/','',$PermitID)) > huh_permit::PERMITID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PermitID = trim($PermitID);
       if (!ctype_digit(strval($PermitID)) && trim(strval($PermitID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PermitID = $this->l_addslashes($PermitID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_permit::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_permit::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_permit::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*EndDate*/
   public function getEndDate() {
       if ($this->EndDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->EndDate));
       }
   }
   public function setEndDate($EndDate) {
       if (strlen($EndDate) > huh_permit::ENDDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->EndDate = $this->l_addslashes($EndDate);
       $this->dirty = true;
   }
/*IssuedDate*/
   public function getIssuedDate() {
       if ($this->IssuedDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IssuedDate));
       }
   }
   public function setIssuedDate($IssuedDate) {
       if (strlen($IssuedDate) > huh_permit::ISSUEDDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IssuedDate = $this->l_addslashes($IssuedDate);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen($Number1) > huh_permit::NUMBER1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen($Number2) > huh_permit::NUMBER2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*PermitNumber*/
   public function getPermitNumber() {
       if ($this->PermitNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PermitNumber));
       }
   }
   public function setPermitNumber($PermitNumber) {
       if (strlen($PermitNumber) > huh_permit::PERMITNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PermitNumber = $this->l_addslashes($PermitNumber);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_permit::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*RenewalDate*/
   public function getRenewalDate() {
       if ($this->RenewalDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RenewalDate));
       }
   }
   public function setRenewalDate($RenewalDate) {
       if (strlen($RenewalDate) > huh_permit::RENEWALDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->RenewalDate = $this->l_addslashes($RenewalDate);
       $this->dirty = true;
   }
/*StartDate*/
   public function getStartDate() {
       if ($this->StartDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StartDate));
       }
   }
   public function setStartDate($StartDate) {
       if (strlen($StartDate) > huh_permit::STARTDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StartDate = $this->l_addslashes($StartDate);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_permit::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_permit::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*Type*/
   public function getType() {
       if ($this->Type==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Type));
       }
   }
   public function setType($Type) {
       if (strlen($Type) > huh_permit::TYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Type = $this->l_addslashes($Type);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_permit::YESNO1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_permit::YESNO2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*IssuedToID*/
   public function getIssuedToID() {
       if ($this->IssuedToID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IssuedToID));
       }
   }
   public function setIssuedToID($IssuedToID) {
       if (strlen(preg_replace('/[^0-9]/','',$IssuedToID)) > huh_permit::ISSUEDTOID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $IssuedToID = trim($IssuedToID);
       if (!ctype_digit(strval($IssuedToID)) && trim(strval($IssuedToID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->IssuedToID = $this->l_addslashes($IssuedToID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_permit::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*IssuedByID*/
   public function getIssuedByID() {
       if ($this->IssuedByID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IssuedByID));
       }
   }
   public function setIssuedByID($IssuedByID) {
       if (strlen(preg_replace('/[^0-9]/','',$IssuedByID)) > huh_permit::ISSUEDBYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $IssuedByID = trim($IssuedByID);
       if (!ctype_digit(strval($IssuedByID)) && trim(strval($IssuedByID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->IssuedByID = $this->l_addslashes($IssuedByID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_permit::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getPermitID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['PermitID'] = $this->getPermitID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_PermitIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_EndDateMYSQLI_TYPE = 's';
  const C_IssuedDateMYSQLI_TYPE = 's';
  const C_Number1MYSQLI_TYPE = 's';
  const C_Number2MYSQLI_TYPE = 's';
  const C_PermitNumberMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_RenewalDateMYSQLI_TYPE = 's';
  const C_StartDateMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_TypeMYSQLI_TYPE = 's';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_IssuedToIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_IssuedByIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='PermitID') { $retval = self::C_PermitIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='EndDate') { $retval = self::C_EndDateMYSQLI_TYPE; }
      if ($aFieldname=='IssuedDate') { $retval = self::C_IssuedDateMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='PermitNumber') { $retval = self::C_PermitNumberMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='RenewalDate') { $retval = self::C_RenewalDateMYSQLI_TYPE; }
      if ($aFieldname=='StartDate') { $retval = self::C_StartDateMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='Type') { $retval = self::C_TypeMYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='IssuedToID') { $retval = self::C_IssuedToIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='IssuedByID') { $retval = self::C_IssuedByIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setPermitID($pk[PermitID]);
             } else { ;
                 $this->setPermitID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->PermitID != NULL) {
           $sql = 'SELECT PermitID, TimestampCreated, TimestampModified, Version, EndDate, IssuedDate, Number1, Number2, PermitNumber, Remarks, RenewalDate, StartDate, Text1, Text2, Type, YesNo1, YesNo2, IssuedToID, ModifiedByAgentID, IssuedByID, CreatedByAgentID FROM permit WHERE PermitID = '.$this->PermitID ;

           $preparesql = 'SELECT PermitID, TimestampCreated, TimestampModified, Version, EndDate, IssuedDate, Number1, Number2, PermitNumber, Remarks, RenewalDate, StartDate, Text1, Text2, Type, YesNo1, YesNo2, IssuedToID, ModifiedByAgentID, IssuedByID, CreatedByAgentID FROM permit WHERE PermitID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->PermitID);
              $statement->execute();
              $statement->bind_result($this->PermitID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->EndDate, $this->IssuedDate, $this->Number1, $this->Number2, $this->PermitNumber, $this->Remarks, $this->RenewalDate, $this->StartDate, $this->Text1, $this->Text2, $this->Type, $this->YesNo1, $this->YesNo2, $this->IssuedToID, $this->ModifiedByAgentID, $this->IssuedByID, $this->CreatedByAgentID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->PermitID!= NULL) {
            $sql  = 'UPDATE  permit SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", EndDate = ? ";
            $sql .=  ", IssuedDate = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", PermitNumber = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", RenewalDate = ? ";
            $sql .=  ", StartDate = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", Type = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", IssuedToID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", IssuedByID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";

            $sql .= "  WHERE PermitID = ? ";
        } else {
            $sql  = 'INSERT INTO permit ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( PermitID ,  TimestampCreated ,  TimestampModified ,  Version ,  EndDate ,  IssuedDate ,  Number1 ,  Number2 ,  PermitNumber ,  Remarks ,  RenewalDate ,  StartDate ,  Text1 ,  Text2 ,  Type ,  YesNo1 ,  YesNo2 ,  IssuedToID ,  ModifiedByAgentID ,  IssuedByID ,  CreatedByAgentID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->PermitID!= NULL ) {
              $statement->bind_param("ississsssssssssiiiiiii", $this->PermitID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->EndDate , $this->IssuedDate , $this->Number1 , $this->Number2 , $this->PermitNumber , $this->Remarks , $this->RenewalDate , $this->StartDate , $this->Text1 , $this->Text2 , $this->Type , $this->YesNo1 , $this->YesNo2 , $this->IssuedToID , $this->ModifiedByAgentID , $this->IssuedByID , $this->CreatedByAgentID , $this->PermitID );
           } else { 
              $statement->bind_param("ississsssssssssiiiiii", $this->PermitID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->EndDate , $this->IssuedDate , $this->Number1 , $this->Number2 , $this->PermitNumber , $this->Remarks , $this->RenewalDate , $this->StartDate , $this->Text1 , $this->Text2 , $this->Type , $this->YesNo1 , $this->YesNo2 , $this->IssuedToID , $this->ModifiedByAgentID , $this->IssuedByID , $this->CreatedByAgentID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->PermitID != NULL) {
           $sql = 'SELECT PermitID, TimestampCreated, TimestampModified, Version, EndDate, IssuedDate, Number1, Number2, PermitNumber, Remarks, RenewalDate, StartDate, Text1, Text2, Type, YesNo1, YesNo2, IssuedToID, ModifiedByAgentID, IssuedByID, CreatedByAgentID FROM permit WHERE PermitID = "'.$this->PermitID.'"  ' ;

           $preparedsql = 'SELECT  FROM permit WHERE  and PermitID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississsssssssssiiiiii", $this->PermitID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->EndDate, $this->IssuedDate, $this->Number1, $this->Number2, $this->PermitNumber, $this->Remarks, $this->RenewalDate, $this->StartDate, $this->Text1, $this->Text2, $this->Type, $this->YesNo1, $this->YesNo2, $this->IssuedToID, $this->ModifiedByAgentID, $this->IssuedByID, $this->CreatedByAgentID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM permit WHERE  and PermitID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississsssssssssiiiiii", $this->PermitID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->EndDate, $this->IssuedDate, $this->Number1, $this->Number2, $this->PermitNumber, $this->Remarks, $this->RenewalDate, $this->StartDate, $this->Text1, $this->Text2, $this->Type, $this->YesNo1, $this->YesNo2, $this->IssuedToID, $this->ModifiedByAgentID, $this->IssuedByID, $this->CreatedByAgentID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->PermitID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM permit';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT PermitID FROM permit $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_permit();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromaccessionauthorization() { 
      // ForeignKey in: accessionauthorization
      $t = new accessionauthorization();
  } 
  public function loadLinkedFrompermitattachment() { 
      // ForeignKey in: permitattachment
      $t = new permitattachment();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: IssuedToID
      $t = new agent();
      $t->load(getIssuedToID());
      $returnvalue[IssuedToID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: IssuedByID
      $t = new agent();
      $t->load(getIssuedByID());
      $returnvalue[IssuedByID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT PermitID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(EndDate,'') || ' ' || IFNULL(IssuedDate,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(PermitNumber,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(RenewalDate,'') || ' ' || IFNULL(StartDate,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(Type,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(IssuedToID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(IssuedByID,'') || ' ' || IFNULL(CreatedByAgentID,'')) FROM permit order by IssuedDate, PermitNumber, IssuedToID, ModifiedByAgentID, IssuedByID, CreatedByAgentID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM permit order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByIssuedDate($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PermitID FROM permit WHERE IssuedDate $operator '$searchTerm'";
        $preparedsql = "SELECT PermitID FROM permit WHERE IssuedDate $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_permit();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPermitNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PermitID FROM permit WHERE PermitNumber $operator '$searchTerm'";
        $preparedsql = "SELECT PermitID FROM permit WHERE PermitNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_permit();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByIssuedToID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PermitID FROM permit WHERE IssuedToID $operator '$searchTerm'";
        $preparedsql = "SELECT PermitID FROM permit WHERE IssuedToID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_permit();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PermitID FROM permit WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT PermitID FROM permit WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_permit();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByIssuedByID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PermitID FROM permit WHERE IssuedByID $operator '$searchTerm'";
        $preparedsql = "SELECT PermitID FROM permit WHERE IssuedByID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_permit();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PermitID FROM permit WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT PermitID FROM permit WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_permit();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctIssuedDate($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' IssuedDate ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, IssuedDate FROM permit group by IssuedDate order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&IssuedDate=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPermitNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' PermitNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, PermitNumber FROM permit group by PermitNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&PermitNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctIssuedToID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' IssuedToID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, IssuedToID FROM permit group by IssuedToID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&IssuedToID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM permit group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctIssuedByID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' IssuedByID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, IssuedByID FROM permit group by IssuedByID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&IssuedByID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM permit group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'IssuedDate':
             $returnvalue = $this->selectDistinctIssuedDate($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'PermitNumber':
             $returnvalue = $this->selectDistinctPermitNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'IssuedToID':
             $returnvalue = $this->selectDistinctIssuedToID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'IssuedByID':
             $returnvalue = $this->selectDistinctIssuedByID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the permit.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_permitView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_permit <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_permit::PERMITID.": ".$model->getPermitID()."</li>\n";
       $returnvalue .= "<li>".huh_permit::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_permit::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_permit::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_permit::ENDDATE.": ".$model->getEndDate()."</li>\n";
       $returnvalue .= "<li>".huh_permit::ISSUEDDATE.": ".$model->getIssuedDate()."</li>\n";
       $returnvalue .= "<li>".huh_permit::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_permit::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_permit::PERMITNUMBER.": ".$model->getPermitNumber()."</li>\n";
       $returnvalue .= "<li>".huh_permit::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_permit::RENEWALDATE.": ".$model->getRenewalDate()."</li>\n";
       $returnvalue .= "<li>".huh_permit::STARTDATE.": ".$model->getStartDate()."</li>\n";
       $returnvalue .= "<li>".huh_permit::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_permit::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_permit::TYPE.": ".$model->getType()."</li>\n";
       $returnvalue .= "<li>".huh_permit::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_permit::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_permit::ISSUEDTOID.": ".$model->getIssuedToID()."</li>\n";
       $returnvalue .= "<li>".huh_permit::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_permit::ISSUEDBYID.": ".$model->getIssuedByID()."</li>\n";
       $returnvalue .= "<li>".huh_permit::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getIssuedToID() != '') { 
               $t_agent->load($model->getIssuedToID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getIssuedByID() != '') { 
               $t_agent->load($model->getIssuedByID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_permit::PERMITID.': "'.$model->getPermitID().'",';
       $returnvalue .= '"'.huh_permit::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_permit::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_permit::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_permit::ENDDATE.': "'.$model->getEndDate().'",';
       $returnvalue .= '"'.huh_permit::ISSUEDDATE.': "'.$model->getIssuedDate().'",';
       $returnvalue .= '"'.huh_permit::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_permit::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_permit::PERMITNUMBER.': "'.$model->getPermitNumber().'",';
       $returnvalue .= '"'.huh_permit::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_permit::RENEWALDATE.': "'.$model->getRenewalDate().'",';
       $returnvalue .= '"'.huh_permit::STARTDATE.': "'.$model->getStartDate().'",';
       $returnvalue .= '"'.huh_permit::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_permit::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_permit::TYPE.': "'.$model->getType().'",';
       $returnvalue .= '"'.huh_permit::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_permit::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_permit::ISSUEDTOID.': "'.$model->getIssuedToID().'",';
       $returnvalue .= '"'.huh_permit::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_permit::ISSUEDBYID.': "'.$model->getIssuedByID().'",';
       $returnvalue .= '"'.huh_permit::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getPermitID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getEndDate()."</td>\n";
       $returnvalue .= "<td>".$model->getIssuedDate()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getPermitNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getRenewalDate()."</td>\n";
       $returnvalue .= "<td>".$model->getStartDate()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getType()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getIssuedToID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getIssuedByID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_permit::PERMITID."</th>\n";
       $returnvalue .= "<th>".huh_permit::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_permit::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_permit::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_permit::ENDDATE."</th>\n";
       $returnvalue .= "<th>".huh_permit::ISSUEDDATE."</th>\n";
       $returnvalue .= "<th>".huh_permit::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_permit::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_permit::PERMITNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_permit::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_permit::RENEWALDATE."</th>\n";
       $returnvalue .= "<th>".huh_permit::STARTDATE."</th>\n";
       $returnvalue .= "<th>".huh_permit::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_permit::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_permit::TYPE."</th>\n";
       $returnvalue .= "<th>".huh_permit::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_permit::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_permit::ISSUEDTOID."</th>\n";
       $returnvalue .= "<th>".huh_permit::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_permit::ISSUEDBYID."</th>\n";
       $returnvalue .= "<th>".huh_permit::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_permit">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new PermitID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_permit::PERMITID.">PERMITID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_permit::PERMITID." id=".huh_permit::PERMITID." value='".$model->getPermitID()."'  style=' width:".huh_permit::PERMITID_SIZE ."em;  '  maxlength='".huh_permit::PERMITID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_permit::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_permit::TIMESTAMPCREATED." id=".huh_permit::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_permit::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_permit::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_permit::TIMESTAMPMODIFIED." id=".huh_permit::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_permit::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_permit::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_permit::VERSION." id=".huh_permit::VERSION." value='".$model->getVersion()."'  style=' width:".huh_permit::VERSION_SIZE ."em;  '  maxlength='".huh_permit::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::ENDDATE.">ENDDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_permit::ENDDATE." id=".huh_permit::ENDDATE." value='".$model->getEndDate()."'  style=' width:".huh_permit::ENDDATE_SIZE ."em;  '  maxlength='".huh_permit::ENDDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::ISSUEDDATE.">ISSUEDDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_permit::ISSUEDDATE." id=".huh_permit::ISSUEDDATE." value='".$model->getIssuedDate()."'  style=' width:".huh_permit::ISSUEDDATE_SIZE ."em;  '  maxlength='".huh_permit::ISSUEDDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_permit::NUMBER1." id=".huh_permit::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_permit::NUMBER1_SIZE ."em;  '  maxlength='".huh_permit::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_permit::NUMBER2." id=".huh_permit::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_permit::NUMBER2_SIZE ."em;  '  maxlength='".huh_permit::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::PERMITNUMBER.">PERMITNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_permit::PERMITNUMBER." id=".huh_permit::PERMITNUMBER." value='".$model->getPermitNumber()."'  style=' width:".huh_permit::PERMITNUMBER_SIZE ."em;  '  maxlength='".huh_permit::PERMITNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_permit::REMARKS." id=".huh_permit::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::RENEWALDATE.">RENEWALDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_permit::RENEWALDATE." id=".huh_permit::RENEWALDATE." value='".$model->getRenewalDate()."'  style=' width:".huh_permit::RENEWALDATE_SIZE ."em;  '  maxlength='".huh_permit::RENEWALDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::STARTDATE.">STARTDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_permit::STARTDATE." id=".huh_permit::STARTDATE." value='".$model->getStartDate()."'  style=' width:".huh_permit::STARTDATE_SIZE ."em;  '  maxlength='".huh_permit::STARTDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::TEXT1.">TEXT1</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_permit::TEXT1." id=".huh_permit::TEXT1." >".$model->getText1()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_permit::TEXT2." id=".huh_permit::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::TYPE.">TYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_permit::TYPE." id=".huh_permit::TYPE." value='".$model->getType()."'  style=' width:".huh_permit::TYPE_SIZE ."em;  '  maxlength='".huh_permit::TYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_permit::YESNO1." id=".huh_permit::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_permit::YESNO1_SIZE ."em;  '  maxlength='".huh_permit::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_permit::YESNO2." id=".huh_permit::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_permit::YESNO2_SIZE ."em;  '  maxlength='".huh_permit::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::ISSUEDTOID.">ISSUEDTOID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_permit::ISSUEDTOID." id=".huh_permit::ISSUEDTOID." value='".$model->getIssuedToID()."'  style=' width:".huh_permit::ISSUEDTOID_SIZE ."em;  '  maxlength='".huh_permit::ISSUEDTOID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_permit::MODIFIEDBYAGENTID." id=".huh_permit::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_permit::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_permit::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::ISSUEDBYID.">ISSUEDBYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_permit::ISSUEDBYID." id=".huh_permit::ISSUEDBYID." value='".$model->getIssuedByID()."'  style=' width:".huh_permit::ISSUEDBYID_SIZE ."em;  '  maxlength='".huh_permit::ISSUEDBYID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_permit::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_permit::CREATEDBYAGENTID." id=".huh_permit::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_permit::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_permit::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_permit">';
       $returnvalue .= '<input type=hidden name=PermitID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_permit">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>PERMITID<input type=text name=".huh_permit::PERMITID." id=".huh_permit::PERMITID." value='".$model->getPermitID()."'  size='".huh_permit::PERMITID_SIZE ."'  maxlength='".huh_permit::PERMITID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_permit::TIMESTAMPCREATED." id=".huh_permit::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_permit::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_permit::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_permit::TIMESTAMPMODIFIED." id=".huh_permit::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_permit::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_permit::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_permit::VERSION." id=".huh_permit::VERSION." value='".$model->getVersion()."'  size='".huh_permit::VERSION_SIZE ."'  maxlength='".huh_permit::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ENDDATE<input type=text name=".huh_permit::ENDDATE." id=".huh_permit::ENDDATE." value='".$model->getEndDate()."'  size='".huh_permit::ENDDATE_SIZE ."'  maxlength='".huh_permit::ENDDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISSUEDDATE<input type=text name=".huh_permit::ISSUEDDATE." id=".huh_permit::ISSUEDDATE." value='".$model->getIssuedDate()."'  size='".huh_permit::ISSUEDDATE_SIZE ."'  maxlength='".huh_permit::ISSUEDDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_permit::NUMBER1." id=".huh_permit::NUMBER1." value='".$model->getNumber1()."'  size='".huh_permit::NUMBER1_SIZE ."'  maxlength='".huh_permit::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_permit::NUMBER2." id=".huh_permit::NUMBER2." value='".$model->getNumber2()."'  size='".huh_permit::NUMBER2_SIZE ."'  maxlength='".huh_permit::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PERMITNUMBER<input type=text name=".huh_permit::PERMITNUMBER." id=".huh_permit::PERMITNUMBER." value='".$model->getPermitNumber()."'  size='".huh_permit::PERMITNUMBER_SIZE ."'  maxlength='".huh_permit::PERMITNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_permit::REMARKS." id=".huh_permit::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_permit::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RENEWALDATE<input type=text name=".huh_permit::RENEWALDATE." id=".huh_permit::RENEWALDATE." value='".$model->getRenewalDate()."'  size='".huh_permit::RENEWALDATE_SIZE ."'  maxlength='".huh_permit::RENEWALDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STARTDATE<input type=text name=".huh_permit::STARTDATE." id=".huh_permit::STARTDATE." value='".$model->getStartDate()."'  size='".huh_permit::STARTDATE_SIZE ."'  maxlength='".huh_permit::STARTDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_permit::TEXT1." id=".huh_permit::TEXT1." value='".$model->getText1()."'  size='51'  maxlength='".huh_permit::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_permit::TEXT2." id=".huh_permit::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_permit::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TYPE<input type=text name=".huh_permit::TYPE." id=".huh_permit::TYPE." value='".$model->getType()."'  size='".huh_permit::TYPE_SIZE ."'  maxlength='".huh_permit::TYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_permit::YESNO1." id=".huh_permit::YESNO1." value='".$model->getYesNo1()."'  size='".huh_permit::YESNO1_SIZE ."'  maxlength='".huh_permit::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_permit::YESNO2." id=".huh_permit::YESNO2." value='".$model->getYesNo2()."'  size='".huh_permit::YESNO2_SIZE ."'  maxlength='".huh_permit::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISSUEDTOID<input type=text name=".huh_permit::ISSUEDTOID." id=".huh_permit::ISSUEDTOID." value='".$model->getIssuedToID()."'  size='".huh_permit::ISSUEDTOID_SIZE ."'  maxlength='".huh_permit::ISSUEDTOID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_permit::MODIFIEDBYAGENTID." id=".huh_permit::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_permit::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_permit::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISSUEDBYID<input type=text name=".huh_permit::ISSUEDBYID." id=".huh_permit::ISSUEDBYID." value='".$model->getIssuedByID()."'  size='".huh_permit::ISSUEDBYID_SIZE ."'  maxlength='".huh_permit::ISSUEDBYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_permit::CREATEDBYAGENTID." id=".huh_permit::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_permit::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_permit::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
