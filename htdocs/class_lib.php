<?php
// *******  This file won't be overwritten by druid if PHP code is regenerated.
// *******  You may customize this file for your own purposes.
?>
<?php

include_once("connection_library.php");
include_once("druid_classes.php");

class UUID { 
  // ** from http://www.php.net/manual/en/function.uniqid.php#94959
  public static function v4() {
    return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',

      // 32 bits for "time_low"
      mt_rand(0, 0xffff), mt_rand(0, 0xffff),

      // 16 bits for "time_mid"
      mt_rand(0, 0xffff),

      // 16 bits for "time_hi_and_version",
      // four most significant bits holds version number 4
      mt_rand(0, 0x0fff) | 0x4000,

      // 16 bits, 8 bits for "clk_seq_hi_res",
      // 8 bits for "clk_seq_low",
      // two most significant bits holds zero and one for variant DCE1.1
      mt_rand(0, 0x3fff) | 0x8000,

      // 48 bits for "node"
      mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)
    );
  }
}

// Autogenerated by Druid from MySQL db Build:6
// This is an example framework you can customize for your own application.
class User {
   private $email;          // email address provided by user
   private $password;       // password provided by user
   private $authenticated;  // has user been authenticated against database
   private $user_token;     // hash for session (ip, email, session_secret) put in session
   // values retrieved from database
   private $active;         // 1 for active user, 0 for deactivated users
   private $full_name;
   private $agentid;
   private $about;
   private $date_created;
   private $date_last_updated;
   private $date_last_login;
   private $failures_since_last_login;
   private $session_secret;  // used in hash for session, stored in db, not sent to user

   function User($email='', $password='') {
      $this->setEmail($email);
      $this->setPassword($password);
      $this->authenticated = false;
      $this->user_token = '';
      $this->about = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
         $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
         $retval = stripslashes($value);
      }
      return $retval;
   }

   function setEmail ($email) {
      $returnvalue = false;
      $len = strlen($email);
      //$match = preg_match("/[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/",$email);
      // specify usernames aren't emails
      $match = preg_match("/[A-Za-z0-9]+/",$email);
      if (($match || $len==0) && $len<256) {
         $this->email = $this->l_addslashes($email);
         $returnvalue = true;
      } else {
         $this->email = '';
      }
      return $returnvalue;
   }

   function setPassword ($password) {
      $returnvalue = false;
      $len = strlen($password);
      $match = preg_match("/[A-Za-z0-9!#$%*+\/=?^_{|}~\-@.]*/",$password);
      if ($match && $len<256 && $len >=1) {
         $this->password = $this->l_addslashes($password);
         $returnvalue = true;
      } else {
         $this->password = '';
      }
      return $returnvalue;
   }

   function getAuthenticationState() {
      return $this->authenticated;
   }

   function setTicket($ip) {
      global $connection;
      $this->session_secret = hash('sha256', date('r') . rand() . rand());
      $this->user_token = hash('sha256',$ip . $this->email . $this->session_secret);
      // store session_secret to db for this user
      $sql = "select count(*) from huh_webuser where username = ? ";
      $stmt = $connection->prepare($sql);
      // echo '['.$connection->error.']';
      $stmt->bind_param("s",$this->email);
      $stmt->execute();
      $matches = 0;
      $stmt->bind_result($matches);
      $stmt->fetch();
      if ($matches==1) {
         $sql = "update huh_webuser set sessionsecret = ? where username = ?";
      } else {
         $sql = "insert into huh_webuser (sessionsecret,username) values (?,?)";
      }
      $stmt->close();
      $stmt = $connection->prepare($sql);
      $stmt->bind_param("ss",$this->session_secret,$this->email);
      $stmt->execute();
      // echo '['.$connection->error.']';
       
      $_SESSION["user_ticket"]=$this->user_token;
      $stmt->close();
      return $this->user_token;
   }
   function validateTicket($ticket, $ip) {
      global $connection;
      $returnvalue = false;
      $this->session_secret = "";
      // lookup session_secret for this user
      $sql = "select sessionsecret from huh_webuser where username = ? ";
      $stmt = $connection->prepare($sql);
      $stmt->bind_param("s",$this->email);
      $stmt->execute();
      $stmt->bind_result($session_secret);
      if ($stmt->fetch()) {
         $this->session_secret = $session_secret;
      }
      // echo '['.$connection->error.']';
      if (hash('sha256',$ip . $this->email . $this->session_secret)==$ticket) {
         $returnvalue = true;
         $this->authenticated = true;
      }
      $stmt->close();
      return $returnvalue;
   }
   function getLoginForm() {
      return '
<div data-dojo-type="dijit.Dialog" id="loginDialog" title="Login" style="display: none" >
    <h1>Specify Login</h1>
    <table>
        <tr>
            <td>
                <input type="radio" data-dojo-type="dijit.form.TextBox" name="username" id="radioOne" />
                <label for="radioOne">Username</label>
            </td>
        </tr>
        <tr>
            <td>
                <input type="radio" data-dojo-type="dijit.form.TextBox" name="password" id="radioTwo" />
                <label for="radioTwo">Password</label>
            </td>
        </tr>
        <tr>
            <td>
                <button data-dojo-type="dijit.form.Button" type="submit"
                    data-dojo-props="onClick:function(){return dijit.byId(\'loginDialog\').isValid();}">OK</button>
            </td>
        </tr>
    </table>
</div>
<script type="dojo/method" >
        dijit.byId("loginDialog").show();
</script>
       ';
   }

   function logout() {
      if($this->email != '' && $this->password !='') {
         $sql = "UPDATE User set session_secret = NULL WHERE email = '".$this->email."' ";
         $result = mysql_query($sql);
         if ($result===false) {
            $this->error = mysql_error();
         }
      }
      $_SESSION = array();
      session_destroy();
   }

   function authenticate() {
      global $connection, $execstring;
      $returnvalue = false;
      $this->authenticated = false;
      if($this->email != '' && $this->password !='') {
         $preparesql = 'SELECT password FROM specifyuser WHERE name = ? ';
         if ($statement = $connection->prepare($preparesql)) {
            $statement->bind_param("s", $this->email);
            $statement->execute();
            $statement->bind_result( $encryptedPassword );
            $statement->store_result();
            $statement->fetch();
            if ($statement->num_rows()==1) {
               // watson
               $exec = '/var/www/phpexec/java -jar /var/www/phpinclude/Encryption.jar decrypt ' . $encryptedPassword . " " . escapeshellarg($this->password) . " 2>&1";
               // test
               $exec = '/usr/bin/java -jar /var/www/phpincludes/Encryption.jar decrypt ' . $encryptedPassword . " " . escapeshellarg($this->password) . " 2>&1";
               $exec = $execstring . $encryptedPassword . " " . escapeshellarg($this->password) . " 2>&1";
               
               $decryptedPassword = shell_exec($exec);
               if (trim($decryptedPassword)==trim($this->password)) {
                  $preparesql = 'SELECT  specifyuser.timestampcreated,   specifyuser.TimestampModified,
     		    	     	concat(agent.firstname, \' \', agent.lastname),
     		    	     	specifyuser.LoginOutTime, specifyuser.UserType, agent.agentid
     		    	     	FROM specifyuser left join agent on specifyuser.specifyuserid = agent.specifyuserid
     		    	     	WHERE name = ? and password = ? ';
                  if ($statement2 = $connection->prepare($preparesql)) {
                     $statement2->bind_param("ss", $this->email, $encryptedPassword);
                     $statement2->execute();
                     $statement2->bind_result( $this->date_created, $this->date_last_updated,
                     $this->full_name, $this->date_last_login, $this->about, $this->agentid );
                     $statement2->store_result();
                     $statement2->fetch();
                     if ($statement2->num_rows()==1) {
                        $returnvalue = true;
                        $this->authenticated = true;
                        $this->setTicket($_SERVER['REMOTE_ADDR']);
                     } else {
                        echo "[error=". $statement2->error ."]";
                     }
                     $statement2->close();
                  }
               }
            } else {
               echo "[error=". $statement->error ."]";
            }
            $statement->close();
         }



      }
      return $returnvalue;
   }

   function getUserHtml($caller="index.php") {
      $returnvalue = '';
      if ($this->authenticated===true) {
         $returnvalue  = '<strong>'.$this->full_name."</strong> ($this->email) ";
         if ($this->about != '') {
            $returnvalue .= '<em>'.$this->about.'</em>';
         }
         $returnvalue .= ' Last login: '.$this->date_last_login . ' ';
         $returnvalue .= '<a href="'.$caller.'?display=logout">Logout</a>&nbsp;';
         // PJM putting in place, but not displaying yet, link to upload spreadsheet.
         // TODO: Remove coment when ready for production use
         // if ($caller=="rapid.php") { $returnvalue .= ' <a href="rapid.php?display=upload">Upload a spreadsheet</a>&nbsp;'; } 
         if ($caller=="rapid.php") { $returnvalue .= ' <a href="rapid.php?display=mainform">Data Entry</a>&nbsp;'; } 
         if ($caller=="rapid.php") { $returnvalue .= ' Defaults: <a href="rapid.php?display=mainform&defaultcountry=&defaultprimary=&cleardefaultgeography=1&defaultherbarium=FH&defaultprepmethod=Dried&defaultformat=Packet">FH</a>&nbsp;'; } 
         if ($caller=="rapid.php") { $returnvalue .= ' <a href="rapid.php?display=mainform&defaultcountry=&defaultprimary=&cleardefaultgeography=1&defaultherbarium=FH&defaultprepmethod=Dried&defaultformat=Packet&defaultproject=Lichen%20and%20Bryophyte%20TCN">Lichen&amp;BryophyteTCN</a>&nbsp;'; } 
         if ($caller=="rapid.php") { $returnvalue .= ' <a href="rapid.php?display=mainform&defaultcountry=&defaultprimary=&cleardefaultgeography=1&defaultherbarium=FH&defaultprepmethod=Dried&defaultformat=Packet&defaultproject=Macrofungi%20TCN">MacrofungiTCN</a>&nbsp;'; } 
         if ($caller=="rapid.php") { $returnvalue .= ' <a href="rapid.php?display=mainform&defaultcountry=&defaultprimary=&cleardefaultgeography=1&defaultherbarium=FH&defaultprepmethod=Dried&defaultformat=Packet&defaultproject=Microfungi%20TCN">MicrofungiTCN</a>&nbsp;'; } 
         if ($caller=="rapid.php") { $returnvalue .= ' <a href="rapid.php?display=mainform&defaultcountry=&defaultprimary=&cleardefaultgeography=1&defaultherbarium=GH&defaultprepmethod=Pressed&defaultformat=Sheet&defaultproject=New%20England%20Vascular%20Plants%20TCN">NEVPTCN</a>&nbsp;'; } 
         if ($caller=="rapid.php") { $returnvalue .= ' <a href="rapid.php?display=mainform&defaultcountry=&defaultprimary=&cleardefaultgeography=1&defaultherbarium=FH&defaultprepmethod=Pressed&defaultformat=Sheet&defaultproject=Macroalgae%20TCN">Macroalgae</a>&nbsp;'; } 
         if ($caller=="rapid.php") { $returnvalue .= ' <a href="rapid.php?display=mainform&defaultcountry=&defaultprimary=&cleardefaultgeography=1&defaultherbarium=&defaultprepmethod=Pressed&defaultformat=Sheet&defaultproject=Southern%20Rockies%20TCN">SoRo</a>&nbsp;'; } 
         if ($caller=="rapid.php") { $returnvalue .= ' <a href="utility.php">Utilities</a>&nbsp;'; } 
         if ($caller=="utility.php") { $returnvalue .= ' <a href="rapid.php?display=mainform">Data Entry</a>&nbsp;'; } 
      }
      return $returnvalue;
   }
   function setFullname($fullname) {
      $this->full_name = $fullname;
   }
   function getFullname() {
      $returnvalue = '';
      if ($this->authenticated===true) {
         $returnvalue = $this->full_name;
      }
      return $returnvalue;
   }
   function setAgentId($agentid) {
      $this->agentid = $agentid;
   }
   function getAgentId() {
      $returnvalue = '';
      if ($this->authenticated===true) {
         $returnvalue = $this->agentid;
      }
      return $returnvalue;
   }
   function setLastLogin($date_last_login) {
      $this->date_last_login = $date_last_login;
   }
   function getLastLogin() {
      $returnvalue = '';
      if ($this->authenticated===true) {
         $returnvalue = $this->date_last_login;
      }
      return $returnvalue;
   }
   function setAbout($about) {
      $this->about = $about;
   }
   function getAbout() {
      $returnvalue = '';
      if ($this->authenticated===true) {
         $returnvalue = $this->about;
      }
      return $returnvalue;
   }
} // end class User


class Page {
   // customize the header and footer methods for your own site style and navigation

   private $title;
   private $errormessage;
   private $targetPage = "rapid.php";

   public function setTitle($pageTitle) {
      $title = 'HUH Specify';
      $this->title.=$pageTitle;
   }
   
   public function setErrorMessage($error) { 
      $this->errormessage = $error;
   }

   public function setTargetPage($targetpage) { 
      $this->targetPage = $targetpage;
   }

   public function getHeader($user) {
      $error = $this->errormessage;
   $returnvalue = "<!DOCTYPE html>\n";
   $returnvalue .= "<html>\n";
   $returnvalue .= "<head>\n";
   $returnvalue .= "<title>".$this->title."</title>\n";
   $returnvalue .= $this->getDojoPageHead();
   $returnvalue .= "</head>\n";
   $returnvalue .= "<body class=' claro '>\n";
   $returnvalue .= '<div dojoType="dijit.layout.BorderContainer" design="sidebar" gutters="true" liveSplitters="true" id="borderContainer">';
   $returnvalue .= '<div dojoType="dijit.layout.ContentPane" region="top" layoutPriority="2" splitter="false">';
   if ($error!="") {
   	$returnvalue .= "<h2>$error</h2>";
   }
   if ($user!=null) { 
      if ($user->getAuthenticationState()==true) {
   	     $returnvalue .= $user->getUserHtml($this->targetPage);
      }
   }
   $returnvalue .= '</div>';
   return $returnvalue;
   }

   public function getFooter() {
   global $targethostdb;
   $returnvalue = '
	<div dojoType="dijit.layout.ContentPane" region="bottom" layoutPriority="3" splitter="false">
        <div id="feedback">Status</div>
	</div>
	<div dojoType="dijit.layout.ContentPane" region="bottom" layoutPriority="2" splitter="false">
        Database: ' . $targethostdb . ' 
	</div>
	';
   $returnvalue .= "</div>\n";
   $returnvalue .= "</body>\n";
   $returnvalue .= "</html>";
   return $returnvalue;
   }

   public function getDojoPageHead() {
      return "      
     <script src='/dojo/1.9.2/dojo/dojo.js' djConfig='parseOnLoad: true'></script>
       <link rel='stylesheet' type='text/css' href='/dojo/1.9.2/dijit/themes/claro/claro.css' />
       <link rel='stylesheet' type='text/css' href='/dojo/1.9.2/dojo/resources/dojo.css' />
        <style type='text/css'>
            @import '/dojo/1.9.2/dojox/grid/enhanced/resources/claro/EnhancedGrid.css';
            @import '/dojo/1.9.2/dojox/grid/enhanced/resources/claro/Common.css';
        </style>
     <script type='text/javascript'>
                dojo.require('dijit.layout.AccordionContainer');
                dojo.require('dojo.data.ItemFileReadStore');
                dojo.require('dijit.form.Form');
                dojo.require('dijit.form.FilteringSelect');
                dojo.require('dijit.form.Select');
                dojo.require('dijit.form.Button');
                dojo.require('dijit.form.ValidationTextBox');
                dojo.require('dijit.layout.ContentPane');
                dojo.require('dijit.layout.BorderContainer');
                dojo.require('custom.ComboBoxReadStore');
                dojo.require('dijit.form.TextBox');
                dojo.require('dijit.Dialog');
                dojo.require('dijit.ProgressBar');
                dojo.require('custom.LoadingMsgFilteringSelect');
   				dojo.require('dojo.keys');
   				dojo.require('dojo.on');
   				dojo.require('dijit.focus');
     </script>
     <script type='text/javascript' src='dataentry_grab.js'></script>
           <style type='text/css'>
               html, body { width: 100%; height: 100%; margin: 0; overflow:hidden; }
               #borderContainer { width: 100%; height: 100%; }
           </style>     
      ";
   }
   


}


class DateWithPrecision {
	private $date = null;
	private $datePrecision = 1;
	private $badValue = false;
	
	public function setDate($aDate) { 
	   $this->date = $aDate;
	}
	public function setDatePrecision($aDatePrecision) { 
	   $this->datePrecision = $aDatePrecision;
	}
	public function getDate() { 
	   return $this->date;
	}
	public function getDatePrecision() { 
	   return $this->datePrecision;
	}
	public function isBadValue() { 
	   return $this->badValue;
	}
	public function setBadValue($isbadvalue) { 
	   $this->badValue = $isbadvalue;
	}
	
}

class DateRangeWithPrecision { 
   
   private $startDate = null;
   private $startDatePrecision = 1;
   private $endDate = null; 
   private $endDatePrecision = 1;
   private $badValue = false;
   
   public function DateRangeWithPrecision($isodate) { 
      if (strpos($isodate,'/')>0) { 
         $parts = explode('/',$isodate); 
         if (sizeof($parts)>0) { 
            $startDateStr = $this->parsePart($parts[0]);
            if ($startDateStr->isBadValue()) {
            	$this->badValue = true;
            }
            $this->startDate = $startDateStr->getDate();
            $this->startDatePrecision = $startDateStr->getDatePrecision();            
         }
         if (sizeof($parts)>1) {
         	$startDateStr = $this->parsePart($parts[1]);
         	if ($startDateStr->isBadValue()) {
         		$this->badValue = true;
         	}
         	$this->endDate = $startDateStr->getDate();
         	$this->endDatePrecision = $startDateStr->getDatePrecision();
         }         
         if (sizeof($parts)>2) { 
            $this->badValue = true;
         }
      } else { 
         $startDateStr = $this->parsePart($isodate);
         if ($startDateStr->isBadValue()) { 
            $this->badValue = true;
         }
         $this->startDate = $startDateStr->getDate();
         $this->startDatePrecision = $startDateStr->getDatePrecision();
      }
      
   }
   
   public function parsePart($part) { 
      $result = new DateWithPrecision();
      if (preg_match("/^[1-2][0-9]{3}-[0-9]{2}-[0-9]{2}$/",$part)) {
      	$result->setDate($part);
      	$result->setDatePrecision(1);
      } else {
      	if (preg_match("/^[1-2][0-9]{3}-[0-9]{2}$/",$part)) {
         	$result->setDate($part . "-01");
         	$result->setDatePrecision(2);
      	} else {
      		if (preg_match("/^[1-2][0-9]{3}$/",$part)) {
          	    $result->setDate($part . "-01-01");
         	    $result->setDatePrecision(3);
      		} else {
      		   $result->setBadValue(true);
      		}
      	}
      }
      return $result;
   } 
   
   public function hasEndDate() { 
      $result = false;
      if ($this->endDate!=null) { 
         $result = true;
      }     
      return $result;
   } 
   
   public function getStartDate() { 
      return $this->startDate;
   }
   public function getEndDate() { 
      return $this->endDate;
   }
   public function getStartDatePrecision() { 
      return $this->startDatePrecision;
   }
   public function getEndDatePrecision() { 
      return $this->endDatePrecision;
   }
   public function isBadValue() { 
      return $this->badValue;
   }
   
}

class huh_preptype_custom extends huh_preptype {
   public function keySelectDistinctJSON($field,$orderby='ASC') {
      // ******* Note: $connection must be a mysqli object.
      global $connection;
      $returnvalue = '';
      if ($this->hasField($field)) {
         $order = '';
         if ($orderby=='ASC') {
            $order = 'ASC';
         } else { $order = 'DESC';
         }
         $field = mysql_escape_string($field);
         $preparemysql = "SELECT DISTINCT $field FROM preptype order by $field $order ";
         $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) {
            $stmt->execute();
            $stmt->bind_result($val);
            while ($stmt->fetch()) {
               $val = trim($val);
               if ($val!='') {
                  $val = str_replace('"','&quot;',$val);
                  $returnvalue .= $comma . ' { "value":"'.$val.'", "name":"'.$val.'" } ';
                  $comma = ', ';
               }
            }
            $stmt->close();
         }
      }
      return $returnvalue;
   }
}

class huh_taxon_CUSTOM extends huh_taxon {

   public function keySelectDistinctJSONLimit($field,$limit,$orderby='ASC') {
      global $connection;
      $returnvalue = '';
      $value = '';
      if ($this->hasField($field)) {
         $order = '';
         if ($orderby=='ASC') {
            $order = 'ASC';
         } else { $order = 'DESC';
         }
         $limit = str_replace("*", "%", $limit);
         $fielde = mysql_escape_string($field);
         $preparemysql = "SELECT DISTINCT taxonid, $fielde FROM taxon where $fielde like ? order by $fielde $order ";
         if ($field=="FullName") {
            $preparemysql = "SELECT DISTINCT taxonid, concat(FullName, ' ',ifnull(Author,'')) FROM taxon where FullName like ? and FullName <> '' order by $fielde $order ";
         }
         echo $preparedmysql;
         $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) {
            $stmt->bind_param("s",$limit);
            $stmt->execute();
            $stmt->bind_result($id, $val);
            $stmt->store_result();
            while ($stmt->fetch()) {
               $val = trim($val);
               if ($val!='') {
                  $val = str_replace('"','&quot;',$val);
                  $returnvalue .= $comma . ' { "value":"'.$id.'", "name":"'.$val.'" } ';
                  $comma = ', ';
               }
            }
            $stmt->close();
         }
      }
      return $returnvalue;
   }
}

class huh_picklistitem_custom extends huh_picklistitem {

  	public function keySelectDistinctJSONPicklist($field,$picklistid,$required=false,$orderby='ASC') {
  	   global $connection;
  	   $returnvalue = '';
  	   if ($this->hasField($field)) {
  	      $order = '';
  	      if ($orderby=='ASC') {
  	         $order = 'ASC';
  	      } else { $order = 'DESC';
  	      }
  	      $fielde = mysql_escape_string($field);
  	      // note: using title for order rather than ordinal to support dojo combo box
  	      $preparemysql = "SELECT DISTINCT title, value FROM picklistitem where picklistid = ? order by title asc ";
  	      $comma = '';
  	      if ($stmt = $connection->prepare($preparemysql)) {
  	         $stmt->bind_param("i", $picklistid);
  	         $stmt->execute();
  	         $stmt->bind_result($name,$val);
  	         if (!$required) {
  	            $returnvalue .= $comma . ' { "value":"", "name":"" } ';    // include blank as an option
  	            $comma = ', ';
  	         }
  	         while ($stmt->fetch()) {
  	            $val = trim($val);
  	            if ($val!='') {
  	               $val = str_replace('"','&quot;',$val);
  	               $returnvalue .= $comma . ' { "value":"'.$val.'", "name":"'.$name.'" } ';
  	               $comma = ', ';
  	            }
  	         }
  	         $stmt->close();
  	      }
  	   }
  	   return $returnvalue;

  	}
}

class huh_agentvariant_custom extends huh_agentvariant {

   // Note: Needs create index agentvartype on agentvariant(vartype);


   public function keySelectDistinctJSONCollector($term) {
      global $connection;
      $returnvalue = '';
      $preparemysql = "select distinct agentid, name from agentvariant where name like ? and vartype = 4 order by name asc ";
      $comma = '';
      $term = str_replace("*", "%", $term);
      $term = mysql_escape_string($term);
      if ($stmt = $connection->prepare($preparemysql)) {
         $stmt->bind_param("s", $term);
         $stmt->execute();
         $stmt->bind_result($id, $name);
         $returnvalue .= $comma . ' { "value":"", "name":"" } ';    // include blank as an option
         $comma = ', ';
         while ($stmt->fetch()) {
            $name = trim($name);
            if ($name!='') {
               $name = str_replace('"','&quot;',$name);
               $returnvalue .= $comma . ' { "value":"'.$id.'", "name":"'.$name.'" } ';
            }
         }
         $stmt->close();
      }
      return $returnvalue;

   }
}

class huh_referencework_custom extends huh_referencework { 

   public function keySelectDistinctJSONTitle($term) {
   	global $connection;
   	$returnvalue = '';
   	$preparemysql = "select distinct referenceworkid, concat(text1, ' (', coalesce(title,''), ')') from referencework where text1 like ? or title like ? order by title asc ";
   	$comma = '';
   	$term = str_replace("*", "%", $term);
   	$term = mysql_escape_string($term);
   	if ($stmt = $connection->prepare($preparemysql)) {
   		$stmt->bind_param("ss", $term, $term);
   		$stmt->execute();
   		$stmt->bind_result($id, $name);
   		$returnvalue .= $comma . ' { "value":"", "name":"" } ';    // include blank as an option
   		$comma = ', ';
   		while ($stmt->fetch()) {
   			$name = trim($name);
   			if ($name!='') {
   				$name = str_replace('"','&quot;',$name);
   				$returnvalue .= $comma . ' { "value":"'.$id.'", "name":"'.$name.'" } ';
   			}
   		}
   		$stmt->close();
   	}
   	return $returnvalue;
   
   }
   
}

class huh_container_custom extends huh_container {

	public function keySelectDistinctJSONname($term) {
		global $connection;
		$returnvalue = '';
		$preparemysql = "select distinct containerid, name from container where name like ? order by name asc ";
		$comma = '';
		$term = str_replace("*", "%", $term);
		$term = mysql_escape_string($term);
		if ($stmt = $connection->prepare($preparemysql)) {
			$stmt->bind_param("s", $term);
			$stmt->execute();
			$stmt->bind_result($id, $name);
			$returnvalue .= $comma . ' { "value":"", "name":"" } ';    // include blank as an option
			$comma = ', ';
			while ($stmt->fetch()) {
				$name = trim($name);
				if ($name!='') {
					$name = str_replace('"','&quot;',$name);
					$returnvalue .= $comma . ' { "value":"'.$id.'", "name":"'.$name.'" } ';
				}
			}
			$stmt->close();
		}
		return $returnvalue;
		 
	}
	 
}

class huh_collectingtrip_custom extends huh_collectingtrip {

	public function keySelectDistinctJSONname($term) {
		global $connection;
		$returnvalue = '';
		$preparemysql = "select distinct collectingtripid, collectingtripname from collectingtrip where collectingtripname like ? order by collectingtripname asc ";
		$comma = '';
		$term = str_replace("*", "%", $term);
		$term = mysql_escape_string($term);
		if ($stmt = $connection->prepare($preparemysql)) {
			$stmt->bind_param("s", $term);
			$stmt->execute();
			$stmt->bind_result($id, $name);
			$returnvalue .= $comma . ' { "value":"", "name":"" } ';    // include blank as an option
			$comma = ', ';
			while ($stmt->fetch()) {
				$name = trim($name);
				if ($name!='') {
					$name = str_replace('"','&quot;',$name);
					$returnvalue .= $comma . ' { "value":"'.$id.'", "name":"'.$name.'" } ';
				}
			}
			$stmt->close();
		}
		return $returnvalue;
			
	}

}

class huh_storage_custom extends huh_storage {

    public function keySelectDistinctJSONName($term) {
        global $connection;
        $returnvalue = '';
        $preparemysql = "select distinct storageid, name from storage where name like ? order by name asc ";
        $comma = '';
        $term = str_replace("*", "%", $term);
        $term = mysql_escape_string($term);
        if ($stmt = $connection->prepare($preparemysql)) {
            $stmt->bind_param("s", $term);
            $stmt->execute();
            $stmt->bind_result($id, $name);
            $returnvalue .= $comma . ' { "value":"", "name":"" } ';    // include blank as an option
            $comma = ', ';
            while ($stmt->fetch()) {
                $name = trim($name);
                if ($name!='') {
                    $name = str_replace('"','&quot;',$name);
                    $returnvalue .= $comma . ' { "value":"'.$id.'", "name":"'.$name.'" } ';
                }
            }
            $stmt->close();
        }
        return $returnvalue;
    }
}



class huh_project_custom extends huh_project {

    public function keySelectDistinctJSONname($term) {
        global $connection;
        $returnvalue = '';
        $preparemysql = "select distinct projectid, projectname from project where projectname like ? order by projectname asc ";
        $comma = '';
        $term = str_replace("*", "%", $term);
        $term = mysql_escape_string($term);
        if ($stmt = $connection->prepare($preparemysql)) {
            $stmt->bind_param("s", $term);
            $stmt->execute();
            $stmt->bind_result($id, $name);
            $returnvalue .= $comma . ' { "value":"", "name":"" } ';    // include blank as an option
            $comma = ', ';
            while ($stmt->fetch()) {
                $name = trim($name);
                if ($name!='') {
                    $name = str_replace('"','&quot;',$name);
                    $returnvalue .= $comma . ' { "value":"'.$name.'", "name":"'.$name.'" } ';
                }
            }
            $stmt->close();
        }
        return $returnvalue;

    }

}



class huh_geography_custom extends huh_geography {


   public function selectDistinctJSONCountry() {
      global $connection;
      $returnvalue = '';
      $preparemysql = "select distinct name from geography where rankid = 200 and isaccepted = 1 order by name asc ";
      $comma = '';
      if ($stmt = $connection->prepare($preparemysql)) {
         $stmt->execute();
         $stmt->bind_result($name);
         $returnvalue .= $comma . ' { "value":"", "name":"" } ';    // include blank as an option
         $comma = ', ';
         while ($stmt->fetch()) {
            $name = trim($name);
            if ($name!='') {
               $name = str_replace('"','&quot;',$name);
               $returnvalue .= $comma . ' { "value":"'.$name.'", "name":"'.$name.'" } ';
            }
         }
         $stmt->close();
      }
      return $returnvalue;

   }

   public function selectDistinctJSONPrimary() {
      global $connection;
      $returnvalue = '';
      $preparemysql = "select distinct name from geography where rankid = 300 and isaccepted = 1 order by name asc ";
      $comma = '';
      if ($stmt = $connection->prepare($preparemysql)) {
         $stmt->execute();
         $stmt->bind_result($name);
         $returnvalue .= $comma . ' { "value":"", "name":"" } ';    // include blank as an option
         $comma = ', ';
         while ($stmt->fetch()) {
            $name = trim($name);
            if ($name!='') {
               $name = str_replace('"','&quot;',$name);
               $returnvalue .= $comma . ' { "value":"'.$name.'", "name":"'.$name.'" } ';
            }
         }
         $stmt->close();
      }
      return $returnvalue;

   }

   public function limitedSelectDistinctJSONGeography($country,$primary) {
      global $connection;
      $returnvalue = '';
      $wherebit = " where isaccepted = 1 ";
      $primaryid = "";
      $countryid = "";
      $and = " and ";

      if ($primary !='') {
         $wherebit .= "";
         $sql = "select geographyid, nodenumber, highestchildnodenumber from geography where GeographyTreeDefID=1 and rankid = 300 and name = ? and isaccepted = 1 ";
         if ($stmt = $connection->prepare($sql)) {
            $stmt->bind_param("s",$primary);
            $stmt->execute();
            $stmt->bind_result($primaryid,$nn,$hcnn);
            if ($stmt->fetch()) {
               $name = str_replace('"','&quot;',$name);
               $wherebit .= "$and nodenumber >= $nn and highestchildnodenumber <= $hcnn ";
               $and = " and ";
            }
            $stmt->close();
         }
      } else {
         if ($country !='') {
            $wherebit .= "";
            $sql = "select geographyid, nodenumber, highestchildnodenumber from geography where GeographyTreeDefID=1 and rankid = 200 and name = ? and isaccepted = 1 ";
            if ($stmt = $connection->prepare($sql)) {
               $stmt->bind_param("s",$country);
               $stmt->execute();
               $stmt->bind_result($countryid,$nn,$hcnn);
               if ($stmt->fetch()) {
                  $name = str_replace('"','&quot;',$name);
                  $wherebit .= "$and nodenumber >= $nn and highestchildnodenumber <= $hcnn ";
                  $and = " and ";
               }
               $stmt->close();
            }
         }
      }

      if ($wherebit==" where ") {
         $wherebit = "";
      }

      $preparemysql = "select distinct geographyid, fullname from geography $wherebit order by name asc ";
      $comma = '';
      if ($stmt = $connection->prepare($preparemysql)) {
         $stmt->execute();
         $stmt->bind_result($id,$name);
         $returnvalue .= $comma . ' { "value":"", "name":"" } ';    // include blank as an option
         $comma = ', ';
         if ($primaryid!="") { 
             //$returnvalue .= $comma . ' { "value":"'.$primaryid.'", "name":"'.$primary.'" } ';    // include state/province as option
         } else { 
            if ($countryid != "") { 
                //$returnvalue .= $comma . ' { "value":"'.$countryid.'", "name":"'.$country.'" } ';    // include country as an option
            } 
         }
         while ($stmt->fetch()) {
            $name = trim($name);
            if ($name!='') {
               $name = str_replace('"','&quot;',$name);
               $returnvalue .= $comma . ' { "value":"'.$id.'", "name":"'.$name.'" } ';
            }
         }
         $stmt->close();
      }
      return $returnvalue;

   }
}


function ingestCollectionObject() {
   global $connection, $debug,
   $truncation, $truncated, 
   $collectors,$etal,$fieldnumber,$accessionnumber,$verbatimdate,$datecollected,$herbariumacronym,$barcode,$provenance,
   $filedundername,$fiidentificationqualifier,$currentdetermination,$identificationqualifier,$highergeography,
   $specificlocality,$prepmethod,$format,$verbatimlat,$verbatimlong,$decimallat,$decimallong,$datum,
   $coordinateuncertanty,$georeferencedby,$georeferencedate,$georeferencesource,$typestatus, $basionym,
   $publication,$page,$datepublished,$isfragment,$habitat,$phenology,$verbatimelevation,$minelevation,$maxelevation,
   $identifiedby,$dateidentified,$specimenremarks,$specimendescription,$itemdescription,$container,$collectingtrip,$utmzone,$utmeasting,$utmnorthing,
   $project, $storagelocation, $storage, 
   $exsiccati,$fascicle,$exsiccatinumber, $host, $substrate, $typeconfidence, $determinertext;
 
   $fail = false;
   $feedback = "";

   if ($truncation) { 
     $fail = true;
     $feedback = "Data truncation: $truncated";
   }

   // Test for required elements:
   if ($highergeography=='' || $herbariumacronym=='' || $filedundername=='' || $prepmethod=='' || $format=='' || $specificlocality=='' || $barcode=='' || $collectors=='' ) {
      $fail = true;
      $feedback .= "Missing a required value: ";
      if ($highergeography=='') {
         $feedback.= "Geography. ";
      }
      if ($herbariumacronym=='') {
         $feedback.= "Herbarium. ";
      }
      if ($filedundername=='') {
         $feedback.= "Filed under name. ";
      }
      if ($prepmethod=='') {
         $feedback.= "Prep Method. ";
      }
      if ($format=='') {
         $feedback.= "Format. ";
      }
      if ($specificlocality=='') {
         $feedback.= "Locality.";
      }
      if ($barcode=='') {
         $feedback.= "Barcode.";
      }
      if ($collectors=='') {
      	$feedback.= "Collector.";
      }      
   }
   
   // if either a typestatus or basionym is given, both must be.
   if ($typestatus=='' || $basionym=='') {
      // one or both are blank
      if ($typestatus=='' &&  $basionym=='') {
         // both are blank, ok.
      } else { 
         // just one is blank
         $fail=true;
         $feedback = "For a type, you must provide both basionym and typestatus";
      }
   }
 
   // If fascicle or number is given, exsiccati must also be given
   if (($fascicle!='' || $exsiccatinumber!='') && $exsiccati=='') { 
      $fail = true;
      $feedback .= "A fascicle or number was given, but not the Exsiccata.";      
   }

   // zero pad barcode up to 8 digits if needed
   $barcode = str_pad($barcode,8,"0",STR_PAD_LEFT);
   // Test for validly formed barcode 
   if (!preg_match("/^[0-9]{8}$/",$barcode)) { 
      $fail = true;
      $feedback .= "Barcode [$barcode] is invalid.  Must be zero padded with exactly 8 digits: ";      
   }
    
   // handle special case of filed under name with blank current id
   if ($currentdetermination=='') {
      // set a blank current determination to the filed under name
      $currentdetermination = $filedundername;
      // likewise if the identification qualifier is blank
      if ($identificationqualifier=='') {
         $identificationqualifier = $fiidentificationqualifier;
      }
   }
   // handle nulls
   if ($collectors=='') { $collectors = null; }
   if ($etal=='') { $etal = null; }
   if ($fieldnumber=='') { $fieldnumber = null; }
   if ($accessionnumber=='') { $accessionnumber = null; }
   if ($provenance=='') { $provenance = null; }
   if ($verbatimdate=='') { $verbatimdate = null; }
   if ($datecollected=='') {
      $datecollected = null;
      $startdate = null;
      $enddate = null;
      $startdateprecision = 1;
      $enddateprecision = 1;
   } else {
      $date = new DateRangeWithPrecision($datecollected);
      if ($date->isBadValue()) { 
          $fail = true;
          $feedback .= "Unrecognized date format: " . $datecollected;
      } else { 
         $startdate = $date->getStartDate();
         if ($startdate=='0000-00-00' || strlen($startdate)==0 || substr($startdate,0,4)=='0000' || strpos($startdate,'-00')!==FALSE) { 
             $fail = true;
             $feedback .= "Unrecognized start date [$startdate] in: " . $datecollected;
         }
         $startdateprecision = $date->getStartDatePrecision();
         $enddate = $date->getEndDate();
         if ($enddate=='0000-00-00' || substr($enddate,0,4)=='0000' || strpos($enddate,'-00')!==FALSE) { 
             $fail = true;
             $feedback .= "Unrecognized end date [$enddate] in: " . $datecollected;
         }
         $enddateprecision = $date->getEndDatePrecision();
      }
      
      //TODO: Split on / then get value for each half
      
      //if (preg_match("/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/",$datecollected)) {
      //} else {
      //   if (preg_match("/^[0-9]{4}-[0-9]{2}$/",$datecollected)) {
      //      $startdate = $datecollected . "-01";
      //      $startdateprecision = 2;
      //      $enddate = null;
      //      $enddateprecision = 1;
      //   } else {
      //      if (preg_match("/^[0-9]{4}$/",$datecollected)) {
      //         $startdate = $datecollected . "-01-01";
      //         $startdateprecision = 3;
      //         $enddate = null;
      //         $enddateprecision = 1;
      //      } else {
      //         $fail = true;
      //         $feedback .= "Unrecognized date format: " . $datecollected;
      //      }
      //   }
      //}
   }
   
   if ($herbariumacronym=='') { $herbariumacronym = null; }
   if ($fiidentificationqualifier=='') { $fiidentificationqualifier = null; }
   if ($currentdetermination=='') { $currentdetermination = null; }
   if ($identificationqualifier=='') { $identificationqualifier = null; }
   if ($verbatimlat=='') { $verbatimlat = null; }
   if ($verbatimlong=='') { $verbatimlong = null; }
   if ($decimallat=='') { $decimallat = null; }
   if ($decimallong=='') { $decimallong = null; }
   if ($datum=='') { $datum = null; }
   if ($coordinateuncertanty=='') { 
      $coordinateuncertanty = null; 
      $maxuncertantyestunit = null;
   } else {
      $maxuncertantyestunit = 'm';
   }
   if ($georeferencedby=='') { $georeferencedby = null; }
   if ($georeferencedate=='') { $georeferencedate = null; }
   if ($georeferencesource=='') { $georeferencesource = null; }
   if ($utmzone=='') { $utmzone = null; }
   if ($utmeasting=='') { $utmeasting = null; }
   if ($utmnorthing=='') { $utmnorthing = null; }
   if ($utmeasting!=null) { 
      if (preg_match('/^[0-9]{6}$/',$utmeasting)==1 && preg_match('/^[0-9]{7}$/', $utmnorthing)==1) { 
         // OK, specify takes UTM easting and northing in meters, can't abstract to MGRS or USNG
      } else { 
         $fail = true;
         $feedback .= "UTM Easting and northing must be in meters, there must be 6 digits in the easting and 7 in the northing.";      
      }
   }  
   
   if ($typestatus=='') { $typestatus = null; }
   if ($typeconfidence=='') { $typeconfidence = null; }
   if ($basionym=='') { $basionym = null; }
   if ($publication=='') { $publication = null; }
   if ($page=='') { $page = null; }
   if ($datepublished=='') { $datepublished = null; }
   if ($isfragment=='') { $isfragment = null; }
   if ($habitat=='') { $habitat = null; }
   if ($host=='') { $host = null; }
   if ($substrate=='') { $substrate = null; }
   if ($phenology=='') { $phenology = 'NotDetermined'; }
   if ($verbatimelevation=='') { $verbatimelevation = null; }
   if ($minelevation=='') { $minelevation = null; }
   if ($maxelevation=='') { $maxelevation = null; }
   if ($identifiedby=='') { $identifiedby = null; }
   if ($determinertext=='') { $determinertext = null; }
   if ($container=='') { $container = null; }
   if ($collectingtrip=='') { $collectingtrip = null; }
   if ($storagelocation=='') { $storagelocation = null; }
   if ($project=='') { $project = null; }
   if ($storage=='') { $storage = null; }  // subcollection
   if ($exsiccati=='') { $exsiccati = null; }
   if ($fascicle=='') { $fascicle = null; }
   if ($exsiccatinumber=='') { $exsiccatinumber = null; }
   if ($dateidentified=='') {
      $dateidentified = null;
      $dateidentifiedprecision = 1;
   } else {
      if (preg_match("/^[1-2][0-9]{3}-[0-9]{2}-[0-9]{2}$/",$dateidentified)) {
         $dateidentified = $dateidentified;
         $dateidentifiedprecision = 1;
      } else {
         if (preg_match("/^[1-2][0-9]{3}-[0-9]{2}$/",$dateidentified)) {
            $dateidentified = $dateidentified . "-01";
            $dateidentifiedprecision = 2;
         } else {
            if (preg_match("/^[1-2][0-9]{3}$/",$dateidentified)) {
               $dateidentified = $dateidentified . "-01-01";
               $dateidentifiedprecision = 3;
            } else {
               $fail = true;
               $feedback .= "Unrecognized date format: " . $dateidentified ;
            }
         }
      }
   }
   if ($specimenremarks=='') { $specimenremarks = null; }
   if ($specimendescription=='') { $specimendescription = null; }
   if ($itemdescription=='') { $itemdescription = null; }
   
   $latlongtype = 'point';
   if ($decimallat==null && $decimallong==null) {
      $latlongtype=null;
   }
    
   $df = "";
   if ($debug) {
      $df.=" ";
      $df.= "collectors=[$collectors] ";
      $df.= "etal=[$etal] ";
      $df.= "fieldnumber=[$fieldnumber] ";
      $df.= "accessionnumber=[$accessionnumber] ";
      $df.= "verbatimdate=[$verbatimdate] ";
      $df.= "datecollected=[$datecollected] ";
      $df.= "herbariumacronym=[$herbariumacronym] ";
      $df.= "barcode=[$barcode] ";  // required
      $df.= "provenance=[$provenance] ";
      $df.= "filedundername=[$filedundername] ";  // required
      $df.= "fiidentificationqualifier=[$fiidentificationqualifier] ";
      $df.= "currentdetermination=[$currentdetermination] ";
      $df.= "identificationqualifier=[$identificationqualifier] ";
      $df.= "highergeography=[$highergeography] ";  // required
      $df.= "specificlocality=[$specificlocality] ";  // required
      $df.= "prepmethod=[$prepmethod] "; // required
      $df.= "format=[$format] ";  // required
      $df.= "verbatimlat=[$verbatimlat] ";
      $df.= "verbatimlong=[$verbatimlong] ";
      $df.= "decimallat=[$decimallat] ";
      $df.= "decimallong=[$decimallong] ";
      $df.= "datum=[$datum] ";
      $df.= "coordinateuncertanty=[$coordinateuncertanty] ";
      $df.= "georeferencedby=[$georeferencedby] ";
      $df.= "georeferencedate=[$georeferencedate] ";
      $df.= "georeferencesource=[$georeferencesource] ";
      $df.= "typestatus=[$typestatus] ";  
      $df.= "typeconfidence=[$typeconfidence] ";
      $df.= "basionym=[$basionym] ";  
      $df.= "publication=[$publication] "; 
      $df.= "page=[$page] ";
      $df.= "datepublished=[$datepublished] ";
      $df.= "isfragment=[$isfragment] ";
      $df.= "habitat=[$habitat] ";
      $df.= "phenology=[$phenology] ";
      $df.= "verbatimelevation=[$verbatimelevation] ";
      $df.= "minelevation=[$minelevation] ";
      $df.= "maxelevation=[$maxelevation] ";
      $df.= "identifiedby=[$identifiedby] ";
      $df.= "determinertext=[$determinertext] ";
      $df.= "dateidentified=[$dateidentified] ";
      $df.= "container=[$container] ";
      $df.= "collectingtrip=[$collectingtrip] ";
      $df.= "storagelocation=[$storagelocation] ";  
      $df.= "project=[$project] ";  
      $df.= "host=[$host] ";  
      $df.= "substrate=[$substrate] ";
      $df.= "exsiccati=[$exsiccati] ";  
      $df.= "fascicle=[$fascicle] ";  
      $df.= "exsiccatinumber=[$exsiccatinumber] ";  
      $df.= "specimenremarks=[$specimenremarks] ";
      $df.= "specimendescription=[$specimendescription] ";
      $df.= "itemdescription=[$itemdescription] ";
   }

   $link = "";
   
   if (!$fail) {
      //  persist
      $adds = "";

      // begin transaction
      $connection->autocommit(false);

      // allow for higher geography as string or id.
      if (preg_match("/^[0-9]+$/",$highergeography)>0) {
         $geographyid = $highergeography;
      } else {
         $sql = "select geographyid from geography where fullname = ? ";
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param('s',$highergeography);
            $statement->execute();
            $statement->bind_result($geoid);
            if ($statement->fetch()) {
               $geographyid = $geoid;
            } else {
               $fail = true;
               $feedback .= "No such geography as $highergeography.";
            }
         } else {
            $fail = true;
            $feedback.= $connection->error;
         }
         $statement->free_result();
         $statement->close();
      }

      $currentuserid = $_SESSION["agentid"];

      if (!$fail) {
         // Locality + localitydetail + geocoorddetail
         $sql = "insert into locality (geographyid, localityname, datum, lat1text, long1text, latitude1, " .
                                  " longitude1, verbatimelevation, minelevation, maxelevation, latlongmethod, createdbyagentid, " . 
                                  " latlongtype, disciplineid,timestampcreated,version,originallatlongunit,srclatlongunit) " .
                                  " values (?,?,?,?,?,?,?,?,?,?,?,?,?,3,now(),0,0,0)";
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param('issssssssssis',
            $geographyid,$specificlocality, $datum, $verbatimlat, $verbatimlong, $decimallat,
            $decimallong,$verbatimelevation, $minelevation, $maxelevation, $georeferencesource, $currentuserid,$latlongtype);
            if ($statement->execute()) {
               $localityid = $statement->insert_id;
               $adds .= "locality=[$localityid]";
            } else {
               $fail = true;
               $feedback.= "Unable to save locality: " . $connection->error;
            }
            $statement->free_result();
            $statement->close();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }

         if ($coordinateuncertanty!=null || $georeferencedby!=null ) {
            $georeferenceagentid = null;
            if (preg_match("/^[0-9]+$/", $georeferencedby)) {
               $sql = "select distinct agentid from agent where agentid = ? ";
               $param = "i";
            } else {
               $sql = "select distinct agentid from agentvariant where fullname = ? and vartype = 4 ";
               $param = "s";
            }
            $statement = $connection->prepare($sql);
            if ($statement) {
               $statement->bind_param($param,$georeferencedby);
               $statement->execute();
               $statement->bind_result($georeferenceagentid);
               $statement->store_result();
               if ($statement->num_rows==1) {
                  if ($statement->fetch()) {
                     // retrieves georeferencagentid
                  } else {
                     $fail = true;
                     $feedback.= "Query Error " . $connection->error;
                  }
               } else {
                  $fail = true;
                  $feedback.= "No Match for agent: " . $georeferencedby;
               }
               $statement->free_result();
               $statement->close();
            }

            $sql = "insert into geocoorddetail (localityid, MaxUncertaintyEst,MaxUncertaintyEstUnit,
                                          agentid, georefdetdate, createdbyagentid, timestampcreated, version)
                                          values (?,?,?,?,?,?,now(),0)";
            $statement = $connection->prepare($sql);
            if ($statement) {
               $statement->bind_param('iisisi',$localityid,$coordinateuncertanty,$maxuncertantyestunit,$georeferenceagentid, $georeferencedate, $currentuserid);
               if ($statement->execute()) {
                  $geocoorddetailid = $statement->insert_id;
                  $adds .= "geocoorddetail=[$geocoorddetailid]";
               } else {
                  $fail = true;
                  $feedback.= "Unable to save georeference detail: " . $connection->error;
               }
               $statement->free_result();
               $statement->close();
            } else {
               $fail = true;
               $feedback.= "Query error: " . $connection->error . " " . $sql;
            }

            if (utmzone!=null) {
               $sql = "insert into localitydetail (localityid, utmzone, utmeasting, utmnorthing, utmdatum, " .
                                                       "  createdbyagentid,  ".
                                                       "  timestampcreated, version) " .
                                                       "  values (?,?,?,?,?,?,now(),0)";
               $statement = $connection->prepare($sql);
               if ($statement) {
                  $statement->bind_param('isiisi',$localityid,$utmzone,$utmeasting,$utmnorthing,$datum, $currentuserid);
                  if ($statement->execute()) {
                     $localitydetailid = $statement->insert_id;
                     $adds .= "localitydetail=[$localitydetailid]";
                  } else {
                     $fail = true;
                     $feedback.= "Unable to save locality detail: " . $connection->error;
                  }
                  $statement->free_result();
                  $statement->close();
               } else {
                  $fail = true;
                  $feedback.= "Query error: " . $connection->error . " " . $sql;
               }
            }

         }
      }

      if (!$fail) {
         // Collector, Collecting Event
         $collectoragentid = null;
         if (preg_match("/^[0-9]+$/", $collectors)) {
            $sql = "select distinct agentid from agent where agentid = ? ";
            $param = "i";
         } else {
            $sql = "select distinct agentid from agentvariant where name = ? and vartype = 4 ";
            $param = "s";
         }
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param($param,$collectors);
            $statement->execute();
            $statement->bind_result($agentid);
            $statement->store_result();
            if ($statement->num_rows==1) {
               if ($statement->fetch()) {
                  // retrieves collectoragentid
                  $collectoragentid = $agentid;
               } else {
                  $fail = true;
                  $feedback.= "Query Error " . $connection->error;
               }
            } else {
               $fail = true;
               $feedback.= "No Match for collector agent: " . $collectors;
            }
            $statement->free_result();
            $statement->close();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }
          
         if (!$fail && $collectingtrip != null) {
         	// CollectingTrip, Collecting Event
         	$collectingtripid = null;
         	if (preg_match("/^[0-9]+$/", $collectingtrip)) {
         		$sql = "select distinct collectingtripid from collectingtrip where collectingtripid = ? ";
         		$param = "i";
         	} else {
         		$sql = "select distinct collectingtripid from collectingtrip where collectingtripname = ? ";
         		$param = "s";
         	}
         	$statement = $connection->prepare($sql);
         	if ($statement) {
         		$statement->bind_param($param,$collectingtrip);
         		$statement->execute();
         		$statement->bind_result($tripid);
         		$statement->store_result();
         		if ($statement->num_rows==1) {
         			if ($statement->fetch()) {
         				// retrieves collectingtripid
         				$collectingtripid = $tripid;
         			} else {
         				$fail = true;
         				$feedback.= "Query Error " . $connection->error;
         			}
         		} else {
         			$fail = true;
         			$feedback.= "No Match for collecting trip: " . $collectingtrip;
         		}
         		$statement->free_result();
         		$statement->close();
         	} else {
         		$fail = true;
         		$feedback.= "Query error: " . $connection->error . " " . $sql;
         	}
         }
         
         // Collecting event
         $sql = "insert into collectingevent (localityid, stationfieldnumber, verbatimdate, startdate, startdateprecision, enddate, enddateprecision,
                                                collectingtripid, createdbyagentid, remarks, timestampcreated, version, disciplineid)
                                                values (?,?,?,?,?,?,?,?,?,?,now(),0,3)";
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param('isssisiiis',$localityid,$fieldnumber,$verbatimdate, $startdate,$startdateprecision,$enddate,$enddateprecision, $collectingtripid, $currentuserid,$habitat);
            if ($statement->execute()) {
               $collectingeventid = $statement->insert_id;
               $adds .= "collectingevent=[$collectingeventid]";
            } else {
               $fail = true;
               $feedback.= "Unable to save collectingevent: " . $connection->error;
            }
            $statement->free_result();
            $statement->close();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }

         // Collector
         $sql = "insert into collector (agentid, etal, collectingeventid, createdbyagentid, timestampcreated, version, collectionmemberid, isprimary, ordernumber) " .
             " values (?,?,?,?,now(),0,4,1,1)";
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param('isii',$collectoragentid, $etal, $collectingeventid, $currentuserid);
            if ($statement->execute()) {
               $collectorid = $statement->insert_id;
               $adds .= "collector=[$collectorid]";
            } else {
               $fail = true;
               $feedback.= "Unable to save collector: " . $connection->error;
            }
            $statement->free_result();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }
      }

      if (!$fail) {

          
         // Collection object
         $iscultivated = 0;

         $sql = "insert into collectionobject (collectingeventid, collectionid,collectionmemberid,createdbyagentid,CatalogerID, " .
              " CatalogedDate,catalogeddateprecision,version,timestampcreated,yesno1,remarks,timestampmodified,text1,text2,description) " . 
                   " values (?,4,4,?,?,now(),1,0,now(),?,?,now(),?,?,?)" ;
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param('iiiissss',$collectingeventid, $currentuserid, $currentuserid, $iscultivated,$specimenremarks,$host,$substrate,$specimendescription);
            if ($statement->execute()) {
               $collectionobjectid = $statement->insert_id;
               $link = "<a href='http://kiki.huh.harvard.edu/databases/specimen_search.php?barcode=$barcode'>$herbariumacronym $barcode</a>";
               $adds .= "collobj=[$collectionobjectid]";
            } else {
               $fail = true;
               $feedback.= "Unable to save collection object: " . $connection->error;
            }
            $statement->free_result();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }
      }

      if (!$fail) {
         // container, collectionobject
         if ($container!=null) {
            $containerid = null;
            if (preg_match("/^[0-9]+$/", $container)) {
               $sql = "select distinct containerid from container where containerid = ? ";
               $param = "i";
            } else {
               $sql = "select distinct containerid from container where name = ?  ";
               $param = "s";
            }
            $statement = $connection->prepare($sql);
            if ($statement) {
               $statement->bind_param($param,$container);
               $statement->execute();
               $statement->bind_result($containerid);
               $statement->store_result();
               if ($statement->num_rows==1) {
                  if ($statement->fetch()) {
                     // retrieves containerid
                  } else {
                     $fail = true;
                     $feedback.= "Query Error " . $connection->error;
                  }
               } else {
                  $fail = true;
                  $feedback.= "No Match for container: " . $container;
               }
               $statement->free_result();
               $statement->close();
            } else {
               $fail = true;
               $feedback.= "Query error: " . $connection->error . " " . $sql;
            }
             
            $sql = "update collectionobject set containerid = ? where collectionobjectid = ?  ";
            $statement = $connection->prepare($sql);
            if ($statement) {
               $statement->bind_param('ii',$containerid, $collectionobjectid);
               if ($statement->execute()) {
                  if ($statement->affected_rows!=1) {
                     $fail = true;
                     $feedback.= "Error setting contaniner for collection object: " . $connection->error;
                  }
               } else {
                  $fail = true;
                  $feedback.= "Unable to set container for collection object: " . $connection->error;
               }
               $statement->free_result();
            } else {
               $fail = true;
               $feedback.= "Query error: " . $connection->error . " " . $sql;
            }
         }
          
      }
      if (!$fail) {
         // project, collectionobject
         if ($project!=null) {
            $projectid = null;
            if (preg_match("/^[0-9]+$/", $project)) {
               $sql = "select distinct projectid from project where projectid = ? ";
               $param = "i";
            } else {
               $sql = "select distinct projectid from project where projectname = ?  ";
               $param = "s";
            }
            $statement = $connection->prepare($sql);
            if ($statement) {
               $statement->bind_param($param,$project);
               $statement->execute();
               $statement->bind_result($projectid);
               $statement->store_result();
               if ($statement->num_rows==1) {
                  if ($statement->fetch()) {
                     // retrieves projectid
                  } else {
                     $fail = true;
                     $feedback.= "Query Error " . $connection->error;
                  }
               } else {
                  $fail = true;
                  $feedback.= "No Match for project: " . $project;
               }
               $statement->free_result();
               $statement->close();
            } else {
               $fail = true;
               $feedback.= "Query error: " . $connection->error . " " . $sql;
            }
             
            $sql = "insert into project_colobj (projectid, collectionobjectid) values (?,?) ";
            $statement = $connection->prepare($sql);
            if ($statement) {
               $statement->bind_param('ii',$projectid, $collectionobjectid);
               if ($statement->execute()) {
                  if ($statement->affected_rows!=1) {
                     $fail = true;
                     $feedback.= "Error setting project for collection object: " . $connection->error;
                  }
               } else {
                  $fail = true;
                  $feedback.= "Unable to set project for collection object: " . $connection->error;
               }
               $statement->free_result();
            } else {
               $fail = true;
               $feedback.= "Query error: " . $connection->error . " " . $sql;
            }
         }
      }

      if (!$fail) {
         // Preparation
         $sql = "select preptypeid from preptype where name = ?";
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param("s", $format);
            $statement->execute();
            $statement->bind_result($preptid);
            $statement->store_result();
            if ($statement->num_rows==1) {
               if ($statement->fetch()) {
                  $preptypeid = $preptid;
               } else {
                  $fail = true;
                  $feedback.= "Query Error " . $connection->error;
               }
            } else {
               $fail = true;
               $feedback.= "No Match for format: " . $format;
            }
            $statement->free_result();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }

         $sql = "insert into preparation (version,timestampcreated,countamt,samplenumber,createdbyagentid,preptypeid,storagelocation,storageid) " .
              " values (0,now(),1,1,?,?,?,?) ";
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param('iisi', $currentuserid, $preptypeid,$storagelocation,$storage);
            if ($statement->execute()) {
               $preparationid = $statement->insert_id;
               $adds .= "preparation=[$preparationid]";
            } else {
               $fail = true;
               $feedback.= "Unable to save preparation: " . $connection->error;
            }
            $statement->free_result();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }
      }

      if (!$fail) {
         // Fragment (item)
          
         // check for duplicate barcode
         $sql = "select count(*) from fragment where identifier = ?";
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param("s", $barcode);
            $statement->execute();
            $statement->bind_result($barcodematchcount);
            $statement->store_result();
            if ($statement->num_rows==1) {
               if ($statement->fetch()) {
                  // barcode should be unique and should not allready be in database.
                  if ($barcodematchcount!='0') {
                     $fail = true;
                     $feedback.= "Barcode has already been databased.  $barcodematchcount match found for $barcode. ";
                  }
               } else {
                  $fail = true;
                  $feedback.= "Query Error " . $connection->error;
               }
            } else {
               $fail = true;
               $feedback.= "Query error. Returned other than one row on check for barcode: " . $format;
            }
            $statement->free_result();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }
          
         $replicates = 0;
         $sex = 'not determined';
         $isminimal = 1;  // yesno2

         $sql = "insert into fragment (createdbyagentid, identifier, collectionobjectid, preparationid,text1,prepmethod,phenology,number1,sex,yesno2, " .
             " timestampcreated,version,collectionmemberid,accessionnumber,provenance,description) values (?,?,?,?,?,?,?,?,?,?,now(),0,4,?,?,?)";
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param('isiisssisisss', $currentuserid, $barcode,$collectionobjectid,$preparationid,$herbariumacronym,$prepmethod,$phenology,$replicates,$sex,$isminimal,$accessionnumber,$provenance,$itemdescription);
            if ($statement->execute()) {
               $fragmentid = $statement->insert_id;
               $adds  .= "item=[$fragmentid]";
            } else {
               $fail = true;
               $feedback.= "Unable to save item: " . $connection->error;
            }
            $statement->free_result();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }
      }

      // Insert GUID for new fragment
      if (!$fail) {
          $uuid = UUID::v4();
          $sql = "insert into guids (tablename,primarykey,uuid) values ('fragment',?,?)";
          $statement = $connection->prepare($sql);
          if ($statement) { 
             $statement->bind_param('is',$fragmentid,$uuid);
             if ($statement->execute()) { 
               $adds  .= "guid=[$uuid]";
             } else { 
               $fail = true;
               $feedback.= "Unable to save guid: " . $connection->error;
             }
          } else {
             $fail = true;
             $feedback.= "Query error: " . $connection->error . " " . $sql;
          } 
      }

      if (!$fail) { 
         if ($exsiccati!=null) { 
            // exsiccati
            // referencework of type=6 plus fragmentcitation
            $rworkid = null;
            $referenceworkid = null;
            if (preg_match("/^[0-9]+$/", $exsiccati )) {
               $sql = "select referenceworkid from referencework where referenceworkid = ? ";
               $param = "i";
            } else {
               $sql = "select referenceworkid from referencework where text1 = ? and referenceworktype = 6 ";
               $param = "s";
            }
            $statement = $connection->prepare($sql);
            if ($statement) {
               $statement->bind_param($param,$exsiccati);
               $statement->execute();
               $statement->bind_result($rworkid);
               $statement->store_result();
               if ($statement->num_rows==1) {
                  if ($statement->fetch()) {
                     // retrieves referenceworkid
                     $referenceworkid = $rworkid;
                  } else {
                     $fail = true;
                     $feedback.= "Query Error " . $connection->error;
                  }
               } else {
                  $fail = true;
                  $feedback.= "No Match for Exsiccati referencework: " . $basionym;
               }
               $statement->free_result();
               $statement->close();
            } else {
               $fail = true;
               $feedback.= "Query error: " . $connection->error . " " . $sql;
            }
      
            if ($referenceworkid != null) { 

               $sql = "insert into fragmentcitation (text1, text2, referenceworkid, fragmentid, timestampcreated, createdbyagentid, version) " .
                " values (?,?,?,?,now(),?,1) ";
               $statement = $connection->prepare($sql);
               if ($statement) {
                  $statement->bind_param('ssiii', $fascicle,$exsiccatinumber,$referenceworkid,$fragmentid,$currentuserid);
                  if ($statement->execute()) {
                     $determinationid = $statement->insert_id;
                     $adds .= "exsic=[$determinationid]";
                  } else {
                     $fail = true;
                     $feedback.= "Unable to save Exsiccata: " . $connection->error;
                  }
                  $statement->free_result();
               } else {
                  $fail = true;
                  $feedback.= "Query error: " . $connection->error . " " . $sql;
               }
           } // referenceworkid is not null
         } // exsiccati is not null
      }

      if (!$fail) {
          
         if ($basionym!=null) {
            // type name
            $taxonid = null;
            $basionymid = null;
            if (preg_match("/^[0-9]+$/", $basionym )) {
               $sql = "select taxonid from taxon where taxonid = ? ";
               $param = "i";
            } else {
               $sql = "select taxonid from taxon where fullname = ? ";
               $param = "s";
            }
            $statement = $connection->prepare($sql);
            if ($statement) {
               $statement->bind_param($param,$basionym);
               $statement->execute();
               $statement->bind_result($taxonid);
               $statement->store_result();
               if ($statement->num_rows==1) {
                  if ($statement->fetch()) {
                     // retrieves taxonid
                     $basionymid = $taxonid;
                  } else {
                     $fail = true;
                     $feedback.= "Query Error " . $connection->error;
                  }
               } else {
                  $fail = true;
                  $feedback.= "No Match for taxon: " . $basionym;
               }
               $statement->free_result();
               $statement->close();
            } else {
               $fail = true;
               $feedback.= "Query error: " . $connection->error . " " . $sql;
            }
             
            // yesno1 = isLabel (no)
            // yesno2 = isFragment (of type) (parameter)
            // yesno3 = isFiledUnder (no)
            // iscurrent = isCurrent (no)
            $sql = "insert into determination (taxonid, fragmentid,createdbyagentid, qualifier, typestatusname, " .
                          " yesno1, yesno2, yesno3, iscurrent,timestampcreated, version, collectionmemberid, confidence) " .
                          " values (?,?,?,?,?,0,?,0,0,now(),0,4,?) ";
            $statement = $connection->prepare($sql);
            if ($statement) {
               $statement->bind_param('iiiisis', $taxonid,$fragmentid,$currentuserid,$fiidentificationqualifier,$typestatus,$isfragment,$typeconfidence);
               if ($statement->execute()) {
                  $determinationid = $statement->insert_id;
                  $adds .= "det=[$determinationid]";
               } else {
                  $fail = true;
                  $feedback.= "Unable to save type name: " . $connection->error;
               }
               $statement->free_result();
            } else {
               $fail = true;
               $feedback.= "Query error: " . $connection->error . " " . $sql;
            }
             

            if ($publication!=null) {
               $referenceworkid = null;
               if (preg_match("/^[0-9]+$/", $publication )) {
                  $sql = "select referenceworkid from referencework where referenceworkid = ? ";
                  $param = "i";
               } else {
                  $sql = "select referenceworkid from referencework where text1 = ? ";
                  $param = "s";
               }
               $statement = $connection->prepare($sql);
               if ($statement) {
                  $statement->bind_param($param,$publication);
                  $statement->execute();
                  $statement->bind_result($referenceworkid);
                  $statement->store_result();
                  if ($statement->num_rows==1) {
                     if ($statement->fetch()) {
                        // retrieves referenceworkid
                     } else {
                        $fail = true;
                        $feedback.= "Query Error " . $connection->error;
                     }
                  } else {
                     $fail = true;
                     $feedback.= "No Match for referenceworkid: " . $publication;
                  }
                  $statement->free_result();
                  $statement->close();
               } else {
                  $fail = true;
                  $feedback.= "Query error: " . $connection->error . " " . $sql;
               }
                
               $sql = "insert into taxoncitation (text1, text2, referenceworkid, taxonid, timestampcreated, createdbyagentid, version) " .
                " values (?,?,?,?,now(),?,1) ";
               $statement = $connection->prepare($sql);
               if ($statement) {
                  $statement->bind_param('ssiii', $page,$datepublished,$referenceworkid,$basionymid,$currentuserid);
                  if ($statement->execute()) {
                     $determinationid = $statement->insert_id;
                     $adds .= "det=[$determinationid]";
                  } else {
                     $fail = true;
                     $feedback.= "Unable to save type name: " . $connection->error;
                  }
                  $statement->free_result();
               } else {
                  $fail = true;
                  $feedback.= "Query error: " . $connection->error . " " . $sql;
               }
            }
         }
      }

      $namesidentical = FALSE;
      if ($filedundername==$currentdetermination) { 
         // See BugID: 588 if both names are the same, only add filed under, and mark it as current.
         $namesidentical = TRUE;
         // Consequences:  If the names are the same: Create one record with a determiner, 
         //    date determined, filed under flag, and current flag set.
         // If the names are different, create two records, one filed under name without
         //    a determiner, and one current name with a determier and date determined.
      }

      if (!$fail) {
       // Filed under name
       // Add only if there are different filed under and current determination names.
       if ($namesidentical===FALSE) { 

         $taxonid = null;
         if (preg_match("/^[0-9]+$/", $filedundername )) {
            $sql = "select taxonid from taxon where taxonid = ? ";
            $param = "i";
         } else {
            $sql = "select taxonid from taxon where fullname = ? ";
            $param = "s";
         }
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param($param,$filedundername);
            $statement->execute();
            $statement->bind_result($taxonid);
            $statement->store_result();
            if ($statement->num_rows==1) {
               if ($statement->fetch()) {
                  // retrieves taxonid
               } else {
                  $fail = true;
                  $feedback.= "Query Error " . $connection->error;
               }
            } else {
               $fail = true;
               $feedback.= "No Match for taxon: " . $filedundername;
            }
            $statement->free_result();
            $statement->close();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }

         // yesno1 = isLabel (no)
         // yesno2 = isFragment (of type) (no)
         // yesno3 = isFiledUnder (yes)
         // iscurrent = isCurrent (no/yes)  // no if current det is supplied, yes if current det and filed under are the same.
         $iscurrent = 0;
         if ($namesidentical===TRUE) { 
            // Leaving this in, but we shouldn't end up in this block with the current logic.
            $iscurrent = 1;
         }
         $sql = "insert into determination (taxonid, fragmentid,createdbyagentid, qualifier, " .
                 " yesno1, yesno2, yesno3, iscurrent,timestampcreated, version,collectionmemberid) " .
                 " values (?,?,?,?,0,0,1,?,now(),0,4) ";
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param('iiisi', $taxonid,$fragmentid,$currentuserid,$fiidentificationqualifier,$iscurrent);
            if ($statement->execute()) {
               $determinationid = $statement->insert_id;
               $adds .= "det=[$determinationid]";
            } else {
               $fail = true;
               $feedback.= "Unable to save filed under name: " . $connection->error;
            }
            $statement->free_result();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }
        }
      }

      if (!$fail) {
         // Current determination
         // Always add.  May also be filed under name.
         $taxonid = null;
         if (preg_match("/^[0-9]+$/", $currentdetermination )) {
            $sql = "select taxonid from taxon where taxonid = ? ";
            $param = "i";
         } else {
            $sql = "select taxonid from taxon where fullname = ? ";
            $param = "s";
         }
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param($param,$currentdetermination);
            $statement->execute();
            $statement->bind_result($taxonid);
            $statement->store_result();
            if ($statement->num_rows==1) {
               if ($statement->fetch()) {
                  // retrieves taxonid
               } else {
                  $fail = true;
                  $feedback.= "Query Error " . $connection->error;
               }
            } else {
               $fail = true;
               $feedback.= "No Match for taxon: " . $currentdetermination;
            }
            $statement->free_result();
            $statement->close();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }

         $determinerid = null;
         if (preg_match("/^[0-9]+$/", $identifiedby)) {
            $sql = "select distinct agentid from agent where agentid = ? ";
            $param = "i";
         } else {
            $sql = "select distinct agentid from agentvariant where fullname = ? and vartype = 4 ";
            $param = "s";
         }
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param($param,$identifiedby);
            $statement->execute();
            $statement->bind_result($determinerid);
            $statement->store_result();
            if ($statement->num_rows==1) {
               if ($statement->fetch()) {
                  // retrieves determiner agentid
               } else {
                  $fail = true;
                  $feedback.= "Query Error " . $connection->error;
               }
            } else {
               $fail = true;
               $feedback.= "No Match for agent: " . $identifiedby;
            }
            $statement->free_result();
            $statement->close();
         }

         // yesno1 = isLabel (user)
         $islabel = 0;
         // yesno2 = isFragment (of type) (no)
         // yesno3 = isFiledUnder (no) unless namesidentical, then (yes)
         $isfiledunder = 0;
         if ($namesidentical===TRUE) { 
            $isfiledunder = 1;
         }
         // iscurrent = isCurrent (yes)
         $sql = "insert into determination (taxonid, fragmentid,createdbyagentid, qualifier, determinerid, determineddate, determineddateprecision, " .
                          " yesno1, yesno2, yesno3, iscurrent,timestampcreated, version,collectionmemberid, text1) " .
                          " values (?,?,?,?,?,?,?,?,0,?,1,now(),0,4,?) ";
         $statement = $connection->prepare($sql);
         if ($statement) {
            $statement->bind_param('iiisisiiis', $taxonid, $fragmentid, $currentuserid, $identificationqualifier, $determinerid, $dateidentified, $dateidentifiedprecision, $islabel, $isfiledunder, $determinertext);
            if ($statement->execute()) {
               $determinationid = $statement->insert_id;
               $adds .= "det=[$determinationid]";
            } else {
               $fail = true;
               $feedback.= "Unable to save current determination: " . $connection->error;
            }
            $statement->free_result();
         } else {
            $fail = true;
            $feedback.= "Query error: " . $connection->error . " " . $sql;
         }

      }
   }

   if ($fail) {
      $connection->rollback();
      $feedback = "<div style='background-color: #FF8695;'><strong>Save Failed: $feedback</strong> $adds $df</div>" ;
   } else {
      $connection->commit();
      if ($debug) { 
         $feedback .= " $adds";
      }
      $feedback = "<div style='background-color: #B3FF9F;'>OK $link $feedback $df</div>";
   }
   return $feedback;
}  // end ingestCollectionObject

?>
