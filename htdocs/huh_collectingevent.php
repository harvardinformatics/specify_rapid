<?php
//==============================================================================
//===   collectingevent.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_collectingevent implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const COLLECTINGEVENTID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const ENDDATE_SIZE         = 12; //DATE
   const ENDDATEPRECISION_SIZE = 4; //TINYINT
   const ENDDATEVERBATIM_SIZE = 50; //YEAR
   const ENDTIME_SIZE         = 6; //SMALLINT
   const METHOD_SIZE          = 20; //YEAR
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const STARTDATE_SIZE       = 12; //DATE
   const STARTDATEPRECISION_SIZE = 4; //TINYINT
   const STARTDATEVERBATIM_SIZE = 50; //YEAR
   const STARTTIME_SIZE       = 6; //SMALLINT
   const STATIONFIELDNUMBER_SIZE = 20; //YEAR
   const VERBATIMDATE_SIZE    = 50; //YEAR
   const VERBATIMLOCALITY_SIZE = 255; //LONGVARCHAR
   const VISIBILITY_SIZE      = 4; //TINYINT
   const LOCALITYID_SIZE      = 11; //INTEGER
   const COLLECTINGEVENTATTRIBUTEID_SIZE = 11; //INTEGER
   const DISCIPLINEID_SIZE    = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const COLLECTINGTRIPID_SIZE = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const VISIBILITYSETBYID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const COLLECTINGEVENTID = 'CollectingEventID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const ENDDATE           = 'EndDate';
   const ENDDATEPRECISION  = 'EndDatePrecision';
   const ENDDATEVERBATIM   = 'EndDateVerbatim';
   const ENDTIME           = 'EndTime';
   const METHOD            = 'Method';
   const REMARKS           = 'Remarks';
   const STARTDATE         = 'StartDate';
   const STARTDATEPRECISION = 'StartDatePrecision';
   const STARTDATEVERBATIM = 'StartDateVerbatim';
   const STARTTIME         = 'StartTime';
   const STATIONFIELDNUMBER = 'StationFieldNumber';
   const VERBATIMDATE      = 'VerbatimDate';
   const VERBATIMLOCALITY  = 'VerbatimLocality';
   const VISIBILITY        = 'Visibility';
   const LOCALITYID        = 'LocalityID';
   const COLLECTINGEVENTATTRIBUTEID = 'CollectingEventAttributeID';
   const DISCIPLINEID      = 'DisciplineID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const COLLECTINGTRIPID  = 'CollectingTripID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const VISIBILITYSETBYID = 'VisibilitySetByID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $CollectingEventID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectingEventID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $EndDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['EndDate']), 0, 12);
  $EndDatePrecision = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['EndDatePrecision']), 0, 4);
  $EndDateVerbatim = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['EndDateVerbatim']), 0, 20);
  $EndTime = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['EndTime']), 0, 6);
  $Method = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Method']), 0, 20);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $StartDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StartDate']), 0, 12);
  $StartDatePrecision = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StartDatePrecision']), 0, 4);
  $StartDateVerbatim = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StartDateVerbatim']), 0, 20);
  $StartTime = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StartTime']), 0, 6);
  $StationFieldNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StationFieldNumber']), 0, 20);
  $VerbatimDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['VerbatimDate']), 0, 20);
  $VerbatimLocality = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['VerbatimLocality']), 0, 255);
  $Visibility = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Visibility']), 0, 4);
  $LocalityID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['LocalityID']), 0, 11);
  $CollectingEventAttributeID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectingEventAttributeID']), 0, 11);
  $DisciplineID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DisciplineID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $CollectingTripID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectingTripID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $VisibilitySetByID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['VisibilitySetByID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $CollectingEventID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $EndDate; // DATE 
   private $EndDatePrecision; // TINYINT 
   private $EndDateVerbatim; // YEAR 
   private $EndTime; // SMALLINT 
   private $Method; // YEAR 
   private $Remarks; // LONGVARCHAR 
   private $StartDate; // DATE 
   private $StartDatePrecision; // TINYINT 
   private $StartDateVerbatim; // YEAR 
   private $StartTime; // SMALLINT 
   private $StationFieldNumber; // YEAR 
   private $VerbatimDate; // YEAR 
   private $VerbatimLocality; // LONGVARCHAR 
   private $Visibility; // TINYINT 
   private $LocalityID; // INTEGER 
   private $CollectingEventAttributeID; // INTEGER 
   private $DisciplineID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $CollectingTripID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $VisibilitySetByID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' CollectingEventID, TimestampCreated, TimestampModified, Version, EndDate, EndDatePrecision, EndDateVerbatim, EndTime, Method, Remarks, StartDate, StartDatePrecision, StartDateVerbatim, StartTime, StationFieldNumber, VerbatimDate, VerbatimLocality, Visibility, LocalityID, CollectingEventAttributeID, DisciplineID, ModifiedByAgentID, CollectingTripID, CreatedByAgentID, VisibilitySetByID, ';
   const PKFIELDLIST = ' CollectingEventID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'CollectingEventID'  ) ;
   private $allFieldsArray = array( 0 => 'CollectingEventID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'EndDate' , 5 => 'EndDatePrecision' , 6 => 'EndDateVerbatim' , 7 => 'EndTime' , 8 => 'Method' , 9 => 'Remarks' , 10 => 'StartDate' , 11 => 'StartDatePrecision' , 12 => 'StartDateVerbatim' , 13 => 'StartTime' , 14 => 'StationFieldNumber' , 15 => 'VerbatimDate' , 16 => 'VerbatimLocality' , 17 => 'Visibility' , 18 => 'LocalityID' , 19 => 'CollectingEventAttributeID' , 20 => 'DisciplineID' , 21 => 'ModifiedByAgentID' , 22 => 'CollectingTripID' , 23 => 'CreatedByAgentID' , 24 => 'VisibilitySetByID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'EndDate' , 10 => 'StartDate' , 14 => 'StationFieldNumber' , 18 => 'LocalityID' , 19 => 'CollectingEventAttributeID' , 20 => 'DisciplineID' , 21 => 'ModifiedByAgentID' , 22 => 'CollectingTripID' , 23 => 'CreatedByAgentID' , 24 => 'VisibilitySetByID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_collectingevent(){
       $this->CollectingEventID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->EndDate = '';
       $this->EndDatePrecision = '';
       $this->EndDateVerbatim = '';
       $this->EndTime = '';
       $this->Method = '';
       $this->Remarks = '';
       $this->StartDate = '';
       $this->StartDatePrecision = '';
       $this->StartDateVerbatim = '';
       $this->StartTime = '';
       $this->StationFieldNumber = '';
       $this->VerbatimDate = '';
       $this->VerbatimLocality = '';
       $this->Visibility = '';
       $this->LocalityID = '';
       $this->CollectingEventAttributeID = '';
       $this->DisciplineID = '';
       $this->ModifiedByAgentID = '';
       $this->CollectingTripID = '';
       $this->CreatedByAgentID = '';
       $this->VisibilitySetByID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='CollectingEventID') { $returnvalue = $this->setCollectingEventID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='EndDate') { $returnvalue = $this->setEndDate($value); } 
             if ($fieldname=='EndDatePrecision') { $returnvalue = $this->setEndDatePrecision($value); } 
             if ($fieldname=='EndDateVerbatim') { $returnvalue = $this->setEndDateVerbatim($value); } 
             if ($fieldname=='EndTime') { $returnvalue = $this->setEndTime($value); } 
             if ($fieldname=='Method') { $returnvalue = $this->setMethod($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='StartDate') { $returnvalue = $this->setStartDate($value); } 
             if ($fieldname=='StartDatePrecision') { $returnvalue = $this->setStartDatePrecision($value); } 
             if ($fieldname=='StartDateVerbatim') { $returnvalue = $this->setStartDateVerbatim($value); } 
             if ($fieldname=='StartTime') { $returnvalue = $this->setStartTime($value); } 
             if ($fieldname=='StationFieldNumber') { $returnvalue = $this->setStationFieldNumber($value); } 
             if ($fieldname=='VerbatimDate') { $returnvalue = $this->setVerbatimDate($value); } 
             if ($fieldname=='VerbatimLocality') { $returnvalue = $this->setVerbatimLocality($value); } 
             if ($fieldname=='Visibility') { $returnvalue = $this->setVisibility($value); } 
             if ($fieldname=='LocalityID') { $returnvalue = $this->setLocalityID($value); } 
             if ($fieldname=='CollectingEventAttributeID') { $returnvalue = $this->setCollectingEventAttributeID($value); } 
             if ($fieldname=='DisciplineID') { $returnvalue = $this->setDisciplineID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='CollectingTripID') { $returnvalue = $this->setCollectingTripID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='VisibilitySetByID') { $returnvalue = $this->setVisibilitySetByID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='CollectingEventID') { $returnvalue = $this->getCollectingEventID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='EndDate') { $returnvalue = $this->getEndDate(); } 
             if ($fieldname=='EndDatePrecision') { $returnvalue = $this->getEndDatePrecision(); } 
             if ($fieldname=='EndDateVerbatim') { $returnvalue = $this->getEndDateVerbatim(); } 
             if ($fieldname=='EndTime') { $returnvalue = $this->getEndTime(); } 
             if ($fieldname=='Method') { $returnvalue = $this->getMethod(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='StartDate') { $returnvalue = $this->getStartDate(); } 
             if ($fieldname=='StartDatePrecision') { $returnvalue = $this->getStartDatePrecision(); } 
             if ($fieldname=='StartDateVerbatim') { $returnvalue = $this->getStartDateVerbatim(); } 
             if ($fieldname=='StartTime') { $returnvalue = $this->getStartTime(); } 
             if ($fieldname=='StationFieldNumber') { $returnvalue = $this->getStationFieldNumber(); } 
             if ($fieldname=='VerbatimDate') { $returnvalue = $this->getVerbatimDate(); } 
             if ($fieldname=='VerbatimLocality') { $returnvalue = $this->getVerbatimLocality(); } 
             if ($fieldname=='Visibility') { $returnvalue = $this->getVisibility(); } 
             if ($fieldname=='LocalityID') { $returnvalue = $this->getLocalityID(); } 
             if ($fieldname=='CollectingEventAttributeID') { $returnvalue = $this->getCollectingEventAttributeID(); } 
             if ($fieldname=='DisciplineID') { $returnvalue = $this->getDisciplineID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='CollectingTripID') { $returnvalue = $this->getCollectingTripID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='VisibilitySetByID') { $returnvalue = $this->getVisibilitySetByID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*CollectingEventID*/
   public function getCollectingEventID() {
       if ($this->CollectingEventID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectingEventID));
       }
   }
   public function setCollectingEventID($CollectingEventID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectingEventID)) > huh_collectingevent::COLLECTINGEVENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectingEventID = trim($CollectingEventID);
       if (!ctype_digit(strval($CollectingEventID)) && trim(strval($CollectingEventID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectingEventID = $this->l_addslashes($CollectingEventID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_collectingevent::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_collectingevent::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_collectingevent::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*EndDate*/
   public function getEndDate() {
       if ($this->EndDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->EndDate));
       }
   }
   public function setEndDate($EndDate) {
       if (strlen($EndDate) > huh_collectingevent::ENDDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->EndDate = $this->l_addslashes($EndDate);
       $this->dirty = true;
   }
/*EndDatePrecision*/
   public function getEndDatePrecision() {
       if ($this->EndDatePrecision==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->EndDatePrecision));
       }
   }
   public function setEndDatePrecision($EndDatePrecision) {
       if (strlen($EndDatePrecision) > huh_collectingevent::ENDDATEPRECISION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->EndDatePrecision = $this->l_addslashes($EndDatePrecision);
       $this->dirty = true;
   }
/*EndDateVerbatim*/
   public function getEndDateVerbatim() {
       if ($this->EndDateVerbatim==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->EndDateVerbatim));
       }
   }
   public function setEndDateVerbatim($EndDateVerbatim) {
       if (strlen($EndDateVerbatim) > huh_collectingevent::ENDDATEVERBATIM_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->EndDateVerbatim = $this->l_addslashes($EndDateVerbatim);
       $this->dirty = true;
   }
/*EndTime*/
   public function getEndTime() {
       if ($this->EndTime==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->EndTime));
       }
   }
   public function setEndTime($EndTime) {
       if (strlen($EndTime) > huh_collectingevent::ENDTIME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->EndTime = $this->l_addslashes($EndTime);
       $this->dirty = true;
   }
/*Method*/
   public function getMethod() {
       if ($this->Method==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Method));
       }
   }
   public function setMethod($Method) {
       if (strlen($Method) > huh_collectingevent::METHOD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Method = $this->l_addslashes($Method);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_collectingevent::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*StartDate*/
   public function getStartDate() {
       if ($this->StartDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StartDate));
       }
   }
   public function setStartDate($StartDate) {
       if (strlen($StartDate) > huh_collectingevent::STARTDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StartDate = $this->l_addslashes($StartDate);
       $this->dirty = true;
   }
/*StartDatePrecision*/
   public function getStartDatePrecision() {
       if ($this->StartDatePrecision==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StartDatePrecision));
       }
   }
   public function setStartDatePrecision($StartDatePrecision) {
       if (strlen($StartDatePrecision) > huh_collectingevent::STARTDATEPRECISION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StartDatePrecision = $this->l_addslashes($StartDatePrecision);
       $this->dirty = true;
   }
/*StartDateVerbatim*/
   public function getStartDateVerbatim() {
       if ($this->StartDateVerbatim==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StartDateVerbatim));
       }
   }
   public function setStartDateVerbatim($StartDateVerbatim) {
       if (strlen($StartDateVerbatim) > huh_collectingevent::STARTDATEVERBATIM_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StartDateVerbatim = $this->l_addslashes($StartDateVerbatim);
       $this->dirty = true;
   }
/*StartTime*/
   public function getStartTime() {
       if ($this->StartTime==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StartTime));
       }
   }
   public function setStartTime($StartTime) {
       if (strlen($StartTime) > huh_collectingevent::STARTTIME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StartTime = $this->l_addslashes($StartTime);
       $this->dirty = true;
   }
/*StationFieldNumber*/
   public function getStationFieldNumber() {
       if ($this->StationFieldNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StationFieldNumber));
       }
   }
   public function setStationFieldNumber($StationFieldNumber) {
       if (strlen($StationFieldNumber) > huh_collectingevent::STATIONFIELDNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StationFieldNumber = $this->l_addslashes($StationFieldNumber);
       $this->dirty = true;
   }
/*VerbatimDate*/
   public function getVerbatimDate() {
       if ($this->VerbatimDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->VerbatimDate));
       }
   }
   public function setVerbatimDate($VerbatimDate) {
       if (strlen($VerbatimDate) > huh_collectingevent::VERBATIMDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->VerbatimDate = $this->l_addslashes($VerbatimDate);
       $this->dirty = true;
   }
/*VerbatimLocality*/
   public function getVerbatimLocality() {
       if ($this->VerbatimLocality==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->VerbatimLocality));
       }
   }
   public function setVerbatimLocality($VerbatimLocality) {
       if (strlen($VerbatimLocality) > huh_collectingevent::VERBATIMLOCALITY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->VerbatimLocality = $this->l_addslashes($VerbatimLocality);
       $this->dirty = true;
   }
/*Visibility*/
   public function getVisibility() {
       if ($this->Visibility==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Visibility));
       }
   }
   public function setVisibility($Visibility) {
       if (strlen($Visibility) > huh_collectingevent::VISIBILITY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Visibility = $this->l_addslashes($Visibility);
       $this->dirty = true;
   }
/*LocalityID*/
   public function getLocalityID() {
       if ($this->LocalityID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LocalityID));
       }
   }
   public function setLocalityID($LocalityID) {
       if (strlen(preg_replace('/[^0-9]/','',$LocalityID)) > huh_collectingevent::LOCALITYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $LocalityID = trim($LocalityID);
       if (!ctype_digit(strval($LocalityID)) && trim(strval($LocalityID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->LocalityID = $this->l_addslashes($LocalityID);
       $this->dirty = true;
   }
/*CollectingEventAttributeID*/
   public function getCollectingEventAttributeID() {
       if ($this->CollectingEventAttributeID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectingEventAttributeID));
       }
   }
   public function setCollectingEventAttributeID($CollectingEventAttributeID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectingEventAttributeID)) > huh_collectingevent::COLLECTINGEVENTATTRIBUTEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectingEventAttributeID = trim($CollectingEventAttributeID);
       if (!ctype_digit(strval($CollectingEventAttributeID)) && trim(strval($CollectingEventAttributeID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectingEventAttributeID = $this->l_addslashes($CollectingEventAttributeID);
       $this->dirty = true;
   }
/*DisciplineID*/
   public function getDisciplineID() {
       if ($this->DisciplineID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DisciplineID));
       }
   }
   public function setDisciplineID($DisciplineID) {
       if (strlen(preg_replace('/[^0-9]/','',$DisciplineID)) > huh_collectingevent::DISCIPLINEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DisciplineID = trim($DisciplineID);
       if (!ctype_digit(strval($DisciplineID))) {
             throw new Exception("Value must be an integer");
       }
       $this->DisciplineID = $this->l_addslashes($DisciplineID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_collectingevent::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*CollectingTripID*/
   public function getCollectingTripID() {
       if ($this->CollectingTripID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectingTripID));
       }
   }
   public function setCollectingTripID($CollectingTripID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectingTripID)) > huh_collectingevent::COLLECTINGTRIPID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectingTripID = trim($CollectingTripID);
       if (!ctype_digit(strval($CollectingTripID)) && trim(strval($CollectingTripID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectingTripID = $this->l_addslashes($CollectingTripID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_collectingevent::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*VisibilitySetByID*/
   public function getVisibilitySetByID() {
       if ($this->VisibilitySetByID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->VisibilitySetByID));
       }
   }
   public function setVisibilitySetByID($VisibilitySetByID) {
       if (strlen(preg_replace('/[^0-9]/','',$VisibilitySetByID)) > huh_collectingevent::VISIBILITYSETBYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $VisibilitySetByID = trim($VisibilitySetByID);
       if (!ctype_digit(strval($VisibilitySetByID)) && trim(strval($VisibilitySetByID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->VisibilitySetByID = $this->l_addslashes($VisibilitySetByID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getCollectingEventID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['CollectingEventID'] = $this->getCollectingEventID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_CollectingEventIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_EndDateMYSQLI_TYPE = 's';
  const C_EndDatePrecisionMYSQLI_TYPE = 'i';
  const C_EndDateVerbatimMYSQLI_TYPE = 's';
  const C_EndTimeMYSQLI_TYPE = 'i';
  const C_MethodMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_StartDateMYSQLI_TYPE = 's';
  const C_StartDatePrecisionMYSQLI_TYPE = 'i';
  const C_StartDateVerbatimMYSQLI_TYPE = 's';
  const C_StartTimeMYSQLI_TYPE = 'i';
  const C_StationFieldNumberMYSQLI_TYPE = 's';
  const C_VerbatimDateMYSQLI_TYPE = 's';
  const C_VerbatimLocalityMYSQLI_TYPE = 's';
  const C_VisibilityMYSQLI_TYPE = 'i';
  const C_LocalityIDMYSQLI_TYPE = 'i';
  const C_CollectingEventAttributeIDMYSQLI_TYPE = 'i';
  const C_DisciplineIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_CollectingTripIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_VisibilitySetByIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='CollectingEventID') { $retval = self::C_CollectingEventIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='EndDate') { $retval = self::C_EndDateMYSQLI_TYPE; }
      if ($aFieldname=='EndDatePrecision') { $retval = self::C_EndDatePrecisionMYSQLI_TYPE; }
      if ($aFieldname=='EndDateVerbatim') { $retval = self::C_EndDateVerbatimMYSQLI_TYPE; }
      if ($aFieldname=='EndTime') { $retval = self::C_EndTimeMYSQLI_TYPE; }
      if ($aFieldname=='Method') { $retval = self::C_MethodMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='StartDate') { $retval = self::C_StartDateMYSQLI_TYPE; }
      if ($aFieldname=='StartDatePrecision') { $retval = self::C_StartDatePrecisionMYSQLI_TYPE; }
      if ($aFieldname=='StartDateVerbatim') { $retval = self::C_StartDateVerbatimMYSQLI_TYPE; }
      if ($aFieldname=='StartTime') { $retval = self::C_StartTimeMYSQLI_TYPE; }
      if ($aFieldname=='StationFieldNumber') { $retval = self::C_StationFieldNumberMYSQLI_TYPE; }
      if ($aFieldname=='VerbatimDate') { $retval = self::C_VerbatimDateMYSQLI_TYPE; }
      if ($aFieldname=='VerbatimLocality') { $retval = self::C_VerbatimLocalityMYSQLI_TYPE; }
      if ($aFieldname=='Visibility') { $retval = self::C_VisibilityMYSQLI_TYPE; }
      if ($aFieldname=='LocalityID') { $retval = self::C_LocalityIDMYSQLI_TYPE; }
      if ($aFieldname=='CollectingEventAttributeID') { $retval = self::C_CollectingEventAttributeIDMYSQLI_TYPE; }
      if ($aFieldname=='DisciplineID') { $retval = self::C_DisciplineIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='CollectingTripID') { $retval = self::C_CollectingTripIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='VisibilitySetByID') { $retval = self::C_VisibilitySetByIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setCollectingEventID($pk[CollectingEventID]);
             } else { ;
                 $this->setCollectingEventID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->CollectingEventID != NULL) {
           $sql = 'SELECT CollectingEventID, TimestampCreated, TimestampModified, Version, EndDate, EndDatePrecision, EndDateVerbatim, EndTime, Method, Remarks, StartDate, StartDatePrecision, StartDateVerbatim, StartTime, StationFieldNumber, VerbatimDate, VerbatimLocality, Visibility, LocalityID, CollectingEventAttributeID, DisciplineID, ModifiedByAgentID, CollectingTripID, CreatedByAgentID, VisibilitySetByID FROM collectingevent WHERE CollectingEventID = '.$this->CollectingEventID ;

           $preparesql = 'SELECT CollectingEventID, TimestampCreated, TimestampModified, Version, EndDate, EndDatePrecision, EndDateVerbatim, EndTime, Method, Remarks, StartDate, StartDatePrecision, StartDateVerbatim, StartTime, StationFieldNumber, VerbatimDate, VerbatimLocality, Visibility, LocalityID, CollectingEventAttributeID, DisciplineID, ModifiedByAgentID, CollectingTripID, CreatedByAgentID, VisibilitySetByID FROM collectingevent WHERE CollectingEventID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->CollectingEventID);
              $statement->execute();
              $statement->bind_result($this->CollectingEventID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->EndDate, $this->EndDatePrecision, $this->EndDateVerbatim, $this->EndTime, $this->Method, $this->Remarks, $this->StartDate, $this->StartDatePrecision, $this->StartDateVerbatim, $this->StartTime, $this->StationFieldNumber, $this->VerbatimDate, $this->VerbatimLocality, $this->Visibility, $this->LocalityID, $this->CollectingEventAttributeID, $this->DisciplineID, $this->ModifiedByAgentID, $this->CollectingTripID, $this->CreatedByAgentID, $this->VisibilitySetByID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->CollectingEventID!= NULL) {
            $sql  = 'UPDATE  collectingevent SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", EndDate = ? ";
            $sql .=  ", EndDatePrecision = ? ";
            $sql .=  ", EndDateVerbatim = ? ";
            $sql .=  ", EndTime = ? ";
            $sql .=  ", Method = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", StartDate = ? ";
            $sql .=  ", StartDatePrecision = ? ";
            $sql .=  ", StartDateVerbatim = ? ";
            $sql .=  ", StartTime = ? ";
            $sql .=  ", StationFieldNumber = ? ";
            $sql .=  ", VerbatimDate = ? ";
            $sql .=  ", VerbatimLocality = ? ";
            $sql .=  ", Visibility = ? ";
            $sql .=  ", LocalityID = ? ";
            $sql .=  ", CollectingEventAttributeID = ? ";
            $sql .=  ", DisciplineID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", CollectingTripID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", VisibilitySetByID = ? ";

            $sql .= "  WHERE CollectingEventID = ? ";
        } else {
            $sql  = 'INSERT INTO collectingevent ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( CollectingEventID ,  TimestampCreated ,  TimestampModified ,  Version ,  EndDate ,  EndDatePrecision ,  EndDateVerbatim ,  EndTime ,  Method ,  Remarks ,  StartDate ,  StartDatePrecision ,  StartDateVerbatim ,  StartTime ,  StationFieldNumber ,  VerbatimDate ,  VerbatimLocality ,  Visibility ,  LocalityID ,  CollectingEventAttributeID ,  DisciplineID ,  ModifiedByAgentID ,  CollectingTripID ,  CreatedByAgentID ,  VisibilitySetByID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->CollectingEventID!= NULL ) {
              $statement->bind_param("issisisisssisisssiiiiiiiii", $this->CollectingEventID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->EndDate , $this->EndDatePrecision , $this->EndDateVerbatim , $this->EndTime , $this->Method , $this->Remarks , $this->StartDate , $this->StartDatePrecision , $this->StartDateVerbatim , $this->StartTime , $this->StationFieldNumber , $this->VerbatimDate , $this->VerbatimLocality , $this->Visibility , $this->LocalityID , $this->CollectingEventAttributeID , $this->DisciplineID , $this->ModifiedByAgentID , $this->CollectingTripID , $this->CreatedByAgentID , $this->VisibilitySetByID , $this->CollectingEventID );
           } else { 
              $statement->bind_param("issisisisssisisssiiiiiiii", $this->CollectingEventID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->EndDate , $this->EndDatePrecision , $this->EndDateVerbatim , $this->EndTime , $this->Method , $this->Remarks , $this->StartDate , $this->StartDatePrecision , $this->StartDateVerbatim , $this->StartTime , $this->StationFieldNumber , $this->VerbatimDate , $this->VerbatimLocality , $this->Visibility , $this->LocalityID , $this->CollectingEventAttributeID , $this->DisciplineID , $this->ModifiedByAgentID , $this->CollectingTripID , $this->CreatedByAgentID , $this->VisibilitySetByID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->CollectingEventID != NULL) {
           $sql = 'SELECT CollectingEventID, TimestampCreated, TimestampModified, Version, EndDate, EndDatePrecision, EndDateVerbatim, EndTime, Method, Remarks, StartDate, StartDatePrecision, StartDateVerbatim, StartTime, StationFieldNumber, VerbatimDate, VerbatimLocality, Visibility, LocalityID, CollectingEventAttributeID, DisciplineID, ModifiedByAgentID, CollectingTripID, CreatedByAgentID, VisibilitySetByID FROM collectingevent WHERE CollectingEventID = "'.$this->CollectingEventID.'"  ' ;

           $preparedsql = 'SELECT  FROM collectingevent WHERE  and CollectingEventID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issisisisssisisssiiiiiiii", $this->CollectingEventID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->EndDate, $this->EndDatePrecision, $this->EndDateVerbatim, $this->EndTime, $this->Method, $this->Remarks, $this->StartDate, $this->StartDatePrecision, $this->StartDateVerbatim, $this->StartTime, $this->StationFieldNumber, $this->VerbatimDate, $this->VerbatimLocality, $this->Visibility, $this->LocalityID, $this->CollectingEventAttributeID, $this->DisciplineID, $this->ModifiedByAgentID, $this->CollectingTripID, $this->CreatedByAgentID, $this->VisibilitySetByID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM collectingevent WHERE  and CollectingEventID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issisisisssisisssiiiiiiii", $this->CollectingEventID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->EndDate, $this->EndDatePrecision, $this->EndDateVerbatim, $this->EndTime, $this->Method, $this->Remarks, $this->StartDate, $this->StartDatePrecision, $this->StartDateVerbatim, $this->StartTime, $this->StationFieldNumber, $this->VerbatimDate, $this->VerbatimLocality, $this->Visibility, $this->LocalityID, $this->CollectingEventAttributeID, $this->DisciplineID, $this->ModifiedByAgentID, $this->CollectingTripID, $this->CreatedByAgentID, $this->VisibilitySetByID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->CollectingEventID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM collectingevent';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT CollectingEventID FROM collectingevent $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_collectingevent();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromcollectingeventattachment() { 
      // ForeignKey in: collectingeventattachment
      $t = new collectingeventattachment();
  } 
  public function loadLinkedFromcollectingeventattr() { 
      // ForeignKey in: collectingeventattr
      $t = new collectingeventattr();
  } 
  public function loadLinkedFromcollectionobject() { 
      // ForeignKey in: collectionobject
      $t = new collectionobject();
  } 
  public function loadLinkedFromcollector() { 
      // ForeignKey in: collector
      $t = new collector();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: LocalityID
      $t = new huh_locality();
      $t->load($this->getLocalityID());
      $returnvalue['LocalityID'] = $t;
       // fk: CollectingEventAttributeID
      $t = new huh_collectingeventattribute();
      $t->load($this->getCollectingEventAttributeID());
      $returnvalue['CollectingEventAttributeID'] = $t;
       // fk: DisciplineID
      $t = new huh_discipline();
      $t->load($this->getDisciplineID());
      $returnvalue['DisciplineID'] = $t;
       // fk: ModifiedByAgentID
      $t = new huh_agent();
      $t->load($this->getModifiedByAgentID());
      $returnvalue['ModifiedByAgentID'] = $t;
       // fk: CollectingTripID
      $t = new huh_collectingtrip();
      $t->load($this->getCollectingTripID());
      $returnvalue['CollectingTripID'] = $t;
       // fk: CreatedByAgentID
      $t = new huh_agent();
      $t->load($this->getCreatedByAgentID());
      $returnvalue['CreatedByAgentID'] = $t;
       // fk: VisibilitySetByID
      $t = new huh_specifyuser();
      $t->load($this->getVisibilitySetByID());
      $returnvalue['VisibilitySetByID'] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT CollectingEventID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(EndDate,'') || ' ' || IFNULL(EndDatePrecision,'') || ' ' || IFNULL(EndDateVerbatim,'') || ' ' || IFNULL(EndTime,'') || ' ' || IFNULL(Method,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(StartDate,'') || ' ' || IFNULL(StartDatePrecision,'') || ' ' || IFNULL(StartDateVerbatim,'') || ' ' || IFNULL(StartTime,'') || ' ' || IFNULL(StationFieldNumber,'') || ' ' || IFNULL(VerbatimDate,'') || ' ' || IFNULL(VerbatimLocality,'') || ' ' || IFNULL(Visibility,'') || ' ' || IFNULL(LocalityID,'') || ' ' || IFNULL(CollectingEventAttributeID,'') || ' ' || IFNULL(DisciplineID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(CollectingTripID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(VisibilitySetByID,'')) FROM collectingevent order by EndDate, StartDate, StationFieldNumber, LocalityID, CollectingEventAttributeID, DisciplineID, ModifiedByAgentID, CollectingTripID, CreatedByAgentID, VisibilitySetByID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM collectingevent order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByEndDate($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectingEventID FROM collectingevent WHERE EndDate $operator '$searchTerm'";
        $preparedsql = "SELECT CollectingEventID FROM collectingevent WHERE EndDate $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByStartDate($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectingEventID FROM collectingevent WHERE StartDate $operator '$searchTerm'";
        $preparedsql = "SELECT CollectingEventID FROM collectingevent WHERE StartDate $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByStationFieldNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectingEventID FROM collectingevent WHERE StationFieldNumber $operator '$searchTerm'";
        $preparedsql = "SELECT CollectingEventID FROM collectingevent WHERE StationFieldNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByLocalityID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectingEventID FROM collectingevent WHERE LocalityID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectingEventID FROM collectingevent WHERE LocalityID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCollectingEventAttributeID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectingEventID FROM collectingevent WHERE CollectingEventAttributeID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectingEventID FROM collectingevent WHERE CollectingEventAttributeID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDisciplineID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectingEventID FROM collectingevent WHERE DisciplineID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectingEventID FROM collectingevent WHERE DisciplineID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectingEventID FROM collectingevent WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectingEventID FROM collectingevent WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCollectingTripID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectingEventID FROM collectingevent WHERE CollectingTripID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectingEventID FROM collectingevent WHERE CollectingTripID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectingEventID FROM collectingevent WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectingEventID FROM collectingevent WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByVisibilitySetByID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectingEventID FROM collectingevent WHERE VisibilitySetByID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectingEventID FROM collectingevent WHERE VisibilitySetByID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctEndDate($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' EndDate ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, EndDate FROM collectingevent group by EndDate order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&EndDate=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctStartDate($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' StartDate ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, StartDate FROM collectingevent group by StartDate order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&StartDate=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctStationFieldNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' StationFieldNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, StationFieldNumber FROM collectingevent group by StationFieldNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&StationFieldNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctLocalityID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' LocalityID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, LocalityID FROM collectingevent group by LocalityID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&LocalityID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCollectingEventAttributeID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectingEventAttributeID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectingEventAttributeID FROM collectingevent group by CollectingEventAttributeID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectingEventAttributeID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDisciplineID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DisciplineID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DisciplineID FROM collectingevent group by DisciplineID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DisciplineID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM collectingevent group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCollectingTripID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectingTripID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectingTripID FROM collectingevent group by CollectingTripID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectingTripID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM collectingevent group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctVisibilitySetByID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' VisibilitySetByID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, VisibilitySetByID FROM collectingevent group by VisibilitySetByID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&VisibilitySetByID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'EndDate':
             $returnvalue = $this->selectDistinctEndDate($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'StartDate':
             $returnvalue = $this->selectDistinctStartDate($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'StationFieldNumber':
             $returnvalue = $this->selectDistinctStationFieldNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'LocalityID':
             $returnvalue = $this->selectDistinctLocalityID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CollectingEventAttributeID':
             $returnvalue = $this->selectDistinctCollectingEventAttributeID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DisciplineID':
             $returnvalue = $this->selectDistinctDisciplineID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CollectingTripID':
             $returnvalue = $this->selectDistinctCollectingTripID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'VisibilitySetByID':
             $returnvalue = $this->selectDistinctVisibilitySetByID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the collectingevent.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_collectingeventView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_collectingevent <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_collectingevent::COLLECTINGEVENTID.": ".$model->getCollectingEventID()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::ENDDATE.": ".$model->getEndDate()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::ENDDATEPRECISION.": ".$model->getEndDatePrecision()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::ENDDATEVERBATIM.": ".$model->getEndDateVerbatim()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::ENDTIME.": ".$model->getEndTime()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::METHOD.": ".$model->getMethod()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::STARTDATE.": ".$model->getStartDate()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::STARTDATEPRECISION.": ".$model->getStartDatePrecision()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::STARTDATEVERBATIM.": ".$model->getStartDateVerbatim()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::STARTTIME.": ".$model->getStartTime()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::STATIONFIELDNUMBER.": ".$model->getStationFieldNumber()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::VERBATIMDATE.": ".$model->getVerbatimDate()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::VERBATIMLOCALITY.": ".$model->getVerbatimLocality()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::VISIBILITY.": ".$model->getVisibility()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::LOCALITYID.": ".$model->getLocalityID()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::COLLECTINGEVENTATTRIBUTEID.": ".$model->getCollectingEventAttributeID()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::DISCIPLINEID.": ".$model->getDisciplineID()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::COLLECTINGTRIPID.": ".$model->getCollectingTripID()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_collectingevent::VISIBILITYSETBYID.": ".$model->getVisibilitySetByID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>locality</li>";
           $t_locality = new huh_locality();
           $t_localityView = new huh_localityView();
           $t_localityView->setModel($t_locality);
           if ($model->getLocalityID() != '') { 
               $t_locality->load($model->getLocalityID());
               $returnvalue .= $t_localityView->getDetailsView(false);
           }
           $returnvalue .= "<li>collectingeventattribute</li>";
           $t_collectingeventattribute = new huh_collectingeventattribute();
           $t_collectingeventattributeView = new huh_collectingeventattributeView();
           $t_collectingeventattributeView->setModel($t_collectingeventattribute);
           if ($model->getCollectingEventAttributeID() != '') { 
               $t_collectingeventattribute->load($model->getCollectingEventAttributeID());
               $returnvalue .= $t_collectingeventattributeView->getDetailsView(false);
           }
           $returnvalue .= "<li>discipline</li>";
           $t_discipline = new huh_discipline();
           $t_disciplineView = new huh_disciplineView();
           $t_disciplineView->setModel($t_discipline);
           if ($model->getDisciplineID() != '') { 
               $t_discipline->load($model->getDisciplineID());
               $returnvalue .= $t_disciplineView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>collectingtrip</li>";
           $t_collectingtrip = new huh_collectingtrip();
           $t_collectingtripView = new huh_collectingtripView();
           $t_collectingtripView->setModel($t_collectingtrip);
           if ($model->getCollectingTripID() != '') { 
               $t_collectingtrip->load($model->getCollectingTripID());
               $returnvalue .= $t_collectingtripView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>specifyuser</li>";
           $t_specifyuser = new huh_specifyuser();
           $t_specifyuserView = new huh_specifyuserView();
           $t_specifyuserView->setModel($t_specifyuser);
           if ($model->getVisibilitySetByID() != '') { 
               $t_specifyuser->load($model->getVisibilitySetByID());
               $returnvalue .= $t_specifyuserView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_collectingevent::COLLECTINGEVENTID.': "'.$model->getCollectingEventID().'",';
       $returnvalue .= '"'.huh_collectingevent::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_collectingevent::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_collectingevent::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_collectingevent::ENDDATE.': "'.$model->getEndDate().'",';
       $returnvalue .= '"'.huh_collectingevent::ENDDATEPRECISION.': "'.$model->getEndDatePrecision().'",';
       $returnvalue .= '"'.huh_collectingevent::ENDDATEVERBATIM.': "'.$model->getEndDateVerbatim().'",';
       $returnvalue .= '"'.huh_collectingevent::ENDTIME.': "'.$model->getEndTime().'",';
       $returnvalue .= '"'.huh_collectingevent::METHOD.': "'.$model->getMethod().'",';
       $returnvalue .= '"'.huh_collectingevent::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_collectingevent::STARTDATE.': "'.$model->getStartDate().'",';
       $returnvalue .= '"'.huh_collectingevent::STARTDATEPRECISION.': "'.$model->getStartDatePrecision().'",';
       $returnvalue .= '"'.huh_collectingevent::STARTDATEVERBATIM.': "'.$model->getStartDateVerbatim().'",';
       $returnvalue .= '"'.huh_collectingevent::STARTTIME.': "'.$model->getStartTime().'",';
       $returnvalue .= '"'.huh_collectingevent::STATIONFIELDNUMBER.': "'.$model->getStationFieldNumber().'",';
       $returnvalue .= '"'.huh_collectingevent::VERBATIMDATE.': "'.$model->getVerbatimDate().'",';
       $returnvalue .= '"'.huh_collectingevent::VERBATIMLOCALITY.': "'.$model->getVerbatimLocality().'",';
       $returnvalue .= '"'.huh_collectingevent::VISIBILITY.': "'.$model->getVisibility().'",';
       $returnvalue .= '"'.huh_collectingevent::LOCALITYID.': "'.$model->getLocalityID().'",';
       $returnvalue .= '"'.huh_collectingevent::COLLECTINGEVENTATTRIBUTEID.': "'.$model->getCollectingEventAttributeID().'",';
       $returnvalue .= '"'.huh_collectingevent::DISCIPLINEID.': "'.$model->getDisciplineID().'",';
       $returnvalue .= '"'.huh_collectingevent::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_collectingevent::COLLECTINGTRIPID.': "'.$model->getCollectingTripID().'",';
       $returnvalue .= '"'.huh_collectingevent::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_collectingevent::VISIBILITYSETBYID.': "'.$model->getVisibilitySetByID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getCollectingEventID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getEndDate()."</td>\n";
       $returnvalue .= "<td>".$model->getEndDatePrecision()."</td>\n";
       $returnvalue .= "<td>".$model->getEndDateVerbatim()."</td>\n";
       $returnvalue .= "<td>".$model->getEndTime()."</td>\n";
       $returnvalue .= "<td>".$model->getMethod()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getStartDate()."</td>\n";
       $returnvalue .= "<td>".$model->getStartDatePrecision()."</td>\n";
       $returnvalue .= "<td>".$model->getStartDateVerbatim()."</td>\n";
       $returnvalue .= "<td>".$model->getStartTime()."</td>\n";
       $returnvalue .= "<td>".$model->getStationFieldNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getVerbatimDate()."</td>\n";
       $returnvalue .= "<td>".$model->getVerbatimLocality()."</td>\n";
       $returnvalue .= "<td>".$model->getVisibility()."</td>\n";
       $returnvalue .= "<td>".$model->getLocalityID()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectingEventAttributeID()."</td>\n";
       $returnvalue .= "<td>".$model->getDisciplineID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectingTripID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getVisibilitySetByID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_collectingevent::COLLECTINGEVENTID."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::ENDDATE."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::ENDDATEPRECISION."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::ENDDATEVERBATIM."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::ENDTIME."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::METHOD."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::STARTDATE."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::STARTDATEPRECISION."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::STARTDATEVERBATIM."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::STARTTIME."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::STATIONFIELDNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::VERBATIMDATE."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::VERBATIMLOCALITY."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::VISIBILITY."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::LOCALITYID."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::COLLECTINGEVENTATTRIBUTEID."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::DISCIPLINEID."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::COLLECTINGTRIPID."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_collectingevent::VISIBILITYSETBYID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_collectingevent">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new CollectingEventID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_collectingevent::COLLECTINGEVENTID.">COLLECTINGEVENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingevent::COLLECTINGEVENTID." id=".huh_collectingevent::COLLECTINGEVENTID." value='".$model->getCollectingEventID()."'  style=' width:".huh_collectingevent::COLLECTINGEVENTID_SIZE ."em;  '  maxlength='".huh_collectingevent::COLLECTINGEVENTID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_collectingevent::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::TIMESTAMPCREATED." id=".huh_collectingevent::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_collectingevent::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_collectingevent::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::TIMESTAMPMODIFIED." id=".huh_collectingevent::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_collectingevent::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_collectingevent::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingevent::VERSION." id=".huh_collectingevent::VERSION." value='".$model->getVersion()."'  style=' width:".huh_collectingevent::VERSION_SIZE ."em;  '  maxlength='".huh_collectingevent::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::ENDDATE.">ENDDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::ENDDATE." id=".huh_collectingevent::ENDDATE." value='".$model->getEndDate()."'  style=' width:".huh_collectingevent::ENDDATE_SIZE ."em;  '  maxlength='".huh_collectingevent::ENDDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::ENDDATEPRECISION.">ENDDATEPRECISION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::ENDDATEPRECISION." id=".huh_collectingevent::ENDDATEPRECISION." value='".$model->getEndDatePrecision()."'  style=' width:".huh_collectingevent::ENDDATEPRECISION_SIZE ."em;  '  maxlength='".huh_collectingevent::ENDDATEPRECISION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::ENDDATEVERBATIM.">ENDDATEVERBATIM</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::ENDDATEVERBATIM." id=".huh_collectingevent::ENDDATEVERBATIM." value='".$model->getEndDateVerbatim()."'  style=' width:".huh_collectingevent::ENDDATEVERBATIM_SIZE ."em;  '  maxlength='".huh_collectingevent::ENDDATEVERBATIM_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::ENDTIME.">ENDTIME</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::ENDTIME." id=".huh_collectingevent::ENDTIME." value='".$model->getEndTime()."'  style=' width:".huh_collectingevent::ENDTIME_SIZE ."em;  '  maxlength='".huh_collectingevent::ENDTIME_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::METHOD.">METHOD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::METHOD." id=".huh_collectingevent::METHOD." value='".$model->getMethod()."'  style=' width:".huh_collectingevent::METHOD_SIZE ."em;  '  maxlength='".huh_collectingevent::METHOD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collectingevent::REMARKS." id=".huh_collectingevent::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::STARTDATE.">STARTDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::STARTDATE." id=".huh_collectingevent::STARTDATE." value='".$model->getStartDate()."'  style=' width:".huh_collectingevent::STARTDATE_SIZE ."em;  '  maxlength='".huh_collectingevent::STARTDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::STARTDATEPRECISION.">STARTDATEPRECISION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::STARTDATEPRECISION." id=".huh_collectingevent::STARTDATEPRECISION." value='".$model->getStartDatePrecision()."'  style=' width:".huh_collectingevent::STARTDATEPRECISION_SIZE ."em;  '  maxlength='".huh_collectingevent::STARTDATEPRECISION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::STARTDATEVERBATIM.">STARTDATEVERBATIM</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::STARTDATEVERBATIM." id=".huh_collectingevent::STARTDATEVERBATIM." value='".$model->getStartDateVerbatim()."'  style=' width:".huh_collectingevent::STARTDATEVERBATIM_SIZE ."em;  '  maxlength='".huh_collectingevent::STARTDATEVERBATIM_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::STARTTIME.">STARTTIME</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::STARTTIME." id=".huh_collectingevent::STARTTIME." value='".$model->getStartTime()."'  style=' width:".huh_collectingevent::STARTTIME_SIZE ."em;  '  maxlength='".huh_collectingevent::STARTTIME_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::STATIONFIELDNUMBER.">STATIONFIELDNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::STATIONFIELDNUMBER." id=".huh_collectingevent::STATIONFIELDNUMBER." value='".$model->getStationFieldNumber()."'  style=' width:".huh_collectingevent::STATIONFIELDNUMBER_SIZE ."em;  '  maxlength='".huh_collectingevent::STATIONFIELDNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::VERBATIMDATE.">VERBATIMDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::VERBATIMDATE." id=".huh_collectingevent::VERBATIMDATE." value='".$model->getVerbatimDate()."'  style=' width:".huh_collectingevent::VERBATIMDATE_SIZE ."em;  '  maxlength='".huh_collectingevent::VERBATIMDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::VERBATIMLOCALITY.">VERBATIMLOCALITY</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collectingevent::VERBATIMLOCALITY." id=".huh_collectingevent::VERBATIMLOCALITY." >".$model->getVerbatimLocality()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::VISIBILITY.">VISIBILITY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingevent::VISIBILITY." id=".huh_collectingevent::VISIBILITY." value='".$model->getVisibility()."'  style=' width:".huh_collectingevent::VISIBILITY_SIZE ."em;  '  maxlength='".huh_collectingevent::VISIBILITY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::LOCALITYID.">LOCALITYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingevent::LOCALITYID." id=".huh_collectingevent::LOCALITYID." value='".$model->getLocalityID()."'  style=' width:".huh_collectingevent::LOCALITYID_SIZE ."em;  '  maxlength='".huh_collectingevent::LOCALITYID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::COLLECTINGEVENTATTRIBUTEID.">COLLECTINGEVENTATTRIBUTEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingevent::COLLECTINGEVENTATTRIBUTEID." id=".huh_collectingevent::COLLECTINGEVENTATTRIBUTEID." value='".$model->getCollectingEventAttributeID()."'  style=' width:".huh_collectingevent::COLLECTINGEVENTATTRIBUTEID_SIZE ."em;  '  maxlength='".huh_collectingevent::COLLECTINGEVENTATTRIBUTEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::DISCIPLINEID.">DISCIPLINEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingevent::DISCIPLINEID." id=".huh_collectingevent::DISCIPLINEID." value='".$model->getDisciplineID()."'  style=' width:".huh_collectingevent::DISCIPLINEID_SIZE ."em;  '  maxlength='".huh_collectingevent::DISCIPLINEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingevent::MODIFIEDBYAGENTID." id=".huh_collectingevent::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_collectingevent::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_collectingevent::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::COLLECTINGTRIPID.">COLLECTINGTRIPID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingevent::COLLECTINGTRIPID." id=".huh_collectingevent::COLLECTINGTRIPID." value='".$model->getCollectingTripID()."'  style=' width:".huh_collectingevent::COLLECTINGTRIPID_SIZE ."em;  '  maxlength='".huh_collectingevent::COLLECTINGTRIPID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingevent::CREATEDBYAGENTID." id=".huh_collectingevent::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_collectingevent::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_collectingevent::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingevent::VISIBILITYSETBYID.">VISIBILITYSETBYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingevent::VISIBILITYSETBYID." id=".huh_collectingevent::VISIBILITYSETBYID." value='".$model->getVisibilitySetByID()."'  style=' width:".huh_collectingevent::VISIBILITYSETBYID_SIZE ."em;  '  maxlength='".huh_collectingevent::VISIBILITYSETBYID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_collectingevent">';
       $returnvalue .= '<input type=hidden name=CollectingEventID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_collectingevent">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>COLLECTINGEVENTID<input type=text name=".huh_collectingevent::COLLECTINGEVENTID." id=".huh_collectingevent::COLLECTINGEVENTID." value='".$model->getCollectingEventID()."'  size='".huh_collectingevent::COLLECTINGEVENTID_SIZE ."'  maxlength='".huh_collectingevent::COLLECTINGEVENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_collectingevent::TIMESTAMPCREATED." id=".huh_collectingevent::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_collectingevent::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_collectingevent::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_collectingevent::TIMESTAMPMODIFIED." id=".huh_collectingevent::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_collectingevent::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_collectingevent::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_collectingevent::VERSION." id=".huh_collectingevent::VERSION." value='".$model->getVersion()."'  size='".huh_collectingevent::VERSION_SIZE ."'  maxlength='".huh_collectingevent::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ENDDATE<input type=text name=".huh_collectingevent::ENDDATE." id=".huh_collectingevent::ENDDATE." value='".$model->getEndDate()."'  size='".huh_collectingevent::ENDDATE_SIZE ."'  maxlength='".huh_collectingevent::ENDDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ENDDATEPRECISION<input type=text name=".huh_collectingevent::ENDDATEPRECISION." id=".huh_collectingevent::ENDDATEPRECISION." value='".$model->getEndDatePrecision()."'  size='".huh_collectingevent::ENDDATEPRECISION_SIZE ."'  maxlength='".huh_collectingevent::ENDDATEPRECISION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ENDDATEVERBATIM<input type=text name=".huh_collectingevent::ENDDATEVERBATIM." id=".huh_collectingevent::ENDDATEVERBATIM." value='".$model->getEndDateVerbatim()."'  size='".huh_collectingevent::ENDDATEVERBATIM_SIZE ."'  maxlength='".huh_collectingevent::ENDDATEVERBATIM_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ENDTIME<input type=text name=".huh_collectingevent::ENDTIME." id=".huh_collectingevent::ENDTIME." value='".$model->getEndTime()."'  size='".huh_collectingevent::ENDTIME_SIZE ."'  maxlength='".huh_collectingevent::ENDTIME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>METHOD<input type=text name=".huh_collectingevent::METHOD." id=".huh_collectingevent::METHOD." value='".$model->getMethod()."'  size='".huh_collectingevent::METHOD_SIZE ."'  maxlength='".huh_collectingevent::METHOD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_collectingevent::REMARKS." id=".huh_collectingevent::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_collectingevent::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STARTDATE<input type=text name=".huh_collectingevent::STARTDATE." id=".huh_collectingevent::STARTDATE." value='".$model->getStartDate()."'  size='".huh_collectingevent::STARTDATE_SIZE ."'  maxlength='".huh_collectingevent::STARTDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STARTDATEPRECISION<input type=text name=".huh_collectingevent::STARTDATEPRECISION." id=".huh_collectingevent::STARTDATEPRECISION." value='".$model->getStartDatePrecision()."'  size='".huh_collectingevent::STARTDATEPRECISION_SIZE ."'  maxlength='".huh_collectingevent::STARTDATEPRECISION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STARTDATEVERBATIM<input type=text name=".huh_collectingevent::STARTDATEVERBATIM." id=".huh_collectingevent::STARTDATEVERBATIM." value='".$model->getStartDateVerbatim()."'  size='".huh_collectingevent::STARTDATEVERBATIM_SIZE ."'  maxlength='".huh_collectingevent::STARTDATEVERBATIM_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STARTTIME<input type=text name=".huh_collectingevent::STARTTIME." id=".huh_collectingevent::STARTTIME." value='".$model->getStartTime()."'  size='".huh_collectingevent::STARTTIME_SIZE ."'  maxlength='".huh_collectingevent::STARTTIME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STATIONFIELDNUMBER<input type=text name=".huh_collectingevent::STATIONFIELDNUMBER." id=".huh_collectingevent::STATIONFIELDNUMBER." value='".$model->getStationFieldNumber()."'  size='".huh_collectingevent::STATIONFIELDNUMBER_SIZE ."'  maxlength='".huh_collectingevent::STATIONFIELDNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERBATIMDATE<input type=text name=".huh_collectingevent::VERBATIMDATE." id=".huh_collectingevent::VERBATIMDATE." value='".$model->getVerbatimDate()."'  size='".huh_collectingevent::VERBATIMDATE_SIZE ."'  maxlength='".huh_collectingevent::VERBATIMDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERBATIMLOCALITY<input type=text name=".huh_collectingevent::VERBATIMLOCALITY." id=".huh_collectingevent::VERBATIMLOCALITY." value='".$model->getVerbatimLocality()."'  size='51'  maxlength='".huh_collectingevent::VERBATIMLOCALITY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VISIBILITY<input type=text name=".huh_collectingevent::VISIBILITY." id=".huh_collectingevent::VISIBILITY." value='".$model->getVisibility()."'  size='".huh_collectingevent::VISIBILITY_SIZE ."'  maxlength='".huh_collectingevent::VISIBILITY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LOCALITYID<input type=text name=".huh_collectingevent::LOCALITYID." id=".huh_collectingevent::LOCALITYID." value='".$model->getLocalityID()."'  size='".huh_collectingevent::LOCALITYID_SIZE ."'  maxlength='".huh_collectingevent::LOCALITYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTINGEVENTATTRIBUTEID<input type=text name=".huh_collectingevent::COLLECTINGEVENTATTRIBUTEID." id=".huh_collectingevent::COLLECTINGEVENTATTRIBUTEID." value='".$model->getCollectingEventAttributeID()."'  size='".huh_collectingevent::COLLECTINGEVENTATTRIBUTEID_SIZE ."'  maxlength='".huh_collectingevent::COLLECTINGEVENTATTRIBUTEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISCIPLINEID<input type=text name=".huh_collectingevent::DISCIPLINEID." id=".huh_collectingevent::DISCIPLINEID." value='".$model->getDisciplineID()."'  size='".huh_collectingevent::DISCIPLINEID_SIZE ."'  maxlength='".huh_collectingevent::DISCIPLINEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_collectingevent::MODIFIEDBYAGENTID." id=".huh_collectingevent::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_collectingevent::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_collectingevent::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTINGTRIPID<input type=text name=".huh_collectingevent::COLLECTINGTRIPID." id=".huh_collectingevent::COLLECTINGTRIPID." value='".$model->getCollectingTripID()."'  size='".huh_collectingevent::COLLECTINGTRIPID_SIZE ."'  maxlength='".huh_collectingevent::COLLECTINGTRIPID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_collectingevent::CREATEDBYAGENTID." id=".huh_collectingevent::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_collectingevent::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_collectingevent::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VISIBILITYSETBYID<input type=text name=".huh_collectingevent::VISIBILITYSETBYID." id=".huh_collectingevent::VISIBILITYSETBYID." value='".$model->getVisibilitySetByID()."'  size='".huh_collectingevent::VISIBILITYSETBYID_SIZE ."'  maxlength='".huh_collectingevent::VISIBILITYSETBYID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
