<?php
//==============================================================================
//===   spqueryfield.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_spqueryfield implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const SPQUERYFIELDID_SIZE  = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const ALWAYSFILTER_SIZE    = 1; //1
   const COLUMNALIAS_SIZE     = 64; //64
   const CONTEXTTABLEIDENT_SIZE = 11; //INTEGER
   const ENDVALUE_SIZE        = 64; //64
   const FIELDNAME_SIZE       = 32; //32
   const FORMATNAME_SIZE      = 64; //64
   const ISDISPLAY_SIZE       = 1; //1
   const ISNOT_SIZE           = 1; //1
   const ISPROMPT_SIZE        = 1; //1
   const ISRELFLD_SIZE        = 1; //1
   const OPEREND_SIZE         = 4; //TINYINT
   const OPERSTART_SIZE       = 4; //TINYINT
   const POSITION_SIZE        = 6; //SMALLINT
   const SORTTYPE_SIZE        = 4; //TINYINT
   const STARTVALUE_SIZE      = 64; //64
   const STRINGID_SIZE        = 255; //LONGVARCHAR
   const TABLELIST_SIZE       = 255; //LONGVARCHAR
   const SPQUERYID_SIZE       = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const SPQUERYFIELDID    = 'SpQueryFieldID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const ALWAYSFILTER      = 'AlwaysFilter';
   const COLUMNALIAS       = 'ColumnAlias';
   const CONTEXTTABLEIDENT = 'ContextTableIdent';
   const ENDVALUE          = 'EndValue';
   const FIELDNAME         = 'FieldName';
   const FORMATNAME        = 'FormatName';
   const ISDISPLAY         = 'IsDisplay';
   const ISNOT             = 'IsNot';
   const ISPROMPT          = 'IsPrompt';
   const ISRELFLD          = 'IsRelFld';
   const OPEREND           = 'OperEnd';
   const OPERSTART         = 'OperStart';
   const POSITION          = 'Position';
   const SORTTYPE          = 'SortType';
   const STARTVALUE        = 'StartValue';
   const STRINGID          = 'StringId';
   const TABLELIST         = 'TableList';
   const SPQUERYID         = 'SpQueryID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $SpQueryFieldID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['SpQueryFieldID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $AlwaysFilter = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['AlwaysFilter']), 0, 1);
  $ColumnAlias = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ColumnAlias']), 0, 64);
  $ContextTableIdent = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ContextTableIdent']), 0, 11);
  $EndValue = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['EndValue']), 0, 64);
  $FieldName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FieldName']), 0, 32);
  $FormatName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FormatName']), 0, 64);
  $IsDisplay = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsDisplay']), 0, 1);
  $IsNot = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsNot']), 0, 1);
  $IsPrompt = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsPrompt']), 0, 1);
  $IsRelFld = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsRelFld']), 0, 1);
  $OperEnd = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['OperEnd']), 0, 4);
  $OperStart = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['OperStart']), 0, 4);
  $Position = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Position']), 0, 6);
  $SortType = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['SortType']), 0, 4);
  $StartValue = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StartValue']), 0, 64);
  $StringId = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StringId']), 0, 255);
  $TableList = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TableList']), 0, 255);
  $SpQueryID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['SpQueryID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $SpQueryFieldID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $AlwaysFilter; // BIT(1) 
   private $ColumnAlias; // VARCHAR(64) 
   private $ContextTableIdent; // INTEGER 
   private $EndValue; // VARCHAR(64) 
   private $FieldName; // VARCHAR(32) 
   private $FormatName; // VARCHAR(64) 
   private $IsDisplay; // BIT(1) 
   private $IsNot; // BIT(1) 
   private $IsPrompt; // BIT(1) 
   private $IsRelFld; // BIT(1) 
   private $OperEnd; // TINYINT 
   private $OperStart; // TINYINT 
   private $Position; // SMALLINT 
   private $SortType; // TINYINT 
   private $StartValue; // VARCHAR(64) 
   private $StringId; // LONGVARCHAR 
   private $TableList; // LONGVARCHAR 
   private $SpQueryID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' SpQueryFieldID, TimestampCreated, TimestampModified, Version, AlwaysFilter, ColumnAlias, ContextTableIdent, EndValue, FieldName, FormatName, IsDisplay, IsNot, IsPrompt, IsRelFld, OperEnd, OperStart, Position, SortType, StartValue, StringId, TableList, SpQueryID, CreatedByAgentID, ModifiedByAgentID, ';
   const PKFIELDLIST = ' SpQueryFieldID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'SpQueryFieldID'  ) ;
   private $allFieldsArray = array( 0 => 'SpQueryFieldID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'AlwaysFilter' , 5 => 'ColumnAlias' , 6 => 'ContextTableIdent' , 7 => 'EndValue' , 8 => 'FieldName' , 9 => 'FormatName' , 10 => 'IsDisplay' , 11 => 'IsNot' , 12 => 'IsPrompt' , 13 => 'IsRelFld' , 14 => 'OperEnd' , 15 => 'OperStart' , 16 => 'Position' , 17 => 'SortType' , 18 => 'StartValue' , 19 => 'StringId' , 20 => 'TableList' , 21 => 'SpQueryID' , 22 => 'CreatedByAgentID' , 23 => 'ModifiedByAgentID'  ) ;
   private $selectDistinctFieldsArray = array( 21 => 'SpQueryID' , 22 => 'CreatedByAgentID' , 23 => 'ModifiedByAgentID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_spqueryfield(){
       $this->SpQueryFieldID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->AlwaysFilter = '';
       $this->ColumnAlias = '';
       $this->ContextTableIdent = '';
       $this->EndValue = '';
       $this->FieldName = '';
       $this->FormatName = '';
       $this->IsDisplay = '';
       $this->IsNot = '';
       $this->IsPrompt = '';
       $this->IsRelFld = '';
       $this->OperEnd = '';
       $this->OperStart = '';
       $this->Position = '';
       $this->SortType = '';
       $this->StartValue = '';
       $this->StringId = '';
       $this->TableList = '';
       $this->SpQueryID = '';
       $this->CreatedByAgentID = '';
       $this->ModifiedByAgentID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='SpQueryFieldID') { $returnvalue = $this->setSpQueryFieldID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='AlwaysFilter') { $returnvalue = $this->setAlwaysFilter($value); } 
             if ($fieldname=='ColumnAlias') { $returnvalue = $this->setColumnAlias($value); } 
             if ($fieldname=='ContextTableIdent') { $returnvalue = $this->setContextTableIdent($value); } 
             if ($fieldname=='EndValue') { $returnvalue = $this->setEndValue($value); } 
             if ($fieldname=='FieldName') { $returnvalue = $this->setFieldName($value); } 
             if ($fieldname=='FormatName') { $returnvalue = $this->setFormatName($value); } 
             if ($fieldname=='IsDisplay') { $returnvalue = $this->setIsDisplay($value); } 
             if ($fieldname=='IsNot') { $returnvalue = $this->setIsNot($value); } 
             if ($fieldname=='IsPrompt') { $returnvalue = $this->setIsPrompt($value); } 
             if ($fieldname=='IsRelFld') { $returnvalue = $this->setIsRelFld($value); } 
             if ($fieldname=='OperEnd') { $returnvalue = $this->setOperEnd($value); } 
             if ($fieldname=='OperStart') { $returnvalue = $this->setOperStart($value); } 
             if ($fieldname=='Position') { $returnvalue = $this->setPosition($value); } 
             if ($fieldname=='SortType') { $returnvalue = $this->setSortType($value); } 
             if ($fieldname=='StartValue') { $returnvalue = $this->setStartValue($value); } 
             if ($fieldname=='StringId') { $returnvalue = $this->setStringId($value); } 
             if ($fieldname=='TableList') { $returnvalue = $this->setTableList($value); } 
             if ($fieldname=='SpQueryID') { $returnvalue = $this->setSpQueryID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='SpQueryFieldID') { $returnvalue = $this->getSpQueryFieldID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='AlwaysFilter') { $returnvalue = $this->getAlwaysFilter(); } 
             if ($fieldname=='ColumnAlias') { $returnvalue = $this->getColumnAlias(); } 
             if ($fieldname=='ContextTableIdent') { $returnvalue = $this->getContextTableIdent(); } 
             if ($fieldname=='EndValue') { $returnvalue = $this->getEndValue(); } 
             if ($fieldname=='FieldName') { $returnvalue = $this->getFieldName(); } 
             if ($fieldname=='FormatName') { $returnvalue = $this->getFormatName(); } 
             if ($fieldname=='IsDisplay') { $returnvalue = $this->getIsDisplay(); } 
             if ($fieldname=='IsNot') { $returnvalue = $this->getIsNot(); } 
             if ($fieldname=='IsPrompt') { $returnvalue = $this->getIsPrompt(); } 
             if ($fieldname=='IsRelFld') { $returnvalue = $this->getIsRelFld(); } 
             if ($fieldname=='OperEnd') { $returnvalue = $this->getOperEnd(); } 
             if ($fieldname=='OperStart') { $returnvalue = $this->getOperStart(); } 
             if ($fieldname=='Position') { $returnvalue = $this->getPosition(); } 
             if ($fieldname=='SortType') { $returnvalue = $this->getSortType(); } 
             if ($fieldname=='StartValue') { $returnvalue = $this->getStartValue(); } 
             if ($fieldname=='StringId') { $returnvalue = $this->getStringId(); } 
             if ($fieldname=='TableList') { $returnvalue = $this->getTableList(); } 
             if ($fieldname=='SpQueryID') { $returnvalue = $this->getSpQueryID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*SpQueryFieldID*/
   public function getSpQueryFieldID() {
       if ($this->SpQueryFieldID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SpQueryFieldID));
       }
   }
   public function setSpQueryFieldID($SpQueryFieldID) {
       if (strlen(preg_replace('/[^0-9]/','',$SpQueryFieldID)) > huh_spqueryfield::SPQUERYFIELDID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $SpQueryFieldID = trim($SpQueryFieldID);
       if (!ctype_digit(strval($SpQueryFieldID)) && trim(strval($SpQueryFieldID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->SpQueryFieldID = $this->l_addslashes($SpQueryFieldID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_spqueryfield::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_spqueryfield::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_spqueryfield::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*AlwaysFilter*/
   public function getAlwaysFilter() {
       if ($this->AlwaysFilter==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AlwaysFilter));
       }
   }
   public function setAlwaysFilter($AlwaysFilter) {
       if (strlen($AlwaysFilter) > huh_spqueryfield::ALWAYSFILTER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->AlwaysFilter = $this->l_addslashes($AlwaysFilter);
       $this->dirty = true;
   }
/*ColumnAlias*/
   public function getColumnAlias() {
       if ($this->ColumnAlias==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ColumnAlias));
       }
   }
   public function setColumnAlias($ColumnAlias) {
       if (strlen($ColumnAlias) > huh_spqueryfield::COLUMNALIAS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ColumnAlias = $this->l_addslashes($ColumnAlias);
       $this->dirty = true;
   }
/*ContextTableIdent*/
   public function getContextTableIdent() {
       if ($this->ContextTableIdent==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ContextTableIdent));
       }
   }
   public function setContextTableIdent($ContextTableIdent) {
       if (strlen(preg_replace('/[^0-9]/','',$ContextTableIdent)) > huh_spqueryfield::CONTEXTTABLEIDENT_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ContextTableIdent = trim($ContextTableIdent);
       if (!ctype_digit(strval($ContextTableIdent)) && trim(strval($ContextTableIdent))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ContextTableIdent = $this->l_addslashes($ContextTableIdent);
       $this->dirty = true;
   }
/*EndValue*/
   public function getEndValue() {
       if ($this->EndValue==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->EndValue));
       }
   }
   public function setEndValue($EndValue) {
       if (strlen($EndValue) > huh_spqueryfield::ENDVALUE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->EndValue = $this->l_addslashes($EndValue);
       $this->dirty = true;
   }
/*FieldName*/
   public function getFieldName() {
       if ($this->FieldName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FieldName));
       }
   }
   public function setFieldName($FieldName) {
       if (strlen($FieldName) > huh_spqueryfield::FIELDNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FieldName = $this->l_addslashes($FieldName);
       $this->dirty = true;
   }
/*FormatName*/
   public function getFormatName() {
       if ($this->FormatName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FormatName));
       }
   }
   public function setFormatName($FormatName) {
       if (strlen($FormatName) > huh_spqueryfield::FORMATNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FormatName = $this->l_addslashes($FormatName);
       $this->dirty = true;
   }
/*IsDisplay*/
   public function getIsDisplay() {
       if ($this->IsDisplay==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsDisplay));
       }
   }
   public function setIsDisplay($IsDisplay) {
       if (strlen($IsDisplay) > huh_spqueryfield::ISDISPLAY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsDisplay = $this->l_addslashes($IsDisplay);
       $this->dirty = true;
   }
/*IsNot*/
   public function getIsNot() {
       if ($this->IsNot==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsNot));
       }
   }
   public function setIsNot($IsNot) {
       if (strlen($IsNot) > huh_spqueryfield::ISNOT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsNot = $this->l_addslashes($IsNot);
       $this->dirty = true;
   }
/*IsPrompt*/
   public function getIsPrompt() {
       if ($this->IsPrompt==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsPrompt));
       }
   }
   public function setIsPrompt($IsPrompt) {
       if (strlen($IsPrompt) > huh_spqueryfield::ISPROMPT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsPrompt = $this->l_addslashes($IsPrompt);
       $this->dirty = true;
   }
/*IsRelFld*/
   public function getIsRelFld() {
       if ($this->IsRelFld==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsRelFld));
       }
   }
   public function setIsRelFld($IsRelFld) {
       if (strlen($IsRelFld) > huh_spqueryfield::ISRELFLD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsRelFld = $this->l_addslashes($IsRelFld);
       $this->dirty = true;
   }
/*OperEnd*/
   public function getOperEnd() {
       if ($this->OperEnd==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->OperEnd));
       }
   }
   public function setOperEnd($OperEnd) {
       if (strlen($OperEnd) > huh_spqueryfield::OPEREND_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->OperEnd = $this->l_addslashes($OperEnd);
       $this->dirty = true;
   }
/*OperStart*/
   public function getOperStart() {
       if ($this->OperStart==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->OperStart));
       }
   }
   public function setOperStart($OperStart) {
       if (strlen($OperStart) > huh_spqueryfield::OPERSTART_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->OperStart = $this->l_addslashes($OperStart);
       $this->dirty = true;
   }
/*Position*/
   public function getPosition() {
       if ($this->Position==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Position));
       }
   }
   public function setPosition($Position) {
       if (strlen($Position) > huh_spqueryfield::POSITION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Position = $this->l_addslashes($Position);
       $this->dirty = true;
   }
/*SortType*/
   public function getSortType() {
       if ($this->SortType==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SortType));
       }
   }
   public function setSortType($SortType) {
       if (strlen($SortType) > huh_spqueryfield::SORTTYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->SortType = $this->l_addslashes($SortType);
       $this->dirty = true;
   }
/*StartValue*/
   public function getStartValue() {
       if ($this->StartValue==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StartValue));
       }
   }
   public function setStartValue($StartValue) {
       if (strlen($StartValue) > huh_spqueryfield::STARTVALUE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StartValue = $this->l_addslashes($StartValue);
       $this->dirty = true;
   }
/*StringId*/
   public function getStringId() {
       if ($this->StringId==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StringId));
       }
   }
   public function setStringId($StringId) {
       if (strlen($StringId) > huh_spqueryfield::STRINGID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StringId = $this->l_addslashes($StringId);
       $this->dirty = true;
   }
/*TableList*/
   public function getTableList() {
       if ($this->TableList==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TableList));
       }
   }
   public function setTableList($TableList) {
       if (strlen($TableList) > huh_spqueryfield::TABLELIST_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TableList = $this->l_addslashes($TableList);
       $this->dirty = true;
   }
/*SpQueryID*/
   public function getSpQueryID() {
       if ($this->SpQueryID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SpQueryID));
       }
   }
   public function setSpQueryID($SpQueryID) {
       if (strlen(preg_replace('/[^0-9]/','',$SpQueryID)) > huh_spqueryfield::SPQUERYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $SpQueryID = trim($SpQueryID);
       if (!ctype_digit(strval($SpQueryID)) && trim(strval($SpQueryID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->SpQueryID = $this->l_addslashes($SpQueryID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_spqueryfield::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_spqueryfield::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getSpQueryFieldID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['SpQueryFieldID'] = $this->getSpQueryFieldID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_SpQueryFieldIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_AlwaysFilterMYSQLI_TYPE = 'i';
  const C_ColumnAliasMYSQLI_TYPE = 's';
  const C_ContextTableIdentMYSQLI_TYPE = 'i';
  const C_EndValueMYSQLI_TYPE = 's';
  const C_FieldNameMYSQLI_TYPE = 's';
  const C_FormatNameMYSQLI_TYPE = 's';
  const C_IsDisplayMYSQLI_TYPE = 'i';
  const C_IsNotMYSQLI_TYPE = 'i';
  const C_IsPromptMYSQLI_TYPE = 'i';
  const C_IsRelFldMYSQLI_TYPE = 'i';
  const C_OperEndMYSQLI_TYPE = 'i';
  const C_OperStartMYSQLI_TYPE = 'i';
  const C_PositionMYSQLI_TYPE = 'i';
  const C_SortTypeMYSQLI_TYPE = 'i';
  const C_StartValueMYSQLI_TYPE = 's';
  const C_StringIdMYSQLI_TYPE = 's';
  const C_TableListMYSQLI_TYPE = 's';
  const C_SpQueryIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='SpQueryFieldID') { $retval = self::C_SpQueryFieldIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='AlwaysFilter') { $retval = self::C_AlwaysFilterMYSQLI_TYPE; }
      if ($aFieldname=='ColumnAlias') { $retval = self::C_ColumnAliasMYSQLI_TYPE; }
      if ($aFieldname=='ContextTableIdent') { $retval = self::C_ContextTableIdentMYSQLI_TYPE; }
      if ($aFieldname=='EndValue') { $retval = self::C_EndValueMYSQLI_TYPE; }
      if ($aFieldname=='FieldName') { $retval = self::C_FieldNameMYSQLI_TYPE; }
      if ($aFieldname=='FormatName') { $retval = self::C_FormatNameMYSQLI_TYPE; }
      if ($aFieldname=='IsDisplay') { $retval = self::C_IsDisplayMYSQLI_TYPE; }
      if ($aFieldname=='IsNot') { $retval = self::C_IsNotMYSQLI_TYPE; }
      if ($aFieldname=='IsPrompt') { $retval = self::C_IsPromptMYSQLI_TYPE; }
      if ($aFieldname=='IsRelFld') { $retval = self::C_IsRelFldMYSQLI_TYPE; }
      if ($aFieldname=='OperEnd') { $retval = self::C_OperEndMYSQLI_TYPE; }
      if ($aFieldname=='OperStart') { $retval = self::C_OperStartMYSQLI_TYPE; }
      if ($aFieldname=='Position') { $retval = self::C_PositionMYSQLI_TYPE; }
      if ($aFieldname=='SortType') { $retval = self::C_SortTypeMYSQLI_TYPE; }
      if ($aFieldname=='StartValue') { $retval = self::C_StartValueMYSQLI_TYPE; }
      if ($aFieldname=='StringId') { $retval = self::C_StringIdMYSQLI_TYPE; }
      if ($aFieldname=='TableList') { $retval = self::C_TableListMYSQLI_TYPE; }
      if ($aFieldname=='SpQueryID') { $retval = self::C_SpQueryIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setSpQueryFieldID($pk[SpQueryFieldID]);
             } else { ;
                 $this->setSpQueryFieldID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->SpQueryFieldID != NULL) {
           $sql = 'SELECT SpQueryFieldID, TimestampCreated, TimestampModified, Version, AlwaysFilter, ColumnAlias, ContextTableIdent, EndValue, FieldName, FormatName, IsDisplay, IsNot, IsPrompt, IsRelFld, OperEnd, OperStart, Position, SortType, StartValue, StringId, TableList, SpQueryID, CreatedByAgentID, ModifiedByAgentID FROM spqueryfield WHERE SpQueryFieldID = '.$this->SpQueryFieldID ;

           $preparesql = 'SELECT SpQueryFieldID, TimestampCreated, TimestampModified, Version, AlwaysFilter, ColumnAlias, ContextTableIdent, EndValue, FieldName, FormatName, IsDisplay, IsNot, IsPrompt, IsRelFld, OperEnd, OperStart, Position, SortType, StartValue, StringId, TableList, SpQueryID, CreatedByAgentID, ModifiedByAgentID FROM spqueryfield WHERE SpQueryFieldID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->SpQueryFieldID);
              $statement->execute();
              $statement->bind_result($this->SpQueryFieldID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->AlwaysFilter, $this->ColumnAlias, $this->ContextTableIdent, $this->EndValue, $this->FieldName, $this->FormatName, $this->IsDisplay, $this->IsNot, $this->IsPrompt, $this->IsRelFld, $this->OperEnd, $this->OperStart, $this->Position, $this->SortType, $this->StartValue, $this->StringId, $this->TableList, $this->SpQueryID, $this->CreatedByAgentID, $this->ModifiedByAgentID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->SpQueryFieldID!= NULL) {
            $sql  = 'UPDATE  spqueryfield SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", AlwaysFilter = ? ";
            $sql .=  ", ColumnAlias = ? ";
            $sql .=  ", ContextTableIdent = ? ";
            $sql .=  ", EndValue = ? ";
            $sql .=  ", FieldName = ? ";
            $sql .=  ", FormatName = ? ";
            $sql .=  ", IsDisplay = ? ";
            $sql .=  ", IsNot = ? ";
            $sql .=  ", IsPrompt = ? ";
            $sql .=  ", IsRelFld = ? ";
            $sql .=  ", OperEnd = ? ";
            $sql .=  ", OperStart = ? ";
            $sql .=  ", Position = ? ";
            $sql .=  ", SortType = ? ";
            $sql .=  ", StartValue = ? ";
            $sql .=  ", StringId = ? ";
            $sql .=  ", TableList = ? ";
            $sql .=  ", SpQueryID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";

            $sql .= "  WHERE SpQueryFieldID = ? ";
        } else {
            $sql  = 'INSERT INTO spqueryfield ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( SpQueryFieldID ,  TimestampCreated ,  TimestampModified ,  Version ,  AlwaysFilter ,  ColumnAlias ,  ContextTableIdent ,  EndValue ,  FieldName ,  FormatName ,  IsDisplay ,  IsNot ,  IsPrompt ,  IsRelFld ,  OperEnd ,  OperStart ,  Position ,  SortType ,  StartValue ,  StringId ,  TableList ,  SpQueryID ,  CreatedByAgentID ,  ModifiedByAgentID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->SpQueryFieldID!= NULL ) {
              $statement->bind_param("issiisisssiiiiiiiisssiiii", $this->SpQueryFieldID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->AlwaysFilter , $this->ColumnAlias , $this->ContextTableIdent , $this->EndValue , $this->FieldName , $this->FormatName , $this->IsDisplay , $this->IsNot , $this->IsPrompt , $this->IsRelFld , $this->OperEnd , $this->OperStart , $this->Position , $this->SortType , $this->StartValue , $this->StringId , $this->TableList , $this->SpQueryID , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->SpQueryFieldID );
           } else { 
              $statement->bind_param("issiisisssiiiiiiiisssiii", $this->SpQueryFieldID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->AlwaysFilter , $this->ColumnAlias , $this->ContextTableIdent , $this->EndValue , $this->FieldName , $this->FormatName , $this->IsDisplay , $this->IsNot , $this->IsPrompt , $this->IsRelFld , $this->OperEnd , $this->OperStart , $this->Position , $this->SortType , $this->StartValue , $this->StringId , $this->TableList , $this->SpQueryID , $this->CreatedByAgentID , $this->ModifiedByAgentID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->SpQueryFieldID != NULL) {
           $sql = 'SELECT SpQueryFieldID, TimestampCreated, TimestampModified, Version, AlwaysFilter, ColumnAlias, ContextTableIdent, EndValue, FieldName, FormatName, IsDisplay, IsNot, IsPrompt, IsRelFld, OperEnd, OperStart, Position, SortType, StartValue, StringId, TableList, SpQueryID, CreatedByAgentID, ModifiedByAgentID FROM spqueryfield WHERE SpQueryFieldID = "'.$this->SpQueryFieldID.'"  ' ;

           $preparedsql = 'SELECT  FROM spqueryfield WHERE  and SpQueryFieldID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issiisisssiiiiiiiisssiii", $this->SpQueryFieldID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->AlwaysFilter, $this->ColumnAlias, $this->ContextTableIdent, $this->EndValue, $this->FieldName, $this->FormatName, $this->IsDisplay, $this->IsNot, $this->IsPrompt, $this->IsRelFld, $this->OperEnd, $this->OperStart, $this->Position, $this->SortType, $this->StartValue, $this->StringId, $this->TableList, $this->SpQueryID, $this->CreatedByAgentID, $this->ModifiedByAgentID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM spqueryfield WHERE  and SpQueryFieldID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issiisisssiiiiiiiisssiii", $this->SpQueryFieldID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->AlwaysFilter, $this->ColumnAlias, $this->ContextTableIdent, $this->EndValue, $this->FieldName, $this->FormatName, $this->IsDisplay, $this->IsNot, $this->IsPrompt, $this->IsRelFld, $this->OperEnd, $this->OperStart, $this->Position, $this->SortType, $this->StartValue, $this->StringId, $this->TableList, $this->SpQueryID, $this->CreatedByAgentID, $this->ModifiedByAgentID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->SpQueryFieldID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM spqueryfield';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT SpQueryFieldID FROM spqueryfield $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_spqueryfield();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromspexportschemaitemmapping() { 
      // ForeignKey in: spexportschemaitemmapping
      $t = new spexportschemaitemmapping();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: SpQueryID
      $t = new spquery();
      $t->load(getSpQueryID());
      $returnvalue[SpQueryID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT SpQueryFieldID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(AlwaysFilter,'') || ' ' || IFNULL(ColumnAlias,'') || ' ' || IFNULL(ContextTableIdent,'') || ' ' || IFNULL(EndValue,'') || ' ' || IFNULL(FieldName,'') || ' ' || IFNULL(FormatName,'') || ' ' || IFNULL(IsDisplay,'') || ' ' || IFNULL(IsNot,'') || ' ' || IFNULL(IsPrompt,'') || ' ' || IFNULL(IsRelFld,'') || ' ' || IFNULL(OperEnd,'') || ' ' || IFNULL(OperStart,'') || ' ' || IFNULL(Position,'') || ' ' || IFNULL(SortType,'') || ' ' || IFNULL(StartValue,'') || ' ' || IFNULL(StringId,'') || ' ' || IFNULL(TableList,'') || ' ' || IFNULL(SpQueryID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ModifiedByAgentID,'')) FROM spqueryfield order by SpQueryID, CreatedByAgentID, ModifiedByAgentID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM spqueryfield order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayBySpQueryID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT SpQueryFieldID FROM spqueryfield WHERE SpQueryID $operator '$searchTerm'";
        $preparedsql = "SELECT SpQueryFieldID FROM spqueryfield WHERE SpQueryID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_spqueryfield();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT SpQueryFieldID FROM spqueryfield WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT SpQueryFieldID FROM spqueryfield WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_spqueryfield();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT SpQueryFieldID FROM spqueryfield WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT SpQueryFieldID FROM spqueryfield WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_spqueryfield();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctSpQueryID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' SpQueryID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, SpQueryID FROM spqueryfield group by SpQueryID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&SpQueryID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM spqueryfield group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM spqueryfield group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'SpQueryID':
             $returnvalue = $this->selectDistinctSpQueryID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the spqueryfield.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_spqueryfieldView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_spqueryfield <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_spqueryfield::SPQUERYFIELDID.": ".$model->getSpQueryFieldID()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::ALWAYSFILTER.": ".$model->getAlwaysFilter()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::COLUMNALIAS.": ".$model->getColumnAlias()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::CONTEXTTABLEIDENT.": ".$model->getContextTableIdent()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::ENDVALUE.": ".$model->getEndValue()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::FIELDNAME.": ".$model->getFieldName()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::FORMATNAME.": ".$model->getFormatName()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::ISDISPLAY.": ".$model->getIsDisplay()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::ISNOT.": ".$model->getIsNot()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::ISPROMPT.": ".$model->getIsPrompt()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::ISRELFLD.": ".$model->getIsRelFld()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::OPEREND.": ".$model->getOperEnd()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::OPERSTART.": ".$model->getOperStart()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::POSITION.": ".$model->getPosition()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::SORTTYPE.": ".$model->getSortType()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::STARTVALUE.": ".$model->getStartValue()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::STRINGID.": ".$model->getStringId()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::TABLELIST.": ".$model->getTableList()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::SPQUERYID.": ".$model->getSpQueryID()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_spqueryfield::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>spquery</li>";
           $t_spquery = new huh_spquery();
           $t_spqueryView = new huh_spqueryView();
           $t_spqueryView->setModel($t_spquery);
           if ($model->getSpQueryID() != '') { 
               $t_spquery->load($model->getSpQueryID());
               $returnvalue .= $t_spqueryView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_spqueryfield::SPQUERYFIELDID.': "'.$model->getSpQueryFieldID().'",';
       $returnvalue .= '"'.huh_spqueryfield::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_spqueryfield::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_spqueryfield::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_spqueryfield::ALWAYSFILTER.': "'.$model->getAlwaysFilter().'",';
       $returnvalue .= '"'.huh_spqueryfield::COLUMNALIAS.': "'.$model->getColumnAlias().'",';
       $returnvalue .= '"'.huh_spqueryfield::CONTEXTTABLEIDENT.': "'.$model->getContextTableIdent().'",';
       $returnvalue .= '"'.huh_spqueryfield::ENDVALUE.': "'.$model->getEndValue().'",';
       $returnvalue .= '"'.huh_spqueryfield::FIELDNAME.': "'.$model->getFieldName().'",';
       $returnvalue .= '"'.huh_spqueryfield::FORMATNAME.': "'.$model->getFormatName().'",';
       $returnvalue .= '"'.huh_spqueryfield::ISDISPLAY.': "'.$model->getIsDisplay().'",';
       $returnvalue .= '"'.huh_spqueryfield::ISNOT.': "'.$model->getIsNot().'",';
       $returnvalue .= '"'.huh_spqueryfield::ISPROMPT.': "'.$model->getIsPrompt().'",';
       $returnvalue .= '"'.huh_spqueryfield::ISRELFLD.': "'.$model->getIsRelFld().'",';
       $returnvalue .= '"'.huh_spqueryfield::OPEREND.': "'.$model->getOperEnd().'",';
       $returnvalue .= '"'.huh_spqueryfield::OPERSTART.': "'.$model->getOperStart().'",';
       $returnvalue .= '"'.huh_spqueryfield::POSITION.': "'.$model->getPosition().'",';
       $returnvalue .= '"'.huh_spqueryfield::SORTTYPE.': "'.$model->getSortType().'",';
       $returnvalue .= '"'.huh_spqueryfield::STARTVALUE.': "'.$model->getStartValue().'",';
       $returnvalue .= '"'.huh_spqueryfield::STRINGID.': "'.$model->getStringId().'",';
       $returnvalue .= '"'.huh_spqueryfield::TABLELIST.': "'.$model->getTableList().'",';
       $returnvalue .= '"'.huh_spqueryfield::SPQUERYID.': "'.$model->getSpQueryID().'",';
       $returnvalue .= '"'.huh_spqueryfield::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_spqueryfield::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getSpQueryFieldID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getAlwaysFilter()."</td>\n";
       $returnvalue .= "<td>".$model->getColumnAlias()."</td>\n";
       $returnvalue .= "<td>".$model->getContextTableIdent()."</td>\n";
       $returnvalue .= "<td>".$model->getEndValue()."</td>\n";
       $returnvalue .= "<td>".$model->getFieldName()."</td>\n";
       $returnvalue .= "<td>".$model->getFormatName()."</td>\n";
       $returnvalue .= "<td>".$model->getIsDisplay()."</td>\n";
       $returnvalue .= "<td>".$model->getIsNot()."</td>\n";
       $returnvalue .= "<td>".$model->getIsPrompt()."</td>\n";
       $returnvalue .= "<td>".$model->getIsRelFld()."</td>\n";
       $returnvalue .= "<td>".$model->getOperEnd()."</td>\n";
       $returnvalue .= "<td>".$model->getOperStart()."</td>\n";
       $returnvalue .= "<td>".$model->getPosition()."</td>\n";
       $returnvalue .= "<td>".$model->getSortType()."</td>\n";
       $returnvalue .= "<td>".$model->getStartValue()."</td>\n";
       $returnvalue .= "<td>".$model->getStringId()."</td>\n";
       $returnvalue .= "<td>".$model->getTableList()."</td>\n";
       $returnvalue .= "<td>".$model->getSpQueryID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_spqueryfield::SPQUERYFIELDID."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::ALWAYSFILTER."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::COLUMNALIAS."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::CONTEXTTABLEIDENT."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::ENDVALUE."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::FIELDNAME."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::FORMATNAME."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::ISDISPLAY."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::ISNOT."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::ISPROMPT."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::ISRELFLD."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::OPEREND."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::OPERSTART."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::POSITION."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::SORTTYPE."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::STARTVALUE."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::STRINGID."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::TABLELIST."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::SPQUERYID."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_spqueryfield::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_spqueryfield">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new SpQueryFieldID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_spqueryfield::SPQUERYFIELDID.">SPQUERYFIELDID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_spqueryfield::SPQUERYFIELDID." id=".huh_spqueryfield::SPQUERYFIELDID." value='".$model->getSpQueryFieldID()."'  style=' width:".huh_spqueryfield::SPQUERYFIELDID_SIZE ."em;  '  maxlength='".huh_spqueryfield::SPQUERYFIELDID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_spqueryfield::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_spqueryfield::TIMESTAMPCREATED." id=".huh_spqueryfield::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_spqueryfield::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_spqueryfield::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_spqueryfield::TIMESTAMPMODIFIED." id=".huh_spqueryfield::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_spqueryfield::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_spqueryfield::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_spqueryfield::VERSION." id=".huh_spqueryfield::VERSION." value='".$model->getVersion()."'  style=' width:".huh_spqueryfield::VERSION_SIZE ."em;  '  maxlength='".huh_spqueryfield::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::ALWAYSFILTER.">ALWAYSFILTER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_spqueryfield::ALWAYSFILTER." id=".huh_spqueryfield::ALWAYSFILTER." value='".$model->getAlwaysFilter()."'  style=' width:".huh_spqueryfield::ALWAYSFILTER_SIZE ."em;  '  maxlength='".huh_spqueryfield::ALWAYSFILTER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::COLUMNALIAS.">COLUMNALIAS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_spqueryfield::COLUMNALIAS." id=".huh_spqueryfield::COLUMNALIAS." >".$model->getColumnAlias()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::CONTEXTTABLEIDENT.">CONTEXTTABLEIDENT</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_spqueryfield::CONTEXTTABLEIDENT." id=".huh_spqueryfield::CONTEXTTABLEIDENT." value='".$model->getContextTableIdent()."'  style=' width:".huh_spqueryfield::CONTEXTTABLEIDENT_SIZE ."em;  '  maxlength='".huh_spqueryfield::CONTEXTTABLEIDENT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::ENDVALUE.">ENDVALUE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_spqueryfield::ENDVALUE." id=".huh_spqueryfield::ENDVALUE." >".$model->getEndValue()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::FIELDNAME.">FIELDNAME</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_spqueryfield::FIELDNAME." id=".huh_spqueryfield::FIELDNAME." value='".$model->getFieldName()."'  style=' width:".huh_spqueryfield::FIELDNAME_SIZE ."em;  '  maxlength='".huh_spqueryfield::FIELDNAME_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::FORMATNAME.">FORMATNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_spqueryfield::FORMATNAME." id=".huh_spqueryfield::FORMATNAME." >".$model->getFormatName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::ISDISPLAY.">ISDISPLAY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_spqueryfield::ISDISPLAY." id=".huh_spqueryfield::ISDISPLAY." value='".$model->getIsDisplay()."'  style=' width:".huh_spqueryfield::ISDISPLAY_SIZE ."em;  '  maxlength='".huh_spqueryfield::ISDISPLAY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::ISNOT.">ISNOT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_spqueryfield::ISNOT." id=".huh_spqueryfield::ISNOT." value='".$model->getIsNot()."'  style=' width:".huh_spqueryfield::ISNOT_SIZE ."em;  '  maxlength='".huh_spqueryfield::ISNOT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::ISPROMPT.">ISPROMPT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_spqueryfield::ISPROMPT." id=".huh_spqueryfield::ISPROMPT." value='".$model->getIsPrompt()."'  style=' width:".huh_spqueryfield::ISPROMPT_SIZE ."em;  '  maxlength='".huh_spqueryfield::ISPROMPT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::ISRELFLD.">ISRELFLD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_spqueryfield::ISRELFLD." id=".huh_spqueryfield::ISRELFLD." value='".$model->getIsRelFld()."'  style=' width:".huh_spqueryfield::ISRELFLD_SIZE ."em;  '  maxlength='".huh_spqueryfield::ISRELFLD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::OPEREND.">OPEREND</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_spqueryfield::OPEREND." id=".huh_spqueryfield::OPEREND." value='".$model->getOperEnd()."'  style=' width:".huh_spqueryfield::OPEREND_SIZE ."em;  '  maxlength='".huh_spqueryfield::OPEREND_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::OPERSTART.">OPERSTART</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_spqueryfield::OPERSTART." id=".huh_spqueryfield::OPERSTART." value='".$model->getOperStart()."'  style=' width:".huh_spqueryfield::OPERSTART_SIZE ."em;  '  maxlength='".huh_spqueryfield::OPERSTART_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::POSITION.">POSITION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_spqueryfield::POSITION." id=".huh_spqueryfield::POSITION." value='".$model->getPosition()."'  style=' width:".huh_spqueryfield::POSITION_SIZE ."em;  '  maxlength='".huh_spqueryfield::POSITION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::SORTTYPE.">SORTTYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_spqueryfield::SORTTYPE." id=".huh_spqueryfield::SORTTYPE." value='".$model->getSortType()."'  style=' width:".huh_spqueryfield::SORTTYPE_SIZE ."em;  '  maxlength='".huh_spqueryfield::SORTTYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::STARTVALUE.">STARTVALUE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_spqueryfield::STARTVALUE." id=".huh_spqueryfield::STARTVALUE." >".$model->getStartValue()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::STRINGID.">STRINGID</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_spqueryfield::STRINGID." id=".huh_spqueryfield::STRINGID." >".$model->getStringId()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::TABLELIST.">TABLELIST</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_spqueryfield::TABLELIST." id=".huh_spqueryfield::TABLELIST." >".$model->getTableList()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::SPQUERYID.">SPQUERYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_spqueryfield::SPQUERYID." id=".huh_spqueryfield::SPQUERYID." value='".$model->getSpQueryID()."'  style=' width:".huh_spqueryfield::SPQUERYID_SIZE ."em;  '  maxlength='".huh_spqueryfield::SPQUERYID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_spqueryfield::CREATEDBYAGENTID." id=".huh_spqueryfield::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_spqueryfield::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_spqueryfield::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_spqueryfield::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_spqueryfield::MODIFIEDBYAGENTID." id=".huh_spqueryfield::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_spqueryfield::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_spqueryfield::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_spqueryfield">';
       $returnvalue .= '<input type=hidden name=SpQueryFieldID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_spqueryfield">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>SPQUERYFIELDID<input type=text name=".huh_spqueryfield::SPQUERYFIELDID." id=".huh_spqueryfield::SPQUERYFIELDID." value='".$model->getSpQueryFieldID()."'  size='".huh_spqueryfield::SPQUERYFIELDID_SIZE ."'  maxlength='".huh_spqueryfield::SPQUERYFIELDID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_spqueryfield::TIMESTAMPCREATED." id=".huh_spqueryfield::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_spqueryfield::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_spqueryfield::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_spqueryfield::TIMESTAMPMODIFIED." id=".huh_spqueryfield::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_spqueryfield::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_spqueryfield::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_spqueryfield::VERSION." id=".huh_spqueryfield::VERSION." value='".$model->getVersion()."'  size='".huh_spqueryfield::VERSION_SIZE ."'  maxlength='".huh_spqueryfield::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ALWAYSFILTER<input type=text name=".huh_spqueryfield::ALWAYSFILTER." id=".huh_spqueryfield::ALWAYSFILTER." value='".$model->getAlwaysFilter()."'  size='".huh_spqueryfield::ALWAYSFILTER_SIZE ."'  maxlength='".huh_spqueryfield::ALWAYSFILTER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLUMNALIAS<input type=text name=".huh_spqueryfield::COLUMNALIAS." id=".huh_spqueryfield::COLUMNALIAS." value='".$model->getColumnAlias()."'  size='51'  maxlength='".huh_spqueryfield::COLUMNALIAS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CONTEXTTABLEIDENT<input type=text name=".huh_spqueryfield::CONTEXTTABLEIDENT." id=".huh_spqueryfield::CONTEXTTABLEIDENT." value='".$model->getContextTableIdent()."'  size='".huh_spqueryfield::CONTEXTTABLEIDENT_SIZE ."'  maxlength='".huh_spqueryfield::CONTEXTTABLEIDENT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ENDVALUE<input type=text name=".huh_spqueryfield::ENDVALUE." id=".huh_spqueryfield::ENDVALUE." value='".$model->getEndValue()."'  size='51'  maxlength='".huh_spqueryfield::ENDVALUE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FIELDNAME<input type=text name=".huh_spqueryfield::FIELDNAME." id=".huh_spqueryfield::FIELDNAME." value='".$model->getFieldName()."'  size='".huh_spqueryfield::FIELDNAME_SIZE ."'  maxlength='".huh_spqueryfield::FIELDNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FORMATNAME<input type=text name=".huh_spqueryfield::FORMATNAME." id=".huh_spqueryfield::FORMATNAME." value='".$model->getFormatName()."'  size='51'  maxlength='".huh_spqueryfield::FORMATNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISDISPLAY<input type=text name=".huh_spqueryfield::ISDISPLAY." id=".huh_spqueryfield::ISDISPLAY." value='".$model->getIsDisplay()."'  size='".huh_spqueryfield::ISDISPLAY_SIZE ."'  maxlength='".huh_spqueryfield::ISDISPLAY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISNOT<input type=text name=".huh_spqueryfield::ISNOT." id=".huh_spqueryfield::ISNOT." value='".$model->getIsNot()."'  size='".huh_spqueryfield::ISNOT_SIZE ."'  maxlength='".huh_spqueryfield::ISNOT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISPROMPT<input type=text name=".huh_spqueryfield::ISPROMPT." id=".huh_spqueryfield::ISPROMPT." value='".$model->getIsPrompt()."'  size='".huh_spqueryfield::ISPROMPT_SIZE ."'  maxlength='".huh_spqueryfield::ISPROMPT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISRELFLD<input type=text name=".huh_spqueryfield::ISRELFLD." id=".huh_spqueryfield::ISRELFLD." value='".$model->getIsRelFld()."'  size='".huh_spqueryfield::ISRELFLD_SIZE ."'  maxlength='".huh_spqueryfield::ISRELFLD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>OPEREND<input type=text name=".huh_spqueryfield::OPEREND." id=".huh_spqueryfield::OPEREND." value='".$model->getOperEnd()."'  size='".huh_spqueryfield::OPEREND_SIZE ."'  maxlength='".huh_spqueryfield::OPEREND_SIZE ."' ></li>\n";
       $returnvalue .= "<li>OPERSTART<input type=text name=".huh_spqueryfield::OPERSTART." id=".huh_spqueryfield::OPERSTART." value='".$model->getOperStart()."'  size='".huh_spqueryfield::OPERSTART_SIZE ."'  maxlength='".huh_spqueryfield::OPERSTART_SIZE ."' ></li>\n";
       $returnvalue .= "<li>POSITION<input type=text name=".huh_spqueryfield::POSITION." id=".huh_spqueryfield::POSITION." value='".$model->getPosition()."'  size='".huh_spqueryfield::POSITION_SIZE ."'  maxlength='".huh_spqueryfield::POSITION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SORTTYPE<input type=text name=".huh_spqueryfield::SORTTYPE." id=".huh_spqueryfield::SORTTYPE." value='".$model->getSortType()."'  size='".huh_spqueryfield::SORTTYPE_SIZE ."'  maxlength='".huh_spqueryfield::SORTTYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STARTVALUE<input type=text name=".huh_spqueryfield::STARTVALUE." id=".huh_spqueryfield::STARTVALUE." value='".$model->getStartValue()."'  size='51'  maxlength='".huh_spqueryfield::STARTVALUE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STRINGID<input type=text name=".huh_spqueryfield::STRINGID." id=".huh_spqueryfield::STRINGID." value='".$model->getStringId()."'  size='51'  maxlength='".huh_spqueryfield::STRINGID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TABLELIST<input type=text name=".huh_spqueryfield::TABLELIST." id=".huh_spqueryfield::TABLELIST." value='".$model->getTableList()."'  size='51'  maxlength='".huh_spqueryfield::TABLELIST_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SPQUERYID<input type=text name=".huh_spqueryfield::SPQUERYID." id=".huh_spqueryfield::SPQUERYID." value='".$model->getSpQueryID()."'  size='".huh_spqueryfield::SPQUERYID_SIZE ."'  maxlength='".huh_spqueryfield::SPQUERYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_spqueryfield::CREATEDBYAGENTID." id=".huh_spqueryfield::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_spqueryfield::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_spqueryfield::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_spqueryfield::MODIFIEDBYAGENTID." id=".huh_spqueryfield::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_spqueryfield::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_spqueryfield::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
