<?php
//==============================================================================
//===   exchangein.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_exchangein implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const EXCHANGEINID_SIZE    = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const DESCRIPTIONOFMATERIAL_SIZE = 255; //255
   const DISCARDCOUNT_SIZE    = 6; //SMALLINT
   const DISTRIBUTECOUNT_SIZE = 6; //SMALLINT
   const EXCHANGEDATE_SIZE    = 12; //DATE
   const NONSPECIMENCOUNT_SIZE = 6; //SMALLINT
   const NUMBER1_SIZE         = 20; //REAL
   const NUMBER2_SIZE         = 20; //REAL
   const QUANTITYEXCHANGED_SIZE = 6; //SMALLINT
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const RETURNCOUNT_SIZE     = 6; //SMALLINT
   const SRCGEOGRAPHY_SIZE    = 32; //32
   const SRCTAXONOMY_SIZE     = 32; //32
   const TEXT1_SIZE           = 255; //LONGVARCHAR
   const TEXT2_SIZE           = 255; //LONGVARCHAR
   const TYPECOUNT_SIZE       = 6; //SMALLINT
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const CATALOGEDBYID_SIZE   = 11; //INTEGER
   const ADDRESSOFRECORDID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const DIVISIONID_SIZE      = 11; //INTEGER
   const RECEIVEDFROMORGANIZATIONID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const EXCHANGEINID      = 'ExchangeInID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const DESCRIPTIONOFMATERIAL = 'DescriptionOfMaterial';
   const DISCARDCOUNT      = 'DiscardCount';
   const DISTRIBUTECOUNT   = 'DistributeCount';
   const EXCHANGEDATE      = 'ExchangeDate';
   const NONSPECIMENCOUNT  = 'NonSpecimenCount';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const QUANTITYEXCHANGED = 'QuantityExchanged';
   const REMARKS           = 'Remarks';
   const RETURNCOUNT       = 'ReturnCount';
   const SRCGEOGRAPHY      = 'SrcGeography';
   const SRCTAXONOMY       = 'SrcTaxonomy';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const TYPECOUNT         = 'TypeCount';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const CATALOGEDBYID     = 'CatalogedByID';
   const ADDRESSOFRECORDID = 'AddressOfRecordID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const DIVISIONID        = 'DivisionID';
   const RECEIVEDFROMORGANIZATIONID = 'ReceivedFromOrganizationID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $ExchangeInID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ExchangeInID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $DescriptionOfMaterial = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DescriptionOfMaterial']), 0, 255);
  $DiscardCount = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DiscardCount']), 0, 6);
  $DistributeCount = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DistributeCount']), 0, 6);
  $ExchangeDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ExchangeDate']), 0, 12);
  $NonSpecimenCount = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['NonSpecimenCount']), 0, 6);
  $Number1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number1']), 0, 20);
  $Number2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number2']), 0, 20);
  $QuantityExchanged = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['QuantityExchanged']), 0, 6);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $ReturnCount = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ReturnCount']), 0, 6);
  $SrcGeography = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['SrcGeography']), 0, 32);
  $SrcTaxonomy = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['SrcTaxonomy']), 0, 32);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 255);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 255);
  $TypeCount = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TypeCount']), 0, 6);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $CatalogedByID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CatalogedByID']), 0, 11);
  $AddressOfRecordID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AddressOfRecordID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $DivisionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DivisionID']), 0, 11);
  $ReceivedFromOrganizationID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ReceivedFromOrganizationID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $ExchangeInID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $DescriptionOfMaterial; // VARCHAR(255) 
   private $DiscardCount; // SMALLINT 
   private $DistributeCount; // SMALLINT 
   private $ExchangeDate; // DATE 
   private $NonSpecimenCount; // SMALLINT 
   private $Number1; // REAL 
   private $Number2; // REAL 
   private $QuantityExchanged; // SMALLINT 
   private $Remarks; // LONGVARCHAR 
   private $ReturnCount; // SMALLINT 
   private $SrcGeography; // VARCHAR(32) 
   private $SrcTaxonomy; // VARCHAR(32) 
   private $Text1; // LONGVARCHAR 
   private $Text2; // LONGVARCHAR 
   private $TypeCount; // SMALLINT 
   private $YesNo1; // BIT(1) 
   private $YesNo2; // BIT(1) 
   private $CatalogedByID; // INTEGER 
   private $AddressOfRecordID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $DivisionID; // INTEGER 
   private $ReceivedFromOrganizationID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' ExchangeInID, TimestampCreated, TimestampModified, Version, DescriptionOfMaterial, DiscardCount, DistributeCount, ExchangeDate, NonSpecimenCount, Number1, Number2, QuantityExchanged, Remarks, ReturnCount, SrcGeography, SrcTaxonomy, Text1, Text2, TypeCount, YesNo1, YesNo2, CatalogedByID, AddressOfRecordID, ModifiedByAgentID, CreatedByAgentID, DivisionID, ReceivedFromOrganizationID, ';
   const PKFIELDLIST = ' ExchangeInID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'ExchangeInID'  ) ;
   private $allFieldsArray = array( 0 => 'ExchangeInID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'DescriptionOfMaterial' , 5 => 'DiscardCount' , 6 => 'DistributeCount' , 7 => 'ExchangeDate' , 8 => 'NonSpecimenCount' , 9 => 'Number1' , 10 => 'Number2' , 11 => 'QuantityExchanged' , 12 => 'Remarks' , 13 => 'ReturnCount' , 14 => 'SrcGeography' , 15 => 'SrcTaxonomy' , 16 => 'Text1' , 17 => 'Text2' , 18 => 'TypeCount' , 19 => 'YesNo1' , 20 => 'YesNo2' , 21 => 'CatalogedByID' , 22 => 'AddressOfRecordID' , 23 => 'ModifiedByAgentID' , 24 => 'CreatedByAgentID' , 25 => 'DivisionID' , 26 => 'ReceivedFromOrganizationID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'DescriptionOfMaterial' , 7 => 'ExchangeDate' , 21 => 'CatalogedByID' , 22 => 'AddressOfRecordID' , 23 => 'ModifiedByAgentID' , 24 => 'CreatedByAgentID' , 25 => 'DivisionID' , 26 => 'ReceivedFromOrganizationID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_exchangein(){
       $this->ExchangeInID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->DescriptionOfMaterial = '';
       $this->DiscardCount = '';
       $this->DistributeCount = '';
       $this->ExchangeDate = '';
       $this->NonSpecimenCount = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->QuantityExchanged = '';
       $this->Remarks = '';
       $this->ReturnCount = '';
       $this->SrcGeography = '';
       $this->SrcTaxonomy = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->TypeCount = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->CatalogedByID = '';
       $this->AddressOfRecordID = '';
       $this->ModifiedByAgentID = '';
       $this->CreatedByAgentID = '';
       $this->DivisionID = '';
       $this->ReceivedFromOrganizationID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='ExchangeInID') { $returnvalue = $this->setExchangeInID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='DescriptionOfMaterial') { $returnvalue = $this->setDescriptionOfMaterial($value); } 
             if ($fieldname=='DiscardCount') { $returnvalue = $this->setDiscardCount($value); } 
             if ($fieldname=='DistributeCount') { $returnvalue = $this->setDistributeCount($value); } 
             if ($fieldname=='ExchangeDate') { $returnvalue = $this->setExchangeDate($value); } 
             if ($fieldname=='NonSpecimenCount') { $returnvalue = $this->setNonSpecimenCount($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='QuantityExchanged') { $returnvalue = $this->setQuantityExchanged($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='ReturnCount') { $returnvalue = $this->setReturnCount($value); } 
             if ($fieldname=='SrcGeography') { $returnvalue = $this->setSrcGeography($value); } 
             if ($fieldname=='SrcTaxonomy') { $returnvalue = $this->setSrcTaxonomy($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='TypeCount') { $returnvalue = $this->setTypeCount($value); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); } 
             if ($fieldname=='CatalogedByID') { $returnvalue = $this->setCatalogedByID($value); } 
             if ($fieldname=='AddressOfRecordID') { $returnvalue = $this->setAddressOfRecordID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->setDivisionID($value); } 
             if ($fieldname=='ReceivedFromOrganizationID') { $returnvalue = $this->setReceivedFromOrganizationID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='ExchangeInID') { $returnvalue = $this->getExchangeInID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='DescriptionOfMaterial') { $returnvalue = $this->getDescriptionOfMaterial(); } 
             if ($fieldname=='DiscardCount') { $returnvalue = $this->getDiscardCount(); } 
             if ($fieldname=='DistributeCount') { $returnvalue = $this->getDistributeCount(); } 
             if ($fieldname=='ExchangeDate') { $returnvalue = $this->getExchangeDate(); } 
             if ($fieldname=='NonSpecimenCount') { $returnvalue = $this->getNonSpecimenCount(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='QuantityExchanged') { $returnvalue = $this->getQuantityExchanged(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='ReturnCount') { $returnvalue = $this->getReturnCount(); } 
             if ($fieldname=='SrcGeography') { $returnvalue = $this->getSrcGeography(); } 
             if ($fieldname=='SrcTaxonomy') { $returnvalue = $this->getSrcTaxonomy(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='TypeCount') { $returnvalue = $this->getTypeCount(); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); } 
             if ($fieldname=='CatalogedByID') { $returnvalue = $this->getCatalogedByID(); } 
             if ($fieldname=='AddressOfRecordID') { $returnvalue = $this->getAddressOfRecordID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->getDivisionID(); } 
             if ($fieldname=='ReceivedFromOrganizationID') { $returnvalue = $this->getReceivedFromOrganizationID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*ExchangeInID*/
   public function getExchangeInID() {
       if ($this->ExchangeInID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ExchangeInID));
       }
   }
   public function setExchangeInID($ExchangeInID) {
       if (strlen(preg_replace('/[^0-9]/','',$ExchangeInID)) > huh_exchangein::EXCHANGEINID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ExchangeInID = trim($ExchangeInID);
       if (!ctype_digit(strval($ExchangeInID)) && trim(strval($ExchangeInID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ExchangeInID = $this->l_addslashes($ExchangeInID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_exchangein::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_exchangein::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_exchangein::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*DescriptionOfMaterial*/
   public function getDescriptionOfMaterial() {
       if ($this->DescriptionOfMaterial==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DescriptionOfMaterial));
       }
   }
   public function setDescriptionOfMaterial($DescriptionOfMaterial) {
       if (strlen($DescriptionOfMaterial) > huh_exchangein::DESCRIPTIONOFMATERIAL_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DescriptionOfMaterial = $this->l_addslashes($DescriptionOfMaterial);
       $this->dirty = true;
   }
/*DiscardCount*/
   public function getDiscardCount() {
       if ($this->DiscardCount==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DiscardCount));
       }
   }
   public function setDiscardCount($DiscardCount) {
       if (strlen($DiscardCount) > huh_exchangein::DISCARDCOUNT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DiscardCount = $this->l_addslashes($DiscardCount);
       $this->dirty = true;
   }
/*DistributeCount*/
   public function getDistributeCount() {
       if ($this->DistributeCount==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DistributeCount));
       }
   }
   public function setDistributeCount($DistributeCount) {
       if (strlen($DistributeCount) > huh_exchangein::DISTRIBUTECOUNT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DistributeCount = $this->l_addslashes($DistributeCount);
       $this->dirty = true;
   }
/*ExchangeDate*/
   public function getExchangeDate() {
       if ($this->ExchangeDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ExchangeDate));
       }
   }
   public function setExchangeDate($ExchangeDate) {
       if (strlen($ExchangeDate) > huh_exchangein::EXCHANGEDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ExchangeDate = $this->l_addslashes($ExchangeDate);
       $this->dirty = true;
   }
/*NonSpecimenCount*/
   public function getNonSpecimenCount() {
       if ($this->NonSpecimenCount==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NonSpecimenCount));
       }
   }
   public function setNonSpecimenCount($NonSpecimenCount) {
       if (strlen($NonSpecimenCount) > huh_exchangein::NONSPECIMENCOUNT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->NonSpecimenCount = $this->l_addslashes($NonSpecimenCount);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen($Number1) > huh_exchangein::NUMBER1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen($Number2) > huh_exchangein::NUMBER2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*QuantityExchanged*/
   public function getQuantityExchanged() {
       if ($this->QuantityExchanged==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->QuantityExchanged));
       }
   }
   public function setQuantityExchanged($QuantityExchanged) {
       if (strlen($QuantityExchanged) > huh_exchangein::QUANTITYEXCHANGED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->QuantityExchanged = $this->l_addslashes($QuantityExchanged);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_exchangein::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*ReturnCount*/
   public function getReturnCount() {
       if ($this->ReturnCount==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ReturnCount));
       }
   }
   public function setReturnCount($ReturnCount) {
       if (strlen($ReturnCount) > huh_exchangein::RETURNCOUNT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ReturnCount = $this->l_addslashes($ReturnCount);
       $this->dirty = true;
   }
/*SrcGeography*/
   public function getSrcGeography() {
       if ($this->SrcGeography==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SrcGeography));
       }
   }
   public function setSrcGeography($SrcGeography) {
       if (strlen($SrcGeography) > huh_exchangein::SRCGEOGRAPHY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->SrcGeography = $this->l_addslashes($SrcGeography);
       $this->dirty = true;
   }
/*SrcTaxonomy*/
   public function getSrcTaxonomy() {
       if ($this->SrcTaxonomy==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SrcTaxonomy));
       }
   }
   public function setSrcTaxonomy($SrcTaxonomy) {
       if (strlen($SrcTaxonomy) > huh_exchangein::SRCTAXONOMY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->SrcTaxonomy = $this->l_addslashes($SrcTaxonomy);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_exchangein::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_exchangein::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*TypeCount*/
   public function getTypeCount() {
       if ($this->TypeCount==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TypeCount));
       }
   }
   public function setTypeCount($TypeCount) {
       if (strlen($TypeCount) > huh_exchangein::TYPECOUNT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TypeCount = $this->l_addslashes($TypeCount);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_exchangein::YESNO1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_exchangein::YESNO2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*CatalogedByID*/
   public function getCatalogedByID() {
       if ($this->CatalogedByID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CatalogedByID));
       }
   }
   public function setCatalogedByID($CatalogedByID) {
       if (strlen(preg_replace('/[^0-9]/','',$CatalogedByID)) > huh_exchangein::CATALOGEDBYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CatalogedByID = trim($CatalogedByID);
       if (!ctype_digit(strval($CatalogedByID))) {
             throw new Exception("Value must be an integer");
       }
       $this->CatalogedByID = $this->l_addslashes($CatalogedByID);
       $this->dirty = true;
   }
/*AddressOfRecordID*/
   public function getAddressOfRecordID() {
       if ($this->AddressOfRecordID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AddressOfRecordID));
       }
   }
   public function setAddressOfRecordID($AddressOfRecordID) {
       if (strlen(preg_replace('/[^0-9]/','',$AddressOfRecordID)) > huh_exchangein::ADDRESSOFRECORDID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AddressOfRecordID = trim($AddressOfRecordID);
       if (!ctype_digit(strval($AddressOfRecordID)) && trim(strval($AddressOfRecordID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AddressOfRecordID = $this->l_addslashes($AddressOfRecordID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_exchangein::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_exchangein::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*DivisionID*/
   public function getDivisionID() {
       if ($this->DivisionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DivisionID));
       }
   }
   public function setDivisionID($DivisionID) {
       if (strlen(preg_replace('/[^0-9]/','',$DivisionID)) > huh_exchangein::DIVISIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DivisionID = trim($DivisionID);
       if (!ctype_digit(strval($DivisionID))) {
             throw new Exception("Value must be an integer");
       }
       $this->DivisionID = $this->l_addslashes($DivisionID);
       $this->dirty = true;
   }
/*ReceivedFromOrganizationID*/
   public function getReceivedFromOrganizationID() {
       if ($this->ReceivedFromOrganizationID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ReceivedFromOrganizationID));
       }
   }
   public function setReceivedFromOrganizationID($ReceivedFromOrganizationID) {
       if (strlen(preg_replace('/[^0-9]/','',$ReceivedFromOrganizationID)) > huh_exchangein::RECEIVEDFROMORGANIZATIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ReceivedFromOrganizationID = trim($ReceivedFromOrganizationID);
       if (!ctype_digit(strval($ReceivedFromOrganizationID))) {
             throw new Exception("Value must be an integer");
       }
       $this->ReceivedFromOrganizationID = $this->l_addslashes($ReceivedFromOrganizationID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getExchangeInID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['ExchangeInID'] = $this->getExchangeInID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_ExchangeInIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_DescriptionOfMaterialMYSQLI_TYPE = 's';
  const C_DiscardCountMYSQLI_TYPE = 'i';
  const C_DistributeCountMYSQLI_TYPE = 'i';
  const C_ExchangeDateMYSQLI_TYPE = 's';
  const C_NonSpecimenCountMYSQLI_TYPE = 'i';
  const C_Number1MYSQLI_TYPE = 's';
  const C_Number2MYSQLI_TYPE = 's';
  const C_QuantityExchangedMYSQLI_TYPE = 'i';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_ReturnCountMYSQLI_TYPE = 'i';
  const C_SrcGeographyMYSQLI_TYPE = 's';
  const C_SrcTaxonomyMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_TypeCountMYSQLI_TYPE = 'i';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_CatalogedByIDMYSQLI_TYPE = 'i';
  const C_AddressOfRecordIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_DivisionIDMYSQLI_TYPE = 'i';
  const C_ReceivedFromOrganizationIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='ExchangeInID') { $retval = self::C_ExchangeInIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='DescriptionOfMaterial') { $retval = self::C_DescriptionOfMaterialMYSQLI_TYPE; }
      if ($aFieldname=='DiscardCount') { $retval = self::C_DiscardCountMYSQLI_TYPE; }
      if ($aFieldname=='DistributeCount') { $retval = self::C_DistributeCountMYSQLI_TYPE; }
      if ($aFieldname=='ExchangeDate') { $retval = self::C_ExchangeDateMYSQLI_TYPE; }
      if ($aFieldname=='NonSpecimenCount') { $retval = self::C_NonSpecimenCountMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='QuantityExchanged') { $retval = self::C_QuantityExchangedMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='ReturnCount') { $retval = self::C_ReturnCountMYSQLI_TYPE; }
      if ($aFieldname=='SrcGeography') { $retval = self::C_SrcGeographyMYSQLI_TYPE; }
      if ($aFieldname=='SrcTaxonomy') { $retval = self::C_SrcTaxonomyMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='TypeCount') { $retval = self::C_TypeCountMYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='CatalogedByID') { $retval = self::C_CatalogedByIDMYSQLI_TYPE; }
      if ($aFieldname=='AddressOfRecordID') { $retval = self::C_AddressOfRecordIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='DivisionID') { $retval = self::C_DivisionIDMYSQLI_TYPE; }
      if ($aFieldname=='ReceivedFromOrganizationID') { $retval = self::C_ReceivedFromOrganizationIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setExchangeInID($pk[ExchangeInID]);
             } else { ;
                 $this->setExchangeInID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->ExchangeInID != NULL) {
           $sql = 'SELECT ExchangeInID, TimestampCreated, TimestampModified, Version, DescriptionOfMaterial, DiscardCount, DistributeCount, ExchangeDate, NonSpecimenCount, Number1, Number2, QuantityExchanged, Remarks, ReturnCount, SrcGeography, SrcTaxonomy, Text1, Text2, TypeCount, YesNo1, YesNo2, CatalogedByID, AddressOfRecordID, ModifiedByAgentID, CreatedByAgentID, DivisionID, ReceivedFromOrganizationID FROM exchangein WHERE ExchangeInID = '.$this->ExchangeInID ;

           $preparesql = 'SELECT ExchangeInID, TimestampCreated, TimestampModified, Version, DescriptionOfMaterial, DiscardCount, DistributeCount, ExchangeDate, NonSpecimenCount, Number1, Number2, QuantityExchanged, Remarks, ReturnCount, SrcGeography, SrcTaxonomy, Text1, Text2, TypeCount, YesNo1, YesNo2, CatalogedByID, AddressOfRecordID, ModifiedByAgentID, CreatedByAgentID, DivisionID, ReceivedFromOrganizationID FROM exchangein WHERE ExchangeInID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->ExchangeInID);
              $statement->execute();
              $statement->bind_result($this->ExchangeInID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->DescriptionOfMaterial, $this->DiscardCount, $this->DistributeCount, $this->ExchangeDate, $this->NonSpecimenCount, $this->Number1, $this->Number2, $this->QuantityExchanged, $this->Remarks, $this->ReturnCount, $this->SrcGeography, $this->SrcTaxonomy, $this->Text1, $this->Text2, $this->TypeCount, $this->YesNo1, $this->YesNo2, $this->CatalogedByID, $this->AddressOfRecordID, $this->ModifiedByAgentID, $this->CreatedByAgentID, $this->DivisionID, $this->ReceivedFromOrganizationID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->ExchangeInID!= NULL) {
            $sql  = 'UPDATE  exchangein SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", DescriptionOfMaterial = ? ";
            $sql .=  ", DiscardCount = ? ";
            $sql .=  ", DistributeCount = ? ";
            $sql .=  ", ExchangeDate = ? ";
            $sql .=  ", NonSpecimenCount = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", QuantityExchanged = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", ReturnCount = ? ";
            $sql .=  ", SrcGeography = ? ";
            $sql .=  ", SrcTaxonomy = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", TypeCount = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", CatalogedByID = ? ";
            $sql .=  ", AddressOfRecordID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", DivisionID = ? ";
            $sql .=  ", ReceivedFromOrganizationID = ? ";

            $sql .= "  WHERE ExchangeInID = ? ";
        } else {
            $sql  = 'INSERT INTO exchangein ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( ExchangeInID ,  TimestampCreated ,  TimestampModified ,  Version ,  DescriptionOfMaterial ,  DiscardCount ,  DistributeCount ,  ExchangeDate ,  NonSpecimenCount ,  Number1 ,  Number2 ,  QuantityExchanged ,  Remarks ,  ReturnCount ,  SrcGeography ,  SrcTaxonomy ,  Text1 ,  Text2 ,  TypeCount ,  YesNo1 ,  YesNo2 ,  CatalogedByID ,  AddressOfRecordID ,  ModifiedByAgentID ,  CreatedByAgentID ,  DivisionID ,  ReceivedFromOrganizationID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->ExchangeInID!= NULL ) {
              $statement->bind_param("issisiisissisissssiiiiiiiiii", $this->ExchangeInID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->DescriptionOfMaterial , $this->DiscardCount , $this->DistributeCount , $this->ExchangeDate , $this->NonSpecimenCount , $this->Number1 , $this->Number2 , $this->QuantityExchanged , $this->Remarks , $this->ReturnCount , $this->SrcGeography , $this->SrcTaxonomy , $this->Text1 , $this->Text2 , $this->TypeCount , $this->YesNo1 , $this->YesNo2 , $this->CatalogedByID , $this->AddressOfRecordID , $this->ModifiedByAgentID , $this->CreatedByAgentID , $this->DivisionID , $this->ReceivedFromOrganizationID , $this->ExchangeInID );
           } else { 
              $statement->bind_param("issisiisissisissssiiiiiiiii", $this->ExchangeInID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->DescriptionOfMaterial , $this->DiscardCount , $this->DistributeCount , $this->ExchangeDate , $this->NonSpecimenCount , $this->Number1 , $this->Number2 , $this->QuantityExchanged , $this->Remarks , $this->ReturnCount , $this->SrcGeography , $this->SrcTaxonomy , $this->Text1 , $this->Text2 , $this->TypeCount , $this->YesNo1 , $this->YesNo2 , $this->CatalogedByID , $this->AddressOfRecordID , $this->ModifiedByAgentID , $this->CreatedByAgentID , $this->DivisionID , $this->ReceivedFromOrganizationID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->ExchangeInID != NULL) {
           $sql = 'SELECT ExchangeInID, TimestampCreated, TimestampModified, Version, DescriptionOfMaterial, DiscardCount, DistributeCount, ExchangeDate, NonSpecimenCount, Number1, Number2, QuantityExchanged, Remarks, ReturnCount, SrcGeography, SrcTaxonomy, Text1, Text2, TypeCount, YesNo1, YesNo2, CatalogedByID, AddressOfRecordID, ModifiedByAgentID, CreatedByAgentID, DivisionID, ReceivedFromOrganizationID FROM exchangein WHERE ExchangeInID = "'.$this->ExchangeInID.'"  ' ;

           $preparedsql = 'SELECT  FROM exchangein WHERE  and ExchangeInID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issisiisissisissssiiiiiiiii", $this->ExchangeInID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->DescriptionOfMaterial, $this->DiscardCount, $this->DistributeCount, $this->ExchangeDate, $this->NonSpecimenCount, $this->Number1, $this->Number2, $this->QuantityExchanged, $this->Remarks, $this->ReturnCount, $this->SrcGeography, $this->SrcTaxonomy, $this->Text1, $this->Text2, $this->TypeCount, $this->YesNo1, $this->YesNo2, $this->CatalogedByID, $this->AddressOfRecordID, $this->ModifiedByAgentID, $this->CreatedByAgentID, $this->DivisionID, $this->ReceivedFromOrganizationID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM exchangein WHERE  and ExchangeInID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issisiisissisissssiiiiiiiii", $this->ExchangeInID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->DescriptionOfMaterial, $this->DiscardCount, $this->DistributeCount, $this->ExchangeDate, $this->NonSpecimenCount, $this->Number1, $this->Number2, $this->QuantityExchanged, $this->Remarks, $this->ReturnCount, $this->SrcGeography, $this->SrcTaxonomy, $this->Text1, $this->Text2, $this->TypeCount, $this->YesNo1, $this->YesNo2, $this->CatalogedByID, $this->AddressOfRecordID, $this->ModifiedByAgentID, $this->CreatedByAgentID, $this->DivisionID, $this->ReceivedFromOrganizationID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->ExchangeInID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM exchangein';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT ExchangeInID FROM exchangein $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_exchangein();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: CatalogedByID
      $t = new agent();
      $t->load(getCatalogedByID());
      $returnvalue[CatalogedByID] = $t;
       // fk: AddressOfRecordID
      $t = new addressofrecord();
      $t->load(getAddressOfRecordID());
      $returnvalue[AddressOfRecordID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: DivisionID
      $t = new division();
      $t->load(getDivisionID());
      $returnvalue[DivisionID] = $t;
       // fk: ReceivedFromOrganizationID
      $t = new agent();
      $t->load(getReceivedFromOrganizationID());
      $returnvalue[ReceivedFromOrganizationID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT ExchangeInID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(DescriptionOfMaterial,'') || ' ' || IFNULL(DiscardCount,'') || ' ' || IFNULL(DistributeCount,'') || ' ' || IFNULL(ExchangeDate,'') || ' ' || IFNULL(NonSpecimenCount,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(QuantityExchanged,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(ReturnCount,'') || ' ' || IFNULL(SrcGeography,'') || ' ' || IFNULL(SrcTaxonomy,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(TypeCount,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(CatalogedByID,'') || ' ' || IFNULL(AddressOfRecordID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(DivisionID,'') || ' ' || IFNULL(ReceivedFromOrganizationID,'')) FROM exchangein order by DescriptionOfMaterial, ExchangeDate, CatalogedByID, AddressOfRecordID, ModifiedByAgentID, CreatedByAgentID, DivisionID, ReceivedFromOrganizationID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM exchangein order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByDescriptionOfMaterial($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ExchangeInID FROM exchangein WHERE DescriptionOfMaterial $operator '$searchTerm'";
        $preparedsql = "SELECT ExchangeInID FROM exchangein WHERE DescriptionOfMaterial $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_exchangein();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByExchangeDate($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ExchangeInID FROM exchangein WHERE ExchangeDate $operator '$searchTerm'";
        $preparedsql = "SELECT ExchangeInID FROM exchangein WHERE ExchangeDate $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_exchangein();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCatalogedByID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ExchangeInID FROM exchangein WHERE CatalogedByID $operator '$searchTerm'";
        $preparedsql = "SELECT ExchangeInID FROM exchangein WHERE CatalogedByID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_exchangein();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAddressOfRecordID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ExchangeInID FROM exchangein WHERE AddressOfRecordID $operator '$searchTerm'";
        $preparedsql = "SELECT ExchangeInID FROM exchangein WHERE AddressOfRecordID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_exchangein();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ExchangeInID FROM exchangein WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT ExchangeInID FROM exchangein WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_exchangein();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ExchangeInID FROM exchangein WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT ExchangeInID FROM exchangein WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_exchangein();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDivisionID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ExchangeInID FROM exchangein WHERE DivisionID $operator '$searchTerm'";
        $preparedsql = "SELECT ExchangeInID FROM exchangein WHERE DivisionID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_exchangein();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByReceivedFromOrganizationID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ExchangeInID FROM exchangein WHERE ReceivedFromOrganizationID $operator '$searchTerm'";
        $preparedsql = "SELECT ExchangeInID FROM exchangein WHERE ReceivedFromOrganizationID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_exchangein();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctDescriptionOfMaterial($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DescriptionOfMaterial ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DescriptionOfMaterial FROM exchangein group by DescriptionOfMaterial order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DescriptionOfMaterial=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctExchangeDate($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ExchangeDate ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ExchangeDate FROM exchangein group by ExchangeDate order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ExchangeDate=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCatalogedByID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CatalogedByID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CatalogedByID FROM exchangein group by CatalogedByID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CatalogedByID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAddressOfRecordID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AddressOfRecordID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AddressOfRecordID FROM exchangein group by AddressOfRecordID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AddressOfRecordID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM exchangein group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM exchangein group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDivisionID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DivisionID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DivisionID FROM exchangein group by DivisionID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DivisionID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctReceivedFromOrganizationID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ReceivedFromOrganizationID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ReceivedFromOrganizationID FROM exchangein group by ReceivedFromOrganizationID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ReceivedFromOrganizationID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'DescriptionOfMaterial':
             $returnvalue = $this->selectDistinctDescriptionOfMaterial($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ExchangeDate':
             $returnvalue = $this->selectDistinctExchangeDate($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CatalogedByID':
             $returnvalue = $this->selectDistinctCatalogedByID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AddressOfRecordID':
             $returnvalue = $this->selectDistinctAddressOfRecordID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DivisionID':
             $returnvalue = $this->selectDistinctDivisionID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ReceivedFromOrganizationID':
             $returnvalue = $this->selectDistinctReceivedFromOrganizationID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the exchangein.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_exchangeinView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_exchangein <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_exchangein::EXCHANGEINID.": ".$model->getExchangeInID()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::DESCRIPTIONOFMATERIAL.": ".$model->getDescriptionOfMaterial()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::DISCARDCOUNT.": ".$model->getDiscardCount()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::DISTRIBUTECOUNT.": ".$model->getDistributeCount()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::EXCHANGEDATE.": ".$model->getExchangeDate()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::NONSPECIMENCOUNT.": ".$model->getNonSpecimenCount()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::QUANTITYEXCHANGED.": ".$model->getQuantityExchanged()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::RETURNCOUNT.": ".$model->getReturnCount()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::SRCGEOGRAPHY.": ".$model->getSrcGeography()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::SRCTAXONOMY.": ".$model->getSrcTaxonomy()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::TYPECOUNT.": ".$model->getTypeCount()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::CATALOGEDBYID.": ".$model->getCatalogedByID()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::ADDRESSOFRECORDID.": ".$model->getAddressOfRecordID()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::DIVISIONID.": ".$model->getDivisionID()."</li>\n";
       $returnvalue .= "<li>".huh_exchangein::RECEIVEDFROMORGANIZATIONID.": ".$model->getReceivedFromOrganizationID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCatalogedByID() != '') { 
               $t_agent->load($model->getCatalogedByID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>addressofrecord</li>";
           $t_addressofrecord = new huh_addressofrecord();
           $t_addressofrecordView = new huh_addressofrecordView();
           $t_addressofrecordView->setModel($t_addressofrecord);
           if ($model->getAddressOfRecordID() != '') { 
               $t_addressofrecord->load($model->getAddressOfRecordID());
               $returnvalue .= $t_addressofrecordView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>division</li>";
           $t_division = new huh_division();
           $t_divisionView = new huh_divisionView();
           $t_divisionView->setModel($t_division);
           if ($model->getDivisionID() != '') { 
               $t_division->load($model->getDivisionID());
               $returnvalue .= $t_divisionView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getReceivedFromOrganizationID() != '') { 
               $t_agent->load($model->getReceivedFromOrganizationID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_exchangein::EXCHANGEINID.': "'.$model->getExchangeInID().'",';
       $returnvalue .= '"'.huh_exchangein::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_exchangein::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_exchangein::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_exchangein::DESCRIPTIONOFMATERIAL.': "'.$model->getDescriptionOfMaterial().'",';
       $returnvalue .= '"'.huh_exchangein::DISCARDCOUNT.': "'.$model->getDiscardCount().'",';
       $returnvalue .= '"'.huh_exchangein::DISTRIBUTECOUNT.': "'.$model->getDistributeCount().'",';
       $returnvalue .= '"'.huh_exchangein::EXCHANGEDATE.': "'.$model->getExchangeDate().'",';
       $returnvalue .= '"'.huh_exchangein::NONSPECIMENCOUNT.': "'.$model->getNonSpecimenCount().'",';
       $returnvalue .= '"'.huh_exchangein::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_exchangein::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_exchangein::QUANTITYEXCHANGED.': "'.$model->getQuantityExchanged().'",';
       $returnvalue .= '"'.huh_exchangein::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_exchangein::RETURNCOUNT.': "'.$model->getReturnCount().'",';
       $returnvalue .= '"'.huh_exchangein::SRCGEOGRAPHY.': "'.$model->getSrcGeography().'",';
       $returnvalue .= '"'.huh_exchangein::SRCTAXONOMY.': "'.$model->getSrcTaxonomy().'",';
       $returnvalue .= '"'.huh_exchangein::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_exchangein::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_exchangein::TYPECOUNT.': "'.$model->getTypeCount().'",';
       $returnvalue .= '"'.huh_exchangein::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_exchangein::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_exchangein::CATALOGEDBYID.': "'.$model->getCatalogedByID().'",';
       $returnvalue .= '"'.huh_exchangein::ADDRESSOFRECORDID.': "'.$model->getAddressOfRecordID().'",';
       $returnvalue .= '"'.huh_exchangein::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_exchangein::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_exchangein::DIVISIONID.': "'.$model->getDivisionID().'",';
       $returnvalue .= '"'.huh_exchangein::RECEIVEDFROMORGANIZATIONID.': "'.$model->getReceivedFromOrganizationID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getExchangeInID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getDescriptionOfMaterial()."</td>\n";
       $returnvalue .= "<td>".$model->getDiscardCount()."</td>\n";
       $returnvalue .= "<td>".$model->getDistributeCount()."</td>\n";
       $returnvalue .= "<td>".$model->getExchangeDate()."</td>\n";
       $returnvalue .= "<td>".$model->getNonSpecimenCount()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getQuantityExchanged()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getReturnCount()."</td>\n";
       $returnvalue .= "<td>".$model->getSrcGeography()."</td>\n";
       $returnvalue .= "<td>".$model->getSrcTaxonomy()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getTypeCount()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getCatalogedByID()."</td>\n";
       $returnvalue .= "<td>".$model->getAddressOfRecordID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getDivisionID()."</td>\n";
       $returnvalue .= "<td>".$model->getReceivedFromOrganizationID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_exchangein::EXCHANGEINID."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::DESCRIPTIONOFMATERIAL."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::DISCARDCOUNT."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::DISTRIBUTECOUNT."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::EXCHANGEDATE."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::NONSPECIMENCOUNT."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::QUANTITYEXCHANGED."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::RETURNCOUNT."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::SRCGEOGRAPHY."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::SRCTAXONOMY."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::TYPECOUNT."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::CATALOGEDBYID."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::ADDRESSOFRECORDID."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::DIVISIONID."</th>\n";
       $returnvalue .= "<th>".huh_exchangein::RECEIVEDFROMORGANIZATIONID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_exchangein">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new ExchangeInID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_exchangein::EXCHANGEINID.">EXCHANGEINID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_exchangein::EXCHANGEINID." id=".huh_exchangein::EXCHANGEINID." value='".$model->getExchangeInID()."'  style=' width:".huh_exchangein::EXCHANGEINID_SIZE ."em;  '  maxlength='".huh_exchangein::EXCHANGEINID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_exchangein::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::TIMESTAMPCREATED." id=".huh_exchangein::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_exchangein::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_exchangein::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::TIMESTAMPMODIFIED." id=".huh_exchangein::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_exchangein::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_exchangein::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_exchangein::VERSION." id=".huh_exchangein::VERSION." value='".$model->getVersion()."'  style=' width:".huh_exchangein::VERSION_SIZE ."em;  '  maxlength='".huh_exchangein::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::DESCRIPTIONOFMATERIAL.">DESCRIPTIONOFMATERIAL</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_exchangein::DESCRIPTIONOFMATERIAL." id=".huh_exchangein::DESCRIPTIONOFMATERIAL." >".$model->getDescriptionOfMaterial()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::DISCARDCOUNT.">DISCARDCOUNT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::DISCARDCOUNT." id=".huh_exchangein::DISCARDCOUNT." value='".$model->getDiscardCount()."'  style=' width:".huh_exchangein::DISCARDCOUNT_SIZE ."em;  '  maxlength='".huh_exchangein::DISCARDCOUNT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::DISTRIBUTECOUNT.">DISTRIBUTECOUNT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::DISTRIBUTECOUNT." id=".huh_exchangein::DISTRIBUTECOUNT." value='".$model->getDistributeCount()."'  style=' width:".huh_exchangein::DISTRIBUTECOUNT_SIZE ."em;  '  maxlength='".huh_exchangein::DISTRIBUTECOUNT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::EXCHANGEDATE.">EXCHANGEDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::EXCHANGEDATE." id=".huh_exchangein::EXCHANGEDATE." value='".$model->getExchangeDate()."'  style=' width:".huh_exchangein::EXCHANGEDATE_SIZE ."em;  '  maxlength='".huh_exchangein::EXCHANGEDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::NONSPECIMENCOUNT.">NONSPECIMENCOUNT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::NONSPECIMENCOUNT." id=".huh_exchangein::NONSPECIMENCOUNT." value='".$model->getNonSpecimenCount()."'  style=' width:".huh_exchangein::NONSPECIMENCOUNT_SIZE ."em;  '  maxlength='".huh_exchangein::NONSPECIMENCOUNT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::NUMBER1." id=".huh_exchangein::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_exchangein::NUMBER1_SIZE ."em;  '  maxlength='".huh_exchangein::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::NUMBER2." id=".huh_exchangein::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_exchangein::NUMBER2_SIZE ."em;  '  maxlength='".huh_exchangein::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::QUANTITYEXCHANGED.">QUANTITYEXCHANGED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::QUANTITYEXCHANGED." id=".huh_exchangein::QUANTITYEXCHANGED." value='".$model->getQuantityExchanged()."'  style=' width:".huh_exchangein::QUANTITYEXCHANGED_SIZE ."em;  '  maxlength='".huh_exchangein::QUANTITYEXCHANGED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_exchangein::REMARKS." id=".huh_exchangein::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::RETURNCOUNT.">RETURNCOUNT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::RETURNCOUNT." id=".huh_exchangein::RETURNCOUNT." value='".$model->getReturnCount()."'  style=' width:".huh_exchangein::RETURNCOUNT_SIZE ."em;  '  maxlength='".huh_exchangein::RETURNCOUNT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::SRCGEOGRAPHY.">SRCGEOGRAPHY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::SRCGEOGRAPHY." id=".huh_exchangein::SRCGEOGRAPHY." value='".$model->getSrcGeography()."'  style=' width:".huh_exchangein::SRCGEOGRAPHY_SIZE ."em;  '  maxlength='".huh_exchangein::SRCGEOGRAPHY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::SRCTAXONOMY.">SRCTAXONOMY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::SRCTAXONOMY." id=".huh_exchangein::SRCTAXONOMY." value='".$model->getSrcTaxonomy()."'  style=' width:".huh_exchangein::SRCTAXONOMY_SIZE ."em;  '  maxlength='".huh_exchangein::SRCTAXONOMY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::TEXT1.">TEXT1</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_exchangein::TEXT1." id=".huh_exchangein::TEXT1." >".$model->getText1()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_exchangein::TEXT2." id=".huh_exchangein::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::TYPECOUNT.">TYPECOUNT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::TYPECOUNT." id=".huh_exchangein::TYPECOUNT." value='".$model->getTypeCount()."'  style=' width:".huh_exchangein::TYPECOUNT_SIZE ."em;  '  maxlength='".huh_exchangein::TYPECOUNT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::YESNO1." id=".huh_exchangein::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_exchangein::YESNO1_SIZE ."em;  '  maxlength='".huh_exchangein::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_exchangein::YESNO2." id=".huh_exchangein::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_exchangein::YESNO2_SIZE ."em;  '  maxlength='".huh_exchangein::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::CATALOGEDBYID.">CATALOGEDBYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_exchangein::CATALOGEDBYID." id=".huh_exchangein::CATALOGEDBYID." value='".$model->getCatalogedByID()."'  style=' width:".huh_exchangein::CATALOGEDBYID_SIZE ."em;  '  maxlength='".huh_exchangein::CATALOGEDBYID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::ADDRESSOFRECORDID.">ADDRESSOFRECORDID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_exchangein::ADDRESSOFRECORDID." id=".huh_exchangein::ADDRESSOFRECORDID." value='".$model->getAddressOfRecordID()."'  style=' width:".huh_exchangein::ADDRESSOFRECORDID_SIZE ."em;  '  maxlength='".huh_exchangein::ADDRESSOFRECORDID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_exchangein::MODIFIEDBYAGENTID." id=".huh_exchangein::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_exchangein::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_exchangein::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_exchangein::CREATEDBYAGENTID." id=".huh_exchangein::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_exchangein::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_exchangein::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::DIVISIONID.">DIVISIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_exchangein::DIVISIONID." id=".huh_exchangein::DIVISIONID." value='".$model->getDivisionID()."'  style=' width:".huh_exchangein::DIVISIONID_SIZE ."em;  '  maxlength='".huh_exchangein::DIVISIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_exchangein::RECEIVEDFROMORGANIZATIONID.">RECEIVEDFROMORGANIZATIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_exchangein::RECEIVEDFROMORGANIZATIONID." id=".huh_exchangein::RECEIVEDFROMORGANIZATIONID." value='".$model->getReceivedFromOrganizationID()."'  style=' width:".huh_exchangein::RECEIVEDFROMORGANIZATIONID_SIZE ."em;  '  maxlength='".huh_exchangein::RECEIVEDFROMORGANIZATIONID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_exchangein">';
       $returnvalue .= '<input type=hidden name=ExchangeInID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_exchangein">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>EXCHANGEINID<input type=text name=".huh_exchangein::EXCHANGEINID." id=".huh_exchangein::EXCHANGEINID." value='".$model->getExchangeInID()."'  size='".huh_exchangein::EXCHANGEINID_SIZE ."'  maxlength='".huh_exchangein::EXCHANGEINID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_exchangein::TIMESTAMPCREATED." id=".huh_exchangein::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_exchangein::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_exchangein::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_exchangein::TIMESTAMPMODIFIED." id=".huh_exchangein::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_exchangein::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_exchangein::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_exchangein::VERSION." id=".huh_exchangein::VERSION." value='".$model->getVersion()."'  size='".huh_exchangein::VERSION_SIZE ."'  maxlength='".huh_exchangein::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DESCRIPTIONOFMATERIAL<input type=text name=".huh_exchangein::DESCRIPTIONOFMATERIAL." id=".huh_exchangein::DESCRIPTIONOFMATERIAL." value='".$model->getDescriptionOfMaterial()."'  size='51'  maxlength='".huh_exchangein::DESCRIPTIONOFMATERIAL_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISCARDCOUNT<input type=text name=".huh_exchangein::DISCARDCOUNT." id=".huh_exchangein::DISCARDCOUNT." value='".$model->getDiscardCount()."'  size='".huh_exchangein::DISCARDCOUNT_SIZE ."'  maxlength='".huh_exchangein::DISCARDCOUNT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISTRIBUTECOUNT<input type=text name=".huh_exchangein::DISTRIBUTECOUNT." id=".huh_exchangein::DISTRIBUTECOUNT." value='".$model->getDistributeCount()."'  size='".huh_exchangein::DISTRIBUTECOUNT_SIZE ."'  maxlength='".huh_exchangein::DISTRIBUTECOUNT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>EXCHANGEDATE<input type=text name=".huh_exchangein::EXCHANGEDATE." id=".huh_exchangein::EXCHANGEDATE." value='".$model->getExchangeDate()."'  size='".huh_exchangein::EXCHANGEDATE_SIZE ."'  maxlength='".huh_exchangein::EXCHANGEDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NONSPECIMENCOUNT<input type=text name=".huh_exchangein::NONSPECIMENCOUNT." id=".huh_exchangein::NONSPECIMENCOUNT." value='".$model->getNonSpecimenCount()."'  size='".huh_exchangein::NONSPECIMENCOUNT_SIZE ."'  maxlength='".huh_exchangein::NONSPECIMENCOUNT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_exchangein::NUMBER1." id=".huh_exchangein::NUMBER1." value='".$model->getNumber1()."'  size='".huh_exchangein::NUMBER1_SIZE ."'  maxlength='".huh_exchangein::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_exchangein::NUMBER2." id=".huh_exchangein::NUMBER2." value='".$model->getNumber2()."'  size='".huh_exchangein::NUMBER2_SIZE ."'  maxlength='".huh_exchangein::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>QUANTITYEXCHANGED<input type=text name=".huh_exchangein::QUANTITYEXCHANGED." id=".huh_exchangein::QUANTITYEXCHANGED." value='".$model->getQuantityExchanged()."'  size='".huh_exchangein::QUANTITYEXCHANGED_SIZE ."'  maxlength='".huh_exchangein::QUANTITYEXCHANGED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_exchangein::REMARKS." id=".huh_exchangein::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_exchangein::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RETURNCOUNT<input type=text name=".huh_exchangein::RETURNCOUNT." id=".huh_exchangein::RETURNCOUNT." value='".$model->getReturnCount()."'  size='".huh_exchangein::RETURNCOUNT_SIZE ."'  maxlength='".huh_exchangein::RETURNCOUNT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SRCGEOGRAPHY<input type=text name=".huh_exchangein::SRCGEOGRAPHY." id=".huh_exchangein::SRCGEOGRAPHY." value='".$model->getSrcGeography()."'  size='".huh_exchangein::SRCGEOGRAPHY_SIZE ."'  maxlength='".huh_exchangein::SRCGEOGRAPHY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SRCTAXONOMY<input type=text name=".huh_exchangein::SRCTAXONOMY." id=".huh_exchangein::SRCTAXONOMY." value='".$model->getSrcTaxonomy()."'  size='".huh_exchangein::SRCTAXONOMY_SIZE ."'  maxlength='".huh_exchangein::SRCTAXONOMY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_exchangein::TEXT1." id=".huh_exchangein::TEXT1." value='".$model->getText1()."'  size='51'  maxlength='".huh_exchangein::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_exchangein::TEXT2." id=".huh_exchangein::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_exchangein::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TYPECOUNT<input type=text name=".huh_exchangein::TYPECOUNT." id=".huh_exchangein::TYPECOUNT." value='".$model->getTypeCount()."'  size='".huh_exchangein::TYPECOUNT_SIZE ."'  maxlength='".huh_exchangein::TYPECOUNT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_exchangein::YESNO1." id=".huh_exchangein::YESNO1." value='".$model->getYesNo1()."'  size='".huh_exchangein::YESNO1_SIZE ."'  maxlength='".huh_exchangein::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_exchangein::YESNO2." id=".huh_exchangein::YESNO2." value='".$model->getYesNo2()."'  size='".huh_exchangein::YESNO2_SIZE ."'  maxlength='".huh_exchangein::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CATALOGEDBYID<input type=text name=".huh_exchangein::CATALOGEDBYID." id=".huh_exchangein::CATALOGEDBYID." value='".$model->getCatalogedByID()."'  size='".huh_exchangein::CATALOGEDBYID_SIZE ."'  maxlength='".huh_exchangein::CATALOGEDBYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ADDRESSOFRECORDID<input type=text name=".huh_exchangein::ADDRESSOFRECORDID." id=".huh_exchangein::ADDRESSOFRECORDID." value='".$model->getAddressOfRecordID()."'  size='".huh_exchangein::ADDRESSOFRECORDID_SIZE ."'  maxlength='".huh_exchangein::ADDRESSOFRECORDID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_exchangein::MODIFIEDBYAGENTID." id=".huh_exchangein::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_exchangein::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_exchangein::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_exchangein::CREATEDBYAGENTID." id=".huh_exchangein::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_exchangein::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_exchangein::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DIVISIONID<input type=text name=".huh_exchangein::DIVISIONID." id=".huh_exchangein::DIVISIONID." value='".$model->getDivisionID()."'  size='".huh_exchangein::DIVISIONID_SIZE ."'  maxlength='".huh_exchangein::DIVISIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RECEIVEDFROMORGANIZATIONID<input type=text name=".huh_exchangein::RECEIVEDFROMORGANIZATIONID." id=".huh_exchangein::RECEIVEDFROMORGANIZATIONID." value='".$model->getReceivedFromOrganizationID()."'  size='".huh_exchangein::RECEIVEDFROMORGANIZATIONID_SIZE ."'  maxlength='".huh_exchangein::RECEIVEDFROMORGANIZATIONID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
