<?php
//==============================================================================
//===   loan.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_loan implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const LOANID_SIZE          = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const CURRENTDUEDATE_SIZE  = 12; //DATE
   const DATECLOSED_SIZE      = 12; //DATE
   const DATERECEIVED_SIZE    = 12; //DATE
   const ISCLOSED_SIZE        = 1; //1
   const ISFINANCIALRESPONSIBILITY_SIZE = 1; //1
   const LOANDATE_SIZE        = 12; //DATE
   const LOANNUMBER_SIZE      = 20; //YEAR
   const NUMBER1_SIZE         = 20; //REAL
   const NUMBER2_SIZE         = 20; //REAL
   const ORIGINALDUEDATE_SIZE = 12; //DATE
   const OVERDUENOTISETDATE_SIZE = 12; //DATE
   const PURPOSEOFLOAN_SIZE   = 64; //64
   const RECEIVEDCOMMENTS_SIZE = 255; //255
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const SPECIALCONDITIONS_SIZE = 255; //LONGVARCHAR
   const SRCGEOGRAPHY_SIZE    = 32; //32
   const SRCTAXONOMY_SIZE     = 32; //32
   const TEXT1_SIZE           = 255; //LONGVARCHAR
   const TEXT2_SIZE           = 255; //LONGVARCHAR
   const TEXT3_SIZE           = 32; //32
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const YESNO3_SIZE          = 1; //1
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const DIVISIONID_SIZE      = 11; //INTEGER
   const DISCIPLINEID_SIZE    = 11; //INTEGER
   const ADDRESSOFRECORDID_SIZE = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const LOANINVENTORY_SIZE   = 255; //LONGVARCHAR
    // These constants hold the field names of the table in the database. 
   const LOANID            = 'LoanID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const CURRENTDUEDATE    = 'CurrentDueDate';
   const DATECLOSED        = 'DateClosed';
   const DATERECEIVED      = 'DateReceived';
   const ISCLOSED          = 'IsClosed';
   const ISFINANCIALRESPONSIBILITY = 'IsFinancialResponsibility';
   const LOANDATE          = 'LoanDate';
   const LOANNUMBER        = 'LoanNumber';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const ORIGINALDUEDATE   = 'OriginalDueDate';
   const OVERDUENOTISETDATE = 'OverdueNotiSetDate';
   const PURPOSEOFLOAN     = 'PurposeOfLoan';
   const RECEIVEDCOMMENTS  = 'ReceivedComments';
   const REMARKS           = 'Remarks';
   const SPECIALCONDITIONS = 'SpecialConditions';
   const SRCGEOGRAPHY      = 'SrcGeography';
   const SRCTAXONOMY       = 'SrcTaxonomy';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const TEXT3             = 'Text3';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const YESNO3            = 'YesNo3';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const DIVISIONID        = 'DivisionID';
   const DISCIPLINEID      = 'DisciplineID';
   const ADDRESSOFRECORDID = 'AddressOfRecordID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const LOANINVENTORY     = 'LoanInventory';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $LoanID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['LoanID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $CurrentDueDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CurrentDueDate']), 0, 12);
  $DateClosed = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateClosed']), 0, 12);
  $DateReceived = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateReceived']), 0, 12);
  $IsClosed = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsClosed']), 0, 1);
  $IsFinancialResponsibility = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsFinancialResponsibility']), 0, 1);
  $LoanDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['LoanDate']), 0, 12);
  $LoanNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['LoanNumber']), 0, 20);
  $Number1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number1']), 0, 20);
  $Number2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number2']), 0, 20);
  $OriginalDueDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['OriginalDueDate']), 0, 12);
  $OverdueNotiSetDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['OverdueNotiSetDate']), 0, 12);
  $PurposeOfLoan = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PurposeOfLoan']), 0, 64);
  $ReceivedComments = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ReceivedComments']), 0, 255);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $SpecialConditions = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['SpecialConditions']), 0, 255);
  $SrcGeography = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['SrcGeography']), 0, 32);
  $SrcTaxonomy = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['SrcTaxonomy']), 0, 32);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 255);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 255);
  $Text3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text3']), 0, 32);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $YesNo3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo3']), 0, 1);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $DivisionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DivisionID']), 0, 11);
  $DisciplineID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DisciplineID']), 0, 11);
  $AddressOfRecordID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AddressOfRecordID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $LoanInventory = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['LoanInventory']), 0, 255);
*/

   //---------------------------------------------------------------------------

   private $LoanID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $CurrentDueDate; // DATE 
   private $DateClosed; // DATE 
   private $DateReceived; // DATE 
   private $IsClosed; // BIT(1) 
   private $IsFinancialResponsibility; // BIT(1) 
   private $LoanDate; // DATE 
   private $LoanNumber; // YEAR 
   private $Number1; // REAL 
   private $Number2; // REAL 
   private $OriginalDueDate; // DATE 
   private $OverdueNotiSetDate; // DATE 
   private $PurposeOfLoan; // VARCHAR(64) 
   private $ReceivedComments; // VARCHAR(255) 
   private $Remarks; // LONGVARCHAR 
   private $SpecialConditions; // LONGVARCHAR 
   private $SrcGeography; // VARCHAR(32) 
   private $SrcTaxonomy; // VARCHAR(32) 
   private $Text1; // LONGVARCHAR 
   private $Text2; // LONGVARCHAR 
   private $Text3; // VARCHAR(32) 
   private $YesNo1; // BIT(1) 
   private $YesNo2; // BIT(1) 
   private $YesNo3; // BIT(1) 
   private $ModifiedByAgentID; // INTEGER 
   private $DivisionID; // INTEGER 
   private $DisciplineID; // INTEGER 
   private $AddressOfRecordID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $LoanInventory; // LONGVARCHAR 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' LoanID, TimestampCreated, TimestampModified, Version, CurrentDueDate, DateClosed, DateReceived, IsClosed, IsFinancialResponsibility, LoanDate, LoanNumber, Number1, Number2, OriginalDueDate, OverdueNotiSetDate, PurposeOfLoan, ReceivedComments, Remarks, SpecialConditions, SrcGeography, SrcTaxonomy, Text1, Text2, Text3, YesNo1, YesNo2, YesNo3, ModifiedByAgentID, DivisionID, DisciplineID, AddressOfRecordID, CreatedByAgentID, LoanInventory, ';
   const PKFIELDLIST = ' LoanID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'LoanID'  ) ;
   private $allFieldsArray = array( 0 => 'LoanID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'CurrentDueDate' , 5 => 'DateClosed' , 6 => 'DateReceived' , 7 => 'IsClosed' , 8 => 'IsFinancialResponsibility' , 9 => 'LoanDate' , 10 => 'LoanNumber' , 11 => 'Number1' , 12 => 'Number2' , 13 => 'OriginalDueDate' , 14 => 'OverdueNotiSetDate' , 15 => 'PurposeOfLoan' , 16 => 'ReceivedComments' , 17 => 'Remarks' , 18 => 'SpecialConditions' , 19 => 'SrcGeography' , 20 => 'SrcTaxonomy' , 21 => 'Text1' , 22 => 'Text2' , 23 => 'Text3' , 24 => 'YesNo1' , 25 => 'YesNo2' , 26 => 'YesNo3' , 27 => 'ModifiedByAgentID' , 28 => 'DivisionID' , 29 => 'DisciplineID' , 30 => 'AddressOfRecordID' , 31 => 'CreatedByAgentID' , 32 => 'LoanInventory'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'CurrentDueDate' , 9 => 'LoanDate' , 10 => 'LoanNumber' , 19 => 'SrcGeography' , 27 => 'ModifiedByAgentID' , 28 => 'DivisionID' , 29 => 'DisciplineID' , 30 => 'AddressOfRecordID' , 31 => 'CreatedByAgentID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_loan(){
       $this->LoanID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->CurrentDueDate = '';
       $this->DateClosed = '';
       $this->DateReceived = '';
       $this->IsClosed = '';
       $this->IsFinancialResponsibility = '';
       $this->LoanDate = '';
       $this->LoanNumber = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->OriginalDueDate = '';
       $this->OverdueNotiSetDate = '';
       $this->PurposeOfLoan = '';
       $this->ReceivedComments = '';
       $this->Remarks = '';
       $this->SpecialConditions = '';
       $this->SrcGeography = '';
       $this->SrcTaxonomy = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->Text3 = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->YesNo3 = '';
       $this->ModifiedByAgentID = '';
       $this->DivisionID = '';
       $this->DisciplineID = '';
       $this->AddressOfRecordID = '';
       $this->CreatedByAgentID = '';
       $this->LoanInventory = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='LoanID') { $returnvalue = $this->setLoanID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='CurrentDueDate') { $returnvalue = $this->setCurrentDueDate($value); } 
             if ($fieldname=='DateClosed') { $returnvalue = $this->setDateClosed($value); } 
             if ($fieldname=='DateReceived') { $returnvalue = $this->setDateReceived($value); } 
             if ($fieldname=='IsClosed') { $returnvalue = $this->setIsClosed($value); } 
             if ($fieldname=='IsFinancialResponsibility') { $returnvalue = $this->setIsFinancialResponsibility($value); } 
             if ($fieldname=='LoanDate') { $returnvalue = $this->setLoanDate($value); } 
             if ($fieldname=='LoanNumber') { $returnvalue = $this->setLoanNumber($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='OriginalDueDate') { $returnvalue = $this->setOriginalDueDate($value); } 
             if ($fieldname=='OverdueNotiSetDate') { $returnvalue = $this->setOverdueNotiSetDate($value); } 
             if ($fieldname=='PurposeOfLoan') { $returnvalue = $this->setPurposeOfLoan($value); } 
             if ($fieldname=='ReceivedComments') { $returnvalue = $this->setReceivedComments($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='SpecialConditions') { $returnvalue = $this->setSpecialConditions($value); } 
             if ($fieldname=='SrcGeography') { $returnvalue = $this->setSrcGeography($value); } 
             if ($fieldname=='SrcTaxonomy') { $returnvalue = $this->setSrcTaxonomy($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='Text3') { $returnvalue = $this->setText3($value); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); } 
             if ($fieldname=='YesNo3') { $returnvalue = $this->setYesNo3($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->setDivisionID($value); } 
             if ($fieldname=='DisciplineID') { $returnvalue = $this->setDisciplineID($value); } 
             if ($fieldname=='AddressOfRecordID') { $returnvalue = $this->setAddressOfRecordID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='LoanInventory') { $returnvalue = $this->setLoanInventory($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='LoanID') { $returnvalue = $this->getLoanID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='CurrentDueDate') { $returnvalue = $this->getCurrentDueDate(); } 
             if ($fieldname=='DateClosed') { $returnvalue = $this->getDateClosed(); } 
             if ($fieldname=='DateReceived') { $returnvalue = $this->getDateReceived(); } 
             if ($fieldname=='IsClosed') { $returnvalue = $this->getIsClosed(); } 
             if ($fieldname=='IsFinancialResponsibility') { $returnvalue = $this->getIsFinancialResponsibility(); } 
             if ($fieldname=='LoanDate') { $returnvalue = $this->getLoanDate(); } 
             if ($fieldname=='LoanNumber') { $returnvalue = $this->getLoanNumber(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='OriginalDueDate') { $returnvalue = $this->getOriginalDueDate(); } 
             if ($fieldname=='OverdueNotiSetDate') { $returnvalue = $this->getOverdueNotiSetDate(); } 
             if ($fieldname=='PurposeOfLoan') { $returnvalue = $this->getPurposeOfLoan(); } 
             if ($fieldname=='ReceivedComments') { $returnvalue = $this->getReceivedComments(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='SpecialConditions') { $returnvalue = $this->getSpecialConditions(); } 
             if ($fieldname=='SrcGeography') { $returnvalue = $this->getSrcGeography(); } 
             if ($fieldname=='SrcTaxonomy') { $returnvalue = $this->getSrcTaxonomy(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='Text3') { $returnvalue = $this->getText3(); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); } 
             if ($fieldname=='YesNo3') { $returnvalue = $this->getYesNo3(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->getDivisionID(); } 
             if ($fieldname=='DisciplineID') { $returnvalue = $this->getDisciplineID(); } 
             if ($fieldname=='AddressOfRecordID') { $returnvalue = $this->getAddressOfRecordID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='LoanInventory') { $returnvalue = $this->getLoanInventory(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*LoanID*/
   public function getLoanID() {
       if ($this->LoanID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LoanID));
       }
   }
   public function setLoanID($LoanID) {
       if (strlen(preg_replace('/[^0-9]/','',$LoanID)) > huh_loan::LOANID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $LoanID = trim($LoanID);
       if (!ctype_digit(strval($LoanID)) && trim(strval($LoanID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->LoanID = $this->l_addslashes($LoanID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_loan::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_loan::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_loan::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*CurrentDueDate*/
   public function getCurrentDueDate() {
       if ($this->CurrentDueDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CurrentDueDate));
       }
   }
   public function setCurrentDueDate($CurrentDueDate) {
       if (strlen($CurrentDueDate) > huh_loan::CURRENTDUEDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CurrentDueDate = $this->l_addslashes($CurrentDueDate);
       $this->dirty = true;
   }
/*DateClosed*/
   public function getDateClosed() {
       if ($this->DateClosed==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateClosed));
       }
   }
   public function setDateClosed($DateClosed) {
       if (strlen($DateClosed) > huh_loan::DATECLOSED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateClosed = $this->l_addslashes($DateClosed);
       $this->dirty = true;
   }
/*DateReceived*/
   public function getDateReceived() {
       if ($this->DateReceived==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateReceived));
       }
   }
   public function setDateReceived($DateReceived) {
       if (strlen($DateReceived) > huh_loan::DATERECEIVED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateReceived = $this->l_addslashes($DateReceived);
       $this->dirty = true;
   }
/*IsClosed*/
   public function getIsClosed() {
       if ($this->IsClosed==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsClosed));
       }
   }
   public function setIsClosed($IsClosed) {
       if (strlen($IsClosed) > huh_loan::ISCLOSED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsClosed = $this->l_addslashes($IsClosed);
       $this->dirty = true;
   }
/*IsFinancialResponsibility*/
   public function getIsFinancialResponsibility() {
       if ($this->IsFinancialResponsibility==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsFinancialResponsibility));
       }
   }
   public function setIsFinancialResponsibility($IsFinancialResponsibility) {
       if (strlen($IsFinancialResponsibility) > huh_loan::ISFINANCIALRESPONSIBILITY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsFinancialResponsibility = $this->l_addslashes($IsFinancialResponsibility);
       $this->dirty = true;
   }
/*LoanDate*/
   public function getLoanDate() {
       if ($this->LoanDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LoanDate));
       }
   }
   public function setLoanDate($LoanDate) {
       if (strlen($LoanDate) > huh_loan::LOANDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->LoanDate = $this->l_addslashes($LoanDate);
       $this->dirty = true;
   }
/*LoanNumber*/
   public function getLoanNumber() {
       if ($this->LoanNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LoanNumber));
       }
   }
   public function setLoanNumber($LoanNumber) {
       if (strlen($LoanNumber) > huh_loan::LOANNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->LoanNumber = $this->l_addslashes($LoanNumber);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen($Number1) > huh_loan::NUMBER1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen($Number2) > huh_loan::NUMBER2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*OriginalDueDate*/
   public function getOriginalDueDate() {
       if ($this->OriginalDueDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->OriginalDueDate));
       }
   }
   public function setOriginalDueDate($OriginalDueDate) {
       if (strlen($OriginalDueDate) > huh_loan::ORIGINALDUEDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->OriginalDueDate = $this->l_addslashes($OriginalDueDate);
       $this->dirty = true;
   }
/*OverdueNotiSetDate*/
   public function getOverdueNotiSetDate() {
       if ($this->OverdueNotiSetDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->OverdueNotiSetDate));
       }
   }
   public function setOverdueNotiSetDate($OverdueNotiSetDate) {
       if (strlen($OverdueNotiSetDate) > huh_loan::OVERDUENOTISETDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->OverdueNotiSetDate = $this->l_addslashes($OverdueNotiSetDate);
       $this->dirty = true;
   }
/*PurposeOfLoan*/
   public function getPurposeOfLoan() {
       if ($this->PurposeOfLoan==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PurposeOfLoan));
       }
   }
   public function setPurposeOfLoan($PurposeOfLoan) {
       if (strlen($PurposeOfLoan) > huh_loan::PURPOSEOFLOAN_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PurposeOfLoan = $this->l_addslashes($PurposeOfLoan);
       $this->dirty = true;
   }
/*ReceivedComments*/
   public function getReceivedComments() {
       if ($this->ReceivedComments==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ReceivedComments));
       }
   }
   public function setReceivedComments($ReceivedComments) {
       if (strlen($ReceivedComments) > huh_loan::RECEIVEDCOMMENTS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ReceivedComments = $this->l_addslashes($ReceivedComments);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_loan::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*SpecialConditions*/
   public function getSpecialConditions() {
       if ($this->SpecialConditions==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SpecialConditions));
       }
   }
   public function setSpecialConditions($SpecialConditions) {
       if (strlen($SpecialConditions) > huh_loan::SPECIALCONDITIONS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->SpecialConditions = $this->l_addslashes($SpecialConditions);
       $this->dirty = true;
   }
/*SrcGeography*/
   public function getSrcGeography() {
       if ($this->SrcGeography==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SrcGeography));
       }
   }
   public function setSrcGeography($SrcGeography) {
       if (strlen($SrcGeography) > huh_loan::SRCGEOGRAPHY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->SrcGeography = $this->l_addslashes($SrcGeography);
       $this->dirty = true;
   }
/*SrcTaxonomy*/
   public function getSrcTaxonomy() {
       if ($this->SrcTaxonomy==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SrcTaxonomy));
       }
   }
   public function setSrcTaxonomy($SrcTaxonomy) {
       if (strlen($SrcTaxonomy) > huh_loan::SRCTAXONOMY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->SrcTaxonomy = $this->l_addslashes($SrcTaxonomy);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_loan::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_loan::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*Text3*/
   public function getText3() {
       if ($this->Text3==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text3));
       }
   }
   public function setText3($Text3) {
       if (strlen($Text3) > huh_loan::TEXT3_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text3 = $this->l_addslashes($Text3);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_loan::YESNO1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_loan::YESNO2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*YesNo3*/
   public function getYesNo3() {
       if ($this->YesNo3==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo3));
       }
   }
   public function setYesNo3($YesNo3) {
       if (strlen($YesNo3) > huh_loan::YESNO3_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo3 = $this->l_addslashes($YesNo3);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_loan::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*DivisionID*/
   public function getDivisionID() {
       if ($this->DivisionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DivisionID));
       }
   }
   public function setDivisionID($DivisionID) {
       if (strlen(preg_replace('/[^0-9]/','',$DivisionID)) > huh_loan::DIVISIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DivisionID = trim($DivisionID);
       if (!ctype_digit(strval($DivisionID)) && trim(strval($DivisionID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->DivisionID = $this->l_addslashes($DivisionID);
       $this->dirty = true;
   }
/*DisciplineID*/
   public function getDisciplineID() {
       if ($this->DisciplineID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DisciplineID));
       }
   }
   public function setDisciplineID($DisciplineID) {
       if (strlen(preg_replace('/[^0-9]/','',$DisciplineID)) > huh_loan::DISCIPLINEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DisciplineID = trim($DisciplineID);
       if (!ctype_digit(strval($DisciplineID))) {
             throw new Exception("Value must be an integer");
       }
       $this->DisciplineID = $this->l_addslashes($DisciplineID);
       $this->dirty = true;
   }
/*AddressOfRecordID*/
   public function getAddressOfRecordID() {
       if ($this->AddressOfRecordID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AddressOfRecordID));
       }
   }
   public function setAddressOfRecordID($AddressOfRecordID) {
       if (strlen(preg_replace('/[^0-9]/','',$AddressOfRecordID)) > huh_loan::ADDRESSOFRECORDID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AddressOfRecordID = trim($AddressOfRecordID);
       if (!ctype_digit(strval($AddressOfRecordID)) && trim(strval($AddressOfRecordID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AddressOfRecordID = $this->l_addslashes($AddressOfRecordID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_loan::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*LoanInventory*/
   public function getLoanInventory() {
       if ($this->LoanInventory==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LoanInventory));
       }
   }
   public function setLoanInventory($LoanInventory) {
       if (strlen($LoanInventory) > huh_loan::LOANINVENTORY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->LoanInventory = $this->l_addslashes($LoanInventory);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getLoanID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['LoanID'] = $this->getLoanID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_LoanIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_CurrentDueDateMYSQLI_TYPE = 's';
  const C_DateClosedMYSQLI_TYPE = 's';
  const C_DateReceivedMYSQLI_TYPE = 's';
  const C_IsClosedMYSQLI_TYPE = 'i';
  const C_IsFinancialResponsibilityMYSQLI_TYPE = 'i';
  const C_LoanDateMYSQLI_TYPE = 's';
  const C_LoanNumberMYSQLI_TYPE = 's';
  const C_Number1MYSQLI_TYPE = 's';
  const C_Number2MYSQLI_TYPE = 's';
  const C_OriginalDueDateMYSQLI_TYPE = 's';
  const C_OverdueNotiSetDateMYSQLI_TYPE = 's';
  const C_PurposeOfLoanMYSQLI_TYPE = 's';
  const C_ReceivedCommentsMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_SpecialConditionsMYSQLI_TYPE = 's';
  const C_SrcGeographyMYSQLI_TYPE = 's';
  const C_SrcTaxonomyMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_Text3MYSQLI_TYPE = 's';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_YesNo3MYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_DivisionIDMYSQLI_TYPE = 'i';
  const C_DisciplineIDMYSQLI_TYPE = 'i';
  const C_AddressOfRecordIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_LoanInventoryMYSQLI_TYPE = 's';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='LoanID') { $retval = self::C_LoanIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='CurrentDueDate') { $retval = self::C_CurrentDueDateMYSQLI_TYPE; }
      if ($aFieldname=='DateClosed') { $retval = self::C_DateClosedMYSQLI_TYPE; }
      if ($aFieldname=='DateReceived') { $retval = self::C_DateReceivedMYSQLI_TYPE; }
      if ($aFieldname=='IsClosed') { $retval = self::C_IsClosedMYSQLI_TYPE; }
      if ($aFieldname=='IsFinancialResponsibility') { $retval = self::C_IsFinancialResponsibilityMYSQLI_TYPE; }
      if ($aFieldname=='LoanDate') { $retval = self::C_LoanDateMYSQLI_TYPE; }
      if ($aFieldname=='LoanNumber') { $retval = self::C_LoanNumberMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='OriginalDueDate') { $retval = self::C_OriginalDueDateMYSQLI_TYPE; }
      if ($aFieldname=='OverdueNotiSetDate') { $retval = self::C_OverdueNotiSetDateMYSQLI_TYPE; }
      if ($aFieldname=='PurposeOfLoan') { $retval = self::C_PurposeOfLoanMYSQLI_TYPE; }
      if ($aFieldname=='ReceivedComments') { $retval = self::C_ReceivedCommentsMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='SpecialConditions') { $retval = self::C_SpecialConditionsMYSQLI_TYPE; }
      if ($aFieldname=='SrcGeography') { $retval = self::C_SrcGeographyMYSQLI_TYPE; }
      if ($aFieldname=='SrcTaxonomy') { $retval = self::C_SrcTaxonomyMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='Text3') { $retval = self::C_Text3MYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='YesNo3') { $retval = self::C_YesNo3MYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='DivisionID') { $retval = self::C_DivisionIDMYSQLI_TYPE; }
      if ($aFieldname=='DisciplineID') { $retval = self::C_DisciplineIDMYSQLI_TYPE; }
      if ($aFieldname=='AddressOfRecordID') { $retval = self::C_AddressOfRecordIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='LoanInventory') { $retval = self::C_LoanInventoryMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setLoanID($pk[LoanID]);
             } else { ;
                 $this->setLoanID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->LoanID != NULL) {
           $sql = 'SELECT LoanID, TimestampCreated, TimestampModified, Version, CurrentDueDate, DateClosed, DateReceived, IsClosed, IsFinancialResponsibility, LoanDate, LoanNumber, Number1, Number2, OriginalDueDate, OverdueNotiSetDate, PurposeOfLoan, ReceivedComments, Remarks, SpecialConditions, SrcGeography, SrcTaxonomy, Text1, Text2, Text3, YesNo1, YesNo2, YesNo3, ModifiedByAgentID, DivisionID, DisciplineID, AddressOfRecordID, CreatedByAgentID, LoanInventory FROM loan WHERE LoanID = '.$this->LoanID ;

           $preparesql = 'SELECT LoanID, TimestampCreated, TimestampModified, Version, CurrentDueDate, DateClosed, DateReceived, IsClosed, IsFinancialResponsibility, LoanDate, LoanNumber, Number1, Number2, OriginalDueDate, OverdueNotiSetDate, PurposeOfLoan, ReceivedComments, Remarks, SpecialConditions, SrcGeography, SrcTaxonomy, Text1, Text2, Text3, YesNo1, YesNo2, YesNo3, ModifiedByAgentID, DivisionID, DisciplineID, AddressOfRecordID, CreatedByAgentID, LoanInventory FROM loan WHERE LoanID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->LoanID);
              $statement->execute();
              $statement->bind_result($this->LoanID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CurrentDueDate, $this->DateClosed, $this->DateReceived, $this->IsClosed, $this->IsFinancialResponsibility, $this->LoanDate, $this->LoanNumber, $this->Number1, $this->Number2, $this->OriginalDueDate, $this->OverdueNotiSetDate, $this->PurposeOfLoan, $this->ReceivedComments, $this->Remarks, $this->SpecialConditions, $this->SrcGeography, $this->SrcTaxonomy, $this->Text1, $this->Text2, $this->Text3, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->ModifiedByAgentID, $this->DivisionID, $this->DisciplineID, $this->AddressOfRecordID, $this->CreatedByAgentID, $this->LoanInventory);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->LoanID!= NULL) {
            $sql  = 'UPDATE  loan SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", CurrentDueDate = ? ";
            $sql .=  ", DateClosed = ? ";
            $sql .=  ", DateReceived = ? ";
            $sql .=  ", IsClosed = ? ";
            $sql .=  ", IsFinancialResponsibility = ? ";
            $sql .=  ", LoanDate = ? ";
            $sql .=  ", LoanNumber = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", OriginalDueDate = ? ";
            $sql .=  ", OverdueNotiSetDate = ? ";
            $sql .=  ", PurposeOfLoan = ? ";
            $sql .=  ", ReceivedComments = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", SpecialConditions = ? ";
            $sql .=  ", SrcGeography = ? ";
            $sql .=  ", SrcTaxonomy = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", Text3 = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", YesNo3 = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", DivisionID = ? ";
            $sql .=  ", DisciplineID = ? ";
            $sql .=  ", AddressOfRecordID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", LoanInventory = ? ";

            $sql .= "  WHERE LoanID = ? ";
        } else {
            $sql  = 'INSERT INTO loan ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( LoanID ,  TimestampCreated ,  TimestampModified ,  Version ,  CurrentDueDate ,  DateClosed ,  DateReceived ,  IsClosed ,  IsFinancialResponsibility ,  LoanDate ,  LoanNumber ,  Number1 ,  Number2 ,  OriginalDueDate ,  OverdueNotiSetDate ,  PurposeOfLoan ,  ReceivedComments ,  Remarks ,  SpecialConditions ,  SrcGeography ,  SrcTaxonomy ,  Text1 ,  Text2 ,  Text3 ,  YesNo1 ,  YesNo2 ,  YesNo3 ,  ModifiedByAgentID ,  DivisionID ,  DisciplineID ,  AddressOfRecordID ,  CreatedByAgentID ,  LoanInventory ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->LoanID!= NULL ) {
              $statement->bind_param("ississsiisssssssssssssssiiiiiiiisi", $this->LoanID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CurrentDueDate , $this->DateClosed , $this->DateReceived , $this->IsClosed , $this->IsFinancialResponsibility , $this->LoanDate , $this->LoanNumber , $this->Number1 , $this->Number2 , $this->OriginalDueDate , $this->OverdueNotiSetDate , $this->PurposeOfLoan , $this->ReceivedComments , $this->Remarks , $this->SpecialConditions , $this->SrcGeography , $this->SrcTaxonomy , $this->Text1 , $this->Text2 , $this->Text3 , $this->YesNo1 , $this->YesNo2 , $this->YesNo3 , $this->ModifiedByAgentID , $this->DivisionID , $this->DisciplineID , $this->AddressOfRecordID , $this->CreatedByAgentID , $this->LoanInventory , $this->LoanID );
           } else { 
              $statement->bind_param("ississsiisssssssssssssssiiiiiiiis", $this->LoanID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CurrentDueDate , $this->DateClosed , $this->DateReceived , $this->IsClosed , $this->IsFinancialResponsibility , $this->LoanDate , $this->LoanNumber , $this->Number1 , $this->Number2 , $this->OriginalDueDate , $this->OverdueNotiSetDate , $this->PurposeOfLoan , $this->ReceivedComments , $this->Remarks , $this->SpecialConditions , $this->SrcGeography , $this->SrcTaxonomy , $this->Text1 , $this->Text2 , $this->Text3 , $this->YesNo1 , $this->YesNo2 , $this->YesNo3 , $this->ModifiedByAgentID , $this->DivisionID , $this->DisciplineID , $this->AddressOfRecordID , $this->CreatedByAgentID , $this->LoanInventory );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->LoanID != NULL) {
           $sql = 'SELECT LoanID, TimestampCreated, TimestampModified, Version, CurrentDueDate, DateClosed, DateReceived, IsClosed, IsFinancialResponsibility, LoanDate, LoanNumber, Number1, Number2, OriginalDueDate, OverdueNotiSetDate, PurposeOfLoan, ReceivedComments, Remarks, SpecialConditions, SrcGeography, SrcTaxonomy, Text1, Text2, Text3, YesNo1, YesNo2, YesNo3, ModifiedByAgentID, DivisionID, DisciplineID, AddressOfRecordID, CreatedByAgentID, LoanInventory FROM loan WHERE LoanID = "'.$this->LoanID.'"  ' ;

           $preparedsql = 'SELECT  FROM loan WHERE  and LoanID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississsiisssssssssssssssiiiiiiiis", $this->LoanID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CurrentDueDate, $this->DateClosed, $this->DateReceived, $this->IsClosed, $this->IsFinancialResponsibility, $this->LoanDate, $this->LoanNumber, $this->Number1, $this->Number2, $this->OriginalDueDate, $this->OverdueNotiSetDate, $this->PurposeOfLoan, $this->ReceivedComments, $this->Remarks, $this->SpecialConditions, $this->SrcGeography, $this->SrcTaxonomy, $this->Text1, $this->Text2, $this->Text3, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->ModifiedByAgentID, $this->DivisionID, $this->DisciplineID, $this->AddressOfRecordID, $this->CreatedByAgentID, $this->LoanInventory);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM loan WHERE  and LoanID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississsiisssssssssssssssiiiiiiiis", $this->LoanID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CurrentDueDate, $this->DateClosed, $this->DateReceived, $this->IsClosed, $this->IsFinancialResponsibility, $this->LoanDate, $this->LoanNumber, $this->Number1, $this->Number2, $this->OriginalDueDate, $this->OverdueNotiSetDate, $this->PurposeOfLoan, $this->ReceivedComments, $this->Remarks, $this->SpecialConditions, $this->SrcGeography, $this->SrcTaxonomy, $this->Text1, $this->Text2, $this->Text3, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->ModifiedByAgentID, $this->DivisionID, $this->DisciplineID, $this->AddressOfRecordID, $this->CreatedByAgentID, $this->LoanInventory);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->LoanID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM loan';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT LoanID FROM loan $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_loan();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromloanagent() { 
      // ForeignKey in: loanagent
      $t = new loanagent();
  } 
  public function loadLinkedFromloanattachment() { 
      // ForeignKey in: loanattachment
      $t = new loanattachment();
  } 
  public function loadLinkedFromloanpreparation() { 
      // ForeignKey in: loanpreparation
      $t = new loanpreparation();
  } 
  public function loadLinkedFromshipment() { 
      // ForeignKey in: shipment
      $t = new shipment();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: DivisionID
      $t = new division();
      $t->load(getDivisionID());
      $returnvalue[DivisionID] = $t;
       // fk: DisciplineID
      $t = new discipline();
      $t->load(getDisciplineID());
      $returnvalue[DisciplineID] = $t;
       // fk: AddressOfRecordID
      $t = new addressofrecord();
      $t->load(getAddressOfRecordID());
      $returnvalue[AddressOfRecordID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT LoanID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(CurrentDueDate,'') || ' ' || IFNULL(DateClosed,'') || ' ' || IFNULL(DateReceived,'') || ' ' || IFNULL(IsClosed,'') || ' ' || IFNULL(IsFinancialResponsibility,'') || ' ' || IFNULL(LoanDate,'') || ' ' || IFNULL(LoanNumber,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(OriginalDueDate,'') || ' ' || IFNULL(OverdueNotiSetDate,'') || ' ' || IFNULL(PurposeOfLoan,'') || ' ' || IFNULL(ReceivedComments,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(SpecialConditions,'') || ' ' || IFNULL(SrcGeography,'') || ' ' || IFNULL(SrcTaxonomy,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(Text3,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(YesNo3,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(DivisionID,'') || ' ' || IFNULL(DisciplineID,'') || ' ' || IFNULL(AddressOfRecordID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(LoanInventory,'')) FROM loan order by CurrentDueDate, LoanDate, LoanNumber, SrcGeography, ModifiedByAgentID, DivisionID, DisciplineID, AddressOfRecordID, CreatedByAgentID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM loan order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCurrentDueDate($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanID FROM loan WHERE CurrentDueDate $operator '$searchTerm'";
        $preparedsql = "SELECT LoanID FROM loan WHERE CurrentDueDate $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loan();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByLoanDate($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanID FROM loan WHERE LoanDate $operator '$searchTerm'";
        $preparedsql = "SELECT LoanID FROM loan WHERE LoanDate $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loan();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByLoanNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanID FROM loan WHERE LoanNumber $operator '$searchTerm'";
        $preparedsql = "SELECT LoanID FROM loan WHERE LoanNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loan();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayBySrcGeography($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanID FROM loan WHERE SrcGeography $operator '$searchTerm'";
        $preparedsql = "SELECT LoanID FROM loan WHERE SrcGeography $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loan();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanID FROM loan WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT LoanID FROM loan WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loan();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDivisionID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanID FROM loan WHERE DivisionID $operator '$searchTerm'";
        $preparedsql = "SELECT LoanID FROM loan WHERE DivisionID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loan();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDisciplineID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanID FROM loan WHERE DisciplineID $operator '$searchTerm'";
        $preparedsql = "SELECT LoanID FROM loan WHERE DisciplineID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loan();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAddressOfRecordID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanID FROM loan WHERE AddressOfRecordID $operator '$searchTerm'";
        $preparedsql = "SELECT LoanID FROM loan WHERE AddressOfRecordID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loan();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LoanID FROM loan WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT LoanID FROM loan WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_loan();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCurrentDueDate($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CurrentDueDate ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CurrentDueDate FROM loan group by CurrentDueDate order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CurrentDueDate=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctLoanDate($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' LoanDate ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, LoanDate FROM loan group by LoanDate order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&LoanDate=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctLoanNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' LoanNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, LoanNumber FROM loan group by LoanNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&LoanNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctSrcGeography($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' SrcGeography ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, SrcGeography FROM loan group by SrcGeography order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&SrcGeography=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM loan group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDivisionID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DivisionID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DivisionID FROM loan group by DivisionID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DivisionID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDisciplineID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DisciplineID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DisciplineID FROM loan group by DisciplineID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DisciplineID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAddressOfRecordID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AddressOfRecordID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AddressOfRecordID FROM loan group by AddressOfRecordID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AddressOfRecordID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM loan group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'CurrentDueDate':
             $returnvalue = $this->selectDistinctCurrentDueDate($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'LoanDate':
             $returnvalue = $this->selectDistinctLoanDate($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'LoanNumber':
             $returnvalue = $this->selectDistinctLoanNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'SrcGeography':
             $returnvalue = $this->selectDistinctSrcGeography($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DivisionID':
             $returnvalue = $this->selectDistinctDivisionID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DisciplineID':
             $returnvalue = $this->selectDistinctDisciplineID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AddressOfRecordID':
             $returnvalue = $this->selectDistinctAddressOfRecordID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the loan.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_loanView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_loan <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_loan::LOANID.": ".$model->getLoanID()."</li>\n";
       $returnvalue .= "<li>".huh_loan::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_loan::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_loan::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_loan::CURRENTDUEDATE.": ".$model->getCurrentDueDate()."</li>\n";
       $returnvalue .= "<li>".huh_loan::DATECLOSED.": ".$model->getDateClosed()."</li>\n";
       $returnvalue .= "<li>".huh_loan::DATERECEIVED.": ".$model->getDateReceived()."</li>\n";
       $returnvalue .= "<li>".huh_loan::ISCLOSED.": ".$model->getIsClosed()."</li>\n";
       $returnvalue .= "<li>".huh_loan::ISFINANCIALRESPONSIBILITY.": ".$model->getIsFinancialResponsibility()."</li>\n";
       $returnvalue .= "<li>".huh_loan::LOANDATE.": ".$model->getLoanDate()."</li>\n";
       $returnvalue .= "<li>".huh_loan::LOANNUMBER.": ".$model->getLoanNumber()."</li>\n";
       $returnvalue .= "<li>".huh_loan::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_loan::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_loan::ORIGINALDUEDATE.": ".$model->getOriginalDueDate()."</li>\n";
       $returnvalue .= "<li>".huh_loan::OVERDUENOTISETDATE.": ".$model->getOverdueNotiSetDate()."</li>\n";
       $returnvalue .= "<li>".huh_loan::PURPOSEOFLOAN.": ".$model->getPurposeOfLoan()."</li>\n";
       $returnvalue .= "<li>".huh_loan::RECEIVEDCOMMENTS.": ".$model->getReceivedComments()."</li>\n";
       $returnvalue .= "<li>".huh_loan::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_loan::SPECIALCONDITIONS.": ".$model->getSpecialConditions()."</li>\n";
       $returnvalue .= "<li>".huh_loan::SRCGEOGRAPHY.": ".$model->getSrcGeography()."</li>\n";
       $returnvalue .= "<li>".huh_loan::SRCTAXONOMY.": ".$model->getSrcTaxonomy()."</li>\n";
       $returnvalue .= "<li>".huh_loan::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_loan::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_loan::TEXT3.": ".$model->getText3()."</li>\n";
       $returnvalue .= "<li>".huh_loan::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_loan::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_loan::YESNO3.": ".$model->getYesNo3()."</li>\n";
       $returnvalue .= "<li>".huh_loan::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_loan::DIVISIONID.": ".$model->getDivisionID()."</li>\n";
       $returnvalue .= "<li>".huh_loan::DISCIPLINEID.": ".$model->getDisciplineID()."</li>\n";
       $returnvalue .= "<li>".huh_loan::ADDRESSOFRECORDID.": ".$model->getAddressOfRecordID()."</li>\n";
       $returnvalue .= "<li>".huh_loan::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_loan::LOANINVENTORY.": ".$model->getLoanInventory()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>division</li>";
           $t_division = new huh_division();
           $t_divisionView = new huh_divisionView();
           $t_divisionView->setModel($t_division);
           if ($model->getDivisionID() != '') { 
               $t_division->load($model->getDivisionID());
               $returnvalue .= $t_divisionView->getDetailsView(false);
           }
           $returnvalue .= "<li>discipline</li>";
           $t_discipline = new huh_discipline();
           $t_disciplineView = new huh_disciplineView();
           $t_disciplineView->setModel($t_discipline);
           if ($model->getDisciplineID() != '') { 
               $t_discipline->load($model->getDisciplineID());
               $returnvalue .= $t_disciplineView->getDetailsView(false);
           }
           $returnvalue .= "<li>addressofrecord</li>";
           $t_addressofrecord = new huh_addressofrecord();
           $t_addressofrecordView = new huh_addressofrecordView();
           $t_addressofrecordView->setModel($t_addressofrecord);
           if ($model->getAddressOfRecordID() != '') { 
               $t_addressofrecord->load($model->getAddressOfRecordID());
               $returnvalue .= $t_addressofrecordView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_loan::LOANID.': "'.$model->getLoanID().'",';
       $returnvalue .= '"'.huh_loan::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_loan::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_loan::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_loan::CURRENTDUEDATE.': "'.$model->getCurrentDueDate().'",';
       $returnvalue .= '"'.huh_loan::DATECLOSED.': "'.$model->getDateClosed().'",';
       $returnvalue .= '"'.huh_loan::DATERECEIVED.': "'.$model->getDateReceived().'",';
       $returnvalue .= '"'.huh_loan::ISCLOSED.': "'.$model->getIsClosed().'",';
       $returnvalue .= '"'.huh_loan::ISFINANCIALRESPONSIBILITY.': "'.$model->getIsFinancialResponsibility().'",';
       $returnvalue .= '"'.huh_loan::LOANDATE.': "'.$model->getLoanDate().'",';
       $returnvalue .= '"'.huh_loan::LOANNUMBER.': "'.$model->getLoanNumber().'",';
       $returnvalue .= '"'.huh_loan::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_loan::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_loan::ORIGINALDUEDATE.': "'.$model->getOriginalDueDate().'",';
       $returnvalue .= '"'.huh_loan::OVERDUENOTISETDATE.': "'.$model->getOverdueNotiSetDate().'",';
       $returnvalue .= '"'.huh_loan::PURPOSEOFLOAN.': "'.$model->getPurposeOfLoan().'",';
       $returnvalue .= '"'.huh_loan::RECEIVEDCOMMENTS.': "'.$model->getReceivedComments().'",';
       $returnvalue .= '"'.huh_loan::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_loan::SPECIALCONDITIONS.': "'.$model->getSpecialConditions().'",';
       $returnvalue .= '"'.huh_loan::SRCGEOGRAPHY.': "'.$model->getSrcGeography().'",';
       $returnvalue .= '"'.huh_loan::SRCTAXONOMY.': "'.$model->getSrcTaxonomy().'",';
       $returnvalue .= '"'.huh_loan::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_loan::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_loan::TEXT3.': "'.$model->getText3().'",';
       $returnvalue .= '"'.huh_loan::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_loan::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_loan::YESNO3.': "'.$model->getYesNo3().'",';
       $returnvalue .= '"'.huh_loan::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_loan::DIVISIONID.': "'.$model->getDivisionID().'",';
       $returnvalue .= '"'.huh_loan::DISCIPLINEID.': "'.$model->getDisciplineID().'",';
       $returnvalue .= '"'.huh_loan::ADDRESSOFRECORDID.': "'.$model->getAddressOfRecordID().'",';
       $returnvalue .= '"'.huh_loan::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_loan::LOANINVENTORY.': "'.$model->getLoanInventory().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getLoanID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getCurrentDueDate()."</td>\n";
       $returnvalue .= "<td>".$model->getDateClosed()."</td>\n";
       $returnvalue .= "<td>".$model->getDateReceived()."</td>\n";
       $returnvalue .= "<td>".$model->getIsClosed()."</td>\n";
       $returnvalue .= "<td>".$model->getIsFinancialResponsibility()."</td>\n";
       $returnvalue .= "<td>".$model->getLoanDate()."</td>\n";
       $returnvalue .= "<td>".$model->getLoanNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getOriginalDueDate()."</td>\n";
       $returnvalue .= "<td>".$model->getOverdueNotiSetDate()."</td>\n";
       $returnvalue .= "<td>".$model->getPurposeOfLoan()."</td>\n";
       $returnvalue .= "<td>".$model->getReceivedComments()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getSpecialConditions()."</td>\n";
       $returnvalue .= "<td>".$model->getSrcGeography()."</td>\n";
       $returnvalue .= "<td>".$model->getSrcTaxonomy()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getText3()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo3()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getDivisionID()."</td>\n";
       $returnvalue .= "<td>".$model->getDisciplineID()."</td>\n";
       $returnvalue .= "<td>".$model->getAddressOfRecordID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getLoanInventory()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_loan::LOANID."</th>\n";
       $returnvalue .= "<th>".huh_loan::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_loan::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_loan::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_loan::CURRENTDUEDATE."</th>\n";
       $returnvalue .= "<th>".huh_loan::DATECLOSED."</th>\n";
       $returnvalue .= "<th>".huh_loan::DATERECEIVED."</th>\n";
       $returnvalue .= "<th>".huh_loan::ISCLOSED."</th>\n";
       $returnvalue .= "<th>".huh_loan::ISFINANCIALRESPONSIBILITY."</th>\n";
       $returnvalue .= "<th>".huh_loan::LOANDATE."</th>\n";
       $returnvalue .= "<th>".huh_loan::LOANNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_loan::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_loan::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_loan::ORIGINALDUEDATE."</th>\n";
       $returnvalue .= "<th>".huh_loan::OVERDUENOTISETDATE."</th>\n";
       $returnvalue .= "<th>".huh_loan::PURPOSEOFLOAN."</th>\n";
       $returnvalue .= "<th>".huh_loan::RECEIVEDCOMMENTS."</th>\n";
       $returnvalue .= "<th>".huh_loan::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_loan::SPECIALCONDITIONS."</th>\n";
       $returnvalue .= "<th>".huh_loan::SRCGEOGRAPHY."</th>\n";
       $returnvalue .= "<th>".huh_loan::SRCTAXONOMY."</th>\n";
       $returnvalue .= "<th>".huh_loan::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_loan::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_loan::TEXT3."</th>\n";
       $returnvalue .= "<th>".huh_loan::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_loan::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_loan::YESNO3."</th>\n";
       $returnvalue .= "<th>".huh_loan::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_loan::DIVISIONID."</th>\n";
       $returnvalue .= "<th>".huh_loan::DISCIPLINEID."</th>\n";
       $returnvalue .= "<th>".huh_loan::ADDRESSOFRECORDID."</th>\n";
       $returnvalue .= "<th>".huh_loan::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_loan::LOANINVENTORY."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_loan">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new LoanID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_loan::LOANID.">LOANID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loan::LOANID." id=".huh_loan::LOANID." value='".$model->getLoanID()."'  style=' width:".huh_loan::LOANID_SIZE ."em;  '  maxlength='".huh_loan::LOANID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_loan::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::TIMESTAMPCREATED." id=".huh_loan::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_loan::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_loan::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::TIMESTAMPMODIFIED." id=".huh_loan::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_loan::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_loan::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loan::VERSION." id=".huh_loan::VERSION." value='".$model->getVersion()."'  style=' width:".huh_loan::VERSION_SIZE ."em;  '  maxlength='".huh_loan::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::CURRENTDUEDATE.">CURRENTDUEDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::CURRENTDUEDATE." id=".huh_loan::CURRENTDUEDATE." value='".$model->getCurrentDueDate()."'  style=' width:".huh_loan::CURRENTDUEDATE_SIZE ."em;  '  maxlength='".huh_loan::CURRENTDUEDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::DATECLOSED.">DATECLOSED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::DATECLOSED." id=".huh_loan::DATECLOSED." value='".$model->getDateClosed()."'  style=' width:".huh_loan::DATECLOSED_SIZE ."em;  '  maxlength='".huh_loan::DATECLOSED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::DATERECEIVED.">DATERECEIVED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::DATERECEIVED." id=".huh_loan::DATERECEIVED." value='".$model->getDateReceived()."'  style=' width:".huh_loan::DATERECEIVED_SIZE ."em;  '  maxlength='".huh_loan::DATERECEIVED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::ISCLOSED.">ISCLOSED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::ISCLOSED." id=".huh_loan::ISCLOSED." value='".$model->getIsClosed()."'  style=' width:".huh_loan::ISCLOSED_SIZE ."em;  '  maxlength='".huh_loan::ISCLOSED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::ISFINANCIALRESPONSIBILITY.">ISFINANCIALRESPONSIBILITY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::ISFINANCIALRESPONSIBILITY." id=".huh_loan::ISFINANCIALRESPONSIBILITY." value='".$model->getIsFinancialResponsibility()."'  style=' width:".huh_loan::ISFINANCIALRESPONSIBILITY_SIZE ."em;  '  maxlength='".huh_loan::ISFINANCIALRESPONSIBILITY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::LOANDATE.">LOANDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::LOANDATE." id=".huh_loan::LOANDATE." value='".$model->getLoanDate()."'  style=' width:".huh_loan::LOANDATE_SIZE ."em;  '  maxlength='".huh_loan::LOANDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::LOANNUMBER.">LOANNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::LOANNUMBER." id=".huh_loan::LOANNUMBER." value='".$model->getLoanNumber()."'  style=' width:".huh_loan::LOANNUMBER_SIZE ."em;  '  maxlength='".huh_loan::LOANNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::NUMBER1." id=".huh_loan::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_loan::NUMBER1_SIZE ."em;  '  maxlength='".huh_loan::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::NUMBER2." id=".huh_loan::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_loan::NUMBER2_SIZE ."em;  '  maxlength='".huh_loan::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::ORIGINALDUEDATE.">ORIGINALDUEDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::ORIGINALDUEDATE." id=".huh_loan::ORIGINALDUEDATE." value='".$model->getOriginalDueDate()."'  style=' width:".huh_loan::ORIGINALDUEDATE_SIZE ."em;  '  maxlength='".huh_loan::ORIGINALDUEDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::OVERDUENOTISETDATE.">OVERDUENOTISETDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::OVERDUENOTISETDATE." id=".huh_loan::OVERDUENOTISETDATE." value='".$model->getOverdueNotiSetDate()."'  style=' width:".huh_loan::OVERDUENOTISETDATE_SIZE ."em;  '  maxlength='".huh_loan::OVERDUENOTISETDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::PURPOSEOFLOAN.">PURPOSEOFLOAN</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_loan::PURPOSEOFLOAN." id=".huh_loan::PURPOSEOFLOAN." >".$model->getPurposeOfLoan()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::RECEIVEDCOMMENTS.">RECEIVEDCOMMENTS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_loan::RECEIVEDCOMMENTS." id=".huh_loan::RECEIVEDCOMMENTS." >".$model->getReceivedComments()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_loan::REMARKS." id=".huh_loan::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::SPECIALCONDITIONS.">SPECIALCONDITIONS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_loan::SPECIALCONDITIONS." id=".huh_loan::SPECIALCONDITIONS." >".$model->getSpecialConditions()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::SRCGEOGRAPHY.">SRCGEOGRAPHY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::SRCGEOGRAPHY." id=".huh_loan::SRCGEOGRAPHY." value='".$model->getSrcGeography()."'  style=' width:".huh_loan::SRCGEOGRAPHY_SIZE ."em;  '  maxlength='".huh_loan::SRCGEOGRAPHY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::SRCTAXONOMY.">SRCTAXONOMY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::SRCTAXONOMY." id=".huh_loan::SRCTAXONOMY." value='".$model->getSrcTaxonomy()."'  style=' width:".huh_loan::SRCTAXONOMY_SIZE ."em;  '  maxlength='".huh_loan::SRCTAXONOMY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::TEXT1.">TEXT1</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_loan::TEXT1." id=".huh_loan::TEXT1." >".$model->getText1()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_loan::TEXT2." id=".huh_loan::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::TEXT3.">TEXT3</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::TEXT3." id=".huh_loan::TEXT3." value='".$model->getText3()."'  style=' width:".huh_loan::TEXT3_SIZE ."em;  '  maxlength='".huh_loan::TEXT3_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::YESNO1." id=".huh_loan::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_loan::YESNO1_SIZE ."em;  '  maxlength='".huh_loan::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::YESNO2." id=".huh_loan::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_loan::YESNO2_SIZE ."em;  '  maxlength='".huh_loan::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::YESNO3.">YESNO3</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_loan::YESNO3." id=".huh_loan::YESNO3." value='".$model->getYesNo3()."'  style=' width:".huh_loan::YESNO3_SIZE ."em;  '  maxlength='".huh_loan::YESNO3_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loan::MODIFIEDBYAGENTID." id=".huh_loan::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_loan::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_loan::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::DIVISIONID.">DIVISIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loan::DIVISIONID." id=".huh_loan::DIVISIONID." value='".$model->getDivisionID()."'  style=' width:".huh_loan::DIVISIONID_SIZE ."em;  '  maxlength='".huh_loan::DIVISIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::DISCIPLINEID.">DISCIPLINEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loan::DISCIPLINEID." id=".huh_loan::DISCIPLINEID." value='".$model->getDisciplineID()."'  style=' width:".huh_loan::DISCIPLINEID_SIZE ."em;  '  maxlength='".huh_loan::DISCIPLINEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::ADDRESSOFRECORDID.">ADDRESSOFRECORDID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loan::ADDRESSOFRECORDID." id=".huh_loan::ADDRESSOFRECORDID." value='".$model->getAddressOfRecordID()."'  style=' width:".huh_loan::ADDRESSOFRECORDID_SIZE ."em;  '  maxlength='".huh_loan::ADDRESSOFRECORDID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_loan::CREATEDBYAGENTID." id=".huh_loan::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_loan::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_loan::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_loan::LOANINVENTORY.">LOANINVENTORY</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_loan::LOANINVENTORY." id=".huh_loan::LOANINVENTORY." >".$model->getLoanInventory()."</textarea></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_loan">';
       $returnvalue .= '<input type=hidden name=LoanID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_loan">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>LOANID<input type=text name=".huh_loan::LOANID." id=".huh_loan::LOANID." value='".$model->getLoanID()."'  size='".huh_loan::LOANID_SIZE ."'  maxlength='".huh_loan::LOANID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_loan::TIMESTAMPCREATED." id=".huh_loan::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_loan::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_loan::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_loan::TIMESTAMPMODIFIED." id=".huh_loan::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_loan::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_loan::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_loan::VERSION." id=".huh_loan::VERSION." value='".$model->getVersion()."'  size='".huh_loan::VERSION_SIZE ."'  maxlength='".huh_loan::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CURRENTDUEDATE<input type=text name=".huh_loan::CURRENTDUEDATE." id=".huh_loan::CURRENTDUEDATE." value='".$model->getCurrentDueDate()."'  size='".huh_loan::CURRENTDUEDATE_SIZE ."'  maxlength='".huh_loan::CURRENTDUEDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATECLOSED<input type=text name=".huh_loan::DATECLOSED." id=".huh_loan::DATECLOSED." value='".$model->getDateClosed()."'  size='".huh_loan::DATECLOSED_SIZE ."'  maxlength='".huh_loan::DATECLOSED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATERECEIVED<input type=text name=".huh_loan::DATERECEIVED." id=".huh_loan::DATERECEIVED." value='".$model->getDateReceived()."'  size='".huh_loan::DATERECEIVED_SIZE ."'  maxlength='".huh_loan::DATERECEIVED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISCLOSED<input type=text name=".huh_loan::ISCLOSED." id=".huh_loan::ISCLOSED." value='".$model->getIsClosed()."'  size='".huh_loan::ISCLOSED_SIZE ."'  maxlength='".huh_loan::ISCLOSED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISFINANCIALRESPONSIBILITY<input type=text name=".huh_loan::ISFINANCIALRESPONSIBILITY." id=".huh_loan::ISFINANCIALRESPONSIBILITY." value='".$model->getIsFinancialResponsibility()."'  size='".huh_loan::ISFINANCIALRESPONSIBILITY_SIZE ."'  maxlength='".huh_loan::ISFINANCIALRESPONSIBILITY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LOANDATE<input type=text name=".huh_loan::LOANDATE." id=".huh_loan::LOANDATE." value='".$model->getLoanDate()."'  size='".huh_loan::LOANDATE_SIZE ."'  maxlength='".huh_loan::LOANDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LOANNUMBER<input type=text name=".huh_loan::LOANNUMBER." id=".huh_loan::LOANNUMBER." value='".$model->getLoanNumber()."'  size='".huh_loan::LOANNUMBER_SIZE ."'  maxlength='".huh_loan::LOANNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_loan::NUMBER1." id=".huh_loan::NUMBER1." value='".$model->getNumber1()."'  size='".huh_loan::NUMBER1_SIZE ."'  maxlength='".huh_loan::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_loan::NUMBER2." id=".huh_loan::NUMBER2." value='".$model->getNumber2()."'  size='".huh_loan::NUMBER2_SIZE ."'  maxlength='".huh_loan::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ORIGINALDUEDATE<input type=text name=".huh_loan::ORIGINALDUEDATE." id=".huh_loan::ORIGINALDUEDATE." value='".$model->getOriginalDueDate()."'  size='".huh_loan::ORIGINALDUEDATE_SIZE ."'  maxlength='".huh_loan::ORIGINALDUEDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>OVERDUENOTISETDATE<input type=text name=".huh_loan::OVERDUENOTISETDATE." id=".huh_loan::OVERDUENOTISETDATE." value='".$model->getOverdueNotiSetDate()."'  size='".huh_loan::OVERDUENOTISETDATE_SIZE ."'  maxlength='".huh_loan::OVERDUENOTISETDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PURPOSEOFLOAN<input type=text name=".huh_loan::PURPOSEOFLOAN." id=".huh_loan::PURPOSEOFLOAN." value='".$model->getPurposeOfLoan()."'  size='51'  maxlength='".huh_loan::PURPOSEOFLOAN_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RECEIVEDCOMMENTS<input type=text name=".huh_loan::RECEIVEDCOMMENTS." id=".huh_loan::RECEIVEDCOMMENTS." value='".$model->getReceivedComments()."'  size='51'  maxlength='".huh_loan::RECEIVEDCOMMENTS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_loan::REMARKS." id=".huh_loan::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_loan::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SPECIALCONDITIONS<input type=text name=".huh_loan::SPECIALCONDITIONS." id=".huh_loan::SPECIALCONDITIONS." value='".$model->getSpecialConditions()."'  size='51'  maxlength='".huh_loan::SPECIALCONDITIONS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SRCGEOGRAPHY<input type=text name=".huh_loan::SRCGEOGRAPHY." id=".huh_loan::SRCGEOGRAPHY." value='".$model->getSrcGeography()."'  size='".huh_loan::SRCGEOGRAPHY_SIZE ."'  maxlength='".huh_loan::SRCGEOGRAPHY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SRCTAXONOMY<input type=text name=".huh_loan::SRCTAXONOMY." id=".huh_loan::SRCTAXONOMY." value='".$model->getSrcTaxonomy()."'  size='".huh_loan::SRCTAXONOMY_SIZE ."'  maxlength='".huh_loan::SRCTAXONOMY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_loan::TEXT1." id=".huh_loan::TEXT1." value='".$model->getText1()."'  size='51'  maxlength='".huh_loan::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_loan::TEXT2." id=".huh_loan::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_loan::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT3<input type=text name=".huh_loan::TEXT3." id=".huh_loan::TEXT3." value='".$model->getText3()."'  size='".huh_loan::TEXT3_SIZE ."'  maxlength='".huh_loan::TEXT3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_loan::YESNO1." id=".huh_loan::YESNO1." value='".$model->getYesNo1()."'  size='".huh_loan::YESNO1_SIZE ."'  maxlength='".huh_loan::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_loan::YESNO2." id=".huh_loan::YESNO2." value='".$model->getYesNo2()."'  size='".huh_loan::YESNO2_SIZE ."'  maxlength='".huh_loan::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO3<input type=text name=".huh_loan::YESNO3." id=".huh_loan::YESNO3." value='".$model->getYesNo3()."'  size='".huh_loan::YESNO3_SIZE ."'  maxlength='".huh_loan::YESNO3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_loan::MODIFIEDBYAGENTID." id=".huh_loan::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_loan::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_loan::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DIVISIONID<input type=text name=".huh_loan::DIVISIONID." id=".huh_loan::DIVISIONID." value='".$model->getDivisionID()."'  size='".huh_loan::DIVISIONID_SIZE ."'  maxlength='".huh_loan::DIVISIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISCIPLINEID<input type=text name=".huh_loan::DISCIPLINEID." id=".huh_loan::DISCIPLINEID." value='".$model->getDisciplineID()."'  size='".huh_loan::DISCIPLINEID_SIZE ."'  maxlength='".huh_loan::DISCIPLINEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ADDRESSOFRECORDID<input type=text name=".huh_loan::ADDRESSOFRECORDID." id=".huh_loan::ADDRESSOFRECORDID." value='".$model->getAddressOfRecordID()."'  size='".huh_loan::ADDRESSOFRECORDID_SIZE ."'  maxlength='".huh_loan::ADDRESSOFRECORDID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_loan::CREATEDBYAGENTID." id=".huh_loan::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_loan::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_loan::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LOANINVENTORY<input type=text name=".huh_loan::LOANINVENTORY." id=".huh_loan::LOANINVENTORY." value='".$model->getLoanInventory()."'  size='51'  maxlength='".huh_loan::LOANINVENTORY_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
