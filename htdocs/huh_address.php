<?php
//==============================================================================
//===   address.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_address implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const ADDRESSID_SIZE       = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const ADDRESS_SIZE         = 255; //255
   const ADDRESS2_SIZE        = 255; //255
   const CITY_SIZE            = 64; //64
   const COUNTRY_SIZE         = 64; //64
   const ENDDATE_SIZE         = 12; //DATE
   const FAX_SIZE             = 20; //YEAR
   const ISCURRENT_SIZE       = 1; //1
   const ISPRIMARY_SIZE       = 1; //1
   const ISSHIPPING_SIZE      = 1; //1
   const ORDINAL_SIZE         = 11; //INTEGER
   const PHONE1_SIZE          = 20; //YEAR
   const PHONE2_SIZE          = 20; //YEAR
   const POSITIONHELD_SIZE    = 32; //32
   const POSTALCODE_SIZE      = 32; //32
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const ROOMORBUILDING_SIZE  = 20; //YEAR
   const STARTDATE_SIZE       = 12; //DATE
   const STATE_SIZE           = 64; //64
   const TYPEOFADDR_SIZE      = 32; //32
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const AGENTID_SIZE         = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const ADDRESSID         = 'AddressID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const ADDRESS           = 'Address';
   const ADDRESS2          = 'Address2';
   const CITY              = 'City';
   const COUNTRY           = 'Country';
   const ENDDATE           = 'EndDate';
   const FAX               = 'Fax';
   const ISCURRENT         = 'IsCurrent';
   const ISPRIMARY         = 'IsPrimary';
   const ISSHIPPING        = 'IsShipping';
   const ORDINAL           = 'Ordinal';
   const PHONE1            = 'Phone1';
   const PHONE2            = 'Phone2';
   const POSITIONHELD      = 'PositionHeld';
   const POSTALCODE        = 'PostalCode';
   const REMARKS           = 'Remarks';
   const ROOMORBUILDING    = 'RoomOrBuilding';
   const STARTDATE         = 'StartDate';
   const STATE             = 'State';
   const TYPEOFADDR        = 'TypeOfAddr';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const AGENTID           = 'AgentID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $AddressID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AddressID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $Address = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Address']), 0, 255);
  $Address2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Address2']), 0, 255);
  $City = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['City']), 0, 64);
  $Country = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Country']), 0, 64);
  $EndDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['EndDate']), 0, 12);
  $Fax = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Fax']), 0, 20);
  $IsCurrent = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsCurrent']), 0, 1);
  $IsPrimary = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsPrimary']), 0, 1);
  $IsShipping = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsShipping']), 0, 1);
  $Ordinal = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Ordinal']), 0, 11);
  $Phone1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Phone1']), 0, 20);
  $Phone2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Phone2']), 0, 20);
  $PositionHeld = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PositionHeld']), 0, 32);
  $PostalCode = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PostalCode']), 0, 32);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $RoomOrBuilding = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['RoomOrBuilding']), 0, 20);
  $StartDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StartDate']), 0, 12);
  $State = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['State']), 0, 64);
  $TypeOfAddr = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TypeOfAddr']), 0, 32);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $AgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AgentID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $AddressID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $Address; // VARCHAR(255) 
   private $Address2; // VARCHAR(255) 
   private $City; // VARCHAR(64) 
   private $Country; // VARCHAR(64) 
   private $EndDate; // DATE 
   private $Fax; // YEAR 
   private $IsCurrent; // BIT(1) 
   private $IsPrimary; // BIT(1) 
   private $IsShipping; // BIT(1) 
   private $Ordinal; // INTEGER 
   private $Phone1; // YEAR 
   private $Phone2; // YEAR 
   private $PositionHeld; // VARCHAR(32) 
   private $PostalCode; // VARCHAR(32) 
   private $Remarks; // LONGVARCHAR 
   private $RoomOrBuilding; // YEAR 
   private $StartDate; // DATE 
   private $State; // VARCHAR(64) 
   private $TypeOfAddr; // VARCHAR(32) 
   private $ModifiedByAgentID; // INTEGER 
   private $AgentID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' AddressID, TimestampCreated, TimestampModified, Version, Address, Address2, City, Country, EndDate, Fax, IsCurrent, IsPrimary, IsShipping, Ordinal, Phone1, Phone2, PositionHeld, PostalCode, Remarks, RoomOrBuilding, StartDate, State, TypeOfAddr, ModifiedByAgentID, AgentID, CreatedByAgentID, ';
   const PKFIELDLIST = ' AddressID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'AddressID'  ) ;
   private $allFieldsArray = array( 0 => 'AddressID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'Address' , 5 => 'Address2' , 6 => 'City' , 7 => 'Country' , 8 => 'EndDate' , 9 => 'Fax' , 10 => 'IsCurrent' , 11 => 'IsPrimary' , 12 => 'IsShipping' , 13 => 'Ordinal' , 14 => 'Phone1' , 15 => 'Phone2' , 16 => 'PositionHeld' , 17 => 'PostalCode' , 18 => 'Remarks' , 19 => 'RoomOrBuilding' , 20 => 'StartDate' , 21 => 'State' , 22 => 'TypeOfAddr' , 23 => 'ModifiedByAgentID' , 24 => 'AgentID' , 25 => 'CreatedByAgentID'  ) ;
   private $selectDistinctFieldsArray = array( 23 => 'ModifiedByAgentID' , 24 => 'AgentID' , 25 => 'CreatedByAgentID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_address(){
       $this->AddressID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->Address = '';
       $this->Address2 = '';
       $this->City = '';
       $this->Country = '';
       $this->EndDate = '';
       $this->Fax = '';
       $this->IsCurrent = '';
       $this->IsPrimary = '';
       $this->IsShipping = '';
       $this->Ordinal = '';
       $this->Phone1 = '';
       $this->Phone2 = '';
       $this->PositionHeld = '';
       $this->PostalCode = '';
       $this->Remarks = '';
       $this->RoomOrBuilding = '';
       $this->StartDate = '';
       $this->State = '';
       $this->TypeOfAddr = '';
       $this->ModifiedByAgentID = '';
       $this->AgentID = '';
       $this->CreatedByAgentID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='AddressID') { $returnvalue = $this->setAddressID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='Address') { $returnvalue = $this->setAddress($value); } 
             if ($fieldname=='Address2') { $returnvalue = $this->setAddress2($value); } 
             if ($fieldname=='City') { $returnvalue = $this->setCity($value); } 
             if ($fieldname=='Country') { $returnvalue = $this->setCountry($value); } 
             if ($fieldname=='EndDate') { $returnvalue = $this->setEndDate($value); } 
             if ($fieldname=='Fax') { $returnvalue = $this->setFax($value); } 
             if ($fieldname=='IsCurrent') { $returnvalue = $this->setIsCurrent($value); } 
             if ($fieldname=='IsPrimary') { $returnvalue = $this->setIsPrimary($value); } 
             if ($fieldname=='IsShipping') { $returnvalue = $this->setIsShipping($value); } 
             if ($fieldname=='Ordinal') { $returnvalue = $this->setOrdinal($value); } 
             if ($fieldname=='Phone1') { $returnvalue = $this->setPhone1($value); } 
             if ($fieldname=='Phone2') { $returnvalue = $this->setPhone2($value); } 
             if ($fieldname=='PositionHeld') { $returnvalue = $this->setPositionHeld($value); } 
             if ($fieldname=='PostalCode') { $returnvalue = $this->setPostalCode($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='RoomOrBuilding') { $returnvalue = $this->setRoomOrBuilding($value); } 
             if ($fieldname=='StartDate') { $returnvalue = $this->setStartDate($value); } 
             if ($fieldname=='State') { $returnvalue = $this->setState($value); } 
             if ($fieldname=='TypeOfAddr') { $returnvalue = $this->setTypeOfAddr($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='AgentID') { $returnvalue = $this->setAgentID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='AddressID') { $returnvalue = $this->getAddressID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='Address') { $returnvalue = $this->getAddress(); } 
             if ($fieldname=='Address2') { $returnvalue = $this->getAddress2(); } 
             if ($fieldname=='City') { $returnvalue = $this->getCity(); } 
             if ($fieldname=='Country') { $returnvalue = $this->getCountry(); } 
             if ($fieldname=='EndDate') { $returnvalue = $this->getEndDate(); } 
             if ($fieldname=='Fax') { $returnvalue = $this->getFax(); } 
             if ($fieldname=='IsCurrent') { $returnvalue = $this->getIsCurrent(); } 
             if ($fieldname=='IsPrimary') { $returnvalue = $this->getIsPrimary(); } 
             if ($fieldname=='IsShipping') { $returnvalue = $this->getIsShipping(); } 
             if ($fieldname=='Ordinal') { $returnvalue = $this->getOrdinal(); } 
             if ($fieldname=='Phone1') { $returnvalue = $this->getPhone1(); } 
             if ($fieldname=='Phone2') { $returnvalue = $this->getPhone2(); } 
             if ($fieldname=='PositionHeld') { $returnvalue = $this->getPositionHeld(); } 
             if ($fieldname=='PostalCode') { $returnvalue = $this->getPostalCode(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='RoomOrBuilding') { $returnvalue = $this->getRoomOrBuilding(); } 
             if ($fieldname=='StartDate') { $returnvalue = $this->getStartDate(); } 
             if ($fieldname=='State') { $returnvalue = $this->getState(); } 
             if ($fieldname=='TypeOfAddr') { $returnvalue = $this->getTypeOfAddr(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='AgentID') { $returnvalue = $this->getAgentID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*AddressID*/
   public function getAddressID() {
       if ($this->AddressID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AddressID));
       }
   }
   public function setAddressID($AddressID) {
       if (strlen(preg_replace('/[^0-9]/','',$AddressID)) > huh_address::ADDRESSID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AddressID = trim($AddressID);
       if (!ctype_digit(strval($AddressID)) && trim(strval($AddressID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AddressID = $this->l_addslashes($AddressID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_address::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_address::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_address::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*Address*/
   public function getAddress() {
       if ($this->Address==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Address));
       }
   }
   public function setAddress($Address) {
       if (strlen($Address) > huh_address::ADDRESS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Address = $this->l_addslashes($Address);
       $this->dirty = true;
   }
/*Address2*/
   public function getAddress2() {
       if ($this->Address2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Address2));
       }
   }
   public function setAddress2($Address2) {
       if (strlen($Address2) > huh_address::ADDRESS2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Address2 = $this->l_addslashes($Address2);
       $this->dirty = true;
   }
/*City*/
   public function getCity() {
       if ($this->City==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->City));
       }
   }
   public function setCity($City) {
       if (strlen($City) > huh_address::CITY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->City = $this->l_addslashes($City);
       $this->dirty = true;
   }
/*Country*/
   public function getCountry() {
       if ($this->Country==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Country));
       }
   }
   public function setCountry($Country) {
       if (strlen($Country) > huh_address::COUNTRY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Country = $this->l_addslashes($Country);
       $this->dirty = true;
   }
/*EndDate*/
   public function getEndDate() {
       if ($this->EndDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->EndDate));
       }
   }
   public function setEndDate($EndDate) {
       if (strlen($EndDate) > huh_address::ENDDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->EndDate = $this->l_addslashes($EndDate);
       $this->dirty = true;
   }
/*Fax*/
   public function getFax() {
       if ($this->Fax==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Fax));
       }
   }
   public function setFax($Fax) {
       if (strlen($Fax) > huh_address::FAX_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Fax = $this->l_addslashes($Fax);
       $this->dirty = true;
   }
/*IsCurrent*/
   public function getIsCurrent() {
       if ($this->IsCurrent==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsCurrent));
       }
   }
   public function setIsCurrent($IsCurrent) {
       if (strlen($IsCurrent) > huh_address::ISCURRENT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsCurrent = $this->l_addslashes($IsCurrent);
       $this->dirty = true;
   }
/*IsPrimary*/
   public function getIsPrimary() {
       if ($this->IsPrimary==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsPrimary));
       }
   }
   public function setIsPrimary($IsPrimary) {
       if (strlen($IsPrimary) > huh_address::ISPRIMARY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsPrimary = $this->l_addslashes($IsPrimary);
       $this->dirty = true;
   }
/*IsShipping*/
   public function getIsShipping() {
       if ($this->IsShipping==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsShipping));
       }
   }
   public function setIsShipping($IsShipping) {
       if (strlen($IsShipping) > huh_address::ISSHIPPING_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsShipping = $this->l_addslashes($IsShipping);
       $this->dirty = true;
   }
/*Ordinal*/
   public function getOrdinal() {
       if ($this->Ordinal==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Ordinal));
       }
   }
   public function setOrdinal($Ordinal) {
       if (strlen(preg_replace('/[^0-9]/','',$Ordinal)) > huh_address::ORDINAL_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Ordinal = trim($Ordinal);
       if (!ctype_digit(strval($Ordinal)) && trim(strval($Ordinal))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Ordinal = $this->l_addslashes($Ordinal);
       $this->dirty = true;
   }
/*Phone1*/
   public function getPhone1() {
       if ($this->Phone1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Phone1));
       }
   }
   public function setPhone1($Phone1) {
       if (strlen($Phone1) > huh_address::PHONE1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Phone1 = $this->l_addslashes($Phone1);
       $this->dirty = true;
   }
/*Phone2*/
   public function getPhone2() {
       if ($this->Phone2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Phone2));
       }
   }
   public function setPhone2($Phone2) {
       if (strlen($Phone2) > huh_address::PHONE2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Phone2 = $this->l_addslashes($Phone2);
       $this->dirty = true;
   }
/*PositionHeld*/
   public function getPositionHeld() {
       if ($this->PositionHeld==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PositionHeld));
       }
   }
   public function setPositionHeld($PositionHeld) {
       if (strlen($PositionHeld) > huh_address::POSITIONHELD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PositionHeld = $this->l_addslashes($PositionHeld);
       $this->dirty = true;
   }
/*PostalCode*/
   public function getPostalCode() {
       if ($this->PostalCode==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PostalCode));
       }
   }
   public function setPostalCode($PostalCode) {
       if (strlen($PostalCode) > huh_address::POSTALCODE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PostalCode = $this->l_addslashes($PostalCode);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_address::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*RoomOrBuilding*/
   public function getRoomOrBuilding() {
       if ($this->RoomOrBuilding==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RoomOrBuilding));
       }
   }
   public function setRoomOrBuilding($RoomOrBuilding) {
       if (strlen($RoomOrBuilding) > huh_address::ROOMORBUILDING_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->RoomOrBuilding = $this->l_addslashes($RoomOrBuilding);
       $this->dirty = true;
   }
/*StartDate*/
   public function getStartDate() {
       if ($this->StartDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StartDate));
       }
   }
   public function setStartDate($StartDate) {
       if (strlen($StartDate) > huh_address::STARTDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StartDate = $this->l_addslashes($StartDate);
       $this->dirty = true;
   }
/*State*/
   public function getState() {
       if ($this->State==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->State));
       }
   }
   public function setState($State) {
       if (strlen($State) > huh_address::STATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->State = $this->l_addslashes($State);
       $this->dirty = true;
   }
/*TypeOfAddr*/
   public function getTypeOfAddr() {
       if ($this->TypeOfAddr==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TypeOfAddr));
       }
   }
   public function setTypeOfAddr($TypeOfAddr) {
       if (strlen($TypeOfAddr) > huh_address::TYPEOFADDR_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TypeOfAddr = $this->l_addslashes($TypeOfAddr);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_address::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*AgentID*/
   public function getAgentID() {
       if ($this->AgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AgentID));
       }
   }
   public function setAgentID($AgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$AgentID)) > huh_address::AGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AgentID = trim($AgentID);
       if (!ctype_digit(strval($AgentID)) && trim(strval($AgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AgentID = $this->l_addslashes($AgentID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_address::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getAddressID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['AddressID'] = $this->getAddressID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_AddressIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_AddressMYSQLI_TYPE = 's';
  const C_Address2MYSQLI_TYPE = 's';
  const C_CityMYSQLI_TYPE = 's';
  const C_CountryMYSQLI_TYPE = 's';
  const C_EndDateMYSQLI_TYPE = 's';
  const C_FaxMYSQLI_TYPE = 's';
  const C_IsCurrentMYSQLI_TYPE = 'i';
  const C_IsPrimaryMYSQLI_TYPE = 'i';
  const C_IsShippingMYSQLI_TYPE = 'i';
  const C_OrdinalMYSQLI_TYPE = 'i';
  const C_Phone1MYSQLI_TYPE = 's';
  const C_Phone2MYSQLI_TYPE = 's';
  const C_PositionHeldMYSQLI_TYPE = 's';
  const C_PostalCodeMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_RoomOrBuildingMYSQLI_TYPE = 's';
  const C_StartDateMYSQLI_TYPE = 's';
  const C_StateMYSQLI_TYPE = 's';
  const C_TypeOfAddrMYSQLI_TYPE = 's';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_AgentIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='AddressID') { $retval = self::C_AddressIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='Address') { $retval = self::C_AddressMYSQLI_TYPE; }
      if ($aFieldname=='Address2') { $retval = self::C_Address2MYSQLI_TYPE; }
      if ($aFieldname=='City') { $retval = self::C_CityMYSQLI_TYPE; }
      if ($aFieldname=='Country') { $retval = self::C_CountryMYSQLI_TYPE; }
      if ($aFieldname=='EndDate') { $retval = self::C_EndDateMYSQLI_TYPE; }
      if ($aFieldname=='Fax') { $retval = self::C_FaxMYSQLI_TYPE; }
      if ($aFieldname=='IsCurrent') { $retval = self::C_IsCurrentMYSQLI_TYPE; }
      if ($aFieldname=='IsPrimary') { $retval = self::C_IsPrimaryMYSQLI_TYPE; }
      if ($aFieldname=='IsShipping') { $retval = self::C_IsShippingMYSQLI_TYPE; }
      if ($aFieldname=='Ordinal') { $retval = self::C_OrdinalMYSQLI_TYPE; }
      if ($aFieldname=='Phone1') { $retval = self::C_Phone1MYSQLI_TYPE; }
      if ($aFieldname=='Phone2') { $retval = self::C_Phone2MYSQLI_TYPE; }
      if ($aFieldname=='PositionHeld') { $retval = self::C_PositionHeldMYSQLI_TYPE; }
      if ($aFieldname=='PostalCode') { $retval = self::C_PostalCodeMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='RoomOrBuilding') { $retval = self::C_RoomOrBuildingMYSQLI_TYPE; }
      if ($aFieldname=='StartDate') { $retval = self::C_StartDateMYSQLI_TYPE; }
      if ($aFieldname=='State') { $retval = self::C_StateMYSQLI_TYPE; }
      if ($aFieldname=='TypeOfAddr') { $retval = self::C_TypeOfAddrMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='AgentID') { $retval = self::C_AgentIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setAddressID($pk[AddressID]);
             } else { ;
                 $this->setAddressID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->AddressID != NULL) {
           $sql = 'SELECT AddressID, TimestampCreated, TimestampModified, Version, Address, Address2, City, Country, EndDate, Fax, IsCurrent, IsPrimary, IsShipping, Ordinal, Phone1, Phone2, PositionHeld, PostalCode, Remarks, RoomOrBuilding, StartDate, State, TypeOfAddr, ModifiedByAgentID, AgentID, CreatedByAgentID FROM address WHERE AddressID = '.$this->AddressID ;

           $preparesql = 'SELECT AddressID, TimestampCreated, TimestampModified, Version, Address, Address2, City, Country, EndDate, Fax, IsCurrent, IsPrimary, IsShipping, Ordinal, Phone1, Phone2, PositionHeld, PostalCode, Remarks, RoomOrBuilding, StartDate, State, TypeOfAddr, ModifiedByAgentID, AgentID, CreatedByAgentID FROM address WHERE AddressID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->AddressID);
              $statement->execute();
              $statement->bind_result($this->AddressID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Address, $this->Address2, $this->City, $this->Country, $this->EndDate, $this->Fax, $this->IsCurrent, $this->IsPrimary, $this->IsShipping, $this->Ordinal, $this->Phone1, $this->Phone2, $this->PositionHeld, $this->PostalCode, $this->Remarks, $this->RoomOrBuilding, $this->StartDate, $this->State, $this->TypeOfAddr, $this->ModifiedByAgentID, $this->AgentID, $this->CreatedByAgentID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->AddressID!= NULL) {
            $sql  = 'UPDATE  address SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", Address = ? ";
            $sql .=  ", Address2 = ? ";
            $sql .=  ", City = ? ";
            $sql .=  ", Country = ? ";
            $sql .=  ", EndDate = ? ";
            $sql .=  ", Fax = ? ";
            $sql .=  ", IsCurrent = ? ";
            $sql .=  ", IsPrimary = ? ";
            $sql .=  ", IsShipping = ? ";
            $sql .=  ", Ordinal = ? ";
            $sql .=  ", Phone1 = ? ";
            $sql .=  ", Phone2 = ? ";
            $sql .=  ", PositionHeld = ? ";
            $sql .=  ", PostalCode = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", RoomOrBuilding = ? ";
            $sql .=  ", StartDate = ? ";
            $sql .=  ", State = ? ";
            $sql .=  ", TypeOfAddr = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", AgentID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";

            $sql .= "  WHERE AddressID = ? ";
        } else {
            $sql  = 'INSERT INTO address ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( AddressID ,  TimestampCreated ,  TimestampModified ,  Version ,  Address ,  Address2 ,  City ,  Country ,  EndDate ,  Fax ,  IsCurrent ,  IsPrimary ,  IsShipping ,  Ordinal ,  Phone1 ,  Phone2 ,  PositionHeld ,  PostalCode ,  Remarks ,  RoomOrBuilding ,  StartDate ,  State ,  TypeOfAddr ,  ModifiedByAgentID ,  AgentID ,  CreatedByAgentID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->AddressID!= NULL ) {
              $statement->bind_param("ississssssiiiisssssssssiiii", $this->AddressID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Address , $this->Address2 , $this->City , $this->Country , $this->EndDate , $this->Fax , $this->IsCurrent , $this->IsPrimary , $this->IsShipping , $this->Ordinal , $this->Phone1 , $this->Phone2 , $this->PositionHeld , $this->PostalCode , $this->Remarks , $this->RoomOrBuilding , $this->StartDate , $this->State , $this->TypeOfAddr , $this->ModifiedByAgentID , $this->AgentID , $this->CreatedByAgentID , $this->AddressID );
           } else { 
              $statement->bind_param("ississssssiiiisssssssssiii", $this->AddressID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Address , $this->Address2 , $this->City , $this->Country , $this->EndDate , $this->Fax , $this->IsCurrent , $this->IsPrimary , $this->IsShipping , $this->Ordinal , $this->Phone1 , $this->Phone2 , $this->PositionHeld , $this->PostalCode , $this->Remarks , $this->RoomOrBuilding , $this->StartDate , $this->State , $this->TypeOfAddr , $this->ModifiedByAgentID , $this->AgentID , $this->CreatedByAgentID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->AddressID != NULL) {
           $sql = 'SELECT AddressID, TimestampCreated, TimestampModified, Version, Address, Address2, City, Country, EndDate, Fax, IsCurrent, IsPrimary, IsShipping, Ordinal, Phone1, Phone2, PositionHeld, PostalCode, Remarks, RoomOrBuilding, StartDate, State, TypeOfAddr, ModifiedByAgentID, AgentID, CreatedByAgentID FROM address WHERE AddressID = "'.$this->AddressID.'"  ' ;

           $preparedsql = 'SELECT  FROM address WHERE  and AddressID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississssssiiiisssssssssiii", $this->AddressID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Address, $this->Address2, $this->City, $this->Country, $this->EndDate, $this->Fax, $this->IsCurrent, $this->IsPrimary, $this->IsShipping, $this->Ordinal, $this->Phone1, $this->Phone2, $this->PositionHeld, $this->PostalCode, $this->Remarks, $this->RoomOrBuilding, $this->StartDate, $this->State, $this->TypeOfAddr, $this->ModifiedByAgentID, $this->AgentID, $this->CreatedByAgentID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM address WHERE  and AddressID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississssssiiiisssssssssiii", $this->AddressID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Address, $this->Address2, $this->City, $this->Country, $this->EndDate, $this->Fax, $this->IsCurrent, $this->IsPrimary, $this->IsShipping, $this->Ordinal, $this->Phone1, $this->Phone2, $this->PositionHeld, $this->PostalCode, $this->Remarks, $this->RoomOrBuilding, $this->StartDate, $this->State, $this->TypeOfAddr, $this->ModifiedByAgentID, $this->AgentID, $this->CreatedByAgentID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->AddressID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM address';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT AddressID FROM address $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_address();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromdivision() { 
      // ForeignKey in: division
      $t = new division();
  } 
  public function loadLinkedFrominstitution() { 
      // ForeignKey in: institution
      $t = new institution();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: AgentID
      $t = new agent();
      $t->load(getAgentID());
      $returnvalue[AgentID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT AddressID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(Address,'') || ' ' || IFNULL(Address2,'') || ' ' || IFNULL(City,'') || ' ' || IFNULL(Country,'') || ' ' || IFNULL(EndDate,'') || ' ' || IFNULL(Fax,'') || ' ' || IFNULL(IsCurrent,'') || ' ' || IFNULL(IsPrimary,'') || ' ' || IFNULL(IsShipping,'') || ' ' || IFNULL(Ordinal,'') || ' ' || IFNULL(Phone1,'') || ' ' || IFNULL(Phone2,'') || ' ' || IFNULL(PositionHeld,'') || ' ' || IFNULL(PostalCode,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(RoomOrBuilding,'') || ' ' || IFNULL(StartDate,'') || ' ' || IFNULL(State,'') || ' ' || IFNULL(TypeOfAddr,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(AgentID,'') || ' ' || IFNULL(CreatedByAgentID,'')) FROM address order by ModifiedByAgentID, AgentID, CreatedByAgentID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM address order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AddressID FROM address WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT AddressID FROM address WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_address();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AddressID FROM address WHERE AgentID $operator '$searchTerm'";
        $preparedsql = "SELECT AddressID FROM address WHERE AgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_address();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AddressID FROM address WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT AddressID FROM address WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_address();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM address group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AgentID FROM address group by AgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM address group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AgentID':
             $returnvalue = $this->selectDistinctAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the address.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_addressView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_address <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_address::ADDRESSID.": ".$model->getAddressID()."</li>\n";
       $returnvalue .= "<li>".huh_address::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_address::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_address::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_address::ADDRESS.": ".$model->getAddress()."</li>\n";
       $returnvalue .= "<li>".huh_address::ADDRESS2.": ".$model->getAddress2()."</li>\n";
       $returnvalue .= "<li>".huh_address::CITY.": ".$model->getCity()."</li>\n";
       $returnvalue .= "<li>".huh_address::COUNTRY.": ".$model->getCountry()."</li>\n";
       $returnvalue .= "<li>".huh_address::ENDDATE.": ".$model->getEndDate()."</li>\n";
       $returnvalue .= "<li>".huh_address::FAX.": ".$model->getFax()."</li>\n";
       $returnvalue .= "<li>".huh_address::ISCURRENT.": ".$model->getIsCurrent()."</li>\n";
       $returnvalue .= "<li>".huh_address::ISPRIMARY.": ".$model->getIsPrimary()."</li>\n";
       $returnvalue .= "<li>".huh_address::ISSHIPPING.": ".$model->getIsShipping()."</li>\n";
       $returnvalue .= "<li>".huh_address::ORDINAL.": ".$model->getOrdinal()."</li>\n";
       $returnvalue .= "<li>".huh_address::PHONE1.": ".$model->getPhone1()."</li>\n";
       $returnvalue .= "<li>".huh_address::PHONE2.": ".$model->getPhone2()."</li>\n";
       $returnvalue .= "<li>".huh_address::POSITIONHELD.": ".$model->getPositionHeld()."</li>\n";
       $returnvalue .= "<li>".huh_address::POSTALCODE.": ".$model->getPostalCode()."</li>\n";
       $returnvalue .= "<li>".huh_address::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_address::ROOMORBUILDING.": ".$model->getRoomOrBuilding()."</li>\n";
       $returnvalue .= "<li>".huh_address::STARTDATE.": ".$model->getStartDate()."</li>\n";
       $returnvalue .= "<li>".huh_address::STATE.": ".$model->getState()."</li>\n";
       $returnvalue .= "<li>".huh_address::TYPEOFADDR.": ".$model->getTypeOfAddr()."</li>\n";
       $returnvalue .= "<li>".huh_address::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_address::AGENTID.": ".$model->getAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_address::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getAgentID() != '') { 
               $t_agent->load($model->getAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_address::ADDRESSID.': "'.$model->getAddressID().'",';
       $returnvalue .= '"'.huh_address::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_address::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_address::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_address::ADDRESS.': "'.$model->getAddress().'",';
       $returnvalue .= '"'.huh_address::ADDRESS2.': "'.$model->getAddress2().'",';
       $returnvalue .= '"'.huh_address::CITY.': "'.$model->getCity().'",';
       $returnvalue .= '"'.huh_address::COUNTRY.': "'.$model->getCountry().'",';
       $returnvalue .= '"'.huh_address::ENDDATE.': "'.$model->getEndDate().'",';
       $returnvalue .= '"'.huh_address::FAX.': "'.$model->getFax().'",';
       $returnvalue .= '"'.huh_address::ISCURRENT.': "'.$model->getIsCurrent().'",';
       $returnvalue .= '"'.huh_address::ISPRIMARY.': "'.$model->getIsPrimary().'",';
       $returnvalue .= '"'.huh_address::ISSHIPPING.': "'.$model->getIsShipping().'",';
       $returnvalue .= '"'.huh_address::ORDINAL.': "'.$model->getOrdinal().'",';
       $returnvalue .= '"'.huh_address::PHONE1.': "'.$model->getPhone1().'",';
       $returnvalue .= '"'.huh_address::PHONE2.': "'.$model->getPhone2().'",';
       $returnvalue .= '"'.huh_address::POSITIONHELD.': "'.$model->getPositionHeld().'",';
       $returnvalue .= '"'.huh_address::POSTALCODE.': "'.$model->getPostalCode().'",';
       $returnvalue .= '"'.huh_address::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_address::ROOMORBUILDING.': "'.$model->getRoomOrBuilding().'",';
       $returnvalue .= '"'.huh_address::STARTDATE.': "'.$model->getStartDate().'",';
       $returnvalue .= '"'.huh_address::STATE.': "'.$model->getState().'",';
       $returnvalue .= '"'.huh_address::TYPEOFADDR.': "'.$model->getTypeOfAddr().'",';
       $returnvalue .= '"'.huh_address::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_address::AGENTID.': "'.$model->getAgentID().'",';
       $returnvalue .= '"'.huh_address::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getAddressID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getAddress()."</td>\n";
       $returnvalue .= "<td>".$model->getAddress2()."</td>\n";
       $returnvalue .= "<td>".$model->getCity()."</td>\n";
       $returnvalue .= "<td>".$model->getCountry()."</td>\n";
       $returnvalue .= "<td>".$model->getEndDate()."</td>\n";
       $returnvalue .= "<td>".$model->getFax()."</td>\n";
       $returnvalue .= "<td>".$model->getIsCurrent()."</td>\n";
       $returnvalue .= "<td>".$model->getIsPrimary()."</td>\n";
       $returnvalue .= "<td>".$model->getIsShipping()."</td>\n";
       $returnvalue .= "<td>".$model->getOrdinal()."</td>\n";
       $returnvalue .= "<td>".$model->getPhone1()."</td>\n";
       $returnvalue .= "<td>".$model->getPhone2()."</td>\n";
       $returnvalue .= "<td>".$model->getPositionHeld()."</td>\n";
       $returnvalue .= "<td>".$model->getPostalCode()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getRoomOrBuilding()."</td>\n";
       $returnvalue .= "<td>".$model->getStartDate()."</td>\n";
       $returnvalue .= "<td>".$model->getState()."</td>\n";
       $returnvalue .= "<td>".$model->getTypeOfAddr()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_address::ADDRESSID."</th>\n";
       $returnvalue .= "<th>".huh_address::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_address::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_address::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_address::ADDRESS."</th>\n";
       $returnvalue .= "<th>".huh_address::ADDRESS2."</th>\n";
       $returnvalue .= "<th>".huh_address::CITY."</th>\n";
       $returnvalue .= "<th>".huh_address::COUNTRY."</th>\n";
       $returnvalue .= "<th>".huh_address::ENDDATE."</th>\n";
       $returnvalue .= "<th>".huh_address::FAX."</th>\n";
       $returnvalue .= "<th>".huh_address::ISCURRENT."</th>\n";
       $returnvalue .= "<th>".huh_address::ISPRIMARY."</th>\n";
       $returnvalue .= "<th>".huh_address::ISSHIPPING."</th>\n";
       $returnvalue .= "<th>".huh_address::ORDINAL."</th>\n";
       $returnvalue .= "<th>".huh_address::PHONE1."</th>\n";
       $returnvalue .= "<th>".huh_address::PHONE2."</th>\n";
       $returnvalue .= "<th>".huh_address::POSITIONHELD."</th>\n";
       $returnvalue .= "<th>".huh_address::POSTALCODE."</th>\n";
       $returnvalue .= "<th>".huh_address::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_address::ROOMORBUILDING."</th>\n";
       $returnvalue .= "<th>".huh_address::STARTDATE."</th>\n";
       $returnvalue .= "<th>".huh_address::STATE."</th>\n";
       $returnvalue .= "<th>".huh_address::TYPEOFADDR."</th>\n";
       $returnvalue .= "<th>".huh_address::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_address::AGENTID."</th>\n";
       $returnvalue .= "<th>".huh_address::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_address">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new AddressID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_address::ADDRESSID.">ADDRESSID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_address::ADDRESSID." id=".huh_address::ADDRESSID." value='".$model->getAddressID()."'  style=' width:".huh_address::ADDRESSID_SIZE ."em;  '  maxlength='".huh_address::ADDRESSID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_address::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::TIMESTAMPCREATED." id=".huh_address::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_address::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_address::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::TIMESTAMPMODIFIED." id=".huh_address::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_address::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_address::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_address::VERSION." id=".huh_address::VERSION." value='".$model->getVersion()."'  style=' width:".huh_address::VERSION_SIZE ."em;  '  maxlength='".huh_address::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::ADDRESS.">ADDRESS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_address::ADDRESS." id=".huh_address::ADDRESS." >".$model->getAddress()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_address::ADDRESS2.">ADDRESS2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_address::ADDRESS2." id=".huh_address::ADDRESS2." >".$model->getAddress2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_address::CITY.">CITY</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_address::CITY." id=".huh_address::CITY." >".$model->getCity()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_address::COUNTRY.">COUNTRY</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_address::COUNTRY." id=".huh_address::COUNTRY." >".$model->getCountry()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_address::ENDDATE.">ENDDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::ENDDATE." id=".huh_address::ENDDATE." value='".$model->getEndDate()."'  style=' width:".huh_address::ENDDATE_SIZE ."em;  '  maxlength='".huh_address::ENDDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::FAX.">FAX</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::FAX." id=".huh_address::FAX." value='".$model->getFax()."'  style=' width:".huh_address::FAX_SIZE ."em;  '  maxlength='".huh_address::FAX_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::ISCURRENT.">ISCURRENT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::ISCURRENT." id=".huh_address::ISCURRENT." value='".$model->getIsCurrent()."'  style=' width:".huh_address::ISCURRENT_SIZE ."em;  '  maxlength='".huh_address::ISCURRENT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::ISPRIMARY.">ISPRIMARY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::ISPRIMARY." id=".huh_address::ISPRIMARY." value='".$model->getIsPrimary()."'  style=' width:".huh_address::ISPRIMARY_SIZE ."em;  '  maxlength='".huh_address::ISPRIMARY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::ISSHIPPING.">ISSHIPPING</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::ISSHIPPING." id=".huh_address::ISSHIPPING." value='".$model->getIsShipping()."'  style=' width:".huh_address::ISSHIPPING_SIZE ."em;  '  maxlength='".huh_address::ISSHIPPING_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::ORDINAL.">ORDINAL</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_address::ORDINAL." id=".huh_address::ORDINAL." value='".$model->getOrdinal()."'  style=' width:".huh_address::ORDINAL_SIZE ."em;  '  maxlength='".huh_address::ORDINAL_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::PHONE1.">PHONE1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::PHONE1." id=".huh_address::PHONE1." value='".$model->getPhone1()."'  style=' width:".huh_address::PHONE1_SIZE ."em;  '  maxlength='".huh_address::PHONE1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::PHONE2.">PHONE2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::PHONE2." id=".huh_address::PHONE2." value='".$model->getPhone2()."'  style=' width:".huh_address::PHONE2_SIZE ."em;  '  maxlength='".huh_address::PHONE2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::POSITIONHELD.">POSITIONHELD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::POSITIONHELD." id=".huh_address::POSITIONHELD." value='".$model->getPositionHeld()."'  style=' width:".huh_address::POSITIONHELD_SIZE ."em;  '  maxlength='".huh_address::POSITIONHELD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::POSTALCODE.">POSTALCODE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::POSTALCODE." id=".huh_address::POSTALCODE." value='".$model->getPostalCode()."'  style=' width:".huh_address::POSTALCODE_SIZE ."em;  '  maxlength='".huh_address::POSTALCODE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_address::REMARKS." id=".huh_address::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_address::ROOMORBUILDING.">ROOMORBUILDING</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::ROOMORBUILDING." id=".huh_address::ROOMORBUILDING." value='".$model->getRoomOrBuilding()."'  style=' width:".huh_address::ROOMORBUILDING_SIZE ."em;  '  maxlength='".huh_address::ROOMORBUILDING_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::STARTDATE.">STARTDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::STARTDATE." id=".huh_address::STARTDATE." value='".$model->getStartDate()."'  style=' width:".huh_address::STARTDATE_SIZE ."em;  '  maxlength='".huh_address::STARTDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::STATE.">STATE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_address::STATE." id=".huh_address::STATE." >".$model->getState()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_address::TYPEOFADDR.">TYPEOFADDR</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_address::TYPEOFADDR." id=".huh_address::TYPEOFADDR." value='".$model->getTypeOfAddr()."'  style=' width:".huh_address::TYPEOFADDR_SIZE ."em;  '  maxlength='".huh_address::TYPEOFADDR_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_address::MODIFIEDBYAGENTID." id=".huh_address::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_address::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_address::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::AGENTID.">AGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_address::AGENTID." id=".huh_address::AGENTID." value='".$model->getAgentID()."'  style=' width:".huh_address::AGENTID_SIZE ."em;  '  maxlength='".huh_address::AGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_address::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_address::CREATEDBYAGENTID." id=".huh_address::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_address::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_address::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_address">';
       $returnvalue .= '<input type=hidden name=AddressID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_address">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>ADDRESSID<input type=text name=".huh_address::ADDRESSID." id=".huh_address::ADDRESSID." value='".$model->getAddressID()."'  size='".huh_address::ADDRESSID_SIZE ."'  maxlength='".huh_address::ADDRESSID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_address::TIMESTAMPCREATED." id=".huh_address::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_address::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_address::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_address::TIMESTAMPMODIFIED." id=".huh_address::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_address::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_address::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_address::VERSION." id=".huh_address::VERSION." value='".$model->getVersion()."'  size='".huh_address::VERSION_SIZE ."'  maxlength='".huh_address::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ADDRESS<input type=text name=".huh_address::ADDRESS." id=".huh_address::ADDRESS." value='".$model->getAddress()."'  size='51'  maxlength='".huh_address::ADDRESS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ADDRESS2<input type=text name=".huh_address::ADDRESS2." id=".huh_address::ADDRESS2." value='".$model->getAddress2()."'  size='51'  maxlength='".huh_address::ADDRESS2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CITY<input type=text name=".huh_address::CITY." id=".huh_address::CITY." value='".$model->getCity()."'  size='51'  maxlength='".huh_address::CITY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COUNTRY<input type=text name=".huh_address::COUNTRY." id=".huh_address::COUNTRY." value='".$model->getCountry()."'  size='51'  maxlength='".huh_address::COUNTRY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ENDDATE<input type=text name=".huh_address::ENDDATE." id=".huh_address::ENDDATE." value='".$model->getEndDate()."'  size='".huh_address::ENDDATE_SIZE ."'  maxlength='".huh_address::ENDDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FAX<input type=text name=".huh_address::FAX." id=".huh_address::FAX." value='".$model->getFax()."'  size='".huh_address::FAX_SIZE ."'  maxlength='".huh_address::FAX_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISCURRENT<input type=text name=".huh_address::ISCURRENT." id=".huh_address::ISCURRENT." value='".$model->getIsCurrent()."'  size='".huh_address::ISCURRENT_SIZE ."'  maxlength='".huh_address::ISCURRENT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISPRIMARY<input type=text name=".huh_address::ISPRIMARY." id=".huh_address::ISPRIMARY." value='".$model->getIsPrimary()."'  size='".huh_address::ISPRIMARY_SIZE ."'  maxlength='".huh_address::ISPRIMARY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISSHIPPING<input type=text name=".huh_address::ISSHIPPING." id=".huh_address::ISSHIPPING." value='".$model->getIsShipping()."'  size='".huh_address::ISSHIPPING_SIZE ."'  maxlength='".huh_address::ISSHIPPING_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ORDINAL<input type=text name=".huh_address::ORDINAL." id=".huh_address::ORDINAL." value='".$model->getOrdinal()."'  size='".huh_address::ORDINAL_SIZE ."'  maxlength='".huh_address::ORDINAL_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PHONE1<input type=text name=".huh_address::PHONE1." id=".huh_address::PHONE1." value='".$model->getPhone1()."'  size='".huh_address::PHONE1_SIZE ."'  maxlength='".huh_address::PHONE1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PHONE2<input type=text name=".huh_address::PHONE2." id=".huh_address::PHONE2." value='".$model->getPhone2()."'  size='".huh_address::PHONE2_SIZE ."'  maxlength='".huh_address::PHONE2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>POSITIONHELD<input type=text name=".huh_address::POSITIONHELD." id=".huh_address::POSITIONHELD." value='".$model->getPositionHeld()."'  size='".huh_address::POSITIONHELD_SIZE ."'  maxlength='".huh_address::POSITIONHELD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>POSTALCODE<input type=text name=".huh_address::POSTALCODE." id=".huh_address::POSTALCODE." value='".$model->getPostalCode()."'  size='".huh_address::POSTALCODE_SIZE ."'  maxlength='".huh_address::POSTALCODE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_address::REMARKS." id=".huh_address::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_address::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ROOMORBUILDING<input type=text name=".huh_address::ROOMORBUILDING." id=".huh_address::ROOMORBUILDING." value='".$model->getRoomOrBuilding()."'  size='".huh_address::ROOMORBUILDING_SIZE ."'  maxlength='".huh_address::ROOMORBUILDING_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STARTDATE<input type=text name=".huh_address::STARTDATE." id=".huh_address::STARTDATE." value='".$model->getStartDate()."'  size='".huh_address::STARTDATE_SIZE ."'  maxlength='".huh_address::STARTDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STATE<input type=text name=".huh_address::STATE." id=".huh_address::STATE." value='".$model->getState()."'  size='51'  maxlength='".huh_address::STATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TYPEOFADDR<input type=text name=".huh_address::TYPEOFADDR." id=".huh_address::TYPEOFADDR." value='".$model->getTypeOfAddr()."'  size='".huh_address::TYPEOFADDR_SIZE ."'  maxlength='".huh_address::TYPEOFADDR_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_address::MODIFIEDBYAGENTID." id=".huh_address::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_address::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_address::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>AGENTID<input type=text name=".huh_address::AGENTID." id=".huh_address::AGENTID." value='".$model->getAgentID()."'  size='".huh_address::AGENTID_SIZE ."'  maxlength='".huh_address::AGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_address::CREATEDBYAGENTID." id=".huh_address::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_address::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_address::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
