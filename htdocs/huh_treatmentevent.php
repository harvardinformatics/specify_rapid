<?php
//==============================================================================
//===   treatmentevent.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_treatmentevent implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const TREATMENTEVENTID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const DATEBOXED_SIZE       = 12; //DATE
   const DATECLEANED_SIZE     = 12; //DATE
   const DATECOMPLETED_SIZE   = 12; //DATE
   const DATERECEIVED_SIZE    = 12; //DATE
   const DATETOISOLATION_SIZE = 12; //DATE
   const DATETREATMENTENDED_SIZE = 12; //DATE
   const DATETREATMENTSTARTED_SIZE = 12; //DATE
   const FIELDNUMBER_SIZE     = 20; //YEAR
   const STORAGE_SIZE         = 64; //64
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const TREATMENTNUMBER_SIZE = 32; //32
   const TYPE_SIZE            = 32; //32
   const PREPARATIONID_SIZE   = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const ACCESSIONID_SIZE     = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const DIVISIONID_SIZE      = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const TREATMENTEVENTID  = 'TreatmentEventID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const DATEBOXED         = 'DateBoxed';
   const DATECLEANED       = 'DateCleaned';
   const DATECOMPLETED     = 'DateCompleted';
   const DATERECEIVED      = 'DateReceived';
   const DATETOISOLATION   = 'DateToIsolation';
   const DATETREATMENTENDED = 'DateTreatmentEnded';
   const DATETREATMENTSTARTED = 'DateTreatmentStarted';
   const FIELDNUMBER       = 'FieldNumber';
   const STORAGE           = 'Storage';
   const REMARKS           = 'Remarks';
   const TREATMENTNUMBER   = 'TreatmentNumber';
   const TYPE              = 'Type';
   const PREPARATIONID     = 'PreparationID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const ACCESSIONID       = 'AccessionID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const DIVISIONID        = 'DivisionID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $TreatmentEventID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['TreatmentEventID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $DateBoxed = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateBoxed']), 0, 12);
  $DateCleaned = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateCleaned']), 0, 12);
  $DateCompleted = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateCompleted']), 0, 12);
  $DateReceived = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateReceived']), 0, 12);
  $DateToIsolation = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateToIsolation']), 0, 12);
  $DateTreatmentEnded = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateTreatmentEnded']), 0, 12);
  $DateTreatmentStarted = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateTreatmentStarted']), 0, 12);
  $FieldNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FieldNumber']), 0, 20);
  $Storage = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Storage']), 0, 64);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $TreatmentNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TreatmentNumber']), 0, 32);
  $Type = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Type']), 0, 32);
  $PreparationID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PreparationID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $AccessionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AccessionID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $DivisionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DivisionID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $TreatmentEventID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $DateBoxed; // DATE 
   private $DateCleaned; // DATE 
   private $DateCompleted; // DATE 
   private $DateReceived; // DATE 
   private $DateToIsolation; // DATE 
   private $DateTreatmentEnded; // DATE 
   private $DateTreatmentStarted; // DATE 
   private $FieldNumber; // YEAR 
   private $Storage; // VARCHAR(64) 
   private $Remarks; // LONGVARCHAR 
   private $TreatmentNumber; // VARCHAR(32) 
   private $Type; // VARCHAR(32) 
   private $PreparationID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $AccessionID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $DivisionID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' TreatmentEventID, TimestampCreated, TimestampModified, Version, DateBoxed, DateCleaned, DateCompleted, DateReceived, DateToIsolation, DateTreatmentEnded, DateTreatmentStarted, FieldNumber, Storage, Remarks, TreatmentNumber, Type, PreparationID, ModifiedByAgentID, AccessionID, CreatedByAgentID, DivisionID, ';
   const PKFIELDLIST = ' TreatmentEventID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'TreatmentEventID'  ) ;
   private $allFieldsArray = array( 0 => 'TreatmentEventID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'DateBoxed' , 5 => 'DateCleaned' , 6 => 'DateCompleted' , 7 => 'DateReceived' , 8 => 'DateToIsolation' , 9 => 'DateTreatmentEnded' , 10 => 'DateTreatmentStarted' , 11 => 'FieldNumber' , 12 => 'Storage' , 13 => 'Remarks' , 14 => 'TreatmentNumber' , 15 => 'Type' , 16 => 'PreparationID' , 17 => 'ModifiedByAgentID' , 18 => 'AccessionID' , 19 => 'CreatedByAgentID' , 20 => 'DivisionID'  ) ;
   private $selectDistinctFieldsArray = array( 7 => 'DateReceived' , 10 => 'DateTreatmentStarted' , 11 => 'FieldNumber' , 14 => 'TreatmentNumber' , 16 => 'PreparationID' , 17 => 'ModifiedByAgentID' , 18 => 'AccessionID' , 19 => 'CreatedByAgentID' , 20 => 'DivisionID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_treatmentevent(){
       $this->TreatmentEventID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->DateBoxed = '';
       $this->DateCleaned = '';
       $this->DateCompleted = '';
       $this->DateReceived = '';
       $this->DateToIsolation = '';
       $this->DateTreatmentEnded = '';
       $this->DateTreatmentStarted = '';
       $this->FieldNumber = '';
       $this->Storage = '';
       $this->Remarks = '';
       $this->TreatmentNumber = '';
       $this->Type = '';
       $this->PreparationID = '';
       $this->ModifiedByAgentID = '';
       $this->AccessionID = '';
       $this->CreatedByAgentID = '';
       $this->DivisionID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='TreatmentEventID') { $returnvalue = $this->setTreatmentEventID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='DateBoxed') { $returnvalue = $this->setDateBoxed($value); } 
             if ($fieldname=='DateCleaned') { $returnvalue = $this->setDateCleaned($value); } 
             if ($fieldname=='DateCompleted') { $returnvalue = $this->setDateCompleted($value); } 
             if ($fieldname=='DateReceived') { $returnvalue = $this->setDateReceived($value); } 
             if ($fieldname=='DateToIsolation') { $returnvalue = $this->setDateToIsolation($value); } 
             if ($fieldname=='DateTreatmentEnded') { $returnvalue = $this->setDateTreatmentEnded($value); } 
             if ($fieldname=='DateTreatmentStarted') { $returnvalue = $this->setDateTreatmentStarted($value); } 
             if ($fieldname=='FieldNumber') { $returnvalue = $this->setFieldNumber($value); } 
             if ($fieldname=='Storage') { $returnvalue = $this->setStorage($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='TreatmentNumber') { $returnvalue = $this->setTreatmentNumber($value); } 
             if ($fieldname=='Type') { $returnvalue = $this->setType($value); } 
             if ($fieldname=='PreparationID') { $returnvalue = $this->setPreparationID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='AccessionID') { $returnvalue = $this->setAccessionID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->setDivisionID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='TreatmentEventID') { $returnvalue = $this->getTreatmentEventID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='DateBoxed') { $returnvalue = $this->getDateBoxed(); } 
             if ($fieldname=='DateCleaned') { $returnvalue = $this->getDateCleaned(); } 
             if ($fieldname=='DateCompleted') { $returnvalue = $this->getDateCompleted(); } 
             if ($fieldname=='DateReceived') { $returnvalue = $this->getDateReceived(); } 
             if ($fieldname=='DateToIsolation') { $returnvalue = $this->getDateToIsolation(); } 
             if ($fieldname=='DateTreatmentEnded') { $returnvalue = $this->getDateTreatmentEnded(); } 
             if ($fieldname=='DateTreatmentStarted') { $returnvalue = $this->getDateTreatmentStarted(); } 
             if ($fieldname=='FieldNumber') { $returnvalue = $this->getFieldNumber(); } 
             if ($fieldname=='Storage') { $returnvalue = $this->getStorage(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='TreatmentNumber') { $returnvalue = $this->getTreatmentNumber(); } 
             if ($fieldname=='Type') { $returnvalue = $this->getType(); } 
             if ($fieldname=='PreparationID') { $returnvalue = $this->getPreparationID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='AccessionID') { $returnvalue = $this->getAccessionID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->getDivisionID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*TreatmentEventID*/
   public function getTreatmentEventID() {
       if ($this->TreatmentEventID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TreatmentEventID));
       }
   }
   public function setTreatmentEventID($TreatmentEventID) {
       if (strlen(preg_replace('/[^0-9]/','',$TreatmentEventID)) > huh_treatmentevent::TREATMENTEVENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $TreatmentEventID = trim($TreatmentEventID);
       if (!ctype_digit(strval($TreatmentEventID)) && trim(strval($TreatmentEventID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->TreatmentEventID = $this->l_addslashes($TreatmentEventID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_treatmentevent::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_treatmentevent::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_treatmentevent::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*DateBoxed*/
   public function getDateBoxed() {
       if ($this->DateBoxed==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateBoxed));
       }
   }
   public function setDateBoxed($DateBoxed) {
       if (strlen($DateBoxed) > huh_treatmentevent::DATEBOXED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateBoxed = $this->l_addslashes($DateBoxed);
       $this->dirty = true;
   }
/*DateCleaned*/
   public function getDateCleaned() {
       if ($this->DateCleaned==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateCleaned));
       }
   }
   public function setDateCleaned($DateCleaned) {
       if (strlen($DateCleaned) > huh_treatmentevent::DATECLEANED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateCleaned = $this->l_addslashes($DateCleaned);
       $this->dirty = true;
   }
/*DateCompleted*/
   public function getDateCompleted() {
       if ($this->DateCompleted==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateCompleted));
       }
   }
   public function setDateCompleted($DateCompleted) {
       if (strlen($DateCompleted) > huh_treatmentevent::DATECOMPLETED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateCompleted = $this->l_addslashes($DateCompleted);
       $this->dirty = true;
   }
/*DateReceived*/
   public function getDateReceived() {
       if ($this->DateReceived==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateReceived));
       }
   }
   public function setDateReceived($DateReceived) {
       if (strlen($DateReceived) > huh_treatmentevent::DATERECEIVED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateReceived = $this->l_addslashes($DateReceived);
       $this->dirty = true;
   }
/*DateToIsolation*/
   public function getDateToIsolation() {
       if ($this->DateToIsolation==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateToIsolation));
       }
   }
   public function setDateToIsolation($DateToIsolation) {
       if (strlen($DateToIsolation) > huh_treatmentevent::DATETOISOLATION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateToIsolation = $this->l_addslashes($DateToIsolation);
       $this->dirty = true;
   }
/*DateTreatmentEnded*/
   public function getDateTreatmentEnded() {
       if ($this->DateTreatmentEnded==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateTreatmentEnded));
       }
   }
   public function setDateTreatmentEnded($DateTreatmentEnded) {
       if (strlen($DateTreatmentEnded) > huh_treatmentevent::DATETREATMENTENDED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateTreatmentEnded = $this->l_addslashes($DateTreatmentEnded);
       $this->dirty = true;
   }
/*DateTreatmentStarted*/
   public function getDateTreatmentStarted() {
       if ($this->DateTreatmentStarted==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateTreatmentStarted));
       }
   }
   public function setDateTreatmentStarted($DateTreatmentStarted) {
       if (strlen($DateTreatmentStarted) > huh_treatmentevent::DATETREATMENTSTARTED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateTreatmentStarted = $this->l_addslashes($DateTreatmentStarted);
       $this->dirty = true;
   }
/*FieldNumber*/
   public function getFieldNumber() {
       if ($this->FieldNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FieldNumber));
       }
   }
   public function setFieldNumber($FieldNumber) {
       if (strlen($FieldNumber) > huh_treatmentevent::FIELDNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FieldNumber = $this->l_addslashes($FieldNumber);
       $this->dirty = true;
   }
/*Storage*/
   public function getStorage() {
       if ($this->Storage==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Storage));
       }
   }
   public function setStorage($Storage) {
       if (strlen($Storage) > huh_treatmentevent::STORAGE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Storage = $this->l_addslashes($Storage);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_treatmentevent::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*TreatmentNumber*/
   public function getTreatmentNumber() {
       if ($this->TreatmentNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TreatmentNumber));
       }
   }
   public function setTreatmentNumber($TreatmentNumber) {
       if (strlen($TreatmentNumber) > huh_treatmentevent::TREATMENTNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TreatmentNumber = $this->l_addslashes($TreatmentNumber);
       $this->dirty = true;
   }
/*Type*/
   public function getType() {
       if ($this->Type==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Type));
       }
   }
   public function setType($Type) {
       if (strlen($Type) > huh_treatmentevent::TYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Type = $this->l_addslashes($Type);
       $this->dirty = true;
   }
/*PreparationID*/
   public function getPreparationID() {
       if ($this->PreparationID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PreparationID));
       }
   }
   public function setPreparationID($PreparationID) {
       if (strlen(preg_replace('/[^0-9]/','',$PreparationID)) > huh_treatmentevent::PREPARATIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PreparationID = trim($PreparationID);
       if (!ctype_digit(strval($PreparationID)) && trim(strval($PreparationID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PreparationID = $this->l_addslashes($PreparationID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_treatmentevent::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*AccessionID*/
   public function getAccessionID() {
       if ($this->AccessionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AccessionID));
       }
   }
   public function setAccessionID($AccessionID) {
       if (strlen(preg_replace('/[^0-9]/','',$AccessionID)) > huh_treatmentevent::ACCESSIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AccessionID = trim($AccessionID);
       if (!ctype_digit(strval($AccessionID)) && trim(strval($AccessionID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AccessionID = $this->l_addslashes($AccessionID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_treatmentevent::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*DivisionID*/
   public function getDivisionID() {
       if ($this->DivisionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DivisionID));
       }
   }
   public function setDivisionID($DivisionID) {
       if (strlen(preg_replace('/[^0-9]/','',$DivisionID)) > huh_treatmentevent::DIVISIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DivisionID = trim($DivisionID);
       if (!ctype_digit(strval($DivisionID)) && trim(strval($DivisionID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->DivisionID = $this->l_addslashes($DivisionID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getTreatmentEventID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['TreatmentEventID'] = $this->getTreatmentEventID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_TreatmentEventIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_DateBoxedMYSQLI_TYPE = 's';
  const C_DateCleanedMYSQLI_TYPE = 's';
  const C_DateCompletedMYSQLI_TYPE = 's';
  const C_DateReceivedMYSQLI_TYPE = 's';
  const C_DateToIsolationMYSQLI_TYPE = 's';
  const C_DateTreatmentEndedMYSQLI_TYPE = 's';
  const C_DateTreatmentStartedMYSQLI_TYPE = 's';
  const C_FieldNumberMYSQLI_TYPE = 's';
  const C_StorageMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_TreatmentNumberMYSQLI_TYPE = 's';
  const C_TypeMYSQLI_TYPE = 's';
  const C_PreparationIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_AccessionIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_DivisionIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='TreatmentEventID') { $retval = self::C_TreatmentEventIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='DateBoxed') { $retval = self::C_DateBoxedMYSQLI_TYPE; }
      if ($aFieldname=='DateCleaned') { $retval = self::C_DateCleanedMYSQLI_TYPE; }
      if ($aFieldname=='DateCompleted') { $retval = self::C_DateCompletedMYSQLI_TYPE; }
      if ($aFieldname=='DateReceived') { $retval = self::C_DateReceivedMYSQLI_TYPE; }
      if ($aFieldname=='DateToIsolation') { $retval = self::C_DateToIsolationMYSQLI_TYPE; }
      if ($aFieldname=='DateTreatmentEnded') { $retval = self::C_DateTreatmentEndedMYSQLI_TYPE; }
      if ($aFieldname=='DateTreatmentStarted') { $retval = self::C_DateTreatmentStartedMYSQLI_TYPE; }
      if ($aFieldname=='FieldNumber') { $retval = self::C_FieldNumberMYSQLI_TYPE; }
      if ($aFieldname=='Storage') { $retval = self::C_StorageMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='TreatmentNumber') { $retval = self::C_TreatmentNumberMYSQLI_TYPE; }
      if ($aFieldname=='Type') { $retval = self::C_TypeMYSQLI_TYPE; }
      if ($aFieldname=='PreparationID') { $retval = self::C_PreparationIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='AccessionID') { $retval = self::C_AccessionIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='DivisionID') { $retval = self::C_DivisionIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setTreatmentEventID($pk[TreatmentEventID]);
             } else { ;
                 $this->setTreatmentEventID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->TreatmentEventID != NULL) {
           $sql = 'SELECT TreatmentEventID, TimestampCreated, TimestampModified, Version, DateBoxed, DateCleaned, DateCompleted, DateReceived, DateToIsolation, DateTreatmentEnded, DateTreatmentStarted, FieldNumber, Storage, Remarks, TreatmentNumber, Type, PreparationID, ModifiedByAgentID, AccessionID, CreatedByAgentID, DivisionID FROM treatmentevent WHERE TreatmentEventID = '.$this->TreatmentEventID ;

           $preparesql = 'SELECT TreatmentEventID, TimestampCreated, TimestampModified, Version, DateBoxed, DateCleaned, DateCompleted, DateReceived, DateToIsolation, DateTreatmentEnded, DateTreatmentStarted, FieldNumber, Storage, Remarks, TreatmentNumber, Type, PreparationID, ModifiedByAgentID, AccessionID, CreatedByAgentID, DivisionID FROM treatmentevent WHERE TreatmentEventID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->TreatmentEventID);
              $statement->execute();
              $statement->bind_result($this->TreatmentEventID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->DateBoxed, $this->DateCleaned, $this->DateCompleted, $this->DateReceived, $this->DateToIsolation, $this->DateTreatmentEnded, $this->DateTreatmentStarted, $this->FieldNumber, $this->Storage, $this->Remarks, $this->TreatmentNumber, $this->Type, $this->PreparationID, $this->ModifiedByAgentID, $this->AccessionID, $this->CreatedByAgentID, $this->DivisionID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->TreatmentEventID!= NULL) {
            $sql  = 'UPDATE  treatmentevent SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", DateBoxed = ? ";
            $sql .=  ", DateCleaned = ? ";
            $sql .=  ", DateCompleted = ? ";
            $sql .=  ", DateReceived = ? ";
            $sql .=  ", DateToIsolation = ? ";
            $sql .=  ", DateTreatmentEnded = ? ";
            $sql .=  ", DateTreatmentStarted = ? ";
            $sql .=  ", FieldNumber = ? ";
            $sql .=  ", Storage = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", TreatmentNumber = ? ";
            $sql .=  ", Type = ? ";
            $sql .=  ", PreparationID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", AccessionID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", DivisionID = ? ";

            $sql .= "  WHERE TreatmentEventID = ? ";
        } else {
            $sql  = 'INSERT INTO treatmentevent ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( TreatmentEventID ,  TimestampCreated ,  TimestampModified ,  Version ,  DateBoxed ,  DateCleaned ,  DateCompleted ,  DateReceived ,  DateToIsolation ,  DateTreatmentEnded ,  DateTreatmentStarted ,  FieldNumber ,  Storage ,  Remarks ,  TreatmentNumber ,  Type ,  PreparationID ,  ModifiedByAgentID ,  AccessionID ,  CreatedByAgentID ,  DivisionID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->TreatmentEventID!= NULL ) {
              $statement->bind_param("ississssssssssssiiiiii", $this->TreatmentEventID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->DateBoxed , $this->DateCleaned , $this->DateCompleted , $this->DateReceived , $this->DateToIsolation , $this->DateTreatmentEnded , $this->DateTreatmentStarted , $this->FieldNumber , $this->Storage , $this->Remarks , $this->TreatmentNumber , $this->Type , $this->PreparationID , $this->ModifiedByAgentID , $this->AccessionID , $this->CreatedByAgentID , $this->DivisionID , $this->TreatmentEventID );
           } else { 
              $statement->bind_param("ississssssssssssiiiii", $this->TreatmentEventID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->DateBoxed , $this->DateCleaned , $this->DateCompleted , $this->DateReceived , $this->DateToIsolation , $this->DateTreatmentEnded , $this->DateTreatmentStarted , $this->FieldNumber , $this->Storage , $this->Remarks , $this->TreatmentNumber , $this->Type , $this->PreparationID , $this->ModifiedByAgentID , $this->AccessionID , $this->CreatedByAgentID , $this->DivisionID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->TreatmentEventID != NULL) {
           $sql = 'SELECT TreatmentEventID, TimestampCreated, TimestampModified, Version, DateBoxed, DateCleaned, DateCompleted, DateReceived, DateToIsolation, DateTreatmentEnded, DateTreatmentStarted, FieldNumber, Storage, Remarks, TreatmentNumber, Type, PreparationID, ModifiedByAgentID, AccessionID, CreatedByAgentID, DivisionID FROM treatmentevent WHERE TreatmentEventID = "'.$this->TreatmentEventID.'"  ' ;

           $preparedsql = 'SELECT  FROM treatmentevent WHERE  and TreatmentEventID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississssssssssssiiiii", $this->TreatmentEventID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->DateBoxed, $this->DateCleaned, $this->DateCompleted, $this->DateReceived, $this->DateToIsolation, $this->DateTreatmentEnded, $this->DateTreatmentStarted, $this->FieldNumber, $this->Storage, $this->Remarks, $this->TreatmentNumber, $this->Type, $this->PreparationID, $this->ModifiedByAgentID, $this->AccessionID, $this->CreatedByAgentID, $this->DivisionID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM treatmentevent WHERE  and TreatmentEventID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississssssssssssiiiii", $this->TreatmentEventID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->DateBoxed, $this->DateCleaned, $this->DateCompleted, $this->DateReceived, $this->DateToIsolation, $this->DateTreatmentEnded, $this->DateTreatmentStarted, $this->FieldNumber, $this->Storage, $this->Remarks, $this->TreatmentNumber, $this->Type, $this->PreparationID, $this->ModifiedByAgentID, $this->AccessionID, $this->CreatedByAgentID, $this->DivisionID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->TreatmentEventID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM treatmentevent';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT TreatmentEventID FROM treatmentevent $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_treatmentevent();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: PreparationID
      $t = new preparation();
      $t->load(getPreparationID());
      $returnvalue[PreparationID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: AccessionID
      $t = new accession();
      $t->load(getAccessionID());
      $returnvalue[AccessionID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: DivisionID
      $t = new division();
      $t->load(getDivisionID());
      $returnvalue[DivisionID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT TreatmentEventID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(DateBoxed,'') || ' ' || IFNULL(DateCleaned,'') || ' ' || IFNULL(DateCompleted,'') || ' ' || IFNULL(DateReceived,'') || ' ' || IFNULL(DateToIsolation,'') || ' ' || IFNULL(DateTreatmentEnded,'') || ' ' || IFNULL(DateTreatmentStarted,'') || ' ' || IFNULL(FieldNumber,'') || ' ' || IFNULL(Storage,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(TreatmentNumber,'') || ' ' || IFNULL(Type,'') || ' ' || IFNULL(PreparationID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(AccessionID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(DivisionID,'')) FROM treatmentevent order by DateReceived, DateTreatmentStarted, FieldNumber, TreatmentNumber, PreparationID, ModifiedByAgentID, AccessionID, CreatedByAgentID, DivisionID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM treatmentevent order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByDateReceived($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TreatmentEventID FROM treatmentevent WHERE DateReceived $operator '$searchTerm'";
        $preparedsql = "SELECT TreatmentEventID FROM treatmentevent WHERE DateReceived $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_treatmentevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDateTreatmentStarted($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TreatmentEventID FROM treatmentevent WHERE DateTreatmentStarted $operator '$searchTerm'";
        $preparedsql = "SELECT TreatmentEventID FROM treatmentevent WHERE DateTreatmentStarted $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_treatmentevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByFieldNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TreatmentEventID FROM treatmentevent WHERE FieldNumber $operator '$searchTerm'";
        $preparedsql = "SELECT TreatmentEventID FROM treatmentevent WHERE FieldNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_treatmentevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByTreatmentNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TreatmentEventID FROM treatmentevent WHERE TreatmentNumber $operator '$searchTerm'";
        $preparedsql = "SELECT TreatmentEventID FROM treatmentevent WHERE TreatmentNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_treatmentevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPreparationID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TreatmentEventID FROM treatmentevent WHERE PreparationID $operator '$searchTerm'";
        $preparedsql = "SELECT TreatmentEventID FROM treatmentevent WHERE PreparationID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_treatmentevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TreatmentEventID FROM treatmentevent WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT TreatmentEventID FROM treatmentevent WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_treatmentevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAccessionID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TreatmentEventID FROM treatmentevent WHERE AccessionID $operator '$searchTerm'";
        $preparedsql = "SELECT TreatmentEventID FROM treatmentevent WHERE AccessionID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_treatmentevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TreatmentEventID FROM treatmentevent WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT TreatmentEventID FROM treatmentevent WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_treatmentevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDivisionID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT TreatmentEventID FROM treatmentevent WHERE DivisionID $operator '$searchTerm'";
        $preparedsql = "SELECT TreatmentEventID FROM treatmentevent WHERE DivisionID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_treatmentevent();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctDateReceived($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DateReceived ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DateReceived FROM treatmentevent group by DateReceived order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DateReceived=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDateTreatmentStarted($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DateTreatmentStarted ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DateTreatmentStarted FROM treatmentevent group by DateTreatmentStarted order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DateTreatmentStarted=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctFieldNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' FieldNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, FieldNumber FROM treatmentevent group by FieldNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&FieldNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctTreatmentNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' TreatmentNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, TreatmentNumber FROM treatmentevent group by TreatmentNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&TreatmentNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPreparationID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' PreparationID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, PreparationID FROM treatmentevent group by PreparationID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&PreparationID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM treatmentevent group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAccessionID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AccessionID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AccessionID FROM treatmentevent group by AccessionID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AccessionID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM treatmentevent group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDivisionID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DivisionID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DivisionID FROM treatmentevent group by DivisionID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DivisionID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'DateReceived':
             $returnvalue = $this->selectDistinctDateReceived($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DateTreatmentStarted':
             $returnvalue = $this->selectDistinctDateTreatmentStarted($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'FieldNumber':
             $returnvalue = $this->selectDistinctFieldNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'TreatmentNumber':
             $returnvalue = $this->selectDistinctTreatmentNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'PreparationID':
             $returnvalue = $this->selectDistinctPreparationID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AccessionID':
             $returnvalue = $this->selectDistinctAccessionID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DivisionID':
             $returnvalue = $this->selectDistinctDivisionID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the treatmentevent.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_treatmenteventView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_treatmentevent <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_treatmentevent::TREATMENTEVENTID.": ".$model->getTreatmentEventID()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::DATEBOXED.": ".$model->getDateBoxed()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::DATECLEANED.": ".$model->getDateCleaned()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::DATECOMPLETED.": ".$model->getDateCompleted()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::DATERECEIVED.": ".$model->getDateReceived()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::DATETOISOLATION.": ".$model->getDateToIsolation()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::DATETREATMENTENDED.": ".$model->getDateTreatmentEnded()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::DATETREATMENTSTARTED.": ".$model->getDateTreatmentStarted()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::FIELDNUMBER.": ".$model->getFieldNumber()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::STORAGE.": ".$model->getStorage()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::TREATMENTNUMBER.": ".$model->getTreatmentNumber()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::TYPE.": ".$model->getType()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::PREPARATIONID.": ".$model->getPreparationID()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::ACCESSIONID.": ".$model->getAccessionID()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_treatmentevent::DIVISIONID.": ".$model->getDivisionID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>preparation</li>";
           $t_preparation = new huh_preparation();
           $t_preparationView = new huh_preparationView();
           $t_preparationView->setModel($t_preparation);
           if ($model->getPreparationID() != '') { 
               $t_preparation->load($model->getPreparationID());
               $returnvalue .= $t_preparationView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>accession</li>";
           $t_accession = new huh_accession();
           $t_accessionView = new huh_accessionView();
           $t_accessionView->setModel($t_accession);
           if ($model->getAccessionID() != '') { 
               $t_accession->load($model->getAccessionID());
               $returnvalue .= $t_accessionView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>division</li>";
           $t_division = new huh_division();
           $t_divisionView = new huh_divisionView();
           $t_divisionView->setModel($t_division);
           if ($model->getDivisionID() != '') { 
               $t_division->load($model->getDivisionID());
               $returnvalue .= $t_divisionView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_treatmentevent::TREATMENTEVENTID.': "'.$model->getTreatmentEventID().'",';
       $returnvalue .= '"'.huh_treatmentevent::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_treatmentevent::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_treatmentevent::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_treatmentevent::DATEBOXED.': "'.$model->getDateBoxed().'",';
       $returnvalue .= '"'.huh_treatmentevent::DATECLEANED.': "'.$model->getDateCleaned().'",';
       $returnvalue .= '"'.huh_treatmentevent::DATECOMPLETED.': "'.$model->getDateCompleted().'",';
       $returnvalue .= '"'.huh_treatmentevent::DATERECEIVED.': "'.$model->getDateReceived().'",';
       $returnvalue .= '"'.huh_treatmentevent::DATETOISOLATION.': "'.$model->getDateToIsolation().'",';
       $returnvalue .= '"'.huh_treatmentevent::DATETREATMENTENDED.': "'.$model->getDateTreatmentEnded().'",';
       $returnvalue .= '"'.huh_treatmentevent::DATETREATMENTSTARTED.': "'.$model->getDateTreatmentStarted().'",';
       $returnvalue .= '"'.huh_treatmentevent::FIELDNUMBER.': "'.$model->getFieldNumber().'",';
       $returnvalue .= '"'.huh_treatmentevent::STORAGE.': "'.$model->getStorage().'",';
       $returnvalue .= '"'.huh_treatmentevent::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_treatmentevent::TREATMENTNUMBER.': "'.$model->getTreatmentNumber().'",';
       $returnvalue .= '"'.huh_treatmentevent::TYPE.': "'.$model->getType().'",';
       $returnvalue .= '"'.huh_treatmentevent::PREPARATIONID.': "'.$model->getPreparationID().'",';
       $returnvalue .= '"'.huh_treatmentevent::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_treatmentevent::ACCESSIONID.': "'.$model->getAccessionID().'",';
       $returnvalue .= '"'.huh_treatmentevent::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_treatmentevent::DIVISIONID.': "'.$model->getDivisionID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getTreatmentEventID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getDateBoxed()."</td>\n";
       $returnvalue .= "<td>".$model->getDateCleaned()."</td>\n";
       $returnvalue .= "<td>".$model->getDateCompleted()."</td>\n";
       $returnvalue .= "<td>".$model->getDateReceived()."</td>\n";
       $returnvalue .= "<td>".$model->getDateToIsolation()."</td>\n";
       $returnvalue .= "<td>".$model->getDateTreatmentEnded()."</td>\n";
       $returnvalue .= "<td>".$model->getDateTreatmentStarted()."</td>\n";
       $returnvalue .= "<td>".$model->getFieldNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getStorage()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getTreatmentNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getType()."</td>\n";
       $returnvalue .= "<td>".$model->getPreparationID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getAccessionID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getDivisionID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_treatmentevent::TREATMENTEVENTID."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::DATEBOXED."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::DATECLEANED."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::DATECOMPLETED."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::DATERECEIVED."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::DATETOISOLATION."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::DATETREATMENTENDED."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::DATETREATMENTSTARTED."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::FIELDNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::STORAGE."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::TREATMENTNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::TYPE."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::PREPARATIONID."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::ACCESSIONID."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_treatmentevent::DIVISIONID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_treatmentevent">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new TreatmentEventID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_treatmentevent::TREATMENTEVENTID.">TREATMENTEVENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_treatmentevent::TREATMENTEVENTID." id=".huh_treatmentevent::TREATMENTEVENTID." value='".$model->getTreatmentEventID()."'  style=' width:".huh_treatmentevent::TREATMENTEVENTID_SIZE ."em;  '  maxlength='".huh_treatmentevent::TREATMENTEVENTID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_treatmentevent::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_treatmentevent::TIMESTAMPCREATED." id=".huh_treatmentevent::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_treatmentevent::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_treatmentevent::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_treatmentevent::TIMESTAMPMODIFIED." id=".huh_treatmentevent::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_treatmentevent::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_treatmentevent::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_treatmentevent::VERSION." id=".huh_treatmentevent::VERSION." value='".$model->getVersion()."'  style=' width:".huh_treatmentevent::VERSION_SIZE ."em;  '  maxlength='".huh_treatmentevent::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::DATEBOXED.">DATEBOXED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_treatmentevent::DATEBOXED." id=".huh_treatmentevent::DATEBOXED." value='".$model->getDateBoxed()."'  style=' width:".huh_treatmentevent::DATEBOXED_SIZE ."em;  '  maxlength='".huh_treatmentevent::DATEBOXED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::DATECLEANED.">DATECLEANED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_treatmentevent::DATECLEANED." id=".huh_treatmentevent::DATECLEANED." value='".$model->getDateCleaned()."'  style=' width:".huh_treatmentevent::DATECLEANED_SIZE ."em;  '  maxlength='".huh_treatmentevent::DATECLEANED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::DATECOMPLETED.">DATECOMPLETED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_treatmentevent::DATECOMPLETED." id=".huh_treatmentevent::DATECOMPLETED." value='".$model->getDateCompleted()."'  style=' width:".huh_treatmentevent::DATECOMPLETED_SIZE ."em;  '  maxlength='".huh_treatmentevent::DATECOMPLETED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::DATERECEIVED.">DATERECEIVED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_treatmentevent::DATERECEIVED." id=".huh_treatmentevent::DATERECEIVED." value='".$model->getDateReceived()."'  style=' width:".huh_treatmentevent::DATERECEIVED_SIZE ."em;  '  maxlength='".huh_treatmentevent::DATERECEIVED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::DATETOISOLATION.">DATETOISOLATION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_treatmentevent::DATETOISOLATION." id=".huh_treatmentevent::DATETOISOLATION." value='".$model->getDateToIsolation()."'  style=' width:".huh_treatmentevent::DATETOISOLATION_SIZE ."em;  '  maxlength='".huh_treatmentevent::DATETOISOLATION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::DATETREATMENTENDED.">DATETREATMENTENDED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_treatmentevent::DATETREATMENTENDED." id=".huh_treatmentevent::DATETREATMENTENDED." value='".$model->getDateTreatmentEnded()."'  style=' width:".huh_treatmentevent::DATETREATMENTENDED_SIZE ."em;  '  maxlength='".huh_treatmentevent::DATETREATMENTENDED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::DATETREATMENTSTARTED.">DATETREATMENTSTARTED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_treatmentevent::DATETREATMENTSTARTED." id=".huh_treatmentevent::DATETREATMENTSTARTED." value='".$model->getDateTreatmentStarted()."'  style=' width:".huh_treatmentevent::DATETREATMENTSTARTED_SIZE ."em;  '  maxlength='".huh_treatmentevent::DATETREATMENTSTARTED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::FIELDNUMBER.">FIELDNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_treatmentevent::FIELDNUMBER." id=".huh_treatmentevent::FIELDNUMBER." value='".$model->getFieldNumber()."'  style=' width:".huh_treatmentevent::FIELDNUMBER_SIZE ."em;  '  maxlength='".huh_treatmentevent::FIELDNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::STORAGE.">STORAGE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_treatmentevent::STORAGE." id=".huh_treatmentevent::STORAGE." >".$model->getStorage()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_treatmentevent::REMARKS." id=".huh_treatmentevent::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::TREATMENTNUMBER.">TREATMENTNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_treatmentevent::TREATMENTNUMBER." id=".huh_treatmentevent::TREATMENTNUMBER." value='".$model->getTreatmentNumber()."'  style=' width:".huh_treatmentevent::TREATMENTNUMBER_SIZE ."em;  '  maxlength='".huh_treatmentevent::TREATMENTNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::TYPE.">TYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_treatmentevent::TYPE." id=".huh_treatmentevent::TYPE." value='".$model->getType()."'  style=' width:".huh_treatmentevent::TYPE_SIZE ."em;  '  maxlength='".huh_treatmentevent::TYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::PREPARATIONID.">PREPARATIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_treatmentevent::PREPARATIONID." id=".huh_treatmentevent::PREPARATIONID." value='".$model->getPreparationID()."'  style=' width:".huh_treatmentevent::PREPARATIONID_SIZE ."em;  '  maxlength='".huh_treatmentevent::PREPARATIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_treatmentevent::MODIFIEDBYAGENTID." id=".huh_treatmentevent::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_treatmentevent::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_treatmentevent::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::ACCESSIONID.">ACCESSIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_treatmentevent::ACCESSIONID." id=".huh_treatmentevent::ACCESSIONID." value='".$model->getAccessionID()."'  style=' width:".huh_treatmentevent::ACCESSIONID_SIZE ."em;  '  maxlength='".huh_treatmentevent::ACCESSIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_treatmentevent::CREATEDBYAGENTID." id=".huh_treatmentevent::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_treatmentevent::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_treatmentevent::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_treatmentevent::DIVISIONID.">DIVISIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_treatmentevent::DIVISIONID." id=".huh_treatmentevent::DIVISIONID." value='".$model->getDivisionID()."'  style=' width:".huh_treatmentevent::DIVISIONID_SIZE ."em;  '  maxlength='".huh_treatmentevent::DIVISIONID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_treatmentevent">';
       $returnvalue .= '<input type=hidden name=TreatmentEventID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_treatmentevent">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>TREATMENTEVENTID<input type=text name=".huh_treatmentevent::TREATMENTEVENTID." id=".huh_treatmentevent::TREATMENTEVENTID." value='".$model->getTreatmentEventID()."'  size='".huh_treatmentevent::TREATMENTEVENTID_SIZE ."'  maxlength='".huh_treatmentevent::TREATMENTEVENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_treatmentevent::TIMESTAMPCREATED." id=".huh_treatmentevent::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_treatmentevent::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_treatmentevent::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_treatmentevent::TIMESTAMPMODIFIED." id=".huh_treatmentevent::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_treatmentevent::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_treatmentevent::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_treatmentevent::VERSION." id=".huh_treatmentevent::VERSION." value='".$model->getVersion()."'  size='".huh_treatmentevent::VERSION_SIZE ."'  maxlength='".huh_treatmentevent::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATEBOXED<input type=text name=".huh_treatmentevent::DATEBOXED." id=".huh_treatmentevent::DATEBOXED." value='".$model->getDateBoxed()."'  size='".huh_treatmentevent::DATEBOXED_SIZE ."'  maxlength='".huh_treatmentevent::DATEBOXED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATECLEANED<input type=text name=".huh_treatmentevent::DATECLEANED." id=".huh_treatmentevent::DATECLEANED." value='".$model->getDateCleaned()."'  size='".huh_treatmentevent::DATECLEANED_SIZE ."'  maxlength='".huh_treatmentevent::DATECLEANED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATECOMPLETED<input type=text name=".huh_treatmentevent::DATECOMPLETED." id=".huh_treatmentevent::DATECOMPLETED." value='".$model->getDateCompleted()."'  size='".huh_treatmentevent::DATECOMPLETED_SIZE ."'  maxlength='".huh_treatmentevent::DATECOMPLETED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATERECEIVED<input type=text name=".huh_treatmentevent::DATERECEIVED." id=".huh_treatmentevent::DATERECEIVED." value='".$model->getDateReceived()."'  size='".huh_treatmentevent::DATERECEIVED_SIZE ."'  maxlength='".huh_treatmentevent::DATERECEIVED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATETOISOLATION<input type=text name=".huh_treatmentevent::DATETOISOLATION." id=".huh_treatmentevent::DATETOISOLATION." value='".$model->getDateToIsolation()."'  size='".huh_treatmentevent::DATETOISOLATION_SIZE ."'  maxlength='".huh_treatmentevent::DATETOISOLATION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATETREATMENTENDED<input type=text name=".huh_treatmentevent::DATETREATMENTENDED." id=".huh_treatmentevent::DATETREATMENTENDED." value='".$model->getDateTreatmentEnded()."'  size='".huh_treatmentevent::DATETREATMENTENDED_SIZE ."'  maxlength='".huh_treatmentevent::DATETREATMENTENDED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATETREATMENTSTARTED<input type=text name=".huh_treatmentevent::DATETREATMENTSTARTED." id=".huh_treatmentevent::DATETREATMENTSTARTED." value='".$model->getDateTreatmentStarted()."'  size='".huh_treatmentevent::DATETREATMENTSTARTED_SIZE ."'  maxlength='".huh_treatmentevent::DATETREATMENTSTARTED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FIELDNUMBER<input type=text name=".huh_treatmentevent::FIELDNUMBER." id=".huh_treatmentevent::FIELDNUMBER." value='".$model->getFieldNumber()."'  size='".huh_treatmentevent::FIELDNUMBER_SIZE ."'  maxlength='".huh_treatmentevent::FIELDNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STORAGE<input type=text name=".huh_treatmentevent::STORAGE." id=".huh_treatmentevent::STORAGE." value='".$model->getStorage()."'  size='51'  maxlength='".huh_treatmentevent::STORAGE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_treatmentevent::REMARKS." id=".huh_treatmentevent::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_treatmentevent::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TREATMENTNUMBER<input type=text name=".huh_treatmentevent::TREATMENTNUMBER." id=".huh_treatmentevent::TREATMENTNUMBER." value='".$model->getTreatmentNumber()."'  size='".huh_treatmentevent::TREATMENTNUMBER_SIZE ."'  maxlength='".huh_treatmentevent::TREATMENTNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TYPE<input type=text name=".huh_treatmentevent::TYPE." id=".huh_treatmentevent::TYPE." value='".$model->getType()."'  size='".huh_treatmentevent::TYPE_SIZE ."'  maxlength='".huh_treatmentevent::TYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PREPARATIONID<input type=text name=".huh_treatmentevent::PREPARATIONID." id=".huh_treatmentevent::PREPARATIONID." value='".$model->getPreparationID()."'  size='".huh_treatmentevent::PREPARATIONID_SIZE ."'  maxlength='".huh_treatmentevent::PREPARATIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_treatmentevent::MODIFIEDBYAGENTID." id=".huh_treatmentevent::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_treatmentevent::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_treatmentevent::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ACCESSIONID<input type=text name=".huh_treatmentevent::ACCESSIONID." id=".huh_treatmentevent::ACCESSIONID." value='".$model->getAccessionID()."'  size='".huh_treatmentevent::ACCESSIONID_SIZE ."'  maxlength='".huh_treatmentevent::ACCESSIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_treatmentevent::CREATEDBYAGENTID." id=".huh_treatmentevent::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_treatmentevent::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_treatmentevent::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DIVISIONID<input type=text name=".huh_treatmentevent::DIVISIONID." id=".huh_treatmentevent::DIVISIONID." value='".$model->getDivisionID()."'  size='".huh_treatmentevent::DIVISIONID_SIZE ."'  maxlength='".huh_treatmentevent::DIVISIONID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
