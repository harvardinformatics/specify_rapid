<?php 
// *******  This file won't be overwritten by druid if PHP code is regenerated.
// *******  You may customize this file for your own purposes.
?>
<?php 
// Autogenerated by Druid from MySQL db Build:6
// This is an example illustrating a few of the ways in which you can use PHP classes 
// generated by Druid to produce a database driven website.  See the documentation  
// in $DRUIDHOME/docs/manuals/php_code_generation for more details.

session_start();

$debug = true;

if ($debug) {
	// See PHP documentation.
	mysqli_report(MYSQLI_REPORT_ALL ^ MYSQLI_REPORT_STRICT);
} else {
	mysqli_report(MYSQLI_REPORT_OFF);
}


include_once('druid_classes.php'); 
include_once('class_lib.php'); 
// *******  
// *******  You must provide connections.php or a replacement means of
// *******  having a database connection in scope before calling methods on generated php tables.
// *******  You must also do this in the file ajax_handler.php
// *******  
// *******  Warning: You must limit the rights of the user in the database for this
// *******  connection with appropriate (e.g. select only on this schema only from this host only) privileges.
// *******  
@include_once('connection_library.php'); // contains declaration of make_database_connection()
if (!function_exists('specify_connect')) { echo 'Error: Database connection function not defined.'; } 
@$connection = specify_connect(); 
if (!$connection) { echo 'Error: No database connection.'; } 

$table_name='';
$field_name='';
$value='';

$page = new Page();
echo $page->getHeader(null);

$display = substr(preg_replace('/[^a-z]/','',$_GET['display']),0,20);

// This switch block includes break statements and only produces output for particlar
// values of display.  Another switch block follows this that produces a cascading output for
// other values of display.
switch ($display) { 
    case 'logout':
        if (isset($_COOKIE[session_name()])) { 
            setcookie(session_name(), '', time()-42000, '/');
        }
        session_destroy();
        break;
    case 'addform':

        // You must sanitize any data that could be provided by a user.
        // The patern below may not include all valid characters for your data
        // And the length limit below may be too short for your data
        $table_name = substr(preg_replace('/[^a-zA-Z_]/','',$_GET['table']),0,50);  

        echo "<h2>Add new record to $table_name</h2>";
        $db = new database_schema();  // database_schema has discovery methods allowing you load a class representing a table when given a string 
        if ($db->hasTable($table_name)) { ;
            $table_class = $db->getClass($table_name);  // table_class is a model class for the table_name table.
            $table_view = $db->getViewClass($table_name); // table_view is a view class for the table_name table.
            $table_view->setModel($table_class);
            echo $table_view->getEditFormDojoView();
        } ;
        break;
    case 'edit':
        // You must sanitize any data that could be provided by a user.
        // The patern below may not include all valid characters for your data
        // And the length limit below may be too short for your data
        $table_name = substr(preg_replace('/[^a-zA-Z_]/','',$_GET['table']),0,50);  

        echo "<h2>Add new record to $table_name</h2>";
        $db = new database_schema();  // database_schema has discovery methods allowing you load a class representing a table when given a string 
        if ($db->hasTable($table_name)) { ;
            $table_class = $db->getClass($table_name);  // table_class is a model class for the table_name table.
            $primarykeys = $table_class->schemaPK();
            foreach ($primarykeys as $primarykey) { 
                $pkarray[$primarykey]= substr(preg_replace('/[^a-zA-Z0-9_]/','',$_GET[$primarykey]),0,50);  
            }
            $table_class->load($pkarray);
            $table_view = $db->getViewClass($table_name); // table_view is a view class for the table_name table.
            $table_view->setModel($table_class);
            echo $table_view->getEditFormDojoView();
        }
        break;
}
// This switch block doesn't include break statements, so search displays search results, table, and default table list
// table displays table and default table list, and default for all pages is table list.
switch ($display) {
   case 'search':
       // You must sanitize any data that could be provided by a user.
       // The paterns below may not include all valid characters for your data
       // And the length limits below may be too short for your data
       $table_name = substr(preg_replace('/[^a-zA-Z_]/','',$_GET['table']),0,50);  
       $field_name = substr(preg_replace('/[^a-zA-Z_0-9]/','',$_GET['field']),0,50);  
       $value = substr($_GET[$field_name],0,255);  

       echo "<h2>Search for [$table_name].[$field_name]=[$value]</h2>";
       $db = new database_schema();  // database_schema has discovery methods allowing you load a class representing a table when given a string 
       if ($db->hasTable($table_name)) { ;
          // two thirds of a model-view-controler are generated from the database by Druid in PHP
          $table_class = $db->getClass($table_name);  // table_class is a model class for the table_name table.
          $table_view = $db->getViewClass($table_name); // table_view is a view class for the table_name table.
          // You need to supply your own controler, or procedural code (like this file) to control these classes.
          
          if ($table_class->hasField($field_name)) { 
              // loadArrayKeyValueSearch() takes an array of fieldnames and search values as a parameter.
              $searchTermArray = array($field_name => $value); 
              // loadArrayKeyValueSearch() queries the database and returns an array of model objects representing rows in the target table.
              $results = $table_class->loadArrayKeyValueSearch($searchTermArray);  
              if (count($results)==0) { echo 'No matching values'; } 
              foreach($results as $row) { 
                  $table_view->setModel($row);   // Tell the view which row to display. 
                  echo $table_view->getDetailsView(true, 'index.php?display=edit&table='.$table_name.'&');  // Tell the view how to display the row. 
                  // Extend the {tablename}View classes to customize how records are displayed. 
              }
          }
       } ;
   case 'table':
       $table_name = substr(preg_replace('/[^a-zA-Z_]/','',$_GET['table']),0,50);  // May not include all valid table name characters.
       $db = new database_schema();
       if ($db->hasTable($table_name)) { ;
          echo '<h2>Distinct values in  '.$table_name.'</h2>';
          $table_class = $db->getClass($table_name);
          // Each field in the table with an index has a selectDistinct method that runs a 
          // select count(*), fieldname from tablename group by fieldname query.
          // These are directly accesible with selectDistinct{fieldname} methods, 
          //  and as shown here, with a generic keySelectDistinct($fieldname...) method.
          $fieldarray = $table_class->schemaHaveDistinct();  // schemaHaveDistinct is a discovery method to find fields with selectDistinct methods.  
          if ($fieldarray=='') { 
              echo 'No values available.';
          } else { 
              foreach($fieldarray as $key => $field) { 
                  echo '<h3>Distinct values for '.$field.'</h3>';
                  $beginwith = '';
                  $link = 'index.php?display=search&table='.$table_name.'&field='.$field;  // &{fieldname}={value} is appended by keySelectDistinct.
                  $endwith = '<BR>';
                  $includecount = true;
                  $orderbycsount = false;
                  echo $table_class->keySelectDistinct($field,$beginwith,$link,$endwith,$includecount,$orderbycount);
              }
          }
       } ;
   case 'menu':
     echo '<h2>Tables</h2>';
     echo "<ul><li>huh_HUH_ORCHIDS_ETHANOL <a href='index.php?display=table&table=huh_HUH_ORCHIDS_ETHANOL'>[Browse]</a> 
<a href='index.php?display=addform&table=huh_HUH_ORCHIDS_ETHANOL'>[Add Record]</a></li> 
<li>huh_collectingeventattachment <a href='index.php?display=table&table=huh_collectingeventattachment'>[Browse]</a> 
</ul>";
   default:
     echo '<h2>HUH Specify Rapid Data Entry</h2>';
     echo "<a href='rapid.php?display=logout'>Login</a>";
      
}

echo $page->getFooter();

// See PHP documentation.
mysqli_report(MYSQLI_REPORT_OFF);


?>
