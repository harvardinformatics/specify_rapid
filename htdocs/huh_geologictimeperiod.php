<?php
//==============================================================================
//===   geologictimeperiod.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_geologictimeperiod implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const GEOLOGICTIMEPERIODID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const ENDPERIOD_SIZE       = 20; //REAL
   const ENDUNCERTAINTY_SIZE  = 20; //REAL
   const FULLNAME_SIZE        = 255; //255
   const GUID_SIZE            = 128; //128
   const HIGHESTCHILDNODENUMBER_SIZE = 11; //INTEGER
   const ISACCEPTED_SIZE      = 1; //1
   const ISBIOSTRAT_SIZE      = 1; //1
   const NAME_SIZE            = 64; //64
   const NODENUMBER_SIZE      = 11; //INTEGER
   const RANKID_SIZE          = 11; //INTEGER
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const STANDARD_SIZE        = 64; //64
   const STARTPERIOD_SIZE     = 20; //REAL
   const STARTUNCERTAINTY_SIZE = 20; //REAL
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const GEOLOGICTIMEPERIODTREEDEFID_SIZE = 11; //INTEGER
   const GEOLOGICTIMEPERIODTREEDEFITEMID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const PARENTID_SIZE        = 11; //INTEGER
   const ACCEPTEDID_SIZE      = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const GEOLOGICTIMEPERIODID = 'GeologicTimePeriodID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const ENDPERIOD         = 'EndPeriod';
   const ENDUNCERTAINTY    = 'EndUncertainty';
   const FULLNAME          = 'FullName';
   const GUID              = 'GUID';
   const HIGHESTCHILDNODENUMBER = 'HighestChildNodeNumber';
   const ISACCEPTED        = 'IsAccepted';
   const ISBIOSTRAT        = 'IsBioStrat';
   const NAME              = 'Name';
   const NODENUMBER        = 'NodeNumber';
   const RANKID            = 'RankID';
   const REMARKS           = 'Remarks';
   const STANDARD          = 'Standard';
   const STARTPERIOD       = 'StartPeriod';
   const STARTUNCERTAINTY  = 'StartUncertainty';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const GEOLOGICTIMEPERIODTREEDEFID = 'GeologicTimePeriodTreeDefID';
   const GEOLOGICTIMEPERIODTREEDEFITEMID = 'GeologicTimePeriodTreeDefItemID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const PARENTID          = 'ParentID';
   const ACCEPTEDID        = 'AcceptedID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $GeologicTimePeriodID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['GeologicTimePeriodID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $EndPeriod = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['EndPeriod']), 0, 20);
  $EndUncertainty = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['EndUncertainty']), 0, 20);
  $FullName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FullName']), 0, 255);
  $GUID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GUID']), 0, 128);
  $HighestChildNodeNumber = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['HighestChildNodeNumber']), 0, 11);
  $IsAccepted = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsAccepted']), 0, 1);
  $IsBioStrat = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsBioStrat']), 0, 1);
  $Name = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Name']), 0, 64);
  $NodeNumber = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['NodeNumber']), 0, 11);
  $RankID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['RankID']), 0, 11);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $Standard = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Standard']), 0, 64);
  $StartPeriod = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StartPeriod']), 0, 20);
  $StartUncertainty = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StartUncertainty']), 0, 20);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $GeologicTimePeriodTreeDefID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['GeologicTimePeriodTreeDefID']), 0, 11);
  $GeologicTimePeriodTreeDefItemID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['GeologicTimePeriodTreeDefItemID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $ParentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ParentID']), 0, 11);
  $AcceptedID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AcceptedID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $GeologicTimePeriodID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $EndPeriod; // REAL 
   private $EndUncertainty; // REAL 
   private $FullName; // VARCHAR(255) 
   private $GUID; // VARCHAR(128) 
   private $HighestChildNodeNumber; // INTEGER 
   private $IsAccepted; // BIT(1) 
   private $IsBioStrat; // BIT(1) 
   private $Name; // VARCHAR(64) 
   private $NodeNumber; // INTEGER 
   private $RankID; // INTEGER 
   private $Remarks; // LONGVARCHAR 
   private $Standard; // VARCHAR(64) 
   private $StartPeriod; // REAL 
   private $StartUncertainty; // REAL 
   private $CreatedByAgentID; // INTEGER 
   private $GeologicTimePeriodTreeDefID; // INTEGER 
   private $GeologicTimePeriodTreeDefItemID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $ParentID; // INTEGER 
   private $AcceptedID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' GeologicTimePeriodID, TimestampCreated, TimestampModified, Version, EndPeriod, EndUncertainty, FullName, GUID, HighestChildNodeNumber, IsAccepted, IsBioStrat, Name, NodeNumber, RankID, Remarks, Standard, StartPeriod, StartUncertainty, CreatedByAgentID, GeologicTimePeriodTreeDefID, GeologicTimePeriodTreeDefItemID, ModifiedByAgentID, ParentID, AcceptedID, ';
   const PKFIELDLIST = ' GeologicTimePeriodID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'GeologicTimePeriodID'  ) ;
   private $allFieldsArray = array( 0 => 'GeologicTimePeriodID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'EndPeriod' , 5 => 'EndUncertainty' , 6 => 'FullName' , 7 => 'GUID' , 8 => 'HighestChildNodeNumber' , 9 => 'IsAccepted' , 10 => 'IsBioStrat' , 11 => 'Name' , 12 => 'NodeNumber' , 13 => 'RankID' , 14 => 'Remarks' , 15 => 'Standard' , 16 => 'StartPeriod' , 17 => 'StartUncertainty' , 18 => 'CreatedByAgentID' , 19 => 'GeologicTimePeriodTreeDefID' , 20 => 'GeologicTimePeriodTreeDefItemID' , 21 => 'ModifiedByAgentID' , 22 => 'ParentID' , 23 => 'AcceptedID'  ) ;
   private $selectDistinctFieldsArray = array( 6 => 'FullName' , 7 => 'GUID' , 11 => 'Name' , 18 => 'CreatedByAgentID' , 19 => 'GeologicTimePeriodTreeDefID' , 20 => 'GeologicTimePeriodTreeDefItemID' , 21 => 'ModifiedByAgentID' , 22 => 'ParentID' , 23 => 'AcceptedID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_geologictimeperiod(){
       $this->GeologicTimePeriodID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->EndPeriod = '';
       $this->EndUncertainty = '';
       $this->FullName = '';
       $this->GUID = '';
       $this->HighestChildNodeNumber = '';
       $this->IsAccepted = '';
       $this->IsBioStrat = '';
       $this->Name = '';
       $this->NodeNumber = '';
       $this->RankID = '';
       $this->Remarks = '';
       $this->Standard = '';
       $this->StartPeriod = '';
       $this->StartUncertainty = '';
       $this->CreatedByAgentID = '';
       $this->GeologicTimePeriodTreeDefID = '';
       $this->GeologicTimePeriodTreeDefItemID = '';
       $this->ModifiedByAgentID = '';
       $this->ParentID = '';
       $this->AcceptedID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='GeologicTimePeriodID') { $returnvalue = $this->setGeologicTimePeriodID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='EndPeriod') { $returnvalue = $this->setEndPeriod($value); } 
             if ($fieldname=='EndUncertainty') { $returnvalue = $this->setEndUncertainty($value); } 
             if ($fieldname=='FullName') { $returnvalue = $this->setFullName($value); } 
             if ($fieldname=='GUID') { $returnvalue = $this->setGUID($value); } 
             if ($fieldname=='HighestChildNodeNumber') { $returnvalue = $this->setHighestChildNodeNumber($value); } 
             if ($fieldname=='IsAccepted') { $returnvalue = $this->setIsAccepted($value); } 
             if ($fieldname=='IsBioStrat') { $returnvalue = $this->setIsBioStrat($value); } 
             if ($fieldname=='Name') { $returnvalue = $this->setName($value); } 
             if ($fieldname=='NodeNumber') { $returnvalue = $this->setNodeNumber($value); } 
             if ($fieldname=='RankID') { $returnvalue = $this->setRankID($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='Standard') { $returnvalue = $this->setStandard($value); } 
             if ($fieldname=='StartPeriod') { $returnvalue = $this->setStartPeriod($value); } 
             if ($fieldname=='StartUncertainty') { $returnvalue = $this->setStartUncertainty($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='GeologicTimePeriodTreeDefID') { $returnvalue = $this->setGeologicTimePeriodTreeDefID($value); } 
             if ($fieldname=='GeologicTimePeriodTreeDefItemID') { $returnvalue = $this->setGeologicTimePeriodTreeDefItemID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='ParentID') { $returnvalue = $this->setParentID($value); } 
             if ($fieldname=='AcceptedID') { $returnvalue = $this->setAcceptedID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='GeologicTimePeriodID') { $returnvalue = $this->getGeologicTimePeriodID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='EndPeriod') { $returnvalue = $this->getEndPeriod(); } 
             if ($fieldname=='EndUncertainty') { $returnvalue = $this->getEndUncertainty(); } 
             if ($fieldname=='FullName') { $returnvalue = $this->getFullName(); } 
             if ($fieldname=='GUID') { $returnvalue = $this->getGUID(); } 
             if ($fieldname=='HighestChildNodeNumber') { $returnvalue = $this->getHighestChildNodeNumber(); } 
             if ($fieldname=='IsAccepted') { $returnvalue = $this->getIsAccepted(); } 
             if ($fieldname=='IsBioStrat') { $returnvalue = $this->getIsBioStrat(); } 
             if ($fieldname=='Name') { $returnvalue = $this->getName(); } 
             if ($fieldname=='NodeNumber') { $returnvalue = $this->getNodeNumber(); } 
             if ($fieldname=='RankID') { $returnvalue = $this->getRankID(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='Standard') { $returnvalue = $this->getStandard(); } 
             if ($fieldname=='StartPeriod') { $returnvalue = $this->getStartPeriod(); } 
             if ($fieldname=='StartUncertainty') { $returnvalue = $this->getStartUncertainty(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='GeologicTimePeriodTreeDefID') { $returnvalue = $this->getGeologicTimePeriodTreeDefID(); } 
             if ($fieldname=='GeologicTimePeriodTreeDefItemID') { $returnvalue = $this->getGeologicTimePeriodTreeDefItemID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='ParentID') { $returnvalue = $this->getParentID(); } 
             if ($fieldname=='AcceptedID') { $returnvalue = $this->getAcceptedID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*GeologicTimePeriodID*/
   public function getGeologicTimePeriodID() {
       if ($this->GeologicTimePeriodID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeologicTimePeriodID));
       }
   }
   public function setGeologicTimePeriodID($GeologicTimePeriodID) {
       if (strlen(preg_replace('/[^0-9]/','',$GeologicTimePeriodID)) > huh_geologictimeperiod::GEOLOGICTIMEPERIODID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $GeologicTimePeriodID = trim($GeologicTimePeriodID);
       if (!ctype_digit(strval($GeologicTimePeriodID)) && trim(strval($GeologicTimePeriodID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->GeologicTimePeriodID = $this->l_addslashes($GeologicTimePeriodID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_geologictimeperiod::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_geologictimeperiod::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_geologictimeperiod::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*EndPeriod*/
   public function getEndPeriod() {
       if ($this->EndPeriod==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->EndPeriod));
       }
   }
   public function setEndPeriod($EndPeriod) {
       if (strlen($EndPeriod) > huh_geologictimeperiod::ENDPERIOD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->EndPeriod = $this->l_addslashes($EndPeriod);
       $this->dirty = true;
   }
/*EndUncertainty*/
   public function getEndUncertainty() {
       if ($this->EndUncertainty==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->EndUncertainty));
       }
   }
   public function setEndUncertainty($EndUncertainty) {
       if (strlen($EndUncertainty) > huh_geologictimeperiod::ENDUNCERTAINTY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->EndUncertainty = $this->l_addslashes($EndUncertainty);
       $this->dirty = true;
   }
/*FullName*/
   public function getFullName() {
       if ($this->FullName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FullName));
       }
   }
   public function setFullName($FullName) {
       if (strlen($FullName) > huh_geologictimeperiod::FULLNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FullName = $this->l_addslashes($FullName);
       $this->dirty = true;
   }
/*GUID*/
   public function getGUID() {
       if ($this->GUID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GUID));
       }
   }
   public function setGUID($GUID) {
       if (strlen($GUID) > huh_geologictimeperiod::GUID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GUID = $this->l_addslashes($GUID);
       $this->dirty = true;
   }
/*HighestChildNodeNumber*/
   public function getHighestChildNodeNumber() {
       if ($this->HighestChildNodeNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->HighestChildNodeNumber));
       }
   }
   public function setHighestChildNodeNumber($HighestChildNodeNumber) {
       if (strlen(preg_replace('/[^0-9]/','',$HighestChildNodeNumber)) > huh_geologictimeperiod::HIGHESTCHILDNODENUMBER_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $HighestChildNodeNumber = trim($HighestChildNodeNumber);
       if (!ctype_digit(strval($HighestChildNodeNumber)) && trim(strval($HighestChildNodeNumber))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->HighestChildNodeNumber = $this->l_addslashes($HighestChildNodeNumber);
       $this->dirty = true;
   }
/*IsAccepted*/
   public function getIsAccepted() {
       if ($this->IsAccepted==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsAccepted));
       }
   }
   public function setIsAccepted($IsAccepted) {
       if (strlen($IsAccepted) > huh_geologictimeperiod::ISACCEPTED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsAccepted = $this->l_addslashes($IsAccepted);
       $this->dirty = true;
   }
/*IsBioStrat*/
   public function getIsBioStrat() {
       if ($this->IsBioStrat==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsBioStrat));
       }
   }
   public function setIsBioStrat($IsBioStrat) {
       if (strlen($IsBioStrat) > huh_geologictimeperiod::ISBIOSTRAT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsBioStrat = $this->l_addslashes($IsBioStrat);
       $this->dirty = true;
   }
/*Name*/
   public function getName() {
       if ($this->Name==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Name));
       }
   }
   public function setName($Name) {
       if (strlen($Name) > huh_geologictimeperiod::NAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Name = $this->l_addslashes($Name);
       $this->dirty = true;
   }
/*NodeNumber*/
   public function getNodeNumber() {
       if ($this->NodeNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NodeNumber));
       }
   }
   public function setNodeNumber($NodeNumber) {
       if (strlen(preg_replace('/[^0-9]/','',$NodeNumber)) > huh_geologictimeperiod::NODENUMBER_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $NodeNumber = trim($NodeNumber);
       if (!ctype_digit(strval($NodeNumber)) && trim(strval($NodeNumber))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->NodeNumber = $this->l_addslashes($NodeNumber);
       $this->dirty = true;
   }
/*RankID*/
   public function getRankID() {
       if ($this->RankID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RankID));
       }
   }
   public function setRankID($RankID) {
       if (strlen(preg_replace('/[^0-9]/','',$RankID)) > huh_geologictimeperiod::RANKID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $RankID = trim($RankID);
       if (!ctype_digit(strval($RankID))) {
             throw new Exception("Value must be an integer");
       }
       $this->RankID = $this->l_addslashes($RankID);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_geologictimeperiod::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*Standard*/
   public function getStandard() {
       if ($this->Standard==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Standard));
       }
   }
   public function setStandard($Standard) {
       if (strlen($Standard) > huh_geologictimeperiod::STANDARD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Standard = $this->l_addslashes($Standard);
       $this->dirty = true;
   }
/*StartPeriod*/
   public function getStartPeriod() {
       if ($this->StartPeriod==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StartPeriod));
       }
   }
   public function setStartPeriod($StartPeriod) {
       if (strlen($StartPeriod) > huh_geologictimeperiod::STARTPERIOD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StartPeriod = $this->l_addslashes($StartPeriod);
       $this->dirty = true;
   }
/*StartUncertainty*/
   public function getStartUncertainty() {
       if ($this->StartUncertainty==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StartUncertainty));
       }
   }
   public function setStartUncertainty($StartUncertainty) {
       if (strlen($StartUncertainty) > huh_geologictimeperiod::STARTUNCERTAINTY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StartUncertainty = $this->l_addslashes($StartUncertainty);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_geologictimeperiod::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*GeologicTimePeriodTreeDefID*/
   public function getGeologicTimePeriodTreeDefID() {
       if ($this->GeologicTimePeriodTreeDefID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeologicTimePeriodTreeDefID));
       }
   }
   public function setGeologicTimePeriodTreeDefID($GeologicTimePeriodTreeDefID) {
       if (strlen(preg_replace('/[^0-9]/','',$GeologicTimePeriodTreeDefID)) > huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $GeologicTimePeriodTreeDefID = trim($GeologicTimePeriodTreeDefID);
       if (!ctype_digit(strval($GeologicTimePeriodTreeDefID))) {
             throw new Exception("Value must be an integer");
       }
       $this->GeologicTimePeriodTreeDefID = $this->l_addslashes($GeologicTimePeriodTreeDefID);
       $this->dirty = true;
   }
/*GeologicTimePeriodTreeDefItemID*/
   public function getGeologicTimePeriodTreeDefItemID() {
       if ($this->GeologicTimePeriodTreeDefItemID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeologicTimePeriodTreeDefItemID));
       }
   }
   public function setGeologicTimePeriodTreeDefItemID($GeologicTimePeriodTreeDefItemID) {
       if (strlen(preg_replace('/[^0-9]/','',$GeologicTimePeriodTreeDefItemID)) > huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $GeologicTimePeriodTreeDefItemID = trim($GeologicTimePeriodTreeDefItemID);
       if (!ctype_digit(strval($GeologicTimePeriodTreeDefItemID))) {
             throw new Exception("Value must be an integer");
       }
       $this->GeologicTimePeriodTreeDefItemID = $this->l_addslashes($GeologicTimePeriodTreeDefItemID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_geologictimeperiod::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*ParentID*/
   public function getParentID() {
       if ($this->ParentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ParentID));
       }
   }
   public function setParentID($ParentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ParentID)) > huh_geologictimeperiod::PARENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ParentID = trim($ParentID);
       if (!ctype_digit(strval($ParentID)) && trim(strval($ParentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ParentID = $this->l_addslashes($ParentID);
       $this->dirty = true;
   }
/*AcceptedID*/
   public function getAcceptedID() {
       if ($this->AcceptedID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AcceptedID));
       }
   }
   public function setAcceptedID($AcceptedID) {
       if (strlen(preg_replace('/[^0-9]/','',$AcceptedID)) > huh_geologictimeperiod::ACCEPTEDID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AcceptedID = trim($AcceptedID);
       if (!ctype_digit(strval($AcceptedID)) && trim(strval($AcceptedID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AcceptedID = $this->l_addslashes($AcceptedID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getGeologicTimePeriodID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['GeologicTimePeriodID'] = $this->getGeologicTimePeriodID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_GeologicTimePeriodIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_EndPeriodMYSQLI_TYPE = 's';
  const C_EndUncertaintyMYSQLI_TYPE = 's';
  const C_FullNameMYSQLI_TYPE = 's';
  const C_GUIDMYSQLI_TYPE = 's';
  const C_HighestChildNodeNumberMYSQLI_TYPE = 'i';
  const C_IsAcceptedMYSQLI_TYPE = 'i';
  const C_IsBioStratMYSQLI_TYPE = 'i';
  const C_NameMYSQLI_TYPE = 's';
  const C_NodeNumberMYSQLI_TYPE = 'i';
  const C_RankIDMYSQLI_TYPE = 'i';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_StandardMYSQLI_TYPE = 's';
  const C_StartPeriodMYSQLI_TYPE = 's';
  const C_StartUncertaintyMYSQLI_TYPE = 's';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_GeologicTimePeriodTreeDefIDMYSQLI_TYPE = 'i';
  const C_GeologicTimePeriodTreeDefItemIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_ParentIDMYSQLI_TYPE = 'i';
  const C_AcceptedIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='GeologicTimePeriodID') { $retval = self::C_GeologicTimePeriodIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='EndPeriod') { $retval = self::C_EndPeriodMYSQLI_TYPE; }
      if ($aFieldname=='EndUncertainty') { $retval = self::C_EndUncertaintyMYSQLI_TYPE; }
      if ($aFieldname=='FullName') { $retval = self::C_FullNameMYSQLI_TYPE; }
      if ($aFieldname=='GUID') { $retval = self::C_GUIDMYSQLI_TYPE; }
      if ($aFieldname=='HighestChildNodeNumber') { $retval = self::C_HighestChildNodeNumberMYSQLI_TYPE; }
      if ($aFieldname=='IsAccepted') { $retval = self::C_IsAcceptedMYSQLI_TYPE; }
      if ($aFieldname=='IsBioStrat') { $retval = self::C_IsBioStratMYSQLI_TYPE; }
      if ($aFieldname=='Name') { $retval = self::C_NameMYSQLI_TYPE; }
      if ($aFieldname=='NodeNumber') { $retval = self::C_NodeNumberMYSQLI_TYPE; }
      if ($aFieldname=='RankID') { $retval = self::C_RankIDMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='Standard') { $retval = self::C_StandardMYSQLI_TYPE; }
      if ($aFieldname=='StartPeriod') { $retval = self::C_StartPeriodMYSQLI_TYPE; }
      if ($aFieldname=='StartUncertainty') { $retval = self::C_StartUncertaintyMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='GeologicTimePeriodTreeDefID') { $retval = self::C_GeologicTimePeriodTreeDefIDMYSQLI_TYPE; }
      if ($aFieldname=='GeologicTimePeriodTreeDefItemID') { $retval = self::C_GeologicTimePeriodTreeDefItemIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ParentID') { $retval = self::C_ParentIDMYSQLI_TYPE; }
      if ($aFieldname=='AcceptedID') { $retval = self::C_AcceptedIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setGeologicTimePeriodID($pk[GeologicTimePeriodID]);
             } else { ;
                 $this->setGeologicTimePeriodID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->GeologicTimePeriodID != NULL) {
           $sql = 'SELECT GeologicTimePeriodID, TimestampCreated, TimestampModified, Version, EndPeriod, EndUncertainty, FullName, GUID, HighestChildNodeNumber, IsAccepted, IsBioStrat, Name, NodeNumber, RankID, Remarks, Standard, StartPeriod, StartUncertainty, CreatedByAgentID, GeologicTimePeriodTreeDefID, GeologicTimePeriodTreeDefItemID, ModifiedByAgentID, ParentID, AcceptedID FROM geologictimeperiod WHERE GeologicTimePeriodID = '.$this->GeologicTimePeriodID ;

           $preparesql = 'SELECT GeologicTimePeriodID, TimestampCreated, TimestampModified, Version, EndPeriod, EndUncertainty, FullName, GUID, HighestChildNodeNumber, IsAccepted, IsBioStrat, Name, NodeNumber, RankID, Remarks, Standard, StartPeriod, StartUncertainty, CreatedByAgentID, GeologicTimePeriodTreeDefID, GeologicTimePeriodTreeDefItemID, ModifiedByAgentID, ParentID, AcceptedID FROM geologictimeperiod WHERE GeologicTimePeriodID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->GeologicTimePeriodID);
              $statement->execute();
              $statement->bind_result($this->GeologicTimePeriodID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->EndPeriod, $this->EndUncertainty, $this->FullName, $this->GUID, $this->HighestChildNodeNumber, $this->IsAccepted, $this->IsBioStrat, $this->Name, $this->NodeNumber, $this->RankID, $this->Remarks, $this->Standard, $this->StartPeriod, $this->StartUncertainty, $this->CreatedByAgentID, $this->GeologicTimePeriodTreeDefID, $this->GeologicTimePeriodTreeDefItemID, $this->ModifiedByAgentID, $this->ParentID, $this->AcceptedID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->GeologicTimePeriodID!= NULL) {
            $sql  = 'UPDATE  geologictimeperiod SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", EndPeriod = ? ";
            $sql .=  ", EndUncertainty = ? ";
            $sql .=  ", FullName = ? ";
            $sql .=  ", GUID = ? ";
            $sql .=  ", HighestChildNodeNumber = ? ";
            $sql .=  ", IsAccepted = ? ";
            $sql .=  ", IsBioStrat = ? ";
            $sql .=  ", Name = ? ";
            $sql .=  ", NodeNumber = ? ";
            $sql .=  ", RankID = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", Standard = ? ";
            $sql .=  ", StartPeriod = ? ";
            $sql .=  ", StartUncertainty = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", GeologicTimePeriodTreeDefID = ? ";
            $sql .=  ", GeologicTimePeriodTreeDefItemID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", ParentID = ? ";
            $sql .=  ", AcceptedID = ? ";

            $sql .= "  WHERE GeologicTimePeriodID = ? ";
        } else {
            $sql  = 'INSERT INTO geologictimeperiod ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( GeologicTimePeriodID ,  TimestampCreated ,  TimestampModified ,  Version ,  EndPeriod ,  EndUncertainty ,  FullName ,  GUID ,  HighestChildNodeNumber ,  IsAccepted ,  IsBioStrat ,  Name ,  NodeNumber ,  RankID ,  Remarks ,  Standard ,  StartPeriod ,  StartUncertainty ,  CreatedByAgentID ,  GeologicTimePeriodTreeDefID ,  GeologicTimePeriodTreeDefItemID ,  ModifiedByAgentID ,  ParentID ,  AcceptedID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->GeologicTimePeriodID!= NULL ) {
              $statement->bind_param("ississssiiisiissssiiiiiii", $this->GeologicTimePeriodID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->EndPeriod , $this->EndUncertainty , $this->FullName , $this->GUID , $this->HighestChildNodeNumber , $this->IsAccepted , $this->IsBioStrat , $this->Name , $this->NodeNumber , $this->RankID , $this->Remarks , $this->Standard , $this->StartPeriod , $this->StartUncertainty , $this->CreatedByAgentID , $this->GeologicTimePeriodTreeDefID , $this->GeologicTimePeriodTreeDefItemID , $this->ModifiedByAgentID , $this->ParentID , $this->AcceptedID , $this->GeologicTimePeriodID );
           } else { 
              $statement->bind_param("ississssiiisiissssiiiiii", $this->GeologicTimePeriodID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->EndPeriod , $this->EndUncertainty , $this->FullName , $this->GUID , $this->HighestChildNodeNumber , $this->IsAccepted , $this->IsBioStrat , $this->Name , $this->NodeNumber , $this->RankID , $this->Remarks , $this->Standard , $this->StartPeriod , $this->StartUncertainty , $this->CreatedByAgentID , $this->GeologicTimePeriodTreeDefID , $this->GeologicTimePeriodTreeDefItemID , $this->ModifiedByAgentID , $this->ParentID , $this->AcceptedID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->GeologicTimePeriodID != NULL) {
           $sql = 'SELECT GeologicTimePeriodID, TimestampCreated, TimestampModified, Version, EndPeriod, EndUncertainty, FullName, GUID, HighestChildNodeNumber, IsAccepted, IsBioStrat, Name, NodeNumber, RankID, Remarks, Standard, StartPeriod, StartUncertainty, CreatedByAgentID, GeologicTimePeriodTreeDefID, GeologicTimePeriodTreeDefItemID, ModifiedByAgentID, ParentID, AcceptedID FROM geologictimeperiod WHERE GeologicTimePeriodID = "'.$this->GeologicTimePeriodID.'"  ' ;

           $preparedsql = 'SELECT  FROM geologictimeperiod WHERE  and GeologicTimePeriodID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississssiiisiissssiiiiii", $this->GeologicTimePeriodID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->EndPeriod, $this->EndUncertainty, $this->FullName, $this->GUID, $this->HighestChildNodeNumber, $this->IsAccepted, $this->IsBioStrat, $this->Name, $this->NodeNumber, $this->RankID, $this->Remarks, $this->Standard, $this->StartPeriod, $this->StartUncertainty, $this->CreatedByAgentID, $this->GeologicTimePeriodTreeDefID, $this->GeologicTimePeriodTreeDefItemID, $this->ModifiedByAgentID, $this->ParentID, $this->AcceptedID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM geologictimeperiod WHERE  and GeologicTimePeriodID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississssiiisiissssiiiiii", $this->GeologicTimePeriodID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->EndPeriod, $this->EndUncertainty, $this->FullName, $this->GUID, $this->HighestChildNodeNumber, $this->IsAccepted, $this->IsBioStrat, $this->Name, $this->NodeNumber, $this->RankID, $this->Remarks, $this->Standard, $this->StartPeriod, $this->StartUncertainty, $this->CreatedByAgentID, $this->GeologicTimePeriodTreeDefID, $this->GeologicTimePeriodTreeDefItemID, $this->ModifiedByAgentID, $this->ParentID, $this->AcceptedID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->GeologicTimePeriodID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM geologictimeperiod';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT GeologicTimePeriodID FROM geologictimeperiod $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_geologictimeperiod();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFrompaleocontext() { 
      // ForeignKey in: paleocontext
      $t = new paleocontext();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: GeologicTimePeriodTreeDefID
      $t = new geologictimeperiodtreedef();
      $t->load(getGeologicTimePeriodTreeDefID());
      $returnvalue[GeologicTimePeriodTreeDefID] = $t;
       // fk: GeologicTimePeriodTreeDefItemID
      $t = new geologictimeperiodtreedefitem();
      $t->load(getGeologicTimePeriodTreeDefItemID());
      $returnvalue[GeologicTimePeriodTreeDefItemID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: ParentID
      $t = new geologictimeperiod();
      $t->load(getParentID());
      $returnvalue[ParentID] = $t;
       // fk: AcceptedID
      $t = new geologictimeperiod();
      $t->load(getAcceptedID());
      $returnvalue[AcceptedID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT GeologicTimePeriodID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(EndPeriod,'') || ' ' || IFNULL(EndUncertainty,'') || ' ' || IFNULL(FullName,'') || ' ' || IFNULL(GUID,'') || ' ' || IFNULL(HighestChildNodeNumber,'') || ' ' || IFNULL(IsAccepted,'') || ' ' || IFNULL(IsBioStrat,'') || ' ' || IFNULL(Name,'') || ' ' || IFNULL(NodeNumber,'') || ' ' || IFNULL(RankID,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(Standard,'') || ' ' || IFNULL(StartPeriod,'') || ' ' || IFNULL(StartUncertainty,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(GeologicTimePeriodTreeDefID,'') || ' ' || IFNULL(GeologicTimePeriodTreeDefItemID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(ParentID,'') || ' ' || IFNULL(AcceptedID,'')) FROM geologictimeperiod order by FullName, GUID, Name, CreatedByAgentID, GeologicTimePeriodTreeDefID, GeologicTimePeriodTreeDefItemID, ModifiedByAgentID, ParentID, AcceptedID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM geologictimeperiod order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByFullName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE FullName $operator '$searchTerm'";
        $preparedsql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE FullName $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geologictimeperiod();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGUID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE GUID $operator '$searchTerm'";
        $preparedsql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE GUID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geologictimeperiod();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE Name $operator '$searchTerm'";
        $preparedsql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE Name $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geologictimeperiod();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geologictimeperiod();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGeologicTimePeriodTreeDefID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE GeologicTimePeriodTreeDefID $operator '$searchTerm'";
        $preparedsql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE GeologicTimePeriodTreeDefID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geologictimeperiod();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGeologicTimePeriodTreeDefItemID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE GeologicTimePeriodTreeDefItemID $operator '$searchTerm'";
        $preparedsql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE GeologicTimePeriodTreeDefItemID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geologictimeperiod();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geologictimeperiod();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByParentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE ParentID $operator '$searchTerm'";
        $preparedsql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE ParentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geologictimeperiod();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAcceptedID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE AcceptedID $operator '$searchTerm'";
        $preparedsql = "SELECT GeologicTimePeriodID FROM geologictimeperiod WHERE AcceptedID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geologictimeperiod();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctFullName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' FullName ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, FullName FROM geologictimeperiod group by FullName order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&FullName=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGUID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GUID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GUID FROM geologictimeperiod group by GUID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GUID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Name ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Name FROM geologictimeperiod group by Name order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Name=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM geologictimeperiod group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGeologicTimePeriodTreeDefID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GeologicTimePeriodTreeDefID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GeologicTimePeriodTreeDefID FROM geologictimeperiod group by GeologicTimePeriodTreeDefID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GeologicTimePeriodTreeDefID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGeologicTimePeriodTreeDefItemID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GeologicTimePeriodTreeDefItemID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GeologicTimePeriodTreeDefItemID FROM geologictimeperiod group by GeologicTimePeriodTreeDefItemID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GeologicTimePeriodTreeDefItemID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM geologictimeperiod group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctParentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ParentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ParentID FROM geologictimeperiod group by ParentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ParentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAcceptedID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AcceptedID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AcceptedID FROM geologictimeperiod group by AcceptedID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AcceptedID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'FullName':
             $returnvalue = $this->selectDistinctFullName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GUID':
             $returnvalue = $this->selectDistinctGUID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'Name':
             $returnvalue = $this->selectDistinctName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GeologicTimePeriodTreeDefID':
             $returnvalue = $this->selectDistinctGeologicTimePeriodTreeDefID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GeologicTimePeriodTreeDefItemID':
             $returnvalue = $this->selectDistinctGeologicTimePeriodTreeDefItemID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ParentID':
             $returnvalue = $this->selectDistinctParentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AcceptedID':
             $returnvalue = $this->selectDistinctAcceptedID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the geologictimeperiod.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_geologictimeperiodView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_geologictimeperiod <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_geologictimeperiod::GEOLOGICTIMEPERIODID.": ".$model->getGeologicTimePeriodID()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::ENDPERIOD.": ".$model->getEndPeriod()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::ENDUNCERTAINTY.": ".$model->getEndUncertainty()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::FULLNAME.": ".$model->getFullName()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::GUID.": ".$model->getGUID()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::HIGHESTCHILDNODENUMBER.": ".$model->getHighestChildNodeNumber()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::ISACCEPTED.": ".$model->getIsAccepted()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::ISBIOSTRAT.": ".$model->getIsBioStrat()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::NAME.": ".$model->getName()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::NODENUMBER.": ".$model->getNodeNumber()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::RANKID.": ".$model->getRankID()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::STANDARD.": ".$model->getStandard()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::STARTPERIOD.": ".$model->getStartPeriod()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::STARTUNCERTAINTY.": ".$model->getStartUncertainty()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID.": ".$model->getGeologicTimePeriodTreeDefID()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID.": ".$model->getGeologicTimePeriodTreeDefItemID()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::PARENTID.": ".$model->getParentID()."</li>\n";
       $returnvalue .= "<li>".huh_geologictimeperiod::ACCEPTEDID.": ".$model->getAcceptedID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>geologictimeperiodtreedef</li>";
           $t_geologictimeperiodtreedef = new huh_geologictimeperiodtreedef();
           $t_geologictimeperiodtreedefView = new huh_geologictimeperiodtreedefView();
           $t_geologictimeperiodtreedefView->setModel($t_geologictimeperiodtreedef);
           if ($model->getGeologicTimePeriodTreeDefID() != '') { 
               $t_geologictimeperiodtreedef->load($model->getGeologicTimePeriodTreeDefID());
               $returnvalue .= $t_geologictimeperiodtreedefView->getDetailsView(false);
           }
           $returnvalue .= "<li>geologictimeperiodtreedefitem</li>";
           $t_geologictimeperiodtreedefitem = new huh_geologictimeperiodtreedefitem();
           $t_geologictimeperiodtreedefitemView = new huh_geologictimeperiodtreedefitemView();
           $t_geologictimeperiodtreedefitemView->setModel($t_geologictimeperiodtreedefitem);
           if ($model->getGeologicTimePeriodTreeDefItemID() != '') { 
               $t_geologictimeperiodtreedefitem->load($model->getGeologicTimePeriodTreeDefItemID());
               $returnvalue .= $t_geologictimeperiodtreedefitemView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>geologictimeperiod</li>";
           $t_geologictimeperiod = new huh_geologictimeperiod();
           $t_geologictimeperiodView = new huh_geologictimeperiodView();
           $t_geologictimeperiodView->setModel($t_geologictimeperiod);
           if ($model->getParentID() != '') { 
               $t_geologictimeperiod->load($model->getParentID());
               $returnvalue .= $t_geologictimeperiodView->getDetailsView(false);
           }
           $returnvalue .= "<li>geologictimeperiod</li>";
           $t_geologictimeperiod = new huh_geologictimeperiod();
           $t_geologictimeperiodView = new huh_geologictimeperiodView();
           $t_geologictimeperiodView->setModel($t_geologictimeperiod);
           if ($model->getAcceptedID() != '') { 
               $t_geologictimeperiod->load($model->getAcceptedID());
               $returnvalue .= $t_geologictimeperiodView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_geologictimeperiod::GEOLOGICTIMEPERIODID.': "'.$model->getGeologicTimePeriodID().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::ENDPERIOD.': "'.$model->getEndPeriod().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::ENDUNCERTAINTY.': "'.$model->getEndUncertainty().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::FULLNAME.': "'.$model->getFullName().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::GUID.': "'.$model->getGUID().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::HIGHESTCHILDNODENUMBER.': "'.$model->getHighestChildNodeNumber().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::ISACCEPTED.': "'.$model->getIsAccepted().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::ISBIOSTRAT.': "'.$model->getIsBioStrat().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::NAME.': "'.$model->getName().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::NODENUMBER.': "'.$model->getNodeNumber().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::RANKID.': "'.$model->getRankID().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::STANDARD.': "'.$model->getStandard().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::STARTPERIOD.': "'.$model->getStartPeriod().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::STARTUNCERTAINTY.': "'.$model->getStartUncertainty().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID.': "'.$model->getGeologicTimePeriodTreeDefID().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID.': "'.$model->getGeologicTimePeriodTreeDefItemID().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::PARENTID.': "'.$model->getParentID().'",';
       $returnvalue .= '"'.huh_geologictimeperiod::ACCEPTEDID.': "'.$model->getAcceptedID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getGeologicTimePeriodID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getEndPeriod()."</td>\n";
       $returnvalue .= "<td>".$model->getEndUncertainty()."</td>\n";
       $returnvalue .= "<td>".$model->getFullName()."</td>\n";
       $returnvalue .= "<td>".$model->getGUID()."</td>\n";
       $returnvalue .= "<td>".$model->getHighestChildNodeNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getIsAccepted()."</td>\n";
       $returnvalue .= "<td>".$model->getIsBioStrat()."</td>\n";
       $returnvalue .= "<td>".$model->getName()."</td>\n";
       $returnvalue .= "<td>".$model->getNodeNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getRankID()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getStandard()."</td>\n";
       $returnvalue .= "<td>".$model->getStartPeriod()."</td>\n";
       $returnvalue .= "<td>".$model->getStartUncertainty()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getGeologicTimePeriodTreeDefID()."</td>\n";
       $returnvalue .= "<td>".$model->getGeologicTimePeriodTreeDefItemID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getParentID()."</td>\n";
       $returnvalue .= "<td>".$model->getAcceptedID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_geologictimeperiod::GEOLOGICTIMEPERIODID."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::ENDPERIOD."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::ENDUNCERTAINTY."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::FULLNAME."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::GUID."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::HIGHESTCHILDNODENUMBER."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::ISACCEPTED."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::ISBIOSTRAT."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::NAME."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::NODENUMBER."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::RANKID."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::STANDARD."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::STARTPERIOD."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::STARTUNCERTAINTY."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::PARENTID."</th>\n";
       $returnvalue .= "<th>".huh_geologictimeperiod::ACCEPTEDID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_geologictimeperiod">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new GeologicTimePeriodID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_geologictimeperiod::GEOLOGICTIMEPERIODID.">GEOLOGICTIMEPERIODID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geologictimeperiod::GEOLOGICTIMEPERIODID." id=".huh_geologictimeperiod::GEOLOGICTIMEPERIODID." value='".$model->getGeologicTimePeriodID()."'  style=' width:".huh_geologictimeperiod::GEOLOGICTIMEPERIODID_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::GEOLOGICTIMEPERIODID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geologictimeperiod::TIMESTAMPCREATED." id=".huh_geologictimeperiod::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_geologictimeperiod::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geologictimeperiod::TIMESTAMPMODIFIED." id=".huh_geologictimeperiod::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_geologictimeperiod::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geologictimeperiod::VERSION." id=".huh_geologictimeperiod::VERSION." value='".$model->getVersion()."'  style=' width:".huh_geologictimeperiod::VERSION_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::ENDPERIOD.">ENDPERIOD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geologictimeperiod::ENDPERIOD." id=".huh_geologictimeperiod::ENDPERIOD." value='".$model->getEndPeriod()."'  style=' width:".huh_geologictimeperiod::ENDPERIOD_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::ENDPERIOD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::ENDUNCERTAINTY.">ENDUNCERTAINTY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geologictimeperiod::ENDUNCERTAINTY." id=".huh_geologictimeperiod::ENDUNCERTAINTY." value='".$model->getEndUncertainty()."'  style=' width:".huh_geologictimeperiod::ENDUNCERTAINTY_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::ENDUNCERTAINTY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::FULLNAME.">FULLNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geologictimeperiod::FULLNAME." id=".huh_geologictimeperiod::FULLNAME." >".$model->getFullName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::GUID.">GUID</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geologictimeperiod::GUID." id=".huh_geologictimeperiod::GUID." >".$model->getGUID()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::HIGHESTCHILDNODENUMBER.">HIGHESTCHILDNODENUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geologictimeperiod::HIGHESTCHILDNODENUMBER." id=".huh_geologictimeperiod::HIGHESTCHILDNODENUMBER." value='".$model->getHighestChildNodeNumber()."'  style=' width:".huh_geologictimeperiod::HIGHESTCHILDNODENUMBER_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::HIGHESTCHILDNODENUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::ISACCEPTED.">ISACCEPTED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geologictimeperiod::ISACCEPTED." id=".huh_geologictimeperiod::ISACCEPTED." value='".$model->getIsAccepted()."'  style=' width:".huh_geologictimeperiod::ISACCEPTED_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::ISACCEPTED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::ISBIOSTRAT.">ISBIOSTRAT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geologictimeperiod::ISBIOSTRAT." id=".huh_geologictimeperiod::ISBIOSTRAT." value='".$model->getIsBioStrat()."'  style=' width:".huh_geologictimeperiod::ISBIOSTRAT_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::ISBIOSTRAT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::NAME.">NAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geologictimeperiod::NAME." id=".huh_geologictimeperiod::NAME." >".$model->getName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::NODENUMBER.">NODENUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geologictimeperiod::NODENUMBER." id=".huh_geologictimeperiod::NODENUMBER." value='".$model->getNodeNumber()."'  style=' width:".huh_geologictimeperiod::NODENUMBER_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::NODENUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::RANKID.">RANKID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geologictimeperiod::RANKID." id=".huh_geologictimeperiod::RANKID." value='".$model->getRankID()."'  style=' width:".huh_geologictimeperiod::RANKID_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::RANKID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geologictimeperiod::REMARKS." id=".huh_geologictimeperiod::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::STANDARD.">STANDARD</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geologictimeperiod::STANDARD." id=".huh_geologictimeperiod::STANDARD." >".$model->getStandard()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::STARTPERIOD.">STARTPERIOD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geologictimeperiod::STARTPERIOD." id=".huh_geologictimeperiod::STARTPERIOD." value='".$model->getStartPeriod()."'  style=' width:".huh_geologictimeperiod::STARTPERIOD_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::STARTPERIOD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::STARTUNCERTAINTY.">STARTUNCERTAINTY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geologictimeperiod::STARTUNCERTAINTY." id=".huh_geologictimeperiod::STARTUNCERTAINTY." value='".$model->getStartUncertainty()."'  style=' width:".huh_geologictimeperiod::STARTUNCERTAINTY_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::STARTUNCERTAINTY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geologictimeperiod::CREATEDBYAGENTID." id=".huh_geologictimeperiod::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_geologictimeperiod::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID.">GEOLOGICTIMEPERIODTREEDEFID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID." id=".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID." value='".$model->getGeologicTimePeriodTreeDefID()."'  style=' width:".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID.">GEOLOGICTIMEPERIODTREEDEFITEMID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID." id=".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID." value='".$model->getGeologicTimePeriodTreeDefItemID()."'  style=' width:".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geologictimeperiod::MODIFIEDBYAGENTID." id=".huh_geologictimeperiod::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_geologictimeperiod::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::PARENTID.">PARENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geologictimeperiod::PARENTID." id=".huh_geologictimeperiod::PARENTID." value='".$model->getParentID()."'  style=' width:".huh_geologictimeperiod::PARENTID_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::PARENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geologictimeperiod::ACCEPTEDID.">ACCEPTEDID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geologictimeperiod::ACCEPTEDID." id=".huh_geologictimeperiod::ACCEPTEDID." value='".$model->getAcceptedID()."'  style=' width:".huh_geologictimeperiod::ACCEPTEDID_SIZE ."em;  '  maxlength='".huh_geologictimeperiod::ACCEPTEDID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_geologictimeperiod">';
       $returnvalue .= '<input type=hidden name=GeologicTimePeriodID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_geologictimeperiod">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>GEOLOGICTIMEPERIODID<input type=text name=".huh_geologictimeperiod::GEOLOGICTIMEPERIODID." id=".huh_geologictimeperiod::GEOLOGICTIMEPERIODID." value='".$model->getGeologicTimePeriodID()."'  size='".huh_geologictimeperiod::GEOLOGICTIMEPERIODID_SIZE ."'  maxlength='".huh_geologictimeperiod::GEOLOGICTIMEPERIODID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_geologictimeperiod::TIMESTAMPCREATED." id=".huh_geologictimeperiod::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_geologictimeperiod::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_geologictimeperiod::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_geologictimeperiod::TIMESTAMPMODIFIED." id=".huh_geologictimeperiod::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_geologictimeperiod::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_geologictimeperiod::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_geologictimeperiod::VERSION." id=".huh_geologictimeperiod::VERSION." value='".$model->getVersion()."'  size='".huh_geologictimeperiod::VERSION_SIZE ."'  maxlength='".huh_geologictimeperiod::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ENDPERIOD<input type=text name=".huh_geologictimeperiod::ENDPERIOD." id=".huh_geologictimeperiod::ENDPERIOD." value='".$model->getEndPeriod()."'  size='".huh_geologictimeperiod::ENDPERIOD_SIZE ."'  maxlength='".huh_geologictimeperiod::ENDPERIOD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ENDUNCERTAINTY<input type=text name=".huh_geologictimeperiod::ENDUNCERTAINTY." id=".huh_geologictimeperiod::ENDUNCERTAINTY." value='".$model->getEndUncertainty()."'  size='".huh_geologictimeperiod::ENDUNCERTAINTY_SIZE ."'  maxlength='".huh_geologictimeperiod::ENDUNCERTAINTY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FULLNAME<input type=text name=".huh_geologictimeperiod::FULLNAME." id=".huh_geologictimeperiod::FULLNAME." value='".$model->getFullName()."'  size='51'  maxlength='".huh_geologictimeperiod::FULLNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GUID<input type=text name=".huh_geologictimeperiod::GUID." id=".huh_geologictimeperiod::GUID." value='".$model->getGUID()."'  size='51'  maxlength='".huh_geologictimeperiod::GUID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>HIGHESTCHILDNODENUMBER<input type=text name=".huh_geologictimeperiod::HIGHESTCHILDNODENUMBER." id=".huh_geologictimeperiod::HIGHESTCHILDNODENUMBER." value='".$model->getHighestChildNodeNumber()."'  size='".huh_geologictimeperiod::HIGHESTCHILDNODENUMBER_SIZE ."'  maxlength='".huh_geologictimeperiod::HIGHESTCHILDNODENUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISACCEPTED<input type=text name=".huh_geologictimeperiod::ISACCEPTED." id=".huh_geologictimeperiod::ISACCEPTED." value='".$model->getIsAccepted()."'  size='".huh_geologictimeperiod::ISACCEPTED_SIZE ."'  maxlength='".huh_geologictimeperiod::ISACCEPTED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISBIOSTRAT<input type=text name=".huh_geologictimeperiod::ISBIOSTRAT." id=".huh_geologictimeperiod::ISBIOSTRAT." value='".$model->getIsBioStrat()."'  size='".huh_geologictimeperiod::ISBIOSTRAT_SIZE ."'  maxlength='".huh_geologictimeperiod::ISBIOSTRAT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NAME<input type=text name=".huh_geologictimeperiod::NAME." id=".huh_geologictimeperiod::NAME." value='".$model->getName()."'  size='51'  maxlength='".huh_geologictimeperiod::NAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NODENUMBER<input type=text name=".huh_geologictimeperiod::NODENUMBER." id=".huh_geologictimeperiod::NODENUMBER." value='".$model->getNodeNumber()."'  size='".huh_geologictimeperiod::NODENUMBER_SIZE ."'  maxlength='".huh_geologictimeperiod::NODENUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RANKID<input type=text name=".huh_geologictimeperiod::RANKID." id=".huh_geologictimeperiod::RANKID." value='".$model->getRankID()."'  size='".huh_geologictimeperiod::RANKID_SIZE ."'  maxlength='".huh_geologictimeperiod::RANKID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_geologictimeperiod::REMARKS." id=".huh_geologictimeperiod::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_geologictimeperiod::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STANDARD<input type=text name=".huh_geologictimeperiod::STANDARD." id=".huh_geologictimeperiod::STANDARD." value='".$model->getStandard()."'  size='51'  maxlength='".huh_geologictimeperiod::STANDARD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STARTPERIOD<input type=text name=".huh_geologictimeperiod::STARTPERIOD." id=".huh_geologictimeperiod::STARTPERIOD." value='".$model->getStartPeriod()."'  size='".huh_geologictimeperiod::STARTPERIOD_SIZE ."'  maxlength='".huh_geologictimeperiod::STARTPERIOD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STARTUNCERTAINTY<input type=text name=".huh_geologictimeperiod::STARTUNCERTAINTY." id=".huh_geologictimeperiod::STARTUNCERTAINTY." value='".$model->getStartUncertainty()."'  size='".huh_geologictimeperiod::STARTUNCERTAINTY_SIZE ."'  maxlength='".huh_geologictimeperiod::STARTUNCERTAINTY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_geologictimeperiod::CREATEDBYAGENTID." id=".huh_geologictimeperiod::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_geologictimeperiod::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_geologictimeperiod::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOLOGICTIMEPERIODTREEDEFID<input type=text name=".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID." id=".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID." value='".$model->getGeologicTimePeriodTreeDefID()."'  size='".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID_SIZE ."'  maxlength='".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOLOGICTIMEPERIODTREEDEFITEMID<input type=text name=".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID." id=".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID." value='".$model->getGeologicTimePeriodTreeDefItemID()."'  size='".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID_SIZE ."'  maxlength='".huh_geologictimeperiod::GEOLOGICTIMEPERIODTREEDEFITEMID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_geologictimeperiod::MODIFIEDBYAGENTID." id=".huh_geologictimeperiod::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_geologictimeperiod::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_geologictimeperiod::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PARENTID<input type=text name=".huh_geologictimeperiod::PARENTID." id=".huh_geologictimeperiod::PARENTID." value='".$model->getParentID()."'  size='".huh_geologictimeperiod::PARENTID_SIZE ."'  maxlength='".huh_geologictimeperiod::PARENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ACCEPTEDID<input type=text name=".huh_geologictimeperiod::ACCEPTEDID." id=".huh_geologictimeperiod::ACCEPTEDID." value='".$model->getAcceptedID()."'  size='".huh_geologictimeperiod::ACCEPTEDID_SIZE ."'  maxlength='".huh_geologictimeperiod::ACCEPTEDID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
