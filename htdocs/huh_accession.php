<?php
//==============================================================================
//===   accession.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_accession implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const ACCESSIONID_SIZE     = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const ACCESSIONCONDITION_SIZE = 255; //255
   const ACCESSIONNUMBER_SIZE = 60; //60
   const ALTACCESSIONNUMBER_SIZE = 60; //60
   const DATEACCESSIONED_SIZE = 12; //DATE
   const DATEACKNOWLEDGED_SIZE = 12; //DATE
   const DATERECEIVED_SIZE    = 12; //DATE
   const NUMBER1_SIZE         = 20; //REAL
   const NUMBER2_SIZE         = 20; //REAL
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const STATUS_SIZE          = 32; //32
   const TEXT1_SIZE           = 255; //LONGVARCHAR
   const TEXT2_SIZE           = 255; //LONGVARCHAR
   const TEXT3_SIZE           = 255; //LONGVARCHAR
   const TOTALVALUE_SIZE      = 12; //12,2
   const TYPE_SIZE            = 32; //32
   const VERBATIMDATE_SIZE    = 20; //YEAR
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const DIVISIONID_SIZE      = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const ADDRESSOFRECORDID_SIZE = 11; //INTEGER
   const REPOSITORYAGREEMENTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const ACCESSIONID       = 'AccessionID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const ACCESSIONCONDITION = 'AccessionCondition';
   const ACCESSIONNUMBER   = 'AccessionNumber';
   const ALTACCESSIONNUMBER = 'AltAccessionNumber';
   const DATEACCESSIONED   = 'DateAccessioned';
   const DATEACKNOWLEDGED  = 'DateAcknowledged';
   const DATERECEIVED      = 'DateReceived';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const REMARKS           = 'Remarks';
   const STATUS            = 'Status';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const TEXT3             = 'Text3';
   const TOTALVALUE        = 'TotalValue';
   const TYPE              = 'Type';
   const VERBATIMDATE      = 'VerbatimDate';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const DIVISIONID        = 'DivisionID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const ADDRESSOFRECORDID = 'AddressOfRecordID';
   const REPOSITORYAGREEMENTID = 'RepositoryAgreementID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $AccessionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AccessionID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $AccessionCondition = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['AccessionCondition']), 0, 255);
  $AccessionNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['AccessionNumber']), 0, 60);
  $AltAccessionNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['AltAccessionNumber']), 0, 60);
  $DateAccessioned = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateAccessioned']), 0, 12);
  $DateAcknowledged = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateAcknowledged']), 0, 12);
  $DateReceived = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DateReceived']), 0, 12);
  $Number1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number1']), 0, 20);
  $Number2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number2']), 0, 20);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $Status = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Status']), 0, 32);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 255);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 255);
  $Text3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text3']), 0, 255);
  $TotalValue = substr(preg_replace('/[^0-9\-\.\[NULL\]]/','',$_GET['TotalValue']), 0, 12);
  $Type = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Type']), 0, 32);
  $VerbatimDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['VerbatimDate']), 0, 20);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $DivisionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DivisionID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $AddressOfRecordID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AddressOfRecordID']), 0, 11);
  $RepositoryAgreementID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['RepositoryAgreementID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $AccessionID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $AccessionCondition; // VARCHAR(255) 
   private $AccessionNumber; // VARCHAR(60) 
   private $AltAccessionNumber; // VARCHAR(60) 
   private $DateAccessioned; // DATE 
   private $DateAcknowledged; // DATE 
   private $DateReceived; // DATE 
   private $Number1; // REAL 
   private $Number2; // REAL 
   private $Remarks; // LONGVARCHAR 
   private $Status; // VARCHAR(32) 
   private $Text1; // LONGVARCHAR 
   private $Text2; // LONGVARCHAR 
   private $Text3; // LONGVARCHAR 
   private $TotalValue; // DECIMAL(12,2) 
   private $Type; // VARCHAR(32) 
   private $VerbatimDate; // YEAR 
   private $YesNo1; // BIT(1) 
   private $YesNo2; // BIT(1) 
   private $DivisionID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $AddressOfRecordID; // INTEGER 
   private $RepositoryAgreementID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' AccessionID, TimestampCreated, TimestampModified, Version, AccessionCondition, AccessionNumber, AltAccessionNumber, DateAccessioned, DateAcknowledged, DateReceived, Number1, Number2, Remarks, Status, Text1, Text2, Text3, TotalValue, Type, VerbatimDate, YesNo1, YesNo2, DivisionID, CreatedByAgentID, ModifiedByAgentID, AddressOfRecordID, RepositoryAgreementID, ';
   const PKFIELDLIST = ' AccessionID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'AccessionID'  ) ;
   private $allFieldsArray = array( 0 => 'AccessionID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'AccessionCondition' , 5 => 'AccessionNumber' , 6 => 'AltAccessionNumber' , 7 => 'DateAccessioned' , 8 => 'DateAcknowledged' , 9 => 'DateReceived' , 10 => 'Number1' , 11 => 'Number2' , 12 => 'Remarks' , 13 => 'Status' , 14 => 'Text1' , 15 => 'Text2' , 16 => 'Text3' , 17 => 'TotalValue' , 18 => 'Type' , 19 => 'VerbatimDate' , 20 => 'YesNo1' , 21 => 'YesNo2' , 22 => 'DivisionID' , 23 => 'CreatedByAgentID' , 24 => 'ModifiedByAgentID' , 25 => 'AddressOfRecordID' , 26 => 'RepositoryAgreementID'  ) ;
   private $selectDistinctFieldsArray = array( 5 => 'AccessionNumber' , 6 => 'AltAccessionNumber' , 7 => 'DateAccessioned' , 22 => 'DivisionID' , 23 => 'CreatedByAgentID' , 24 => 'ModifiedByAgentID' , 25 => 'AddressOfRecordID' , 26 => 'RepositoryAgreementID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_accession(){
       $this->AccessionID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->AccessionCondition = '';
       $this->AccessionNumber = '';
       $this->AltAccessionNumber = '';
       $this->DateAccessioned = '';
       $this->DateAcknowledged = '';
       $this->DateReceived = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->Remarks = '';
       $this->Status = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->Text3 = '';
       $this->TotalValue = '';
       $this->Type = '';
       $this->VerbatimDate = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->DivisionID = '';
       $this->CreatedByAgentID = '';
       $this->ModifiedByAgentID = '';
       $this->AddressOfRecordID = '';
       $this->RepositoryAgreementID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='AccessionID') { $returnvalue = $this->setAccessionID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='AccessionCondition') { $returnvalue = $this->setAccessionCondition($value); } 
             if ($fieldname=='AccessionNumber') { $returnvalue = $this->setAccessionNumber($value); } 
             if ($fieldname=='AltAccessionNumber') { $returnvalue = $this->setAltAccessionNumber($value); } 
             if ($fieldname=='DateAccessioned') { $returnvalue = $this->setDateAccessioned($value); } 
             if ($fieldname=='DateAcknowledged') { $returnvalue = $this->setDateAcknowledged($value); } 
             if ($fieldname=='DateReceived') { $returnvalue = $this->setDateReceived($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='Status') { $returnvalue = $this->setStatus($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='Text3') { $returnvalue = $this->setText3($value); } 
             if ($fieldname=='TotalValue') { $returnvalue = $this->setTotalValue($value); } 
             if ($fieldname=='Type') { $returnvalue = $this->setType($value); } 
             if ($fieldname=='VerbatimDate') { $returnvalue = $this->setVerbatimDate($value); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->setDivisionID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='AddressOfRecordID') { $returnvalue = $this->setAddressOfRecordID($value); } 
             if ($fieldname=='RepositoryAgreementID') { $returnvalue = $this->setRepositoryAgreementID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='AccessionID') { $returnvalue = $this->getAccessionID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='AccessionCondition') { $returnvalue = $this->getAccessionCondition(); } 
             if ($fieldname=='AccessionNumber') { $returnvalue = $this->getAccessionNumber(); } 
             if ($fieldname=='AltAccessionNumber') { $returnvalue = $this->getAltAccessionNumber(); } 
             if ($fieldname=='DateAccessioned') { $returnvalue = $this->getDateAccessioned(); } 
             if ($fieldname=='DateAcknowledged') { $returnvalue = $this->getDateAcknowledged(); } 
             if ($fieldname=='DateReceived') { $returnvalue = $this->getDateReceived(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='Status') { $returnvalue = $this->getStatus(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='Text3') { $returnvalue = $this->getText3(); } 
             if ($fieldname=='TotalValue') { $returnvalue = $this->getTotalValue(); } 
             if ($fieldname=='Type') { $returnvalue = $this->getType(); } 
             if ($fieldname=='VerbatimDate') { $returnvalue = $this->getVerbatimDate(); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->getDivisionID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='AddressOfRecordID') { $returnvalue = $this->getAddressOfRecordID(); } 
             if ($fieldname=='RepositoryAgreementID') { $returnvalue = $this->getRepositoryAgreementID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*AccessionID*/
   public function getAccessionID() {
       if ($this->AccessionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AccessionID));
       }
   }
   public function setAccessionID($AccessionID) {
       if (strlen(preg_replace('/[^0-9]/','',$AccessionID)) > huh_accession::ACCESSIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AccessionID = trim($AccessionID);
       if (!ctype_digit(strval($AccessionID)) && trim(strval($AccessionID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AccessionID = $this->l_addslashes($AccessionID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_accession::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_accession::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_accession::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*AccessionCondition*/
   public function getAccessionCondition() {
       if ($this->AccessionCondition==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AccessionCondition));
       }
   }
   public function setAccessionCondition($AccessionCondition) {
       if (strlen($AccessionCondition) > huh_accession::ACCESSIONCONDITION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->AccessionCondition = $this->l_addslashes($AccessionCondition);
       $this->dirty = true;
   }
/*AccessionNumber*/
   public function getAccessionNumber() {
       if ($this->AccessionNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AccessionNumber));
       }
   }
   public function setAccessionNumber($AccessionNumber) {
       if (strlen($AccessionNumber) > huh_accession::ACCESSIONNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->AccessionNumber = $this->l_addslashes($AccessionNumber);
       $this->dirty = true;
   }
/*AltAccessionNumber*/
   public function getAltAccessionNumber() {
       if ($this->AltAccessionNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AltAccessionNumber));
       }
   }
   public function setAltAccessionNumber($AltAccessionNumber) {
       if (strlen($AltAccessionNumber) > huh_accession::ALTACCESSIONNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->AltAccessionNumber = $this->l_addslashes($AltAccessionNumber);
       $this->dirty = true;
   }
/*DateAccessioned*/
   public function getDateAccessioned() {
       if ($this->DateAccessioned==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateAccessioned));
       }
   }
   public function setDateAccessioned($DateAccessioned) {
       if (strlen($DateAccessioned) > huh_accession::DATEACCESSIONED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateAccessioned = $this->l_addslashes($DateAccessioned);
       $this->dirty = true;
   }
/*DateAcknowledged*/
   public function getDateAcknowledged() {
       if ($this->DateAcknowledged==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateAcknowledged));
       }
   }
   public function setDateAcknowledged($DateAcknowledged) {
       if (strlen($DateAcknowledged) > huh_accession::DATEACKNOWLEDGED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateAcknowledged = $this->l_addslashes($DateAcknowledged);
       $this->dirty = true;
   }
/*DateReceived*/
   public function getDateReceived() {
       if ($this->DateReceived==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DateReceived));
       }
   }
   public function setDateReceived($DateReceived) {
       if (strlen($DateReceived) > huh_accession::DATERECEIVED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DateReceived = $this->l_addslashes($DateReceived);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen($Number1) > huh_accession::NUMBER1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen($Number2) > huh_accession::NUMBER2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_accession::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*Status*/
   public function getStatus() {
       if ($this->Status==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Status));
       }
   }
   public function setStatus($Status) {
       if (strlen($Status) > huh_accession::STATUS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Status = $this->l_addslashes($Status);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_accession::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_accession::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*Text3*/
   public function getText3() {
       if ($this->Text3==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text3));
       }
   }
   public function setText3($Text3) {
       if (strlen($Text3) > huh_accession::TEXT3_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text3 = $this->l_addslashes($Text3);
       $this->dirty = true;
   }
/*TotalValue*/
   public function getTotalValue() {
       if ($this->TotalValue==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TotalValue));
       }
   }
   public function setTotalValue($TotalValue) {
       if (strlen(preg_replace('/[^0-9]/','',$TotalValue)) > huh_accession::TOTALVALUE_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $TotalValue = trim($TotalValue);
       if (!is_numeric($TotalValue) && trim(strval($TotalValue))!='' ) {
             throw new Exception("Value must be a number");
       }
       $this->TotalValue = $this->l_addslashes($TotalValue);
       $this->dirty = true;
   }
/*Type*/
   public function getType() {
       if ($this->Type==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Type));
       }
   }
   public function setType($Type) {
       if (strlen($Type) > huh_accession::TYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Type = $this->l_addslashes($Type);
       $this->dirty = true;
   }
/*VerbatimDate*/
   public function getVerbatimDate() {
       if ($this->VerbatimDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->VerbatimDate));
       }
   }
   public function setVerbatimDate($VerbatimDate) {
       if (strlen($VerbatimDate) > huh_accession::VERBATIMDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->VerbatimDate = $this->l_addslashes($VerbatimDate);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_accession::YESNO1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_accession::YESNO2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*DivisionID*/
   public function getDivisionID() {
       if ($this->DivisionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DivisionID));
       }
   }
   public function setDivisionID($DivisionID) {
       if (strlen(preg_replace('/[^0-9]/','',$DivisionID)) > huh_accession::DIVISIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DivisionID = trim($DivisionID);
       if (!ctype_digit(strval($DivisionID))) {
             throw new Exception("Value must be an integer");
       }
       $this->DivisionID = $this->l_addslashes($DivisionID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_accession::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_accession::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*AddressOfRecordID*/
   public function getAddressOfRecordID() {
       if ($this->AddressOfRecordID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AddressOfRecordID));
       }
   }
   public function setAddressOfRecordID($AddressOfRecordID) {
       if (strlen(preg_replace('/[^0-9]/','',$AddressOfRecordID)) > huh_accession::ADDRESSOFRECORDID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AddressOfRecordID = trim($AddressOfRecordID);
       if (!ctype_digit(strval($AddressOfRecordID)) && trim(strval($AddressOfRecordID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AddressOfRecordID = $this->l_addslashes($AddressOfRecordID);
       $this->dirty = true;
   }
/*RepositoryAgreementID*/
   public function getRepositoryAgreementID() {
       if ($this->RepositoryAgreementID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RepositoryAgreementID));
       }
   }
   public function setRepositoryAgreementID($RepositoryAgreementID) {
       if (strlen(preg_replace('/[^0-9]/','',$RepositoryAgreementID)) > huh_accession::REPOSITORYAGREEMENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $RepositoryAgreementID = trim($RepositoryAgreementID);
       if (!ctype_digit(strval($RepositoryAgreementID)) && trim(strval($RepositoryAgreementID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->RepositoryAgreementID = $this->l_addslashes($RepositoryAgreementID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getAccessionID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['AccessionID'] = $this->getAccessionID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_AccessionIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_AccessionConditionMYSQLI_TYPE = 's';
  const C_AccessionNumberMYSQLI_TYPE = 's';
  const C_AltAccessionNumberMYSQLI_TYPE = 's';
  const C_DateAccessionedMYSQLI_TYPE = 's';
  const C_DateAcknowledgedMYSQLI_TYPE = 's';
  const C_DateReceivedMYSQLI_TYPE = 's';
  const C_Number1MYSQLI_TYPE = 's';
  const C_Number2MYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_StatusMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_Text3MYSQLI_TYPE = 's';
  const C_TotalValueMYSQLI_TYPE = 'd';
  const C_TypeMYSQLI_TYPE = 's';
  const C_VerbatimDateMYSQLI_TYPE = 's';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_DivisionIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_AddressOfRecordIDMYSQLI_TYPE = 'i';
  const C_RepositoryAgreementIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='AccessionID') { $retval = self::C_AccessionIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='AccessionCondition') { $retval = self::C_AccessionConditionMYSQLI_TYPE; }
      if ($aFieldname=='AccessionNumber') { $retval = self::C_AccessionNumberMYSQLI_TYPE; }
      if ($aFieldname=='AltAccessionNumber') { $retval = self::C_AltAccessionNumberMYSQLI_TYPE; }
      if ($aFieldname=='DateAccessioned') { $retval = self::C_DateAccessionedMYSQLI_TYPE; }
      if ($aFieldname=='DateAcknowledged') { $retval = self::C_DateAcknowledgedMYSQLI_TYPE; }
      if ($aFieldname=='DateReceived') { $retval = self::C_DateReceivedMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='Status') { $retval = self::C_StatusMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='Text3') { $retval = self::C_Text3MYSQLI_TYPE; }
      if ($aFieldname=='TotalValue') { $retval = self::C_TotalValueMYSQLI_TYPE; }
      if ($aFieldname=='Type') { $retval = self::C_TypeMYSQLI_TYPE; }
      if ($aFieldname=='VerbatimDate') { $retval = self::C_VerbatimDateMYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='DivisionID') { $retval = self::C_DivisionIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='AddressOfRecordID') { $retval = self::C_AddressOfRecordIDMYSQLI_TYPE; }
      if ($aFieldname=='RepositoryAgreementID') { $retval = self::C_RepositoryAgreementIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setAccessionID($pk[AccessionID]);
             } else { ;
                 $this->setAccessionID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->AccessionID != NULL) {
           $sql = 'SELECT AccessionID, TimestampCreated, TimestampModified, Version, AccessionCondition, AccessionNumber, AltAccessionNumber, DateAccessioned, DateAcknowledged, DateReceived, Number1, Number2, Remarks, Status, Text1, Text2, Text3, TotalValue, Type, VerbatimDate, YesNo1, YesNo2, DivisionID, CreatedByAgentID, ModifiedByAgentID, AddressOfRecordID, RepositoryAgreementID FROM accession WHERE AccessionID = '.$this->AccessionID ;

           $preparesql = 'SELECT AccessionID, TimestampCreated, TimestampModified, Version, AccessionCondition, AccessionNumber, AltAccessionNumber, DateAccessioned, DateAcknowledged, DateReceived, Number1, Number2, Remarks, Status, Text1, Text2, Text3, TotalValue, Type, VerbatimDate, YesNo1, YesNo2, DivisionID, CreatedByAgentID, ModifiedByAgentID, AddressOfRecordID, RepositoryAgreementID FROM accession WHERE AccessionID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->AccessionID);
              $statement->execute();
              $statement->bind_result($this->AccessionID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->AccessionCondition, $this->AccessionNumber, $this->AltAccessionNumber, $this->DateAccessioned, $this->DateAcknowledged, $this->DateReceived, $this->Number1, $this->Number2, $this->Remarks, $this->Status, $this->Text1, $this->Text2, $this->Text3, $this->TotalValue, $this->Type, $this->VerbatimDate, $this->YesNo1, $this->YesNo2, $this->DivisionID, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->AddressOfRecordID, $this->RepositoryAgreementID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->AccessionID!= NULL) {
            $sql  = 'UPDATE  accession SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", AccessionCondition = ? ";
            $sql .=  ", AccessionNumber = ? ";
            $sql .=  ", AltAccessionNumber = ? ";
            $sql .=  ", DateAccessioned = ? ";
            $sql .=  ", DateAcknowledged = ? ";
            $sql .=  ", DateReceived = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", Status = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", Text3 = ? ";
            $sql .=  ", TotalValue = ? ";
            $sql .=  ", Type = ? ";
            $sql .=  ", VerbatimDate = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", DivisionID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", AddressOfRecordID = ? ";
            $sql .=  ", RepositoryAgreementID = ? ";

            $sql .= "  WHERE AccessionID = ? ";
        } else {
            $sql  = 'INSERT INTO accession ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( AccessionID ,  TimestampCreated ,  TimestampModified ,  Version ,  AccessionCondition ,  AccessionNumber ,  AltAccessionNumber ,  DateAccessioned ,  DateAcknowledged ,  DateReceived ,  Number1 ,  Number2 ,  Remarks ,  Status ,  Text1 ,  Text2 ,  Text3 ,  TotalValue ,  Type ,  VerbatimDate ,  YesNo1 ,  YesNo2 ,  DivisionID ,  CreatedByAgentID ,  ModifiedByAgentID ,  AddressOfRecordID ,  RepositoryAgreementID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->AccessionID!= NULL ) {
              $statement->bind_param("ississsssssssssssdssiiiiiiii", $this->AccessionID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->AccessionCondition , $this->AccessionNumber , $this->AltAccessionNumber , $this->DateAccessioned , $this->DateAcknowledged , $this->DateReceived , $this->Number1 , $this->Number2 , $this->Remarks , $this->Status , $this->Text1 , $this->Text2 , $this->Text3 , $this->TotalValue , $this->Type , $this->VerbatimDate , $this->YesNo1 , $this->YesNo2 , $this->DivisionID , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->AddressOfRecordID , $this->RepositoryAgreementID , $this->AccessionID );
           } else { 
              $statement->bind_param("ississsssssssssssdssiiiiiii", $this->AccessionID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->AccessionCondition , $this->AccessionNumber , $this->AltAccessionNumber , $this->DateAccessioned , $this->DateAcknowledged , $this->DateReceived , $this->Number1 , $this->Number2 , $this->Remarks , $this->Status , $this->Text1 , $this->Text2 , $this->Text3 , $this->TotalValue , $this->Type , $this->VerbatimDate , $this->YesNo1 , $this->YesNo2 , $this->DivisionID , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->AddressOfRecordID , $this->RepositoryAgreementID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->AccessionID != NULL) {
           $sql = 'SELECT AccessionID, TimestampCreated, TimestampModified, Version, AccessionCondition, AccessionNumber, AltAccessionNumber, DateAccessioned, DateAcknowledged, DateReceived, Number1, Number2, Remarks, Status, Text1, Text2, Text3, TotalValue, Type, VerbatimDate, YesNo1, YesNo2, DivisionID, CreatedByAgentID, ModifiedByAgentID, AddressOfRecordID, RepositoryAgreementID FROM accession WHERE AccessionID = "'.$this->AccessionID.'"  ' ;

           $preparedsql = 'SELECT  FROM accession WHERE  and AccessionID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississsssssssssssdssiiiiiii", $this->AccessionID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->AccessionCondition, $this->AccessionNumber, $this->AltAccessionNumber, $this->DateAccessioned, $this->DateAcknowledged, $this->DateReceived, $this->Number1, $this->Number2, $this->Remarks, $this->Status, $this->Text1, $this->Text2, $this->Text3, $this->TotalValue, $this->Type, $this->VerbatimDate, $this->YesNo1, $this->YesNo2, $this->DivisionID, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->AddressOfRecordID, $this->RepositoryAgreementID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM accession WHERE  and AccessionID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississsssssssssssdssiiiiiii", $this->AccessionID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->AccessionCondition, $this->AccessionNumber, $this->AltAccessionNumber, $this->DateAccessioned, $this->DateAcknowledged, $this->DateReceived, $this->Number1, $this->Number2, $this->Remarks, $this->Status, $this->Text1, $this->Text2, $this->Text3, $this->TotalValue, $this->Type, $this->VerbatimDate, $this->YesNo1, $this->YesNo2, $this->DivisionID, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->AddressOfRecordID, $this->RepositoryAgreementID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->AccessionID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM accession';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT AccessionID FROM accession $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_accession();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromaccessionagent() { 
      // ForeignKey in: accessionagent
      $t = new accessionagent();
  } 
  public function loadLinkedFromaccessionattachment() { 
      // ForeignKey in: accessionattachment
      $t = new accessionattachment();
  } 
  public function loadLinkedFromaccessionauthorization() { 
      // ForeignKey in: accessionauthorization
      $t = new accessionauthorization();
  } 
  public function loadLinkedFromaccessionpreparation() { 
      // ForeignKey in: accessionpreparation
      $t = new accessionpreparation();
  } 
  public function loadLinkedFromappraisal() { 
      // ForeignKey in: appraisal
      $t = new appraisal();
  } 
  public function loadLinkedFromdeaccession() { 
      // ForeignKey in: deaccession
      $t = new deaccession();
  } 
  public function loadLinkedFromtreatmentevent() { 
      // ForeignKey in: treatmentevent
      $t = new treatmentevent();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: DivisionID
      $t = new division();
      $t->load(getDivisionID());
      $returnvalue[DivisionID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: AddressOfRecordID
      $t = new addressofrecord();
      $t->load(getAddressOfRecordID());
      $returnvalue[AddressOfRecordID] = $t;
       // fk: RepositoryAgreementID
      $t = new repositoryagreement();
      $t->load(getRepositoryAgreementID());
      $returnvalue[RepositoryAgreementID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT AccessionID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(AccessionCondition,'') || ' ' || IFNULL(AccessionNumber,'') || ' ' || IFNULL(AltAccessionNumber,'') || ' ' || IFNULL(DateAccessioned,'') || ' ' || IFNULL(DateAcknowledged,'') || ' ' || IFNULL(DateReceived,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(Status,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(Text3,'') || ' ' || IFNULL(TotalValue,'') || ' ' || IFNULL(Type,'') || ' ' || IFNULL(VerbatimDate,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(DivisionID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(AddressOfRecordID,'') || ' ' || IFNULL(RepositoryAgreementID,'')) FROM accession order by AccessionNumber, AltAccessionNumber, DateAccessioned, DivisionID, CreatedByAgentID, ModifiedByAgentID, AddressOfRecordID, RepositoryAgreementID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM accession order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByAccessionNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AccessionID FROM accession WHERE AccessionNumber $operator '$searchTerm'";
        $preparedsql = "SELECT AccessionID FROM accession WHERE AccessionNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_accession();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAltAccessionNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AccessionID FROM accession WHERE AltAccessionNumber $operator '$searchTerm'";
        $preparedsql = "SELECT AccessionID FROM accession WHERE AltAccessionNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_accession();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDateAccessioned($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AccessionID FROM accession WHERE DateAccessioned $operator '$searchTerm'";
        $preparedsql = "SELECT AccessionID FROM accession WHERE DateAccessioned $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_accession();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDivisionID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AccessionID FROM accession WHERE DivisionID $operator '$searchTerm'";
        $preparedsql = "SELECT AccessionID FROM accession WHERE DivisionID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_accession();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AccessionID FROM accession WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT AccessionID FROM accession WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_accession();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AccessionID FROM accession WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT AccessionID FROM accession WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_accession();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAddressOfRecordID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AccessionID FROM accession WHERE AddressOfRecordID $operator '$searchTerm'";
        $preparedsql = "SELECT AccessionID FROM accession WHERE AddressOfRecordID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_accession();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByRepositoryAgreementID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AccessionID FROM accession WHERE RepositoryAgreementID $operator '$searchTerm'";
        $preparedsql = "SELECT AccessionID FROM accession WHERE RepositoryAgreementID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_accession();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctAccessionNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AccessionNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AccessionNumber FROM accession group by AccessionNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AccessionNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAltAccessionNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AltAccessionNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AltAccessionNumber FROM accession group by AltAccessionNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AltAccessionNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDateAccessioned($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DateAccessioned ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DateAccessioned FROM accession group by DateAccessioned order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DateAccessioned=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDivisionID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DivisionID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DivisionID FROM accession group by DivisionID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DivisionID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM accession group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM accession group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAddressOfRecordID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AddressOfRecordID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AddressOfRecordID FROM accession group by AddressOfRecordID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AddressOfRecordID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctRepositoryAgreementID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' RepositoryAgreementID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, RepositoryAgreementID FROM accession group by RepositoryAgreementID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&RepositoryAgreementID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'AccessionNumber':
             $returnvalue = $this->selectDistinctAccessionNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AltAccessionNumber':
             $returnvalue = $this->selectDistinctAltAccessionNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DateAccessioned':
             $returnvalue = $this->selectDistinctDateAccessioned($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DivisionID':
             $returnvalue = $this->selectDistinctDivisionID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AddressOfRecordID':
             $returnvalue = $this->selectDistinctAddressOfRecordID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'RepositoryAgreementID':
             $returnvalue = $this->selectDistinctRepositoryAgreementID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the accession.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_accessionView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_accession <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_accession::ACCESSIONID.": ".$model->getAccessionID()."</li>\n";
       $returnvalue .= "<li>".huh_accession::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_accession::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_accession::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_accession::ACCESSIONCONDITION.": ".$model->getAccessionCondition()."</li>\n";
       $returnvalue .= "<li>".huh_accession::ACCESSIONNUMBER.": ".$model->getAccessionNumber()."</li>\n";
       $returnvalue .= "<li>".huh_accession::ALTACCESSIONNUMBER.": ".$model->getAltAccessionNumber()."</li>\n";
       $returnvalue .= "<li>".huh_accession::DATEACCESSIONED.": ".$model->getDateAccessioned()."</li>\n";
       $returnvalue .= "<li>".huh_accession::DATEACKNOWLEDGED.": ".$model->getDateAcknowledged()."</li>\n";
       $returnvalue .= "<li>".huh_accession::DATERECEIVED.": ".$model->getDateReceived()."</li>\n";
       $returnvalue .= "<li>".huh_accession::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_accession::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_accession::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_accession::STATUS.": ".$model->getStatus()."</li>\n";
       $returnvalue .= "<li>".huh_accession::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_accession::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_accession::TEXT3.": ".$model->getText3()."</li>\n";
       $returnvalue .= "<li>".huh_accession::TOTALVALUE.": ".$model->getTotalValue()."</li>\n";
       $returnvalue .= "<li>".huh_accession::TYPE.": ".$model->getType()."</li>\n";
       $returnvalue .= "<li>".huh_accession::VERBATIMDATE.": ".$model->getVerbatimDate()."</li>\n";
       $returnvalue .= "<li>".huh_accession::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_accession::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_accession::DIVISIONID.": ".$model->getDivisionID()."</li>\n";
       $returnvalue .= "<li>".huh_accession::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_accession::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_accession::ADDRESSOFRECORDID.": ".$model->getAddressOfRecordID()."</li>\n";
       $returnvalue .= "<li>".huh_accession::REPOSITORYAGREEMENTID.": ".$model->getRepositoryAgreementID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>division</li>";
           $t_division = new huh_division();
           $t_divisionView = new huh_divisionView();
           $t_divisionView->setModel($t_division);
           if ($model->getDivisionID() != '') { 
               $t_division->load($model->getDivisionID());
               $returnvalue .= $t_divisionView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>addressofrecord</li>";
           $t_addressofrecord = new huh_addressofrecord();
           $t_addressofrecordView = new huh_addressofrecordView();
           $t_addressofrecordView->setModel($t_addressofrecord);
           if ($model->getAddressOfRecordID() != '') { 
               $t_addressofrecord->load($model->getAddressOfRecordID());
               $returnvalue .= $t_addressofrecordView->getDetailsView(false);
           }
           $returnvalue .= "<li>repositoryagreement</li>";
           $t_repositoryagreement = new huh_repositoryagreement();
           $t_repositoryagreementView = new huh_repositoryagreementView();
           $t_repositoryagreementView->setModel($t_repositoryagreement);
           if ($model->getRepositoryAgreementID() != '') { 
               $t_repositoryagreement->load($model->getRepositoryAgreementID());
               $returnvalue .= $t_repositoryagreementView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_accession::ACCESSIONID.': "'.$model->getAccessionID().'",';
       $returnvalue .= '"'.huh_accession::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_accession::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_accession::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_accession::ACCESSIONCONDITION.': "'.$model->getAccessionCondition().'",';
       $returnvalue .= '"'.huh_accession::ACCESSIONNUMBER.': "'.$model->getAccessionNumber().'",';
       $returnvalue .= '"'.huh_accession::ALTACCESSIONNUMBER.': "'.$model->getAltAccessionNumber().'",';
       $returnvalue .= '"'.huh_accession::DATEACCESSIONED.': "'.$model->getDateAccessioned().'",';
       $returnvalue .= '"'.huh_accession::DATEACKNOWLEDGED.': "'.$model->getDateAcknowledged().'",';
       $returnvalue .= '"'.huh_accession::DATERECEIVED.': "'.$model->getDateReceived().'",';
       $returnvalue .= '"'.huh_accession::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_accession::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_accession::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_accession::STATUS.': "'.$model->getStatus().'",';
       $returnvalue .= '"'.huh_accession::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_accession::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_accession::TEXT3.': "'.$model->getText3().'",';
       $returnvalue .= '"'.huh_accession::TOTALVALUE.': "'.$model->getTotalValue().'",';
       $returnvalue .= '"'.huh_accession::TYPE.': "'.$model->getType().'",';
       $returnvalue .= '"'.huh_accession::VERBATIMDATE.': "'.$model->getVerbatimDate().'",';
       $returnvalue .= '"'.huh_accession::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_accession::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_accession::DIVISIONID.': "'.$model->getDivisionID().'",';
       $returnvalue .= '"'.huh_accession::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_accession::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_accession::ADDRESSOFRECORDID.': "'.$model->getAddressOfRecordID().'",';
       $returnvalue .= '"'.huh_accession::REPOSITORYAGREEMENTID.': "'.$model->getRepositoryAgreementID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getAccessionID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getAccessionCondition()."</td>\n";
       $returnvalue .= "<td>".$model->getAccessionNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getAltAccessionNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getDateAccessioned()."</td>\n";
       $returnvalue .= "<td>".$model->getDateAcknowledged()."</td>\n";
       $returnvalue .= "<td>".$model->getDateReceived()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getStatus()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getText3()."</td>\n";
       $returnvalue .= "<td>".$model->getTotalValue()."</td>\n";
       $returnvalue .= "<td>".$model->getType()."</td>\n";
       $returnvalue .= "<td>".$model->getVerbatimDate()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getDivisionID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getAddressOfRecordID()."</td>\n";
       $returnvalue .= "<td>".$model->getRepositoryAgreementID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_accession::ACCESSIONID."</th>\n";
       $returnvalue .= "<th>".huh_accession::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_accession::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_accession::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_accession::ACCESSIONCONDITION."</th>\n";
       $returnvalue .= "<th>".huh_accession::ACCESSIONNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_accession::ALTACCESSIONNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_accession::DATEACCESSIONED."</th>\n";
       $returnvalue .= "<th>".huh_accession::DATEACKNOWLEDGED."</th>\n";
       $returnvalue .= "<th>".huh_accession::DATERECEIVED."</th>\n";
       $returnvalue .= "<th>".huh_accession::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_accession::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_accession::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_accession::STATUS."</th>\n";
       $returnvalue .= "<th>".huh_accession::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_accession::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_accession::TEXT3."</th>\n";
       $returnvalue .= "<th>".huh_accession::TOTALVALUE."</th>\n";
       $returnvalue .= "<th>".huh_accession::TYPE."</th>\n";
       $returnvalue .= "<th>".huh_accession::VERBATIMDATE."</th>\n";
       $returnvalue .= "<th>".huh_accession::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_accession::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_accession::DIVISIONID."</th>\n";
       $returnvalue .= "<th>".huh_accession::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_accession::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_accession::ADDRESSOFRECORDID."</th>\n";
       $returnvalue .= "<th>".huh_accession::REPOSITORYAGREEMENTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_accession">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new AccessionID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_accession::ACCESSIONID.">ACCESSIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_accession::ACCESSIONID." id=".huh_accession::ACCESSIONID." value='".$model->getAccessionID()."'  style=' width:".huh_accession::ACCESSIONID_SIZE ."em;  '  maxlength='".huh_accession::ACCESSIONID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_accession::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_accession::TIMESTAMPCREATED." id=".huh_accession::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_accession::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_accession::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_accession::TIMESTAMPMODIFIED." id=".huh_accession::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_accession::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_accession::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_accession::VERSION." id=".huh_accession::VERSION." value='".$model->getVersion()."'  style=' width:".huh_accession::VERSION_SIZE ."em;  '  maxlength='".huh_accession::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::ACCESSIONCONDITION.">ACCESSIONCONDITION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_accession::ACCESSIONCONDITION." id=".huh_accession::ACCESSIONCONDITION." >".$model->getAccessionCondition()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::ACCESSIONNUMBER.">ACCESSIONNUMBER</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_accession::ACCESSIONNUMBER." id=".huh_accession::ACCESSIONNUMBER." >".$model->getAccessionNumber()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::ALTACCESSIONNUMBER.">ALTACCESSIONNUMBER</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_accession::ALTACCESSIONNUMBER." id=".huh_accession::ALTACCESSIONNUMBER." >".$model->getAltAccessionNumber()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::DATEACCESSIONED.">DATEACCESSIONED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_accession::DATEACCESSIONED." id=".huh_accession::DATEACCESSIONED." value='".$model->getDateAccessioned()."'  style=' width:".huh_accession::DATEACCESSIONED_SIZE ."em;  '  maxlength='".huh_accession::DATEACCESSIONED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::DATEACKNOWLEDGED.">DATEACKNOWLEDGED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_accession::DATEACKNOWLEDGED." id=".huh_accession::DATEACKNOWLEDGED." value='".$model->getDateAcknowledged()."'  style=' width:".huh_accession::DATEACKNOWLEDGED_SIZE ."em;  '  maxlength='".huh_accession::DATEACKNOWLEDGED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::DATERECEIVED.">DATERECEIVED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_accession::DATERECEIVED." id=".huh_accession::DATERECEIVED." value='".$model->getDateReceived()."'  style=' width:".huh_accession::DATERECEIVED_SIZE ."em;  '  maxlength='".huh_accession::DATERECEIVED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_accession::NUMBER1." id=".huh_accession::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_accession::NUMBER1_SIZE ."em;  '  maxlength='".huh_accession::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_accession::NUMBER2." id=".huh_accession::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_accession::NUMBER2_SIZE ."em;  '  maxlength='".huh_accession::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_accession::REMARKS." id=".huh_accession::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::STATUS.">STATUS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_accession::STATUS." id=".huh_accession::STATUS." value='".$model->getStatus()."'  style=' width:".huh_accession::STATUS_SIZE ."em;  '  maxlength='".huh_accession::STATUS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::TEXT1.">TEXT1</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_accession::TEXT1." id=".huh_accession::TEXT1." >".$model->getText1()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_accession::TEXT2." id=".huh_accession::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::TEXT3.">TEXT3</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_accession::TEXT3." id=".huh_accession::TEXT3." >".$model->getText3()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::TOTALVALUE.">TOTALVALUE</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9\.-]*'  invalidMessage='The value entered is not valid.  It must be a number.'  name=".huh_accession::TOTALVALUE." id=".huh_accession::TOTALVALUE." value='".$model->getTotalValue()."'  style=' width:".huh_accession::TOTALVALUE_SIZE ."em;  '  maxlength='".huh_accession::TOTALVALUE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::TYPE.">TYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_accession::TYPE." id=".huh_accession::TYPE." value='".$model->getType()."'  style=' width:".huh_accession::TYPE_SIZE ."em;  '  maxlength='".huh_accession::TYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::VERBATIMDATE.">VERBATIMDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_accession::VERBATIMDATE." id=".huh_accession::VERBATIMDATE." value='".$model->getVerbatimDate()."'  style=' width:".huh_accession::VERBATIMDATE_SIZE ."em;  '  maxlength='".huh_accession::VERBATIMDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_accession::YESNO1." id=".huh_accession::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_accession::YESNO1_SIZE ."em;  '  maxlength='".huh_accession::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_accession::YESNO2." id=".huh_accession::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_accession::YESNO2_SIZE ."em;  '  maxlength='".huh_accession::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::DIVISIONID.">DIVISIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_accession::DIVISIONID." id=".huh_accession::DIVISIONID." value='".$model->getDivisionID()."'  style=' width:".huh_accession::DIVISIONID_SIZE ."em;  '  maxlength='".huh_accession::DIVISIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_accession::CREATEDBYAGENTID." id=".huh_accession::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_accession::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_accession::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_accession::MODIFIEDBYAGENTID." id=".huh_accession::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_accession::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_accession::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::ADDRESSOFRECORDID.">ADDRESSOFRECORDID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_accession::ADDRESSOFRECORDID." id=".huh_accession::ADDRESSOFRECORDID." value='".$model->getAddressOfRecordID()."'  style=' width:".huh_accession::ADDRESSOFRECORDID_SIZE ."em;  '  maxlength='".huh_accession::ADDRESSOFRECORDID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_accession::REPOSITORYAGREEMENTID.">REPOSITORYAGREEMENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_accession::REPOSITORYAGREEMENTID." id=".huh_accession::REPOSITORYAGREEMENTID." value='".$model->getRepositoryAgreementID()."'  style=' width:".huh_accession::REPOSITORYAGREEMENTID_SIZE ."em;  '  maxlength='".huh_accession::REPOSITORYAGREEMENTID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_accession">';
       $returnvalue .= '<input type=hidden name=AccessionID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_accession">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>ACCESSIONID<input type=text name=".huh_accession::ACCESSIONID." id=".huh_accession::ACCESSIONID." value='".$model->getAccessionID()."'  size='".huh_accession::ACCESSIONID_SIZE ."'  maxlength='".huh_accession::ACCESSIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_accession::TIMESTAMPCREATED." id=".huh_accession::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_accession::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_accession::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_accession::TIMESTAMPMODIFIED." id=".huh_accession::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_accession::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_accession::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_accession::VERSION." id=".huh_accession::VERSION." value='".$model->getVersion()."'  size='".huh_accession::VERSION_SIZE ."'  maxlength='".huh_accession::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ACCESSIONCONDITION<input type=text name=".huh_accession::ACCESSIONCONDITION." id=".huh_accession::ACCESSIONCONDITION." value='".$model->getAccessionCondition()."'  size='51'  maxlength='".huh_accession::ACCESSIONCONDITION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ACCESSIONNUMBER<input type=text name=".huh_accession::ACCESSIONNUMBER." id=".huh_accession::ACCESSIONNUMBER." value='".$model->getAccessionNumber()."'  size='51'  maxlength='".huh_accession::ACCESSIONNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ALTACCESSIONNUMBER<input type=text name=".huh_accession::ALTACCESSIONNUMBER." id=".huh_accession::ALTACCESSIONNUMBER." value='".$model->getAltAccessionNumber()."'  size='51'  maxlength='".huh_accession::ALTACCESSIONNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATEACCESSIONED<input type=text name=".huh_accession::DATEACCESSIONED." id=".huh_accession::DATEACCESSIONED." value='".$model->getDateAccessioned()."'  size='".huh_accession::DATEACCESSIONED_SIZE ."'  maxlength='".huh_accession::DATEACCESSIONED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATEACKNOWLEDGED<input type=text name=".huh_accession::DATEACKNOWLEDGED." id=".huh_accession::DATEACKNOWLEDGED." value='".$model->getDateAcknowledged()."'  size='".huh_accession::DATEACKNOWLEDGED_SIZE ."'  maxlength='".huh_accession::DATEACKNOWLEDGED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATERECEIVED<input type=text name=".huh_accession::DATERECEIVED." id=".huh_accession::DATERECEIVED." value='".$model->getDateReceived()."'  size='".huh_accession::DATERECEIVED_SIZE ."'  maxlength='".huh_accession::DATERECEIVED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_accession::NUMBER1." id=".huh_accession::NUMBER1." value='".$model->getNumber1()."'  size='".huh_accession::NUMBER1_SIZE ."'  maxlength='".huh_accession::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_accession::NUMBER2." id=".huh_accession::NUMBER2." value='".$model->getNumber2()."'  size='".huh_accession::NUMBER2_SIZE ."'  maxlength='".huh_accession::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_accession::REMARKS." id=".huh_accession::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_accession::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STATUS<input type=text name=".huh_accession::STATUS." id=".huh_accession::STATUS." value='".$model->getStatus()."'  size='".huh_accession::STATUS_SIZE ."'  maxlength='".huh_accession::STATUS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_accession::TEXT1." id=".huh_accession::TEXT1." value='".$model->getText1()."'  size='51'  maxlength='".huh_accession::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_accession::TEXT2." id=".huh_accession::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_accession::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT3<input type=text name=".huh_accession::TEXT3." id=".huh_accession::TEXT3." value='".$model->getText3()."'  size='51'  maxlength='".huh_accession::TEXT3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TOTALVALUE<input type=text name=".huh_accession::TOTALVALUE." id=".huh_accession::TOTALVALUE." value='".$model->getTotalValue()."'  size='".huh_accession::TOTALVALUE_SIZE ."'  maxlength='".huh_accession::TOTALVALUE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TYPE<input type=text name=".huh_accession::TYPE." id=".huh_accession::TYPE." value='".$model->getType()."'  size='".huh_accession::TYPE_SIZE ."'  maxlength='".huh_accession::TYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERBATIMDATE<input type=text name=".huh_accession::VERBATIMDATE." id=".huh_accession::VERBATIMDATE." value='".$model->getVerbatimDate()."'  size='".huh_accession::VERBATIMDATE_SIZE ."'  maxlength='".huh_accession::VERBATIMDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_accession::YESNO1." id=".huh_accession::YESNO1." value='".$model->getYesNo1()."'  size='".huh_accession::YESNO1_SIZE ."'  maxlength='".huh_accession::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_accession::YESNO2." id=".huh_accession::YESNO2." value='".$model->getYesNo2()."'  size='".huh_accession::YESNO2_SIZE ."'  maxlength='".huh_accession::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DIVISIONID<input type=text name=".huh_accession::DIVISIONID." id=".huh_accession::DIVISIONID." value='".$model->getDivisionID()."'  size='".huh_accession::DIVISIONID_SIZE ."'  maxlength='".huh_accession::DIVISIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_accession::CREATEDBYAGENTID." id=".huh_accession::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_accession::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_accession::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_accession::MODIFIEDBYAGENTID." id=".huh_accession::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_accession::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_accession::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ADDRESSOFRECORDID<input type=text name=".huh_accession::ADDRESSOFRECORDID." id=".huh_accession::ADDRESSOFRECORDID." value='".$model->getAddressOfRecordID()."'  size='".huh_accession::ADDRESSOFRECORDID_SIZE ."'  maxlength='".huh_accession::ADDRESSOFRECORDID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REPOSITORYAGREEMENTID<input type=text name=".huh_accession::REPOSITORYAGREEMENTID." id=".huh_accession::REPOSITORYAGREEMENTID." value='".$model->getRepositoryAgreementID()."'  size='".huh_accession::REPOSITORYAGREEMENTID_SIZE ."'  maxlength='".huh_accession::REPOSITORYAGREEMENTID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
