<?php
//==============================================================================
//===   geocoorddetail.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_geocoorddetail implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const GEOCOORDDETAILID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const GEOREFACCURACYUNITS_SIZE = 20; //20
   const GEOREFDETDATE_SIZE   = 21; //TIMESTAMP
   const GEOREFDETREF_SIZE    = 100; //100
   const GEOREFREMARKS_SIZE   = 255; //LONGVARCHAR
   const GEOREFVERIFICATIONSTATUS_SIZE = 20; //YEAR
   const MAXUNCERTAINTYEST_SIZE = 20; //REAL
   const MAXUNCERTAINTYESTUNIT_SIZE = 8; //8
   const NAMEDPLACEEXTENT_SIZE = 20; //REAL
   const NOGEOREFBECAUSE_SIZE = 100; //100
   const ORIGINALCOORDSYSTEM_SIZE = 32; //32
   const PROTOCOL_SIZE        = 64; //64
   const SOURCE_SIZE          = 64; //64
   const VALIDATION_SIZE      = 64; //64
   const AGENTID_SIZE         = 11; //INTEGER
   const LOCALITYID_SIZE      = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const GEOCOORDDETAILID  = 'GeoCoordDetailID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const GEOREFACCURACYUNITS = 'GeoRefAccuracyUnits';
   const GEOREFDETDATE     = 'GeoRefDetDate';
   const GEOREFDETREF      = 'GeoRefDetRef';
   const GEOREFREMARKS     = 'GeoRefRemarks';
   const GEOREFVERIFICATIONSTATUS = 'GeoRefVerificationStatus';
   const MAXUNCERTAINTYEST = 'MaxUncertaintyEst';
   const MAXUNCERTAINTYESTUNIT = 'MaxUncertaintyEstUnit';
   const NAMEDPLACEEXTENT  = 'NamedPlaceExtent';
   const NOGEOREFBECAUSE   = 'NoGeoRefBecause';
   const ORIGINALCOORDSYSTEM = 'OriginalCoordSystem';
   const PROTOCOL          = 'Protocol';
   const SOURCE            = 'Source';
   const VALIDATION        = 'Validation';
   const AGENTID           = 'AgentID';
   const LOCALITYID        = 'LocalityID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $GeoCoordDetailID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['GeoCoordDetailID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $GeoRefAccuracyUnits = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GeoRefAccuracyUnits']), 0, 20);
  $GeoRefDetDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GeoRefDetDate']), 0, 21);
  $GeoRefDetRef = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GeoRefDetRef']), 0, 100);
  $GeoRefRemarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GeoRefRemarks']), 0, 255);
  $GeoRefVerificationStatus = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GeoRefVerificationStatus']), 0, 20);
  $MaxUncertaintyEst = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['MaxUncertaintyEst']), 0, 20);
  $MaxUncertaintyEstUnit = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['MaxUncertaintyEstUnit']), 0, 8);
  $NamedPlaceExtent = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['NamedPlaceExtent']), 0, 20);
  $NoGeoRefBecause = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['NoGeoRefBecause']), 0, 100);
  $OriginalCoordSystem = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['OriginalCoordSystem']), 0, 32);
  $Protocol = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Protocol']), 0, 64);
  $Source = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Source']), 0, 64);
  $Validation = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Validation']), 0, 64);
  $AgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AgentID']), 0, 11);
  $LocalityID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['LocalityID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $GeoCoordDetailID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $GeoRefAccuracyUnits; // VARCHAR(20) 
   private $GeoRefDetDate; // TIMESTAMP 
   private $GeoRefDetRef; // VARCHAR(100) 
   private $GeoRefRemarks; // LONGVARCHAR 
   private $GeoRefVerificationStatus; // YEAR 
   private $MaxUncertaintyEst; // REAL 
   private $MaxUncertaintyEstUnit; // VARCHAR(8) 
   private $NamedPlaceExtent; // REAL 
   private $NoGeoRefBecause; // VARCHAR(100) 
   private $OriginalCoordSystem; // VARCHAR(32) 
   private $Protocol; // VARCHAR(64) 
   private $Source; // VARCHAR(64) 
   private $Validation; // VARCHAR(64) 
   private $AgentID; // INTEGER 
   private $LocalityID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' GeoCoordDetailID, TimestampCreated, TimestampModified, Version, GeoRefAccuracyUnits, GeoRefDetDate, GeoRefDetRef, GeoRefRemarks, GeoRefVerificationStatus, MaxUncertaintyEst, MaxUncertaintyEstUnit, NamedPlaceExtent, NoGeoRefBecause, OriginalCoordSystem, Protocol, Source, Validation, AgentID, LocalityID, CreatedByAgentID, ModifiedByAgentID, ';
   const PKFIELDLIST = ' GeoCoordDetailID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'GeoCoordDetailID'  ) ;
   private $allFieldsArray = array( 0 => 'GeoCoordDetailID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'GeoRefAccuracyUnits' , 5 => 'GeoRefDetDate' , 6 => 'GeoRefDetRef' , 7 => 'GeoRefRemarks' , 8 => 'GeoRefVerificationStatus' , 9 => 'MaxUncertaintyEst' , 10 => 'MaxUncertaintyEstUnit' , 11 => 'NamedPlaceExtent' , 12 => 'NoGeoRefBecause' , 13 => 'OriginalCoordSystem' , 14 => 'Protocol' , 15 => 'Source' , 16 => 'Validation' , 17 => 'AgentID' , 18 => 'LocalityID' , 19 => 'CreatedByAgentID' , 20 => 'ModifiedByAgentID'  ) ;
   private $selectDistinctFieldsArray = array( 17 => 'AgentID' , 18 => 'LocalityID' , 19 => 'CreatedByAgentID' , 20 => 'ModifiedByAgentID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_geocoorddetail(){
       $this->GeoCoordDetailID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->GeoRefAccuracyUnits = '';
       $this->GeoRefDetDate = '';
       $this->GeoRefDetRef = '';
       $this->GeoRefRemarks = '';
       $this->GeoRefVerificationStatus = '';
       $this->MaxUncertaintyEst = '';
       $this->MaxUncertaintyEstUnit = '';
       $this->NamedPlaceExtent = '';
       $this->NoGeoRefBecause = '';
       $this->OriginalCoordSystem = '';
       $this->Protocol = '';
       $this->Source = '';
       $this->Validation = '';
       $this->AgentID = '';
       $this->LocalityID = '';
       $this->CreatedByAgentID = '';
       $this->ModifiedByAgentID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='GeoCoordDetailID') { $returnvalue = $this->setGeoCoordDetailID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='GeoRefAccuracyUnits') { $returnvalue = $this->setGeoRefAccuracyUnits($value); } 
             if ($fieldname=='GeoRefDetDate') { $returnvalue = $this->setGeoRefDetDate($value); } 
             if ($fieldname=='GeoRefDetRef') { $returnvalue = $this->setGeoRefDetRef($value); } 
             if ($fieldname=='GeoRefRemarks') { $returnvalue = $this->setGeoRefRemarks($value); } 
             if ($fieldname=='GeoRefVerificationStatus') { $returnvalue = $this->setGeoRefVerificationStatus($value); } 
             if ($fieldname=='MaxUncertaintyEst') { $returnvalue = $this->setMaxUncertaintyEst($value); } 
             if ($fieldname=='MaxUncertaintyEstUnit') { $returnvalue = $this->setMaxUncertaintyEstUnit($value); } 
             if ($fieldname=='NamedPlaceExtent') { $returnvalue = $this->setNamedPlaceExtent($value); } 
             if ($fieldname=='NoGeoRefBecause') { $returnvalue = $this->setNoGeoRefBecause($value); } 
             if ($fieldname=='OriginalCoordSystem') { $returnvalue = $this->setOriginalCoordSystem($value); } 
             if ($fieldname=='Protocol') { $returnvalue = $this->setProtocol($value); } 
             if ($fieldname=='Source') { $returnvalue = $this->setSource($value); } 
             if ($fieldname=='Validation') { $returnvalue = $this->setValidation($value); } 
             if ($fieldname=='AgentID') { $returnvalue = $this->setAgentID($value); } 
             if ($fieldname=='LocalityID') { $returnvalue = $this->setLocalityID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='GeoCoordDetailID') { $returnvalue = $this->getGeoCoordDetailID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='GeoRefAccuracyUnits') { $returnvalue = $this->getGeoRefAccuracyUnits(); } 
             if ($fieldname=='GeoRefDetDate') { $returnvalue = $this->getGeoRefDetDate(); } 
             if ($fieldname=='GeoRefDetRef') { $returnvalue = $this->getGeoRefDetRef(); } 
             if ($fieldname=='GeoRefRemarks') { $returnvalue = $this->getGeoRefRemarks(); } 
             if ($fieldname=='GeoRefVerificationStatus') { $returnvalue = $this->getGeoRefVerificationStatus(); } 
             if ($fieldname=='MaxUncertaintyEst') { $returnvalue = $this->getMaxUncertaintyEst(); } 
             if ($fieldname=='MaxUncertaintyEstUnit') { $returnvalue = $this->getMaxUncertaintyEstUnit(); } 
             if ($fieldname=='NamedPlaceExtent') { $returnvalue = $this->getNamedPlaceExtent(); } 
             if ($fieldname=='NoGeoRefBecause') { $returnvalue = $this->getNoGeoRefBecause(); } 
             if ($fieldname=='OriginalCoordSystem') { $returnvalue = $this->getOriginalCoordSystem(); } 
             if ($fieldname=='Protocol') { $returnvalue = $this->getProtocol(); } 
             if ($fieldname=='Source') { $returnvalue = $this->getSource(); } 
             if ($fieldname=='Validation') { $returnvalue = $this->getValidation(); } 
             if ($fieldname=='AgentID') { $returnvalue = $this->getAgentID(); } 
             if ($fieldname=='LocalityID') { $returnvalue = $this->getLocalityID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*GeoCoordDetailID*/
   public function getGeoCoordDetailID() {
       if ($this->GeoCoordDetailID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeoCoordDetailID));
       }
   }
   public function setGeoCoordDetailID($GeoCoordDetailID) {
       if (strlen(preg_replace('/[^0-9]/','',$GeoCoordDetailID)) > huh_geocoorddetail::GEOCOORDDETAILID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $GeoCoordDetailID = trim($GeoCoordDetailID);
       if (!ctype_digit(strval($GeoCoordDetailID)) && trim(strval($GeoCoordDetailID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->GeoCoordDetailID = $this->l_addslashes($GeoCoordDetailID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_geocoorddetail::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_geocoorddetail::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_geocoorddetail::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*GeoRefAccuracyUnits*/
   public function getGeoRefAccuracyUnits() {
       if ($this->GeoRefAccuracyUnits==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeoRefAccuracyUnits));
       }
   }
   public function setGeoRefAccuracyUnits($GeoRefAccuracyUnits) {
       if (strlen($GeoRefAccuracyUnits) > huh_geocoorddetail::GEOREFACCURACYUNITS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GeoRefAccuracyUnits = $this->l_addslashes($GeoRefAccuracyUnits);
       $this->dirty = true;
   }
/*GeoRefDetDate*/
   public function getGeoRefDetDate() {
       if ($this->GeoRefDetDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeoRefDetDate));
       }
   }
   public function setGeoRefDetDate($GeoRefDetDate) {
       if (strlen($GeoRefDetDate) > huh_geocoorddetail::GEOREFDETDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GeoRefDetDate = $this->l_addslashes($GeoRefDetDate);
       $this->dirty = true;
   }
/*GeoRefDetRef*/
   public function getGeoRefDetRef() {
       if ($this->GeoRefDetRef==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeoRefDetRef));
       }
   }
   public function setGeoRefDetRef($GeoRefDetRef) {
       if (strlen($GeoRefDetRef) > huh_geocoorddetail::GEOREFDETREF_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GeoRefDetRef = $this->l_addslashes($GeoRefDetRef);
       $this->dirty = true;
   }
/*GeoRefRemarks*/
   public function getGeoRefRemarks() {
       if ($this->GeoRefRemarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeoRefRemarks));
       }
   }
   public function setGeoRefRemarks($GeoRefRemarks) {
       if (strlen($GeoRefRemarks) > huh_geocoorddetail::GEOREFREMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GeoRefRemarks = $this->l_addslashes($GeoRefRemarks);
       $this->dirty = true;
   }
/*GeoRefVerificationStatus*/
   public function getGeoRefVerificationStatus() {
       if ($this->GeoRefVerificationStatus==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeoRefVerificationStatus));
       }
   }
   public function setGeoRefVerificationStatus($GeoRefVerificationStatus) {
       if (strlen($GeoRefVerificationStatus) > huh_geocoorddetail::GEOREFVERIFICATIONSTATUS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GeoRefVerificationStatus = $this->l_addslashes($GeoRefVerificationStatus);
       $this->dirty = true;
   }
/*MaxUncertaintyEst*/
   public function getMaxUncertaintyEst() {
       if ($this->MaxUncertaintyEst==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->MaxUncertaintyEst));
       }
   }
   public function setMaxUncertaintyEst($MaxUncertaintyEst) {
       if (strlen($MaxUncertaintyEst) > huh_geocoorddetail::MAXUNCERTAINTYEST_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->MaxUncertaintyEst = $this->l_addslashes($MaxUncertaintyEst);
       $this->dirty = true;
   }
/*MaxUncertaintyEstUnit*/
   public function getMaxUncertaintyEstUnit() {
       if ($this->MaxUncertaintyEstUnit==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->MaxUncertaintyEstUnit));
       }
   }
   public function setMaxUncertaintyEstUnit($MaxUncertaintyEstUnit) {
       if (strlen($MaxUncertaintyEstUnit) > huh_geocoorddetail::MAXUNCERTAINTYESTUNIT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->MaxUncertaintyEstUnit = $this->l_addslashes($MaxUncertaintyEstUnit);
       $this->dirty = true;
   }
/*NamedPlaceExtent*/
   public function getNamedPlaceExtent() {
       if ($this->NamedPlaceExtent==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NamedPlaceExtent));
       }
   }
   public function setNamedPlaceExtent($NamedPlaceExtent) {
       if (strlen($NamedPlaceExtent) > huh_geocoorddetail::NAMEDPLACEEXTENT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->NamedPlaceExtent = $this->l_addslashes($NamedPlaceExtent);
       $this->dirty = true;
   }
/*NoGeoRefBecause*/
   public function getNoGeoRefBecause() {
       if ($this->NoGeoRefBecause==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NoGeoRefBecause));
       }
   }
   public function setNoGeoRefBecause($NoGeoRefBecause) {
       if (strlen($NoGeoRefBecause) > huh_geocoorddetail::NOGEOREFBECAUSE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->NoGeoRefBecause = $this->l_addslashes($NoGeoRefBecause);
       $this->dirty = true;
   }
/*OriginalCoordSystem*/
   public function getOriginalCoordSystem() {
       if ($this->OriginalCoordSystem==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->OriginalCoordSystem));
       }
   }
   public function setOriginalCoordSystem($OriginalCoordSystem) {
       if (strlen($OriginalCoordSystem) > huh_geocoorddetail::ORIGINALCOORDSYSTEM_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->OriginalCoordSystem = $this->l_addslashes($OriginalCoordSystem);
       $this->dirty = true;
   }
/*Protocol*/
   public function getProtocol() {
       if ($this->Protocol==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Protocol));
       }
   }
   public function setProtocol($Protocol) {
       if (strlen($Protocol) > huh_geocoorddetail::PROTOCOL_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Protocol = $this->l_addslashes($Protocol);
       $this->dirty = true;
   }
/*Source*/
   public function getSource() {
       if ($this->Source==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Source));
       }
   }
   public function setSource($Source) {
       if (strlen($Source) > huh_geocoorddetail::SOURCE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Source = $this->l_addslashes($Source);
       $this->dirty = true;
   }
/*Validation*/
   public function getValidation() {
       if ($this->Validation==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Validation));
       }
   }
   public function setValidation($Validation) {
       if (strlen($Validation) > huh_geocoorddetail::VALIDATION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Validation = $this->l_addslashes($Validation);
       $this->dirty = true;
   }
/*AgentID*/
   public function getAgentID() {
       if ($this->AgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AgentID));
       }
   }
   public function setAgentID($AgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$AgentID)) > huh_geocoorddetail::AGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AgentID = trim($AgentID);
       if (!ctype_digit(strval($AgentID)) && trim(strval($AgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AgentID = $this->l_addslashes($AgentID);
       $this->dirty = true;
   }
/*LocalityID*/
   public function getLocalityID() {
       if ($this->LocalityID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LocalityID));
       }
   }
   public function setLocalityID($LocalityID) {
       if (strlen(preg_replace('/[^0-9]/','',$LocalityID)) > huh_geocoorddetail::LOCALITYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $LocalityID = trim($LocalityID);
       if (!ctype_digit(strval($LocalityID)) && trim(strval($LocalityID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->LocalityID = $this->l_addslashes($LocalityID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_geocoorddetail::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_geocoorddetail::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getGeoCoordDetailID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['GeoCoordDetailID'] = $this->getGeoCoordDetailID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_GeoCoordDetailIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_GeoRefAccuracyUnitsMYSQLI_TYPE = 's';
  const C_GeoRefDetDateMYSQLI_TYPE = 's';
  const C_GeoRefDetRefMYSQLI_TYPE = 's';
  const C_GeoRefRemarksMYSQLI_TYPE = 's';
  const C_GeoRefVerificationStatusMYSQLI_TYPE = 's';
  const C_MaxUncertaintyEstMYSQLI_TYPE = 's';
  const C_MaxUncertaintyEstUnitMYSQLI_TYPE = 's';
  const C_NamedPlaceExtentMYSQLI_TYPE = 's';
  const C_NoGeoRefBecauseMYSQLI_TYPE = 's';
  const C_OriginalCoordSystemMYSQLI_TYPE = 's';
  const C_ProtocolMYSQLI_TYPE = 's';
  const C_SourceMYSQLI_TYPE = 's';
  const C_ValidationMYSQLI_TYPE = 's';
  const C_AgentIDMYSQLI_TYPE = 'i';
  const C_LocalityIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='GeoCoordDetailID') { $retval = self::C_GeoCoordDetailIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='GeoRefAccuracyUnits') { $retval = self::C_GeoRefAccuracyUnitsMYSQLI_TYPE; }
      if ($aFieldname=='GeoRefDetDate') { $retval = self::C_GeoRefDetDateMYSQLI_TYPE; }
      if ($aFieldname=='GeoRefDetRef') { $retval = self::C_GeoRefDetRefMYSQLI_TYPE; }
      if ($aFieldname=='GeoRefRemarks') { $retval = self::C_GeoRefRemarksMYSQLI_TYPE; }
      if ($aFieldname=='GeoRefVerificationStatus') { $retval = self::C_GeoRefVerificationStatusMYSQLI_TYPE; }
      if ($aFieldname=='MaxUncertaintyEst') { $retval = self::C_MaxUncertaintyEstMYSQLI_TYPE; }
      if ($aFieldname=='MaxUncertaintyEstUnit') { $retval = self::C_MaxUncertaintyEstUnitMYSQLI_TYPE; }
      if ($aFieldname=='NamedPlaceExtent') { $retval = self::C_NamedPlaceExtentMYSQLI_TYPE; }
      if ($aFieldname=='NoGeoRefBecause') { $retval = self::C_NoGeoRefBecauseMYSQLI_TYPE; }
      if ($aFieldname=='OriginalCoordSystem') { $retval = self::C_OriginalCoordSystemMYSQLI_TYPE; }
      if ($aFieldname=='Protocol') { $retval = self::C_ProtocolMYSQLI_TYPE; }
      if ($aFieldname=='Source') { $retval = self::C_SourceMYSQLI_TYPE; }
      if ($aFieldname=='Validation') { $retval = self::C_ValidationMYSQLI_TYPE; }
      if ($aFieldname=='AgentID') { $retval = self::C_AgentIDMYSQLI_TYPE; }
      if ($aFieldname=='LocalityID') { $retval = self::C_LocalityIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setGeoCoordDetailID($pk[GeoCoordDetailID]);
             } else { ;
                 $this->setGeoCoordDetailID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->GeoCoordDetailID != NULL) {
           $sql = 'SELECT GeoCoordDetailID, TimestampCreated, TimestampModified, Version, GeoRefAccuracyUnits, GeoRefDetDate, GeoRefDetRef, GeoRefRemarks, GeoRefVerificationStatus, MaxUncertaintyEst, MaxUncertaintyEstUnit, NamedPlaceExtent, NoGeoRefBecause, OriginalCoordSystem, Protocol, Source, Validation, AgentID, LocalityID, CreatedByAgentID, ModifiedByAgentID FROM geocoorddetail WHERE GeoCoordDetailID = '.$this->GeoCoordDetailID ;

           $preparesql = 'SELECT GeoCoordDetailID, TimestampCreated, TimestampModified, Version, GeoRefAccuracyUnits, GeoRefDetDate, GeoRefDetRef, GeoRefRemarks, GeoRefVerificationStatus, MaxUncertaintyEst, MaxUncertaintyEstUnit, NamedPlaceExtent, NoGeoRefBecause, OriginalCoordSystem, Protocol, Source, Validation, AgentID, LocalityID, CreatedByAgentID, ModifiedByAgentID FROM geocoorddetail WHERE GeoCoordDetailID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->GeoCoordDetailID);
              $statement->execute();
              $statement->bind_result($this->GeoCoordDetailID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->GeoRefAccuracyUnits, $this->GeoRefDetDate, $this->GeoRefDetRef, $this->GeoRefRemarks, $this->GeoRefVerificationStatus, $this->MaxUncertaintyEst, $this->MaxUncertaintyEstUnit, $this->NamedPlaceExtent, $this->NoGeoRefBecause, $this->OriginalCoordSystem, $this->Protocol, $this->Source, $this->Validation, $this->AgentID, $this->LocalityID, $this->CreatedByAgentID, $this->ModifiedByAgentID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->GeoCoordDetailID!= NULL) {
            $sql  = 'UPDATE  geocoorddetail SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", GeoRefAccuracyUnits = ? ";
            $sql .=  ", GeoRefDetDate = ? ";
            $sql .=  ", GeoRefDetRef = ? ";
            $sql .=  ", GeoRefRemarks = ? ";
            $sql .=  ", GeoRefVerificationStatus = ? ";
            $sql .=  ", MaxUncertaintyEst = ? ";
            $sql .=  ", MaxUncertaintyEstUnit = ? ";
            $sql .=  ", NamedPlaceExtent = ? ";
            $sql .=  ", NoGeoRefBecause = ? ";
            $sql .=  ", OriginalCoordSystem = ? ";
            $sql .=  ", Protocol = ? ";
            $sql .=  ", Source = ? ";
            $sql .=  ", Validation = ? ";
            $sql .=  ", AgentID = ? ";
            $sql .=  ", LocalityID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";

            $sql .= "  WHERE GeoCoordDetailID = ? ";
        } else {
            $sql  = 'INSERT INTO geocoorddetail ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( GeoCoordDetailID ,  TimestampCreated ,  TimestampModified ,  Version ,  GeoRefAccuracyUnits ,  GeoRefDetDate ,  GeoRefDetRef ,  GeoRefRemarks ,  GeoRefVerificationStatus ,  MaxUncertaintyEst ,  MaxUncertaintyEstUnit ,  NamedPlaceExtent ,  NoGeoRefBecause ,  OriginalCoordSystem ,  Protocol ,  Source ,  Validation ,  AgentID ,  LocalityID ,  CreatedByAgentID ,  ModifiedByAgentID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->GeoCoordDetailID!= NULL ) {
              $statement->bind_param("ississsssssssssssiiiii", $this->GeoCoordDetailID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->GeoRefAccuracyUnits , $this->GeoRefDetDate , $this->GeoRefDetRef , $this->GeoRefRemarks , $this->GeoRefVerificationStatus , $this->MaxUncertaintyEst , $this->MaxUncertaintyEstUnit , $this->NamedPlaceExtent , $this->NoGeoRefBecause , $this->OriginalCoordSystem , $this->Protocol , $this->Source , $this->Validation , $this->AgentID , $this->LocalityID , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->GeoCoordDetailID );
           } else { 
              $statement->bind_param("ississsssssssssssiiii", $this->GeoCoordDetailID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->GeoRefAccuracyUnits , $this->GeoRefDetDate , $this->GeoRefDetRef , $this->GeoRefRemarks , $this->GeoRefVerificationStatus , $this->MaxUncertaintyEst , $this->MaxUncertaintyEstUnit , $this->NamedPlaceExtent , $this->NoGeoRefBecause , $this->OriginalCoordSystem , $this->Protocol , $this->Source , $this->Validation , $this->AgentID , $this->LocalityID , $this->CreatedByAgentID , $this->ModifiedByAgentID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->GeoCoordDetailID != NULL) {
           $sql = 'SELECT GeoCoordDetailID, TimestampCreated, TimestampModified, Version, GeoRefAccuracyUnits, GeoRefDetDate, GeoRefDetRef, GeoRefRemarks, GeoRefVerificationStatus, MaxUncertaintyEst, MaxUncertaintyEstUnit, NamedPlaceExtent, NoGeoRefBecause, OriginalCoordSystem, Protocol, Source, Validation, AgentID, LocalityID, CreatedByAgentID, ModifiedByAgentID FROM geocoorddetail WHERE GeoCoordDetailID = "'.$this->GeoCoordDetailID.'"  ' ;

           $preparedsql = 'SELECT  FROM geocoorddetail WHERE  and GeoCoordDetailID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississsssssssssssiiii", $this->GeoCoordDetailID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->GeoRefAccuracyUnits, $this->GeoRefDetDate, $this->GeoRefDetRef, $this->GeoRefRemarks, $this->GeoRefVerificationStatus, $this->MaxUncertaintyEst, $this->MaxUncertaintyEstUnit, $this->NamedPlaceExtent, $this->NoGeoRefBecause, $this->OriginalCoordSystem, $this->Protocol, $this->Source, $this->Validation, $this->AgentID, $this->LocalityID, $this->CreatedByAgentID, $this->ModifiedByAgentID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM geocoorddetail WHERE  and GeoCoordDetailID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississsssssssssssiiii", $this->GeoCoordDetailID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->GeoRefAccuracyUnits, $this->GeoRefDetDate, $this->GeoRefDetRef, $this->GeoRefRemarks, $this->GeoRefVerificationStatus, $this->MaxUncertaintyEst, $this->MaxUncertaintyEstUnit, $this->NamedPlaceExtent, $this->NoGeoRefBecause, $this->OriginalCoordSystem, $this->Protocol, $this->Source, $this->Validation, $this->AgentID, $this->LocalityID, $this->CreatedByAgentID, $this->ModifiedByAgentID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->GeoCoordDetailID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM geocoorddetail';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT GeoCoordDetailID FROM geocoorddetail $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_geocoorddetail();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: AgentID
      $t = new agent();
      $t->load(getAgentID());
      $returnvalue[AgentID] = $t;
       // fk: LocalityID
      $t = new locality();
      $t->load(getLocalityID());
      $returnvalue[LocalityID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT GeoCoordDetailID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(GeoRefAccuracyUnits,'') || ' ' || IFNULL(GeoRefDetDate,'') || ' ' || IFNULL(GeoRefDetRef,'') || ' ' || IFNULL(GeoRefRemarks,'') || ' ' || IFNULL(GeoRefVerificationStatus,'') || ' ' || IFNULL(MaxUncertaintyEst,'') || ' ' || IFNULL(MaxUncertaintyEstUnit,'') || ' ' || IFNULL(NamedPlaceExtent,'') || ' ' || IFNULL(NoGeoRefBecause,'') || ' ' || IFNULL(OriginalCoordSystem,'') || ' ' || IFNULL(Protocol,'') || ' ' || IFNULL(Source,'') || ' ' || IFNULL(Validation,'') || ' ' || IFNULL(AgentID,'') || ' ' || IFNULL(LocalityID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ModifiedByAgentID,'')) FROM geocoorddetail order by AgentID, LocalityID, CreatedByAgentID, ModifiedByAgentID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM geocoorddetail order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeoCoordDetailID FROM geocoorddetail WHERE AgentID $operator '$searchTerm'";
        $preparedsql = "SELECT GeoCoordDetailID FROM geocoorddetail WHERE AgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geocoorddetail();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByLocalityID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeoCoordDetailID FROM geocoorddetail WHERE LocalityID $operator '$searchTerm'";
        $preparedsql = "SELECT GeoCoordDetailID FROM geocoorddetail WHERE LocalityID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geocoorddetail();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeoCoordDetailID FROM geocoorddetail WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT GeoCoordDetailID FROM geocoorddetail WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geocoorddetail();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeoCoordDetailID FROM geocoorddetail WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT GeoCoordDetailID FROM geocoorddetail WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geocoorddetail();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AgentID FROM geocoorddetail group by AgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctLocalityID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' LocalityID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, LocalityID FROM geocoorddetail group by LocalityID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&LocalityID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM geocoorddetail group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM geocoorddetail group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'AgentID':
             $returnvalue = $this->selectDistinctAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'LocalityID':
             $returnvalue = $this->selectDistinctLocalityID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the geocoorddetail.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_geocoorddetailView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_geocoorddetail <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_geocoorddetail::GEOCOORDDETAILID.": ".$model->getGeoCoordDetailID()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::GEOREFACCURACYUNITS.": ".$model->getGeoRefAccuracyUnits()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::GEOREFDETDATE.": ".$model->getGeoRefDetDate()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::GEOREFDETREF.": ".$model->getGeoRefDetRef()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::GEOREFREMARKS.": ".$model->getGeoRefRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::GEOREFVERIFICATIONSTATUS.": ".$model->getGeoRefVerificationStatus()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::MAXUNCERTAINTYEST.": ".$model->getMaxUncertaintyEst()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::MAXUNCERTAINTYESTUNIT.": ".$model->getMaxUncertaintyEstUnit()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::NAMEDPLACEEXTENT.": ".$model->getNamedPlaceExtent()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::NOGEOREFBECAUSE.": ".$model->getNoGeoRefBecause()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::ORIGINALCOORDSYSTEM.": ".$model->getOriginalCoordSystem()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::PROTOCOL.": ".$model->getProtocol()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::SOURCE.": ".$model->getSource()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::VALIDATION.": ".$model->getValidation()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::AGENTID.": ".$model->getAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::LOCALITYID.": ".$model->getLocalityID()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_geocoorddetail::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getAgentID() != '') { 
               $t_agent->load($model->getAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>locality</li>";
           $t_locality = new huh_locality();
           $t_localityView = new huh_localityView();
           $t_localityView->setModel($t_locality);
           if ($model->getLocalityID() != '') { 
               $t_locality->load($model->getLocalityID());
               $returnvalue .= $t_localityView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_geocoorddetail::GEOCOORDDETAILID.': "'.$model->getGeoCoordDetailID().'",';
       $returnvalue .= '"'.huh_geocoorddetail::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_geocoorddetail::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_geocoorddetail::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_geocoorddetail::GEOREFACCURACYUNITS.': "'.$model->getGeoRefAccuracyUnits().'",';
       $returnvalue .= '"'.huh_geocoorddetail::GEOREFDETDATE.': "'.$model->getGeoRefDetDate().'",';
       $returnvalue .= '"'.huh_geocoorddetail::GEOREFDETREF.': "'.$model->getGeoRefDetRef().'",';
       $returnvalue .= '"'.huh_geocoorddetail::GEOREFREMARKS.': "'.$model->getGeoRefRemarks().'",';
       $returnvalue .= '"'.huh_geocoorddetail::GEOREFVERIFICATIONSTATUS.': "'.$model->getGeoRefVerificationStatus().'",';
       $returnvalue .= '"'.huh_geocoorddetail::MAXUNCERTAINTYEST.': "'.$model->getMaxUncertaintyEst().'",';
       $returnvalue .= '"'.huh_geocoorddetail::MAXUNCERTAINTYESTUNIT.': "'.$model->getMaxUncertaintyEstUnit().'",';
       $returnvalue .= '"'.huh_geocoorddetail::NAMEDPLACEEXTENT.': "'.$model->getNamedPlaceExtent().'",';
       $returnvalue .= '"'.huh_geocoorddetail::NOGEOREFBECAUSE.': "'.$model->getNoGeoRefBecause().'",';
       $returnvalue .= '"'.huh_geocoorddetail::ORIGINALCOORDSYSTEM.': "'.$model->getOriginalCoordSystem().'",';
       $returnvalue .= '"'.huh_geocoorddetail::PROTOCOL.': "'.$model->getProtocol().'",';
       $returnvalue .= '"'.huh_geocoorddetail::SOURCE.': "'.$model->getSource().'",';
       $returnvalue .= '"'.huh_geocoorddetail::VALIDATION.': "'.$model->getValidation().'",';
       $returnvalue .= '"'.huh_geocoorddetail::AGENTID.': "'.$model->getAgentID().'",';
       $returnvalue .= '"'.huh_geocoorddetail::LOCALITYID.': "'.$model->getLocalityID().'",';
       $returnvalue .= '"'.huh_geocoorddetail::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_geocoorddetail::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getGeoCoordDetailID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getGeoRefAccuracyUnits()."</td>\n";
       $returnvalue .= "<td>".$model->getGeoRefDetDate()."</td>\n";
       $returnvalue .= "<td>".$model->getGeoRefDetRef()."</td>\n";
       $returnvalue .= "<td>".$model->getGeoRefRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getGeoRefVerificationStatus()."</td>\n";
       $returnvalue .= "<td>".$model->getMaxUncertaintyEst()."</td>\n";
       $returnvalue .= "<td>".$model->getMaxUncertaintyEstUnit()."</td>\n";
       $returnvalue .= "<td>".$model->getNamedPlaceExtent()."</td>\n";
       $returnvalue .= "<td>".$model->getNoGeoRefBecause()."</td>\n";
       $returnvalue .= "<td>".$model->getOriginalCoordSystem()."</td>\n";
       $returnvalue .= "<td>".$model->getProtocol()."</td>\n";
       $returnvalue .= "<td>".$model->getSource()."</td>\n";
       $returnvalue .= "<td>".$model->getValidation()."</td>\n";
       $returnvalue .= "<td>".$model->getAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getLocalityID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_geocoorddetail::GEOCOORDDETAILID."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::GEOREFACCURACYUNITS."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::GEOREFDETDATE."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::GEOREFDETREF."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::GEOREFREMARKS."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::GEOREFVERIFICATIONSTATUS."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::MAXUNCERTAINTYEST."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::MAXUNCERTAINTYESTUNIT."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::NAMEDPLACEEXTENT."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::NOGEOREFBECAUSE."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::ORIGINALCOORDSYSTEM."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::PROTOCOL."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::SOURCE."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::VALIDATION."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::AGENTID."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::LOCALITYID."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_geocoorddetail::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_geocoorddetail">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new GeoCoordDetailID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_geocoorddetail::GEOCOORDDETAILID.">GEOCOORDDETAILID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geocoorddetail::GEOCOORDDETAILID." id=".huh_geocoorddetail::GEOCOORDDETAILID." value='".$model->getGeoCoordDetailID()."'  style=' width:".huh_geocoorddetail::GEOCOORDDETAILID_SIZE ."em;  '  maxlength='".huh_geocoorddetail::GEOCOORDDETAILID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_geocoorddetail::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geocoorddetail::TIMESTAMPCREATED." id=".huh_geocoorddetail::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_geocoorddetail::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_geocoorddetail::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geocoorddetail::TIMESTAMPMODIFIED." id=".huh_geocoorddetail::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_geocoorddetail::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_geocoorddetail::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geocoorddetail::VERSION." id=".huh_geocoorddetail::VERSION." value='".$model->getVersion()."'  style=' width:".huh_geocoorddetail::VERSION_SIZE ."em;  '  maxlength='".huh_geocoorddetail::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::GEOREFACCURACYUNITS.">GEOREFACCURACYUNITS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geocoorddetail::GEOREFACCURACYUNITS." id=".huh_geocoorddetail::GEOREFACCURACYUNITS." value='".$model->getGeoRefAccuracyUnits()."'  style=' width:".huh_geocoorddetail::GEOREFACCURACYUNITS_SIZE ."em;  '  maxlength='".huh_geocoorddetail::GEOREFACCURACYUNITS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::GEOREFDETDATE.">GEOREFDETDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geocoorddetail::GEOREFDETDATE." id=".huh_geocoorddetail::GEOREFDETDATE." value='".$model->getGeoRefDetDate()."'  style=' width:".huh_geocoorddetail::GEOREFDETDATE_SIZE ."em;  '  maxlength='".huh_geocoorddetail::GEOREFDETDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::GEOREFDETREF.">GEOREFDETREF</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geocoorddetail::GEOREFDETREF." id=".huh_geocoorddetail::GEOREFDETREF." >".$model->getGeoRefDetRef()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::GEOREFREMARKS.">GEOREFREMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geocoorddetail::GEOREFREMARKS." id=".huh_geocoorddetail::GEOREFREMARKS." >".$model->getGeoRefRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::GEOREFVERIFICATIONSTATUS.">GEOREFVERIFICATIONSTATUS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geocoorddetail::GEOREFVERIFICATIONSTATUS." id=".huh_geocoorddetail::GEOREFVERIFICATIONSTATUS." value='".$model->getGeoRefVerificationStatus()."'  style=' width:".huh_geocoorddetail::GEOREFVERIFICATIONSTATUS_SIZE ."em;  '  maxlength='".huh_geocoorddetail::GEOREFVERIFICATIONSTATUS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::MAXUNCERTAINTYEST.">MAXUNCERTAINTYEST</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geocoorddetail::MAXUNCERTAINTYEST." id=".huh_geocoorddetail::MAXUNCERTAINTYEST." value='".$model->getMaxUncertaintyEst()."'  style=' width:".huh_geocoorddetail::MAXUNCERTAINTYEST_SIZE ."em;  '  maxlength='".huh_geocoorddetail::MAXUNCERTAINTYEST_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::MAXUNCERTAINTYESTUNIT.">MAXUNCERTAINTYESTUNIT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geocoorddetail::MAXUNCERTAINTYESTUNIT." id=".huh_geocoorddetail::MAXUNCERTAINTYESTUNIT." value='".$model->getMaxUncertaintyEstUnit()."'  style=' width:".huh_geocoorddetail::MAXUNCERTAINTYESTUNIT_SIZE ."em;  '  maxlength='".huh_geocoorddetail::MAXUNCERTAINTYESTUNIT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::NAMEDPLACEEXTENT.">NAMEDPLACEEXTENT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geocoorddetail::NAMEDPLACEEXTENT." id=".huh_geocoorddetail::NAMEDPLACEEXTENT." value='".$model->getNamedPlaceExtent()."'  style=' width:".huh_geocoorddetail::NAMEDPLACEEXTENT_SIZE ."em;  '  maxlength='".huh_geocoorddetail::NAMEDPLACEEXTENT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::NOGEOREFBECAUSE.">NOGEOREFBECAUSE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geocoorddetail::NOGEOREFBECAUSE." id=".huh_geocoorddetail::NOGEOREFBECAUSE." >".$model->getNoGeoRefBecause()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::ORIGINALCOORDSYSTEM.">ORIGINALCOORDSYSTEM</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geocoorddetail::ORIGINALCOORDSYSTEM." id=".huh_geocoorddetail::ORIGINALCOORDSYSTEM." value='".$model->getOriginalCoordSystem()."'  style=' width:".huh_geocoorddetail::ORIGINALCOORDSYSTEM_SIZE ."em;  '  maxlength='".huh_geocoorddetail::ORIGINALCOORDSYSTEM_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::PROTOCOL.">PROTOCOL</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geocoorddetail::PROTOCOL." id=".huh_geocoorddetail::PROTOCOL." >".$model->getProtocol()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::SOURCE.">SOURCE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geocoorddetail::SOURCE." id=".huh_geocoorddetail::SOURCE." >".$model->getSource()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::VALIDATION.">VALIDATION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geocoorddetail::VALIDATION." id=".huh_geocoorddetail::VALIDATION." >".$model->getValidation()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::AGENTID.">AGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geocoorddetail::AGENTID." id=".huh_geocoorddetail::AGENTID." value='".$model->getAgentID()."'  style=' width:".huh_geocoorddetail::AGENTID_SIZE ."em;  '  maxlength='".huh_geocoorddetail::AGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::LOCALITYID.">LOCALITYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geocoorddetail::LOCALITYID." id=".huh_geocoorddetail::LOCALITYID." value='".$model->getLocalityID()."'  style=' width:".huh_geocoorddetail::LOCALITYID_SIZE ."em;  '  maxlength='".huh_geocoorddetail::LOCALITYID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geocoorddetail::CREATEDBYAGENTID." id=".huh_geocoorddetail::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_geocoorddetail::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_geocoorddetail::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geocoorddetail::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geocoorddetail::MODIFIEDBYAGENTID." id=".huh_geocoorddetail::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_geocoorddetail::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_geocoorddetail::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_geocoorddetail">';
       $returnvalue .= '<input type=hidden name=GeoCoordDetailID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_geocoorddetail">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>GEOCOORDDETAILID<input type=text name=".huh_geocoorddetail::GEOCOORDDETAILID." id=".huh_geocoorddetail::GEOCOORDDETAILID." value='".$model->getGeoCoordDetailID()."'  size='".huh_geocoorddetail::GEOCOORDDETAILID_SIZE ."'  maxlength='".huh_geocoorddetail::GEOCOORDDETAILID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_geocoorddetail::TIMESTAMPCREATED." id=".huh_geocoorddetail::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_geocoorddetail::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_geocoorddetail::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_geocoorddetail::TIMESTAMPMODIFIED." id=".huh_geocoorddetail::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_geocoorddetail::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_geocoorddetail::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_geocoorddetail::VERSION." id=".huh_geocoorddetail::VERSION." value='".$model->getVersion()."'  size='".huh_geocoorddetail::VERSION_SIZE ."'  maxlength='".huh_geocoorddetail::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOREFACCURACYUNITS<input type=text name=".huh_geocoorddetail::GEOREFACCURACYUNITS." id=".huh_geocoorddetail::GEOREFACCURACYUNITS." value='".$model->getGeoRefAccuracyUnits()."'  size='".huh_geocoorddetail::GEOREFACCURACYUNITS_SIZE ."'  maxlength='".huh_geocoorddetail::GEOREFACCURACYUNITS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOREFDETDATE<input type=text name=".huh_geocoorddetail::GEOREFDETDATE." id=".huh_geocoorddetail::GEOREFDETDATE." value='".$model->getGeoRefDetDate()."'  size='".huh_geocoorddetail::GEOREFDETDATE_SIZE ."'  maxlength='".huh_geocoorddetail::GEOREFDETDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOREFDETREF<input type=text name=".huh_geocoorddetail::GEOREFDETREF." id=".huh_geocoorddetail::GEOREFDETREF." value='".$model->getGeoRefDetRef()."'  size='51'  maxlength='".huh_geocoorddetail::GEOREFDETREF_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOREFREMARKS<input type=text name=".huh_geocoorddetail::GEOREFREMARKS." id=".huh_geocoorddetail::GEOREFREMARKS." value='".$model->getGeoRefRemarks()."'  size='51'  maxlength='".huh_geocoorddetail::GEOREFREMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOREFVERIFICATIONSTATUS<input type=text name=".huh_geocoorddetail::GEOREFVERIFICATIONSTATUS." id=".huh_geocoorddetail::GEOREFVERIFICATIONSTATUS." value='".$model->getGeoRefVerificationStatus()."'  size='".huh_geocoorddetail::GEOREFVERIFICATIONSTATUS_SIZE ."'  maxlength='".huh_geocoorddetail::GEOREFVERIFICATIONSTATUS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MAXUNCERTAINTYEST<input type=text name=".huh_geocoorddetail::MAXUNCERTAINTYEST." id=".huh_geocoorddetail::MAXUNCERTAINTYEST." value='".$model->getMaxUncertaintyEst()."'  size='".huh_geocoorddetail::MAXUNCERTAINTYEST_SIZE ."'  maxlength='".huh_geocoorddetail::MAXUNCERTAINTYEST_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MAXUNCERTAINTYESTUNIT<input type=text name=".huh_geocoorddetail::MAXUNCERTAINTYESTUNIT." id=".huh_geocoorddetail::MAXUNCERTAINTYESTUNIT." value='".$model->getMaxUncertaintyEstUnit()."'  size='".huh_geocoorddetail::MAXUNCERTAINTYESTUNIT_SIZE ."'  maxlength='".huh_geocoorddetail::MAXUNCERTAINTYESTUNIT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NAMEDPLACEEXTENT<input type=text name=".huh_geocoorddetail::NAMEDPLACEEXTENT." id=".huh_geocoorddetail::NAMEDPLACEEXTENT." value='".$model->getNamedPlaceExtent()."'  size='".huh_geocoorddetail::NAMEDPLACEEXTENT_SIZE ."'  maxlength='".huh_geocoorddetail::NAMEDPLACEEXTENT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NOGEOREFBECAUSE<input type=text name=".huh_geocoorddetail::NOGEOREFBECAUSE." id=".huh_geocoorddetail::NOGEOREFBECAUSE." value='".$model->getNoGeoRefBecause()."'  size='51'  maxlength='".huh_geocoorddetail::NOGEOREFBECAUSE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ORIGINALCOORDSYSTEM<input type=text name=".huh_geocoorddetail::ORIGINALCOORDSYSTEM." id=".huh_geocoorddetail::ORIGINALCOORDSYSTEM." value='".$model->getOriginalCoordSystem()."'  size='".huh_geocoorddetail::ORIGINALCOORDSYSTEM_SIZE ."'  maxlength='".huh_geocoorddetail::ORIGINALCOORDSYSTEM_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PROTOCOL<input type=text name=".huh_geocoorddetail::PROTOCOL." id=".huh_geocoorddetail::PROTOCOL." value='".$model->getProtocol()."'  size='51'  maxlength='".huh_geocoorddetail::PROTOCOL_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SOURCE<input type=text name=".huh_geocoorddetail::SOURCE." id=".huh_geocoorddetail::SOURCE." value='".$model->getSource()."'  size='51'  maxlength='".huh_geocoorddetail::SOURCE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VALIDATION<input type=text name=".huh_geocoorddetail::VALIDATION." id=".huh_geocoorddetail::VALIDATION." value='".$model->getValidation()."'  size='51'  maxlength='".huh_geocoorddetail::VALIDATION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>AGENTID<input type=text name=".huh_geocoorddetail::AGENTID." id=".huh_geocoorddetail::AGENTID." value='".$model->getAgentID()."'  size='".huh_geocoorddetail::AGENTID_SIZE ."'  maxlength='".huh_geocoorddetail::AGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LOCALITYID<input type=text name=".huh_geocoorddetail::LOCALITYID." id=".huh_geocoorddetail::LOCALITYID." value='".$model->getLocalityID()."'  size='".huh_geocoorddetail::LOCALITYID_SIZE ."'  maxlength='".huh_geocoorddetail::LOCALITYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_geocoorddetail::CREATEDBYAGENTID." id=".huh_geocoorddetail::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_geocoorddetail::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_geocoorddetail::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_geocoorddetail::MODIFIEDBYAGENTID." id=".huh_geocoorddetail::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_geocoorddetail::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_geocoorddetail::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
