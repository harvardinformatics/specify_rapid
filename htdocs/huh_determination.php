<?php
//==============================================================================
//===   determination.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_determination implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const DETERMINATIONID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const COLLECTIONMEMBERID_SIZE = 11; //INTEGER
   const ADDENDUM_SIZE        = 16; //16
   const ALTERNATENAME_SIZE   = 128; //128
   const CONFIDENCE_SIZE      = 20; //YEAR
   const DETERMINEDDATE_SIZE  = 12; //DATE
   const DETERMINEDDATEPRECISION_SIZE = 4; //TINYINT
   const FEATUREORBASIS_SIZE  = 20; //YEAR
   const ISCURRENT_SIZE       = 1; //1
   const METHOD_SIZE          = 20; //YEAR
   const NAMEUSAGE_SIZE       = 64; //64
   const NUMBER1_SIZE         = 20; //REAL
   const NUMBER2_SIZE         = 20; //REAL
   const QUALIFIER_SIZE       = 16; //16
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const TEXT1_SIZE           = 255; //LONGVARCHAR
   const TEXT2_SIZE           = 255; //LONGVARCHAR
   const TYPESTATUSNAME_SIZE  = 20; //YEAR
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const YESNO3_SIZE          = 1; //1
   const FRAGMENTID_SIZE      = 11; //INTEGER
   const TAXONID_SIZE         = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const PREFERREDTAXONID_SIZE = 11; //INTEGER
   const DETERMINERID_SIZE    = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const DETERMINATIONID   = 'DeterminationID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const COLLECTIONMEMBERID = 'CollectionMemberID';
   const ADDENDUM          = 'Addendum';
   const ALTERNATENAME     = 'AlternateName';
   const CONFIDENCE        = 'Confidence';
   const DETERMINEDDATE    = 'DeterminedDate';
   const DETERMINEDDATEPRECISION = 'DeterminedDatePrecision';
   const FEATUREORBASIS    = 'FeatureOrBasis';
   const ISCURRENT         = 'IsCurrent';
   const METHOD            = 'Method';
   const NAMEUSAGE         = 'NameUsage';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const QUALIFIER         = 'Qualifier';
   const REMARKS           = 'Remarks';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const TYPESTATUSNAME    = 'TypeStatusName';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const YESNO3            = 'YesNo3';
   const FRAGMENTID        = 'FragmentID';
   const TAXONID           = 'TaxonID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const PREFERREDTAXONID  = 'PreferredTaxonID';
   const DETERMINERID      = 'DeterminerID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $DeterminationID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DeterminationID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $CollectionMemberID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionMemberID']), 0, 11);
  $Addendum = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Addendum']), 0, 16);
  $AlternateName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['AlternateName']), 0, 128);
  $Confidence = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Confidence']), 0, 20);
  $DeterminedDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DeterminedDate']), 0, 12);
  $DeterminedDatePrecision = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DeterminedDatePrecision']), 0, 4);
  $FeatureOrBasis = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FeatureOrBasis']), 0, 20);
  $IsCurrent = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsCurrent']), 0, 1);
  $Method = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Method']), 0, 20);
  $NameUsage = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['NameUsage']), 0, 64);
  $Number1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number1']), 0, 20);
  $Number2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number2']), 0, 20);
  $Qualifier = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Qualifier']), 0, 16);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 255);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 255);
  $TypeStatusName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TypeStatusName']), 0, 20);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $YesNo3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo3']), 0, 1);
  $FragmentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['FragmentID']), 0, 11);
  $TaxonID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['TaxonID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $PreferredTaxonID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PreferredTaxonID']), 0, 11);
  $DeterminerID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DeterminerID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $DeterminationID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $CollectionMemberID; // INTEGER 
   private $Addendum; // VARCHAR(16) 
   private $AlternateName; // VARCHAR(128) 
   private $Confidence; // YEAR 
   private $DeterminedDate; // DATE 
   private $DeterminedDatePrecision; // TINYINT 
   private $FeatureOrBasis; // YEAR 
   private $IsCurrent; // BIT(1) 
   private $Method; // YEAR 
   private $NameUsage; // VARCHAR(64) 
   private $Number1; // REAL 
   private $Number2; // REAL 
   private $Qualifier; // VARCHAR(16) 
   private $Remarks; // LONGVARCHAR 
   private $Text1; // LONGVARCHAR 
   private $Text2; // LONGVARCHAR 
   private $TypeStatusName; // YEAR 
   private $YesNo1; // BIT(1) 
   private $YesNo2; // BIT(1) 
   private $YesNo3; // BIT(1) 
   private $FragmentID; // INTEGER 
   private $TaxonID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $PreferredTaxonID; // INTEGER 
   private $DeterminerID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' DeterminationID, TimestampCreated, TimestampModified, Version, CollectionMemberID, Addendum, AlternateName, Confidence, DeterminedDate, DeterminedDatePrecision, FeatureOrBasis, IsCurrent, Method, NameUsage, Number1, Number2, Qualifier, Remarks, Text1, Text2, TypeStatusName, YesNo1, YesNo2, YesNo3, FragmentID, TaxonID, ModifiedByAgentID, PreferredTaxonID, DeterminerID, CreatedByAgentID, ';
   const PKFIELDLIST = ' DeterminationID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'DeterminationID'  ) ;
   private $allFieldsArray = array( 0 => 'DeterminationID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'CollectionMemberID' , 5 => 'Addendum' , 6 => 'AlternateName' , 7 => 'Confidence' , 8 => 'DeterminedDate' , 9 => 'DeterminedDatePrecision' , 10 => 'FeatureOrBasis' , 11 => 'IsCurrent' , 12 => 'Method' , 13 => 'NameUsage' , 14 => 'Number1' , 15 => 'Number2' , 16 => 'Qualifier' , 17 => 'Remarks' , 18 => 'Text1' , 19 => 'Text2' , 20 => 'TypeStatusName' , 21 => 'YesNo1' , 22 => 'YesNo2' , 23 => 'YesNo3' , 24 => 'FragmentID' , 25 => 'TaxonID' , 26 => 'ModifiedByAgentID' , 27 => 'PreferredTaxonID' , 28 => 'DeterminerID' , 29 => 'CreatedByAgentID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'CollectionMemberID' , 6 => 'AlternateName' , 8 => 'DeterminedDate' , 20 => 'TypeStatusName' , 24 => 'FragmentID' , 25 => 'TaxonID' , 26 => 'ModifiedByAgentID' , 27 => 'PreferredTaxonID' , 28 => 'DeterminerID' , 29 => 'CreatedByAgentID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_determination(){
       $this->DeterminationID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->CollectionMemberID = '';
       $this->Addendum = '';
       $this->AlternateName = '';
       $this->Confidence = '';
       $this->DeterminedDate = '';
       $this->DeterminedDatePrecision = '';
       $this->FeatureOrBasis = '';
       $this->IsCurrent = '';
       $this->Method = '';
       $this->NameUsage = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->Qualifier = '';
       $this->Remarks = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->TypeStatusName = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->YesNo3 = '';
       $this->FragmentID = '';
       $this->TaxonID = '';
       $this->ModifiedByAgentID = '';
       $this->PreferredTaxonID = '';
       $this->DeterminerID = '';
       $this->CreatedByAgentID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='DeterminationID') { $returnvalue = $this->setDeterminationID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->setCollectionMemberID($value); } 
             if ($fieldname=='Addendum') { $returnvalue = $this->setAddendum($value); } 
             if ($fieldname=='AlternateName') { $returnvalue = $this->setAlternateName($value); } 
             if ($fieldname=='Confidence') { $returnvalue = $this->setConfidence($value); } 
             if ($fieldname=='DeterminedDate') { $returnvalue = $this->setDeterminedDate($value); } 
             if ($fieldname=='DeterminedDatePrecision') { $returnvalue = $this->setDeterminedDatePrecision($value); } 
             if ($fieldname=='FeatureOrBasis') { $returnvalue = $this->setFeatureOrBasis($value); } 
             if ($fieldname=='IsCurrent') { $returnvalue = $this->setIsCurrent($value); } 
             if ($fieldname=='Method') { $returnvalue = $this->setMethod($value); } 
             if ($fieldname=='NameUsage') { $returnvalue = $this->setNameUsage($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='Qualifier') { $returnvalue = $this->setQualifier($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='TypeStatusName') { $returnvalue = $this->setTypeStatusName($value); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); } 
             if ($fieldname=='YesNo3') { $returnvalue = $this->setYesNo3($value); } 
             if ($fieldname=='FragmentID') { $returnvalue = $this->setFragmentID($value); } 
             if ($fieldname=='TaxonID') { $returnvalue = $this->setTaxonID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='PreferredTaxonID') { $returnvalue = $this->setPreferredTaxonID($value); } 
             if ($fieldname=='DeterminerID') { $returnvalue = $this->setDeterminerID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='DeterminationID') { $returnvalue = $this->getDeterminationID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->getCollectionMemberID(); } 
             if ($fieldname=='Addendum') { $returnvalue = $this->getAddendum(); } 
             if ($fieldname=='AlternateName') { $returnvalue = $this->getAlternateName(); } 
             if ($fieldname=='Confidence') { $returnvalue = $this->getConfidence(); } 
             if ($fieldname=='DeterminedDate') { $returnvalue = $this->getDeterminedDate(); } 
             if ($fieldname=='DeterminedDatePrecision') { $returnvalue = $this->getDeterminedDatePrecision(); } 
             if ($fieldname=='FeatureOrBasis') { $returnvalue = $this->getFeatureOrBasis(); } 
             if ($fieldname=='IsCurrent') { $returnvalue = $this->getIsCurrent(); } 
             if ($fieldname=='Method') { $returnvalue = $this->getMethod(); } 
             if ($fieldname=='NameUsage') { $returnvalue = $this->getNameUsage(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='Qualifier') { $returnvalue = $this->getQualifier(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='TypeStatusName') { $returnvalue = $this->getTypeStatusName(); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); } 
             if ($fieldname=='YesNo3') { $returnvalue = $this->getYesNo3(); } 
             if ($fieldname=='FragmentID') { $returnvalue = $this->getFragmentID(); } 
             if ($fieldname=='TaxonID') { $returnvalue = $this->getTaxonID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='PreferredTaxonID') { $returnvalue = $this->getPreferredTaxonID(); } 
             if ($fieldname=='DeterminerID') { $returnvalue = $this->getDeterminerID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*DeterminationID*/
   public function getDeterminationID() {
       if ($this->DeterminationID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DeterminationID));
       }
   }
   public function setDeterminationID($DeterminationID) {
       if (strlen(preg_replace('/[^0-9]/','',$DeterminationID)) > huh_determination::DETERMINATIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DeterminationID = trim($DeterminationID);
       if (!ctype_digit(strval($DeterminationID)) && trim(strval($DeterminationID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->DeterminationID = $this->l_addslashes($DeterminationID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_determination::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_determination::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_determination::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*CollectionMemberID*/
   public function getCollectionMemberID() {
       if ($this->CollectionMemberID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionMemberID));
       }
   }
   public function setCollectionMemberID($CollectionMemberID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionMemberID)) > huh_determination::COLLECTIONMEMBERID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectionMemberID = trim($CollectionMemberID);
       if (!ctype_digit(strval($CollectionMemberID))) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionMemberID = $this->l_addslashes($CollectionMemberID);
       $this->dirty = true;
   }
/*Addendum*/
   public function getAddendum() {
       if ($this->Addendum==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Addendum));
       }
   }
   public function setAddendum($Addendum) {
       if (strlen($Addendum) > huh_determination::ADDENDUM_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Addendum = $this->l_addslashes($Addendum);
       $this->dirty = true;
   }
/*AlternateName*/
   public function getAlternateName() {
       if ($this->AlternateName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AlternateName));
       }
   }
   public function setAlternateName($AlternateName) {
       if (strlen($AlternateName) > huh_determination::ALTERNATENAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->AlternateName = $this->l_addslashes($AlternateName);
       $this->dirty = true;
   }
/*Confidence*/
   public function getConfidence() {
       if ($this->Confidence==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Confidence));
       }
   }
   public function setConfidence($Confidence) {
       if (strlen($Confidence) > huh_determination::CONFIDENCE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Confidence = $this->l_addslashes($Confidence);
       $this->dirty = true;
   }
/*DeterminedDate*/
   public function getDeterminedDate() {
       if ($this->DeterminedDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DeterminedDate));
       }
   }
   public function setDeterminedDate($DeterminedDate) {
       if (strlen($DeterminedDate) > huh_determination::DETERMINEDDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DeterminedDate = $this->l_addslashes($DeterminedDate);
       $this->dirty = true;
   }
/*DeterminedDatePrecision*/
   public function getDeterminedDatePrecision() {
       if ($this->DeterminedDatePrecision==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DeterminedDatePrecision));
       }
   }
   public function setDeterminedDatePrecision($DeterminedDatePrecision) {
       if (strlen($DeterminedDatePrecision) > huh_determination::DETERMINEDDATEPRECISION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DeterminedDatePrecision = $this->l_addslashes($DeterminedDatePrecision);
       $this->dirty = true;
   }
/*FeatureOrBasis*/
   public function getFeatureOrBasis() {
       if ($this->FeatureOrBasis==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FeatureOrBasis));
       }
   }
   public function setFeatureOrBasis($FeatureOrBasis) {
       if (strlen($FeatureOrBasis) > huh_determination::FEATUREORBASIS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FeatureOrBasis = $this->l_addslashes($FeatureOrBasis);
       $this->dirty = true;
   }
/*IsCurrent*/
   public function getIsCurrent() {
       if ($this->IsCurrent==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsCurrent));
       }
   }
   public function setIsCurrent($IsCurrent) {
       if (strlen($IsCurrent) > huh_determination::ISCURRENT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsCurrent = $this->l_addslashes($IsCurrent);
       $this->dirty = true;
   }
/*Method*/
   public function getMethod() {
       if ($this->Method==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Method));
       }
   }
   public function setMethod($Method) {
       if (strlen($Method) > huh_determination::METHOD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Method = $this->l_addslashes($Method);
       $this->dirty = true;
   }
/*NameUsage*/
   public function getNameUsage() {
       if ($this->NameUsage==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NameUsage));
       }
   }
   public function setNameUsage($NameUsage) {
       if (strlen($NameUsage) > huh_determination::NAMEUSAGE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->NameUsage = $this->l_addslashes($NameUsage);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen($Number1) > huh_determination::NUMBER1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen($Number2) > huh_determination::NUMBER2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*Qualifier*/
   public function getQualifier() {
       if ($this->Qualifier==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Qualifier));
       }
   }
   public function setQualifier($Qualifier) {
       if (strlen($Qualifier) > huh_determination::QUALIFIER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Qualifier = $this->l_addslashes($Qualifier);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_determination::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_determination::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_determination::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*TypeStatusName*/
   public function getTypeStatusName() {
       if ($this->TypeStatusName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TypeStatusName));
       }
   }
   public function setTypeStatusName($TypeStatusName) {
       if (strlen($TypeStatusName) > huh_determination::TYPESTATUSNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TypeStatusName = $this->l_addslashes($TypeStatusName);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_determination::YESNO1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_determination::YESNO2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*YesNo3*/
   public function getYesNo3() {
       if ($this->YesNo3==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo3));
       }
   }
   public function setYesNo3($YesNo3) {
       if (strlen($YesNo3) > huh_determination::YESNO3_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo3 = $this->l_addslashes($YesNo3);
       $this->dirty = true;
   }
/*FragmentID*/
   public function getFragmentID() {
       if ($this->FragmentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FragmentID));
       }
   }
   public function setFragmentID($FragmentID) {
       if (strlen(preg_replace('/[^0-9]/','',$FragmentID)) > huh_determination::FRAGMENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $FragmentID = trim($FragmentID);
       if (!ctype_digit(strval($FragmentID))) {
             throw new Exception("Value must be an integer");
       }
       $this->FragmentID = $this->l_addslashes($FragmentID);
       $this->dirty = true;
   }
/*TaxonID*/
   public function getTaxonID() {
       if ($this->TaxonID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TaxonID));
       }
   }
   public function setTaxonID($TaxonID) {
       if (strlen(preg_replace('/[^0-9]/','',$TaxonID)) > huh_determination::TAXONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $TaxonID = trim($TaxonID);
       if (!ctype_digit(strval($TaxonID)) && trim(strval($TaxonID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->TaxonID = $this->l_addslashes($TaxonID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_determination::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*PreferredTaxonID*/
   public function getPreferredTaxonID() {
       if ($this->PreferredTaxonID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PreferredTaxonID));
       }
   }
   public function setPreferredTaxonID($PreferredTaxonID) {
       if (strlen(preg_replace('/[^0-9]/','',$PreferredTaxonID)) > huh_determination::PREFERREDTAXONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PreferredTaxonID = trim($PreferredTaxonID);
       if (!ctype_digit(strval($PreferredTaxonID)) && trim(strval($PreferredTaxonID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PreferredTaxonID = $this->l_addslashes($PreferredTaxonID);
       $this->dirty = true;
   }
/*DeterminerID*/
   public function getDeterminerID() {
       if ($this->DeterminerID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DeterminerID));
       }
   }
   public function setDeterminerID($DeterminerID) {
       if (strlen(preg_replace('/[^0-9]/','',$DeterminerID)) > huh_determination::DETERMINERID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DeterminerID = trim($DeterminerID);
       if (!ctype_digit(strval($DeterminerID)) && trim(strval($DeterminerID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->DeterminerID = $this->l_addslashes($DeterminerID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_determination::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getDeterminationID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['DeterminationID'] = $this->getDeterminationID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_DeterminationIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_CollectionMemberIDMYSQLI_TYPE = 'i';
  const C_AddendumMYSQLI_TYPE = 's';
  const C_AlternateNameMYSQLI_TYPE = 's';
  const C_ConfidenceMYSQLI_TYPE = 's';
  const C_DeterminedDateMYSQLI_TYPE = 's';
  const C_DeterminedDatePrecisionMYSQLI_TYPE = 'i';
  const C_FeatureOrBasisMYSQLI_TYPE = 's';
  const C_IsCurrentMYSQLI_TYPE = 'i';
  const C_MethodMYSQLI_TYPE = 's';
  const C_NameUsageMYSQLI_TYPE = 's';
  const C_Number1MYSQLI_TYPE = 's';
  const C_Number2MYSQLI_TYPE = 's';
  const C_QualifierMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_TypeStatusNameMYSQLI_TYPE = 's';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_YesNo3MYSQLI_TYPE = 'i';
  const C_FragmentIDMYSQLI_TYPE = 'i';
  const C_TaxonIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_PreferredTaxonIDMYSQLI_TYPE = 'i';
  const C_DeterminerIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='DeterminationID') { $retval = self::C_DeterminationIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='CollectionMemberID') { $retval = self::C_CollectionMemberIDMYSQLI_TYPE; }
      if ($aFieldname=='Addendum') { $retval = self::C_AddendumMYSQLI_TYPE; }
      if ($aFieldname=='AlternateName') { $retval = self::C_AlternateNameMYSQLI_TYPE; }
      if ($aFieldname=='Confidence') { $retval = self::C_ConfidenceMYSQLI_TYPE; }
      if ($aFieldname=='DeterminedDate') { $retval = self::C_DeterminedDateMYSQLI_TYPE; }
      if ($aFieldname=='DeterminedDatePrecision') { $retval = self::C_DeterminedDatePrecisionMYSQLI_TYPE; }
      if ($aFieldname=='FeatureOrBasis') { $retval = self::C_FeatureOrBasisMYSQLI_TYPE; }
      if ($aFieldname=='IsCurrent') { $retval = self::C_IsCurrentMYSQLI_TYPE; }
      if ($aFieldname=='Method') { $retval = self::C_MethodMYSQLI_TYPE; }
      if ($aFieldname=='NameUsage') { $retval = self::C_NameUsageMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='Qualifier') { $retval = self::C_QualifierMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='TypeStatusName') { $retval = self::C_TypeStatusNameMYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='YesNo3') { $retval = self::C_YesNo3MYSQLI_TYPE; }
      if ($aFieldname=='FragmentID') { $retval = self::C_FragmentIDMYSQLI_TYPE; }
      if ($aFieldname=='TaxonID') { $retval = self::C_TaxonIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='PreferredTaxonID') { $retval = self::C_PreferredTaxonIDMYSQLI_TYPE; }
      if ($aFieldname=='DeterminerID') { $retval = self::C_DeterminerIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setDeterminationID($pk[DeterminationID]);
             } else { ;
                 $this->setDeterminationID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->DeterminationID != NULL) {
           $sql = 'SELECT DeterminationID, TimestampCreated, TimestampModified, Version, CollectionMemberID, Addendum, AlternateName, Confidence, DeterminedDate, DeterminedDatePrecision, FeatureOrBasis, IsCurrent, Method, NameUsage, Number1, Number2, Qualifier, Remarks, Text1, Text2, TypeStatusName, YesNo1, YesNo2, YesNo3, FragmentID, TaxonID, ModifiedByAgentID, PreferredTaxonID, DeterminerID, CreatedByAgentID FROM determination WHERE DeterminationID = '.$this->DeterminationID ;

           $preparesql = 'SELECT DeterminationID, TimestampCreated, TimestampModified, Version, CollectionMemberID, Addendum, AlternateName, Confidence, DeterminedDate, DeterminedDatePrecision, FeatureOrBasis, IsCurrent, Method, NameUsage, Number1, Number2, Qualifier, Remarks, Text1, Text2, TypeStatusName, YesNo1, YesNo2, YesNo3, FragmentID, TaxonID, ModifiedByAgentID, PreferredTaxonID, DeterminerID, CreatedByAgentID FROM determination WHERE DeterminationID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->DeterminationID);
              $statement->execute();
              $statement->bind_result($this->DeterminationID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->Addendum, $this->AlternateName, $this->Confidence, $this->DeterminedDate, $this->DeterminedDatePrecision, $this->FeatureOrBasis, $this->IsCurrent, $this->Method, $this->NameUsage, $this->Number1, $this->Number2, $this->Qualifier, $this->Remarks, $this->Text1, $this->Text2, $this->TypeStatusName, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->FragmentID, $this->TaxonID, $this->ModifiedByAgentID, $this->PreferredTaxonID, $this->DeterminerID, $this->CreatedByAgentID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->DeterminationID!= NULL) {
            $sql  = 'UPDATE  determination SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", CollectionMemberID = ? ";
            $sql .=  ", Addendum = ? ";
            $sql .=  ", AlternateName = ? ";
            $sql .=  ", Confidence = ? ";
            $sql .=  ", DeterminedDate = ? ";
            $sql .=  ", DeterminedDatePrecision = ? ";
            $sql .=  ", FeatureOrBasis = ? ";
            $sql .=  ", IsCurrent = ? ";
            $sql .=  ", Method = ? ";
            $sql .=  ", NameUsage = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", Qualifier = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", TypeStatusName = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", YesNo3 = ? ";
            $sql .=  ", FragmentID = ? ";
            $sql .=  ", TaxonID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", PreferredTaxonID = ? ";
            $sql .=  ", DeterminerID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";

            $sql .= "  WHERE DeterminationID = ? ";
        } else {
            $sql  = 'INSERT INTO determination ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( DeterminationID ,  TimestampCreated ,  TimestampModified ,  Version ,  CollectionMemberID ,  Addendum ,  AlternateName ,  Confidence ,  DeterminedDate ,  DeterminedDatePrecision ,  FeatureOrBasis ,  IsCurrent ,  Method ,  NameUsage ,  Number1 ,  Number2 ,  Qualifier ,  Remarks ,  Text1 ,  Text2 ,  TypeStatusName ,  YesNo1 ,  YesNo2 ,  YesNo3 ,  FragmentID ,  TaxonID ,  ModifiedByAgentID ,  PreferredTaxonID ,  DeterminerID ,  CreatedByAgentID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->DeterminationID!= NULL ) {
              $statement->bind_param("issiissssisisssssssssiiiiiiiiii", $this->DeterminationID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->Addendum , $this->AlternateName , $this->Confidence , $this->DeterminedDate , $this->DeterminedDatePrecision , $this->FeatureOrBasis , $this->IsCurrent , $this->Method , $this->NameUsage , $this->Number1 , $this->Number2 , $this->Qualifier , $this->Remarks , $this->Text1 , $this->Text2 , $this->TypeStatusName , $this->YesNo1 , $this->YesNo2 , $this->YesNo3 , $this->FragmentID , $this->TaxonID , $this->ModifiedByAgentID , $this->PreferredTaxonID , $this->DeterminerID , $this->CreatedByAgentID , $this->DeterminationID );
           } else { 
              $statement->bind_param("issiissssisisssssssssiiiiiiiii", $this->DeterminationID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->Addendum , $this->AlternateName , $this->Confidence , $this->DeterminedDate , $this->DeterminedDatePrecision , $this->FeatureOrBasis , $this->IsCurrent , $this->Method , $this->NameUsage , $this->Number1 , $this->Number2 , $this->Qualifier , $this->Remarks , $this->Text1 , $this->Text2 , $this->TypeStatusName , $this->YesNo1 , $this->YesNo2 , $this->YesNo3 , $this->FragmentID , $this->TaxonID , $this->ModifiedByAgentID , $this->PreferredTaxonID , $this->DeterminerID , $this->CreatedByAgentID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->DeterminationID != NULL) {
           $sql = 'SELECT DeterminationID, TimestampCreated, TimestampModified, Version, CollectionMemberID, Addendum, AlternateName, Confidence, DeterminedDate, DeterminedDatePrecision, FeatureOrBasis, IsCurrent, Method, NameUsage, Number1, Number2, Qualifier, Remarks, Text1, Text2, TypeStatusName, YesNo1, YesNo2, YesNo3, FragmentID, TaxonID, ModifiedByAgentID, PreferredTaxonID, DeterminerID, CreatedByAgentID FROM determination WHERE DeterminationID = "'.$this->DeterminationID.'"  ' ;

           $preparedsql = 'SELECT  FROM determination WHERE  and DeterminationID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issiissssisisssssssssiiiiiiiii", $this->DeterminationID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->Addendum, $this->AlternateName, $this->Confidence, $this->DeterminedDate, $this->DeterminedDatePrecision, $this->FeatureOrBasis, $this->IsCurrent, $this->Method, $this->NameUsage, $this->Number1, $this->Number2, $this->Qualifier, $this->Remarks, $this->Text1, $this->Text2, $this->TypeStatusName, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->FragmentID, $this->TaxonID, $this->ModifiedByAgentID, $this->PreferredTaxonID, $this->DeterminerID, $this->CreatedByAgentID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM determination WHERE  and DeterminationID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issiissssisisssssssssiiiiiiiii", $this->DeterminationID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->Addendum, $this->AlternateName, $this->Confidence, $this->DeterminedDate, $this->DeterminedDatePrecision, $this->FeatureOrBasis, $this->IsCurrent, $this->Method, $this->NameUsage, $this->Number1, $this->Number2, $this->Qualifier, $this->Remarks, $this->Text1, $this->Text2, $this->TypeStatusName, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->FragmentID, $this->TaxonID, $this->ModifiedByAgentID, $this->PreferredTaxonID, $this->DeterminerID, $this->CreatedByAgentID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->DeterminationID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM determination';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT DeterminationID FROM determination $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_determination();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromdeterminationcitation() { 
      // ForeignKey in: determinationcitation
      $t = new determinationcitation();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: FragmentID
      $t = new fragment();
      $t->load(getFragmentID());
      $returnvalue[FragmentID] = $t;
       // fk: TaxonID
      $t = new taxon();
      $t->load(getTaxonID());
      $returnvalue[TaxonID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: PreferredTaxonID
      $t = new taxon();
      $t->load(getPreferredTaxonID());
      $returnvalue[PreferredTaxonID] = $t;
       // fk: DeterminerID
      $t = new agent();
      $t->load(getDeterminerID());
      $returnvalue[DeterminerID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT DeterminationID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(CollectionMemberID,'') || ' ' || IFNULL(Addendum,'') || ' ' || IFNULL(AlternateName,'') || ' ' || IFNULL(Confidence,'') || ' ' || IFNULL(DeterminedDate,'') || ' ' || IFNULL(DeterminedDatePrecision,'') || ' ' || IFNULL(FeatureOrBasis,'') || ' ' || IFNULL(IsCurrent,'') || ' ' || IFNULL(Method,'') || ' ' || IFNULL(NameUsage,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(Qualifier,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(TypeStatusName,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(YesNo3,'') || ' ' || IFNULL(FragmentID,'') || ' ' || IFNULL(TaxonID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(PreferredTaxonID,'') || ' ' || IFNULL(DeterminerID,'') || ' ' || IFNULL(CreatedByAgentID,'')) FROM determination order by CollectionMemberID, AlternateName, DeterminedDate, TypeStatusName, FragmentID, TaxonID, ModifiedByAgentID, PreferredTaxonID, DeterminerID, CreatedByAgentID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM determination order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCollectionMemberID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DeterminationID FROM determination WHERE CollectionMemberID $operator '$searchTerm'";
        $preparedsql = "SELECT DeterminationID FROM determination WHERE CollectionMemberID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_determination();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAlternateName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DeterminationID FROM determination WHERE AlternateName $operator '$searchTerm'";
        $preparedsql = "SELECT DeterminationID FROM determination WHERE AlternateName $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_determination();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDeterminedDate($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DeterminationID FROM determination WHERE DeterminedDate $operator '$searchTerm'";
        $preparedsql = "SELECT DeterminationID FROM determination WHERE DeterminedDate $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_determination();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByTypeStatusName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DeterminationID FROM determination WHERE TypeStatusName $operator '$searchTerm'";
        $preparedsql = "SELECT DeterminationID FROM determination WHERE TypeStatusName $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_determination();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByFragmentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DeterminationID FROM determination WHERE FragmentID $operator '$searchTerm'";
        $preparedsql = "SELECT DeterminationID FROM determination WHERE FragmentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_determination();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByTaxonID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DeterminationID FROM determination WHERE TaxonID $operator '$searchTerm'";
        $preparedsql = "SELECT DeterminationID FROM determination WHERE TaxonID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_determination();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DeterminationID FROM determination WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT DeterminationID FROM determination WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_determination();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPreferredTaxonID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DeterminationID FROM determination WHERE PreferredTaxonID $operator '$searchTerm'";
        $preparedsql = "SELECT DeterminationID FROM determination WHERE PreferredTaxonID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_determination();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDeterminerID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DeterminationID FROM determination WHERE DeterminerID $operator '$searchTerm'";
        $preparedsql = "SELECT DeterminationID FROM determination WHERE DeterminerID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_determination();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DeterminationID FROM determination WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT DeterminationID FROM determination WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_determination();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCollectionMemberID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionMemberID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectionMemberID FROM determination group by CollectionMemberID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectionMemberID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAlternateName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AlternateName ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AlternateName FROM determination group by AlternateName order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AlternateName=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDeterminedDate($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DeterminedDate ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DeterminedDate FROM determination group by DeterminedDate order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DeterminedDate=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctTypeStatusName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' TypeStatusName ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, TypeStatusName FROM determination group by TypeStatusName order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&TypeStatusName=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctFragmentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' FragmentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, FragmentID FROM determination group by FragmentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&FragmentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctTaxonID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' TaxonID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, TaxonID FROM determination group by TaxonID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&TaxonID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM determination group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPreferredTaxonID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' PreferredTaxonID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, PreferredTaxonID FROM determination group by PreferredTaxonID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&PreferredTaxonID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDeterminerID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DeterminerID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DeterminerID FROM determination group by DeterminerID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DeterminerID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM determination group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'CollectionMemberID':
             $returnvalue = $this->selectDistinctCollectionMemberID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AlternateName':
             $returnvalue = $this->selectDistinctAlternateName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DeterminedDate':
             $returnvalue = $this->selectDistinctDeterminedDate($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'TypeStatusName':
             $returnvalue = $this->selectDistinctTypeStatusName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'FragmentID':
             $returnvalue = $this->selectDistinctFragmentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'TaxonID':
             $returnvalue = $this->selectDistinctTaxonID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'PreferredTaxonID':
             $returnvalue = $this->selectDistinctPreferredTaxonID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DeterminerID':
             $returnvalue = $this->selectDistinctDeterminerID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the determination.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_determinationView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_determination <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_determination::DETERMINATIONID.": ".$model->getDeterminationID()."</li>\n";
       $returnvalue .= "<li>".huh_determination::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_determination::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_determination::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_determination::COLLECTIONMEMBERID.": ".$model->getCollectionMemberID()."</li>\n";
       $returnvalue .= "<li>".huh_determination::ADDENDUM.": ".$model->getAddendum()."</li>\n";
       $returnvalue .= "<li>".huh_determination::ALTERNATENAME.": ".$model->getAlternateName()."</li>\n";
       $returnvalue .= "<li>".huh_determination::CONFIDENCE.": ".$model->getConfidence()."</li>\n";
       $returnvalue .= "<li>".huh_determination::DETERMINEDDATE.": ".$model->getDeterminedDate()."</li>\n";
       $returnvalue .= "<li>".huh_determination::DETERMINEDDATEPRECISION.": ".$model->getDeterminedDatePrecision()."</li>\n";
       $returnvalue .= "<li>".huh_determination::FEATUREORBASIS.": ".$model->getFeatureOrBasis()."</li>\n";
       $returnvalue .= "<li>".huh_determination::ISCURRENT.": ".$model->getIsCurrent()."</li>\n";
       $returnvalue .= "<li>".huh_determination::METHOD.": ".$model->getMethod()."</li>\n";
       $returnvalue .= "<li>".huh_determination::NAMEUSAGE.": ".$model->getNameUsage()."</li>\n";
       $returnvalue .= "<li>".huh_determination::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_determination::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_determination::QUALIFIER.": ".$model->getQualifier()."</li>\n";
       $returnvalue .= "<li>".huh_determination::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_determination::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_determination::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_determination::TYPESTATUSNAME.": ".$model->getTypeStatusName()."</li>\n";
       $returnvalue .= "<li>".huh_determination::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_determination::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_determination::YESNO3.": ".$model->getYesNo3()."</li>\n";
       $returnvalue .= "<li>".huh_determination::FRAGMENTID.": ".$model->getFragmentID()."</li>\n";
       $returnvalue .= "<li>".huh_determination::TAXONID.": ".$model->getTaxonID()."</li>\n";
       $returnvalue .= "<li>".huh_determination::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_determination::PREFERREDTAXONID.": ".$model->getPreferredTaxonID()."</li>\n";
       $returnvalue .= "<li>".huh_determination::DETERMINERID.": ".$model->getDeterminerID()."</li>\n";
       $returnvalue .= "<li>".huh_determination::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>fragment</li>";
           $t_fragment = new huh_fragment();
           $t_fragmentView = new huh_fragmentView();
           $t_fragmentView->setModel($t_fragment);
           if ($model->getFragmentID() != '') { 
               $t_fragment->load($model->getFragmentID());
               $returnvalue .= $t_fragmentView->getDetailsView(false);
           }
           $returnvalue .= "<li>taxon</li>";
           $t_taxon = new huh_taxon();
           $t_taxonView = new huh_taxonView();
           $t_taxonView->setModel($t_taxon);
           if ($model->getTaxonID() != '') { 
               $t_taxon->load($model->getTaxonID());
               $returnvalue .= $t_taxonView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>taxon</li>";
           $t_taxon = new huh_taxon();
           $t_taxonView = new huh_taxonView();
           $t_taxonView->setModel($t_taxon);
           if ($model->getPreferredTaxonID() != '') { 
               $t_taxon->load($model->getPreferredTaxonID());
               $returnvalue .= $t_taxonView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getDeterminerID() != '') { 
               $t_agent->load($model->getDeterminerID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_determination::DETERMINATIONID.': "'.$model->getDeterminationID().'",';
       $returnvalue .= '"'.huh_determination::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_determination::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_determination::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_determination::COLLECTIONMEMBERID.': "'.$model->getCollectionMemberID().'",';
       $returnvalue .= '"'.huh_determination::ADDENDUM.': "'.$model->getAddendum().'",';
       $returnvalue .= '"'.huh_determination::ALTERNATENAME.': "'.$model->getAlternateName().'",';
       $returnvalue .= '"'.huh_determination::CONFIDENCE.': "'.$model->getConfidence().'",';
       $returnvalue .= '"'.huh_determination::DETERMINEDDATE.': "'.$model->getDeterminedDate().'",';
       $returnvalue .= '"'.huh_determination::DETERMINEDDATEPRECISION.': "'.$model->getDeterminedDatePrecision().'",';
       $returnvalue .= '"'.huh_determination::FEATUREORBASIS.': "'.$model->getFeatureOrBasis().'",';
       $returnvalue .= '"'.huh_determination::ISCURRENT.': "'.$model->getIsCurrent().'",';
       $returnvalue .= '"'.huh_determination::METHOD.': "'.$model->getMethod().'",';
       $returnvalue .= '"'.huh_determination::NAMEUSAGE.': "'.$model->getNameUsage().'",';
       $returnvalue .= '"'.huh_determination::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_determination::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_determination::QUALIFIER.': "'.$model->getQualifier().'",';
       $returnvalue .= '"'.huh_determination::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_determination::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_determination::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_determination::TYPESTATUSNAME.': "'.$model->getTypeStatusName().'",';
       $returnvalue .= '"'.huh_determination::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_determination::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_determination::YESNO3.': "'.$model->getYesNo3().'",';
       $returnvalue .= '"'.huh_determination::FRAGMENTID.': "'.$model->getFragmentID().'",';
       $returnvalue .= '"'.huh_determination::TAXONID.': "'.$model->getTaxonID().'",';
       $returnvalue .= '"'.huh_determination::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_determination::PREFERREDTAXONID.': "'.$model->getPreferredTaxonID().'",';
       $returnvalue .= '"'.huh_determination::DETERMINERID.': "'.$model->getDeterminerID().'",';
       $returnvalue .= '"'.huh_determination::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getDeterminationID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionMemberID()."</td>\n";
       $returnvalue .= "<td>".$model->getAddendum()."</td>\n";
       $returnvalue .= "<td>".$model->getAlternateName()."</td>\n";
       $returnvalue .= "<td>".$model->getConfidence()."</td>\n";
       $returnvalue .= "<td>".$model->getDeterminedDate()."</td>\n";
       $returnvalue .= "<td>".$model->getDeterminedDatePrecision()."</td>\n";
       $returnvalue .= "<td>".$model->getFeatureOrBasis()."</td>\n";
       $returnvalue .= "<td>".$model->getIsCurrent()."</td>\n";
       $returnvalue .= "<td>".$model->getMethod()."</td>\n";
       $returnvalue .= "<td>".$model->getNameUsage()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getQualifier()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getTypeStatusName()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo3()."</td>\n";
       $returnvalue .= "<td>".$model->getFragmentID()."</td>\n";
       $returnvalue .= "<td>".$model->getTaxonID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getPreferredTaxonID()."</td>\n";
       $returnvalue .= "<td>".$model->getDeterminerID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_determination::DETERMINATIONID."</th>\n";
       $returnvalue .= "<th>".huh_determination::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_determination::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_determination::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_determination::COLLECTIONMEMBERID."</th>\n";
       $returnvalue .= "<th>".huh_determination::ADDENDUM."</th>\n";
       $returnvalue .= "<th>".huh_determination::ALTERNATENAME."</th>\n";
       $returnvalue .= "<th>".huh_determination::CONFIDENCE."</th>\n";
       $returnvalue .= "<th>".huh_determination::DETERMINEDDATE."</th>\n";
       $returnvalue .= "<th>".huh_determination::DETERMINEDDATEPRECISION."</th>\n";
       $returnvalue .= "<th>".huh_determination::FEATUREORBASIS."</th>\n";
       $returnvalue .= "<th>".huh_determination::ISCURRENT."</th>\n";
       $returnvalue .= "<th>".huh_determination::METHOD."</th>\n";
       $returnvalue .= "<th>".huh_determination::NAMEUSAGE."</th>\n";
       $returnvalue .= "<th>".huh_determination::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_determination::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_determination::QUALIFIER."</th>\n";
       $returnvalue .= "<th>".huh_determination::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_determination::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_determination::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_determination::TYPESTATUSNAME."</th>\n";
       $returnvalue .= "<th>".huh_determination::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_determination::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_determination::YESNO3."</th>\n";
       $returnvalue .= "<th>".huh_determination::FRAGMENTID."</th>\n";
       $returnvalue .= "<th>".huh_determination::TAXONID."</th>\n";
       $returnvalue .= "<th>".huh_determination::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_determination::PREFERREDTAXONID."</th>\n";
       $returnvalue .= "<th>".huh_determination::DETERMINERID."</th>\n";
       $returnvalue .= "<th>".huh_determination::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_determination">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new DeterminationID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_determination::DETERMINATIONID.">DETERMINATIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_determination::DETERMINATIONID." id=".huh_determination::DETERMINATIONID." value='".$model->getDeterminationID()."'  style=' width:".huh_determination::DETERMINATIONID_SIZE ."em;  '  maxlength='".huh_determination::DETERMINATIONID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_determination::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::TIMESTAMPCREATED." id=".huh_determination::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_determination::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_determination::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::TIMESTAMPMODIFIED." id=".huh_determination::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_determination::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_determination::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_determination::VERSION." id=".huh_determination::VERSION." value='".$model->getVersion()."'  style=' width:".huh_determination::VERSION_SIZE ."em;  '  maxlength='".huh_determination::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::COLLECTIONMEMBERID.">COLLECTIONMEMBERID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_determination::COLLECTIONMEMBERID." id=".huh_determination::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  style=' width:".huh_determination::COLLECTIONMEMBERID_SIZE ."em;  '  maxlength='".huh_determination::COLLECTIONMEMBERID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::ADDENDUM.">ADDENDUM</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::ADDENDUM." id=".huh_determination::ADDENDUM." value='".$model->getAddendum()."'  style=' width:".huh_determination::ADDENDUM_SIZE ."em;  '  maxlength='".huh_determination::ADDENDUM_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::ALTERNATENAME.">ALTERNATENAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_determination::ALTERNATENAME." id=".huh_determination::ALTERNATENAME." >".$model->getAlternateName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::CONFIDENCE.">CONFIDENCE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::CONFIDENCE." id=".huh_determination::CONFIDENCE." value='".$model->getConfidence()."'  style=' width:".huh_determination::CONFIDENCE_SIZE ."em;  '  maxlength='".huh_determination::CONFIDENCE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::DETERMINEDDATE.">DETERMINEDDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::DETERMINEDDATE." id=".huh_determination::DETERMINEDDATE." value='".$model->getDeterminedDate()."'  style=' width:".huh_determination::DETERMINEDDATE_SIZE ."em;  '  maxlength='".huh_determination::DETERMINEDDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::DETERMINEDDATEPRECISION.">DETERMINEDDATEPRECISION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::DETERMINEDDATEPRECISION." id=".huh_determination::DETERMINEDDATEPRECISION." value='".$model->getDeterminedDatePrecision()."'  style=' width:".huh_determination::DETERMINEDDATEPRECISION_SIZE ."em;  '  maxlength='".huh_determination::DETERMINEDDATEPRECISION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::FEATUREORBASIS.">FEATUREORBASIS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::FEATUREORBASIS." id=".huh_determination::FEATUREORBASIS." value='".$model->getFeatureOrBasis()."'  style=' width:".huh_determination::FEATUREORBASIS_SIZE ."em;  '  maxlength='".huh_determination::FEATUREORBASIS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::ISCURRENT.">ISCURRENT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::ISCURRENT." id=".huh_determination::ISCURRENT." value='".$model->getIsCurrent()."'  style=' width:".huh_determination::ISCURRENT_SIZE ."em;  '  maxlength='".huh_determination::ISCURRENT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::METHOD.">METHOD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::METHOD." id=".huh_determination::METHOD." value='".$model->getMethod()."'  style=' width:".huh_determination::METHOD_SIZE ."em;  '  maxlength='".huh_determination::METHOD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::NAMEUSAGE.">NAMEUSAGE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_determination::NAMEUSAGE." id=".huh_determination::NAMEUSAGE." >".$model->getNameUsage()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::NUMBER1." id=".huh_determination::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_determination::NUMBER1_SIZE ."em;  '  maxlength='".huh_determination::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::NUMBER2." id=".huh_determination::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_determination::NUMBER2_SIZE ."em;  '  maxlength='".huh_determination::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::QUALIFIER.">QUALIFIER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::QUALIFIER." id=".huh_determination::QUALIFIER." value='".$model->getQualifier()."'  style=' width:".huh_determination::QUALIFIER_SIZE ."em;  '  maxlength='".huh_determination::QUALIFIER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_determination::REMARKS." id=".huh_determination::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::TEXT1.">TEXT1</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_determination::TEXT1." id=".huh_determination::TEXT1." >".$model->getText1()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_determination::TEXT2." id=".huh_determination::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::TYPESTATUSNAME.">TYPESTATUSNAME</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::TYPESTATUSNAME." id=".huh_determination::TYPESTATUSNAME." value='".$model->getTypeStatusName()."'  style=' width:".huh_determination::TYPESTATUSNAME_SIZE ."em;  '  maxlength='".huh_determination::TYPESTATUSNAME_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::YESNO1." id=".huh_determination::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_determination::YESNO1_SIZE ."em;  '  maxlength='".huh_determination::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::YESNO2." id=".huh_determination::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_determination::YESNO2_SIZE ."em;  '  maxlength='".huh_determination::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::YESNO3.">YESNO3</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_determination::YESNO3." id=".huh_determination::YESNO3." value='".$model->getYesNo3()."'  style=' width:".huh_determination::YESNO3_SIZE ."em;  '  maxlength='".huh_determination::YESNO3_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::FRAGMENTID.">FRAGMENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_determination::FRAGMENTID." id=".huh_determination::FRAGMENTID." value='".$model->getFragmentID()."'  style=' width:".huh_determination::FRAGMENTID_SIZE ."em;  '  maxlength='".huh_determination::FRAGMENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::TAXONID.">TAXONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_determination::TAXONID." id=".huh_determination::TAXONID." value='".$model->getTaxonID()."'  style=' width:".huh_determination::TAXONID_SIZE ."em;  '  maxlength='".huh_determination::TAXONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_determination::MODIFIEDBYAGENTID." id=".huh_determination::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_determination::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_determination::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::PREFERREDTAXONID.">PREFERREDTAXONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_determination::PREFERREDTAXONID." id=".huh_determination::PREFERREDTAXONID." value='".$model->getPreferredTaxonID()."'  style=' width:".huh_determination::PREFERREDTAXONID_SIZE ."em;  '  maxlength='".huh_determination::PREFERREDTAXONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::DETERMINERID.">DETERMINERID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_determination::DETERMINERID." id=".huh_determination::DETERMINERID." value='".$model->getDeterminerID()."'  style=' width:".huh_determination::DETERMINERID_SIZE ."em;  '  maxlength='".huh_determination::DETERMINERID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_determination::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_determination::CREATEDBYAGENTID." id=".huh_determination::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_determination::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_determination::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_determination">';
       $returnvalue .= '<input type=hidden name=DeterminationID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_determination">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>DETERMINATIONID<input type=text name=".huh_determination::DETERMINATIONID." id=".huh_determination::DETERMINATIONID." value='".$model->getDeterminationID()."'  size='".huh_determination::DETERMINATIONID_SIZE ."'  maxlength='".huh_determination::DETERMINATIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_determination::TIMESTAMPCREATED." id=".huh_determination::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_determination::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_determination::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_determination::TIMESTAMPMODIFIED." id=".huh_determination::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_determination::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_determination::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_determination::VERSION." id=".huh_determination::VERSION." value='".$model->getVersion()."'  size='".huh_determination::VERSION_SIZE ."'  maxlength='".huh_determination::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONMEMBERID<input type=text name=".huh_determination::COLLECTIONMEMBERID." id=".huh_determination::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  size='".huh_determination::COLLECTIONMEMBERID_SIZE ."'  maxlength='".huh_determination::COLLECTIONMEMBERID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ADDENDUM<input type=text name=".huh_determination::ADDENDUM." id=".huh_determination::ADDENDUM." value='".$model->getAddendum()."'  size='".huh_determination::ADDENDUM_SIZE ."'  maxlength='".huh_determination::ADDENDUM_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ALTERNATENAME<input type=text name=".huh_determination::ALTERNATENAME." id=".huh_determination::ALTERNATENAME." value='".$model->getAlternateName()."'  size='51'  maxlength='".huh_determination::ALTERNATENAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CONFIDENCE<input type=text name=".huh_determination::CONFIDENCE." id=".huh_determination::CONFIDENCE." value='".$model->getConfidence()."'  size='".huh_determination::CONFIDENCE_SIZE ."'  maxlength='".huh_determination::CONFIDENCE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DETERMINEDDATE<input type=text name=".huh_determination::DETERMINEDDATE." id=".huh_determination::DETERMINEDDATE." value='".$model->getDeterminedDate()."'  size='".huh_determination::DETERMINEDDATE_SIZE ."'  maxlength='".huh_determination::DETERMINEDDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DETERMINEDDATEPRECISION<input type=text name=".huh_determination::DETERMINEDDATEPRECISION." id=".huh_determination::DETERMINEDDATEPRECISION." value='".$model->getDeterminedDatePrecision()."'  size='".huh_determination::DETERMINEDDATEPRECISION_SIZE ."'  maxlength='".huh_determination::DETERMINEDDATEPRECISION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FEATUREORBASIS<input type=text name=".huh_determination::FEATUREORBASIS." id=".huh_determination::FEATUREORBASIS." value='".$model->getFeatureOrBasis()."'  size='".huh_determination::FEATUREORBASIS_SIZE ."'  maxlength='".huh_determination::FEATUREORBASIS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISCURRENT<input type=text name=".huh_determination::ISCURRENT." id=".huh_determination::ISCURRENT." value='".$model->getIsCurrent()."'  size='".huh_determination::ISCURRENT_SIZE ."'  maxlength='".huh_determination::ISCURRENT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>METHOD<input type=text name=".huh_determination::METHOD." id=".huh_determination::METHOD." value='".$model->getMethod()."'  size='".huh_determination::METHOD_SIZE ."'  maxlength='".huh_determination::METHOD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NAMEUSAGE<input type=text name=".huh_determination::NAMEUSAGE." id=".huh_determination::NAMEUSAGE." value='".$model->getNameUsage()."'  size='51'  maxlength='".huh_determination::NAMEUSAGE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_determination::NUMBER1." id=".huh_determination::NUMBER1." value='".$model->getNumber1()."'  size='".huh_determination::NUMBER1_SIZE ."'  maxlength='".huh_determination::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_determination::NUMBER2." id=".huh_determination::NUMBER2." value='".$model->getNumber2()."'  size='".huh_determination::NUMBER2_SIZE ."'  maxlength='".huh_determination::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>QUALIFIER<input type=text name=".huh_determination::QUALIFIER." id=".huh_determination::QUALIFIER." value='".$model->getQualifier()."'  size='".huh_determination::QUALIFIER_SIZE ."'  maxlength='".huh_determination::QUALIFIER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_determination::REMARKS." id=".huh_determination::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_determination::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_determination::TEXT1." id=".huh_determination::TEXT1." value='".$model->getText1()."'  size='51'  maxlength='".huh_determination::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_determination::TEXT2." id=".huh_determination::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_determination::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TYPESTATUSNAME<input type=text name=".huh_determination::TYPESTATUSNAME." id=".huh_determination::TYPESTATUSNAME." value='".$model->getTypeStatusName()."'  size='".huh_determination::TYPESTATUSNAME_SIZE ."'  maxlength='".huh_determination::TYPESTATUSNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_determination::YESNO1." id=".huh_determination::YESNO1." value='".$model->getYesNo1()."'  size='".huh_determination::YESNO1_SIZE ."'  maxlength='".huh_determination::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_determination::YESNO2." id=".huh_determination::YESNO2." value='".$model->getYesNo2()."'  size='".huh_determination::YESNO2_SIZE ."'  maxlength='".huh_determination::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO3<input type=text name=".huh_determination::YESNO3." id=".huh_determination::YESNO3." value='".$model->getYesNo3()."'  size='".huh_determination::YESNO3_SIZE ."'  maxlength='".huh_determination::YESNO3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FRAGMENTID<input type=text name=".huh_determination::FRAGMENTID." id=".huh_determination::FRAGMENTID." value='".$model->getFragmentID()."'  size='".huh_determination::FRAGMENTID_SIZE ."'  maxlength='".huh_determination::FRAGMENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TAXONID<input type=text name=".huh_determination::TAXONID." id=".huh_determination::TAXONID." value='".$model->getTaxonID()."'  size='".huh_determination::TAXONID_SIZE ."'  maxlength='".huh_determination::TAXONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_determination::MODIFIEDBYAGENTID." id=".huh_determination::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_determination::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_determination::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PREFERREDTAXONID<input type=text name=".huh_determination::PREFERREDTAXONID." id=".huh_determination::PREFERREDTAXONID." value='".$model->getPreferredTaxonID()."'  size='".huh_determination::PREFERREDTAXONID_SIZE ."'  maxlength='".huh_determination::PREFERREDTAXONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DETERMINERID<input type=text name=".huh_determination::DETERMINERID." id=".huh_determination::DETERMINERID." value='".$model->getDeterminerID()."'  size='".huh_determination::DETERMINERID_SIZE ."'  maxlength='".huh_determination::DETERMINERID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_determination::CREATEDBYAGENTID." id=".huh_determination::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_determination::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_determination::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
