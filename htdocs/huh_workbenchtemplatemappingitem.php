<?php
//==============================================================================
//===   workbenchtemplatemappingitem.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_workbenchtemplatemappingitem implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const WORKBENCHTEMPLATEMAPPINGITEMID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const XCOORD_SIZE          = 6; //SMALLINT
   const YCOORD_SIZE          = 6; //SMALLINT
   const CAPTION_SIZE         = 64; //64
   const CARRYFORWARD_SIZE    = 1; //1
   const DATAFIELDLENGTH_SIZE = 6; //SMALLINT
   const FIELDNAME_SIZE       = 255; //255
   const FIELDTYPE_SIZE       = 6; //SMALLINT
   const IMPORTEDCOLNAME_SIZE = 255; //255
   const ISEXPORTABLETOCONTENT_SIZE = 1; //1
   const ISINCLUDEDINTITLE_SIZE = 1; //1
   const ISREQUIRED_SIZE      = 1; //1
   const METADATA_SIZE        = 128; //128
   const DATACOLUMNINDEX_SIZE = 6; //SMALLINT
   const TABLEID_SIZE         = 11; //INTEGER
   const TABLENAME_SIZE       = 64; //64
   const VIEWORDER_SIZE       = 6; //SMALLINT
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const WORKBENCHTEMPLATEID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const WORKBENCHTEMPLATEMAPPINGITEMID = 'WorkbenchTemplateMappingItemID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const XCOORD            = 'XCoord';
   const YCOORD            = 'YCoord';
   const CAPTION           = 'Caption';
   const CARRYFORWARD      = 'CarryForward';
   const DATAFIELDLENGTH   = 'DataFieldLength';
   const FIELDNAME         = 'FieldName';
   const FIELDTYPE         = 'FieldType';
   const IMPORTEDCOLNAME   = 'ImportedColName';
   const ISEXPORTABLETOCONTENT = 'IsExportableToContent';
   const ISINCLUDEDINTITLE = 'IsIncludedInTitle';
   const ISREQUIRED        = 'IsRequired';
   const METADATA          = 'MetaData';
   const DATACOLUMNINDEX   = 'DataColumnIndex';
   const TABLEID           = 'TableId';
   const TABLENAME         = 'TableName';
   const VIEWORDER         = 'ViewOrder';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const WORKBENCHTEMPLATEID = 'WorkbenchTemplateID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $WorkbenchTemplateMappingItemID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['WorkbenchTemplateMappingItemID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $XCoord = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['XCoord']), 0, 6);
  $YCoord = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YCoord']), 0, 6);
  $Caption = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Caption']), 0, 64);
  $CarryForward = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CarryForward']), 0, 1);
  $DataFieldLength = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DataFieldLength']), 0, 6);
  $FieldName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FieldName']), 0, 255);
  $FieldType = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FieldType']), 0, 6);
  $ImportedColName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ImportedColName']), 0, 255);
  $IsExportableToContent = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsExportableToContent']), 0, 1);
  $IsIncludedInTitle = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsIncludedInTitle']), 0, 1);
  $IsRequired = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsRequired']), 0, 1);
  $MetaData = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['MetaData']), 0, 128);
  $DataColumnIndex = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DataColumnIndex']), 0, 6);
  $TableId = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['TableId']), 0, 11);
  $TableName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TableName']), 0, 64);
  $ViewOrder = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ViewOrder']), 0, 6);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $WorkbenchTemplateID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['WorkbenchTemplateID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $WorkbenchTemplateMappingItemID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $XCoord; // SMALLINT 
   private $YCoord; // SMALLINT 
   private $Caption; // VARCHAR(64) 
   private $CarryForward; // BIT(1) 
   private $DataFieldLength; // SMALLINT 
   private $FieldName; // VARCHAR(255) 
   private $FieldType; // SMALLINT 
   private $ImportedColName; // VARCHAR(255) 
   private $IsExportableToContent; // BIT(1) 
   private $IsIncludedInTitle; // BIT(1) 
   private $IsRequired; // BIT(1) 
   private $MetaData; // VARCHAR(128) 
   private $DataColumnIndex; // SMALLINT 
   private $TableId; // INTEGER 
   private $TableName; // VARCHAR(64) 
   private $ViewOrder; // SMALLINT 
   private $CreatedByAgentID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $WorkbenchTemplateID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' WorkbenchTemplateMappingItemID, TimestampCreated, TimestampModified, Version, XCoord, YCoord, Caption, CarryForward, DataFieldLength, FieldName, FieldType, ImportedColName, IsExportableToContent, IsIncludedInTitle, IsRequired, MetaData, DataColumnIndex, TableId, TableName, ViewOrder, CreatedByAgentID, ModifiedByAgentID, WorkbenchTemplateID, ';
   const PKFIELDLIST = ' WorkbenchTemplateMappingItemID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'WorkbenchTemplateMappingItemID'  ) ;
   private $allFieldsArray = array( 0 => 'WorkbenchTemplateMappingItemID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'XCoord' , 5 => 'YCoord' , 6 => 'Caption' , 7 => 'CarryForward' , 8 => 'DataFieldLength' , 9 => 'FieldName' , 10 => 'FieldType' , 11 => 'ImportedColName' , 12 => 'IsExportableToContent' , 13 => 'IsIncludedInTitle' , 14 => 'IsRequired' , 15 => 'MetaData' , 16 => 'DataColumnIndex' , 17 => 'TableId' , 18 => 'TableName' , 19 => 'ViewOrder' , 20 => 'CreatedByAgentID' , 21 => 'ModifiedByAgentID' , 22 => 'WorkbenchTemplateID'  ) ;
   private $selectDistinctFieldsArray = array( 20 => 'CreatedByAgentID' , 21 => 'ModifiedByAgentID' , 22 => 'WorkbenchTemplateID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_workbenchtemplatemappingitem(){
       $this->WorkbenchTemplateMappingItemID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->XCoord = '';
       $this->YCoord = '';
       $this->Caption = '';
       $this->CarryForward = '';
       $this->DataFieldLength = '';
       $this->FieldName = '';
       $this->FieldType = '';
       $this->ImportedColName = '';
       $this->IsExportableToContent = '';
       $this->IsIncludedInTitle = '';
       $this->IsRequired = '';
       $this->MetaData = '';
       $this->DataColumnIndex = '';
       $this->TableId = '';
       $this->TableName = '';
       $this->ViewOrder = '';
       $this->CreatedByAgentID = '';
       $this->ModifiedByAgentID = '';
       $this->WorkbenchTemplateID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='WorkbenchTemplateMappingItemID') { $returnvalue = $this->setWorkbenchTemplateMappingItemID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='XCoord') { $returnvalue = $this->setXCoord($value); } 
             if ($fieldname=='YCoord') { $returnvalue = $this->setYCoord($value); } 
             if ($fieldname=='Caption') { $returnvalue = $this->setCaption($value); } 
             if ($fieldname=='CarryForward') { $returnvalue = $this->setCarryForward($value); } 
             if ($fieldname=='DataFieldLength') { $returnvalue = $this->setDataFieldLength($value); } 
             if ($fieldname=='FieldName') { $returnvalue = $this->setFieldName($value); } 
             if ($fieldname=='FieldType') { $returnvalue = $this->setFieldType($value); } 
             if ($fieldname=='ImportedColName') { $returnvalue = $this->setImportedColName($value); } 
             if ($fieldname=='IsExportableToContent') { $returnvalue = $this->setIsExportableToContent($value); } 
             if ($fieldname=='IsIncludedInTitle') { $returnvalue = $this->setIsIncludedInTitle($value); } 
             if ($fieldname=='IsRequired') { $returnvalue = $this->setIsRequired($value); } 
             if ($fieldname=='MetaData') { $returnvalue = $this->setMetaData($value); } 
             if ($fieldname=='DataColumnIndex') { $returnvalue = $this->setDataColumnIndex($value); } 
             if ($fieldname=='TableId') { $returnvalue = $this->setTableId($value); } 
             if ($fieldname=='TableName') { $returnvalue = $this->setTableName($value); } 
             if ($fieldname=='ViewOrder') { $returnvalue = $this->setViewOrder($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='WorkbenchTemplateID') { $returnvalue = $this->setWorkbenchTemplateID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='WorkbenchTemplateMappingItemID') { $returnvalue = $this->getWorkbenchTemplateMappingItemID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='XCoord') { $returnvalue = $this->getXCoord(); } 
             if ($fieldname=='YCoord') { $returnvalue = $this->getYCoord(); } 
             if ($fieldname=='Caption') { $returnvalue = $this->getCaption(); } 
             if ($fieldname=='CarryForward') { $returnvalue = $this->getCarryForward(); } 
             if ($fieldname=='DataFieldLength') { $returnvalue = $this->getDataFieldLength(); } 
             if ($fieldname=='FieldName') { $returnvalue = $this->getFieldName(); } 
             if ($fieldname=='FieldType') { $returnvalue = $this->getFieldType(); } 
             if ($fieldname=='ImportedColName') { $returnvalue = $this->getImportedColName(); } 
             if ($fieldname=='IsExportableToContent') { $returnvalue = $this->getIsExportableToContent(); } 
             if ($fieldname=='IsIncludedInTitle') { $returnvalue = $this->getIsIncludedInTitle(); } 
             if ($fieldname=='IsRequired') { $returnvalue = $this->getIsRequired(); } 
             if ($fieldname=='MetaData') { $returnvalue = $this->getMetaData(); } 
             if ($fieldname=='DataColumnIndex') { $returnvalue = $this->getDataColumnIndex(); } 
             if ($fieldname=='TableId') { $returnvalue = $this->getTableId(); } 
             if ($fieldname=='TableName') { $returnvalue = $this->getTableName(); } 
             if ($fieldname=='ViewOrder') { $returnvalue = $this->getViewOrder(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='WorkbenchTemplateID') { $returnvalue = $this->getWorkbenchTemplateID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*WorkbenchTemplateMappingItemID*/
   public function getWorkbenchTemplateMappingItemID() {
       if ($this->WorkbenchTemplateMappingItemID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->WorkbenchTemplateMappingItemID));
       }
   }
   public function setWorkbenchTemplateMappingItemID($WorkbenchTemplateMappingItemID) {
       if (strlen(preg_replace('/[^0-9]/','',$WorkbenchTemplateMappingItemID)) > huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $WorkbenchTemplateMappingItemID = trim($WorkbenchTemplateMappingItemID);
       if (!ctype_digit(strval($WorkbenchTemplateMappingItemID)) && trim(strval($WorkbenchTemplateMappingItemID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->WorkbenchTemplateMappingItemID = $this->l_addslashes($WorkbenchTemplateMappingItemID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_workbenchtemplatemappingitem::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_workbenchtemplatemappingitem::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*XCoord*/
   public function getXCoord() {
       if ($this->XCoord==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->XCoord));
       }
   }
   public function setXCoord($XCoord) {
       if (strlen($XCoord) > huh_workbenchtemplatemappingitem::XCOORD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->XCoord = $this->l_addslashes($XCoord);
       $this->dirty = true;
   }
/*YCoord*/
   public function getYCoord() {
       if ($this->YCoord==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YCoord));
       }
   }
   public function setYCoord($YCoord) {
       if (strlen($YCoord) > huh_workbenchtemplatemappingitem::YCOORD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YCoord = $this->l_addslashes($YCoord);
       $this->dirty = true;
   }
/*Caption*/
   public function getCaption() {
       if ($this->Caption==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Caption));
       }
   }
   public function setCaption($Caption) {
       if (strlen($Caption) > huh_workbenchtemplatemappingitem::CAPTION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Caption = $this->l_addslashes($Caption);
       $this->dirty = true;
   }
/*CarryForward*/
   public function getCarryForward() {
       if ($this->CarryForward==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CarryForward));
       }
   }
   public function setCarryForward($CarryForward) {
       if (strlen($CarryForward) > huh_workbenchtemplatemappingitem::CARRYFORWARD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CarryForward = $this->l_addslashes($CarryForward);
       $this->dirty = true;
   }
/*DataFieldLength*/
   public function getDataFieldLength() {
       if ($this->DataFieldLength==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DataFieldLength));
       }
   }
   public function setDataFieldLength($DataFieldLength) {
       if (strlen($DataFieldLength) > huh_workbenchtemplatemappingitem::DATAFIELDLENGTH_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DataFieldLength = $this->l_addslashes($DataFieldLength);
       $this->dirty = true;
   }
/*FieldName*/
   public function getFieldName() {
       if ($this->FieldName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FieldName));
       }
   }
   public function setFieldName($FieldName) {
       if (strlen($FieldName) > huh_workbenchtemplatemappingitem::FIELDNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FieldName = $this->l_addslashes($FieldName);
       $this->dirty = true;
   }
/*FieldType*/
   public function getFieldType() {
       if ($this->FieldType==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FieldType));
       }
   }
   public function setFieldType($FieldType) {
       if (strlen($FieldType) > huh_workbenchtemplatemappingitem::FIELDTYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FieldType = $this->l_addslashes($FieldType);
       $this->dirty = true;
   }
/*ImportedColName*/
   public function getImportedColName() {
       if ($this->ImportedColName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ImportedColName));
       }
   }
   public function setImportedColName($ImportedColName) {
       if (strlen($ImportedColName) > huh_workbenchtemplatemappingitem::IMPORTEDCOLNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ImportedColName = $this->l_addslashes($ImportedColName);
       $this->dirty = true;
   }
/*IsExportableToContent*/
   public function getIsExportableToContent() {
       if ($this->IsExportableToContent==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsExportableToContent));
       }
   }
   public function setIsExportableToContent($IsExportableToContent) {
       if (strlen($IsExportableToContent) > huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsExportableToContent = $this->l_addslashes($IsExportableToContent);
       $this->dirty = true;
   }
/*IsIncludedInTitle*/
   public function getIsIncludedInTitle() {
       if ($this->IsIncludedInTitle==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsIncludedInTitle));
       }
   }
   public function setIsIncludedInTitle($IsIncludedInTitle) {
       if (strlen($IsIncludedInTitle) > huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsIncludedInTitle = $this->l_addslashes($IsIncludedInTitle);
       $this->dirty = true;
   }
/*IsRequired*/
   public function getIsRequired() {
       if ($this->IsRequired==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsRequired));
       }
   }
   public function setIsRequired($IsRequired) {
       if (strlen($IsRequired) > huh_workbenchtemplatemappingitem::ISREQUIRED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsRequired = $this->l_addslashes($IsRequired);
       $this->dirty = true;
   }
/*MetaData*/
   public function getMetaData() {
       if ($this->MetaData==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->MetaData));
       }
   }
   public function setMetaData($MetaData) {
       if (strlen($MetaData) > huh_workbenchtemplatemappingitem::METADATA_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->MetaData = $this->l_addslashes($MetaData);
       $this->dirty = true;
   }
/*DataColumnIndex*/
   public function getDataColumnIndex() {
       if ($this->DataColumnIndex==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DataColumnIndex));
       }
   }
   public function setDataColumnIndex($DataColumnIndex) {
       if (strlen($DataColumnIndex) > huh_workbenchtemplatemappingitem::DATACOLUMNINDEX_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DataColumnIndex = $this->l_addslashes($DataColumnIndex);
       $this->dirty = true;
   }
/*TableId*/
   public function getTableId() {
       if ($this->TableId==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TableId));
       }
   }
   public function setTableId($TableId) {
       if (strlen(preg_replace('/[^0-9]/','',$TableId)) > huh_workbenchtemplatemappingitem::TABLEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $TableId = trim($TableId);
       if (!ctype_digit(strval($TableId)) && trim(strval($TableId))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->TableId = $this->l_addslashes($TableId);
       $this->dirty = true;
   }
/*TableName*/
   public function getTableName() {
       if ($this->TableName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TableName));
       }
   }
   public function setTableName($TableName) {
       if (strlen($TableName) > huh_workbenchtemplatemappingitem::TABLENAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TableName = $this->l_addslashes($TableName);
       $this->dirty = true;
   }
/*ViewOrder*/
   public function getViewOrder() {
       if ($this->ViewOrder==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ViewOrder));
       }
   }
   public function setViewOrder($ViewOrder) {
       if (strlen($ViewOrder) > huh_workbenchtemplatemappingitem::VIEWORDER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ViewOrder = $this->l_addslashes($ViewOrder);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_workbenchtemplatemappingitem::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*WorkbenchTemplateID*/
   public function getWorkbenchTemplateID() {
       if ($this->WorkbenchTemplateID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->WorkbenchTemplateID));
       }
   }
   public function setWorkbenchTemplateID($WorkbenchTemplateID) {
       if (strlen(preg_replace('/[^0-9]/','',$WorkbenchTemplateID)) > huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $WorkbenchTemplateID = trim($WorkbenchTemplateID);
       if (!ctype_digit(strval($WorkbenchTemplateID))) {
             throw new Exception("Value must be an integer");
       }
       $this->WorkbenchTemplateID = $this->l_addslashes($WorkbenchTemplateID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getWorkbenchTemplateMappingItemID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['WorkbenchTemplateMappingItemID'] = $this->getWorkbenchTemplateMappingItemID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_WorkbenchTemplateMappingItemIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_XCoordMYSQLI_TYPE = 'i';
  const C_YCoordMYSQLI_TYPE = 'i';
  const C_CaptionMYSQLI_TYPE = 's';
  const C_CarryForwardMYSQLI_TYPE = 'i';
  const C_DataFieldLengthMYSQLI_TYPE = 'i';
  const C_FieldNameMYSQLI_TYPE = 's';
  const C_FieldTypeMYSQLI_TYPE = 'i';
  const C_ImportedColNameMYSQLI_TYPE = 's';
  const C_IsExportableToContentMYSQLI_TYPE = 'i';
  const C_IsIncludedInTitleMYSQLI_TYPE = 'i';
  const C_IsRequiredMYSQLI_TYPE = 'i';
  const C_MetaDataMYSQLI_TYPE = 's';
  const C_DataColumnIndexMYSQLI_TYPE = 'i';
  const C_TableIdMYSQLI_TYPE = 'i';
  const C_TableNameMYSQLI_TYPE = 's';
  const C_ViewOrderMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_WorkbenchTemplateIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='WorkbenchTemplateMappingItemID') { $retval = self::C_WorkbenchTemplateMappingItemIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='XCoord') { $retval = self::C_XCoordMYSQLI_TYPE; }
      if ($aFieldname=='YCoord') { $retval = self::C_YCoordMYSQLI_TYPE; }
      if ($aFieldname=='Caption') { $retval = self::C_CaptionMYSQLI_TYPE; }
      if ($aFieldname=='CarryForward') { $retval = self::C_CarryForwardMYSQLI_TYPE; }
      if ($aFieldname=='DataFieldLength') { $retval = self::C_DataFieldLengthMYSQLI_TYPE; }
      if ($aFieldname=='FieldName') { $retval = self::C_FieldNameMYSQLI_TYPE; }
      if ($aFieldname=='FieldType') { $retval = self::C_FieldTypeMYSQLI_TYPE; }
      if ($aFieldname=='ImportedColName') { $retval = self::C_ImportedColNameMYSQLI_TYPE; }
      if ($aFieldname=='IsExportableToContent') { $retval = self::C_IsExportableToContentMYSQLI_TYPE; }
      if ($aFieldname=='IsIncludedInTitle') { $retval = self::C_IsIncludedInTitleMYSQLI_TYPE; }
      if ($aFieldname=='IsRequired') { $retval = self::C_IsRequiredMYSQLI_TYPE; }
      if ($aFieldname=='MetaData') { $retval = self::C_MetaDataMYSQLI_TYPE; }
      if ($aFieldname=='DataColumnIndex') { $retval = self::C_DataColumnIndexMYSQLI_TYPE; }
      if ($aFieldname=='TableId') { $retval = self::C_TableIdMYSQLI_TYPE; }
      if ($aFieldname=='TableName') { $retval = self::C_TableNameMYSQLI_TYPE; }
      if ($aFieldname=='ViewOrder') { $retval = self::C_ViewOrderMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='WorkbenchTemplateID') { $retval = self::C_WorkbenchTemplateIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setWorkbenchTemplateMappingItemID($pk[WorkbenchTemplateMappingItemID]);
             } else { ;
                 $this->setWorkbenchTemplateMappingItemID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->WorkbenchTemplateMappingItemID != NULL) {
           $sql = 'SELECT WorkbenchTemplateMappingItemID, TimestampCreated, TimestampModified, Version, XCoord, YCoord, Caption, CarryForward, DataFieldLength, FieldName, FieldType, ImportedColName, IsExportableToContent, IsIncludedInTitle, IsRequired, MetaData, DataColumnIndex, TableId, TableName, ViewOrder, CreatedByAgentID, ModifiedByAgentID, WorkbenchTemplateID FROM workbenchtemplatemappingitem WHERE WorkbenchTemplateMappingItemID = '.$this->WorkbenchTemplateMappingItemID ;

           $preparesql = 'SELECT WorkbenchTemplateMappingItemID, TimestampCreated, TimestampModified, Version, XCoord, YCoord, Caption, CarryForward, DataFieldLength, FieldName, FieldType, ImportedColName, IsExportableToContent, IsIncludedInTitle, IsRequired, MetaData, DataColumnIndex, TableId, TableName, ViewOrder, CreatedByAgentID, ModifiedByAgentID, WorkbenchTemplateID FROM workbenchtemplatemappingitem WHERE WorkbenchTemplateMappingItemID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->WorkbenchTemplateMappingItemID);
              $statement->execute();
              $statement->bind_result($this->WorkbenchTemplateMappingItemID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->XCoord, $this->YCoord, $this->Caption, $this->CarryForward, $this->DataFieldLength, $this->FieldName, $this->FieldType, $this->ImportedColName, $this->IsExportableToContent, $this->IsIncludedInTitle, $this->IsRequired, $this->MetaData, $this->DataColumnIndex, $this->TableId, $this->TableName, $this->ViewOrder, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->WorkbenchTemplateID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->WorkbenchTemplateMappingItemID!= NULL) {
            $sql  = 'UPDATE  workbenchtemplatemappingitem SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", XCoord = ? ";
            $sql .=  ", YCoord = ? ";
            $sql .=  ", Caption = ? ";
            $sql .=  ", CarryForward = ? ";
            $sql .=  ", DataFieldLength = ? ";
            $sql .=  ", FieldName = ? ";
            $sql .=  ", FieldType = ? ";
            $sql .=  ", ImportedColName = ? ";
            $sql .=  ", IsExportableToContent = ? ";
            $sql .=  ", IsIncludedInTitle = ? ";
            $sql .=  ", IsRequired = ? ";
            $sql .=  ", MetaData = ? ";
            $sql .=  ", DataColumnIndex = ? ";
            $sql .=  ", TableId = ? ";
            $sql .=  ", TableName = ? ";
            $sql .=  ", ViewOrder = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", WorkbenchTemplateID = ? ";

            $sql .= "  WHERE WorkbenchTemplateMappingItemID = ? ";
        } else {
            $sql  = 'INSERT INTO workbenchtemplatemappingitem ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( WorkbenchTemplateMappingItemID ,  TimestampCreated ,  TimestampModified ,  Version ,  XCoord ,  YCoord ,  Caption ,  CarryForward ,  DataFieldLength ,  FieldName ,  FieldType ,  ImportedColName ,  IsExportableToContent ,  IsIncludedInTitle ,  IsRequired ,  MetaData ,  DataColumnIndex ,  TableId ,  TableName ,  ViewOrder ,  CreatedByAgentID ,  ModifiedByAgentID ,  WorkbenchTemplateID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->WorkbenchTemplateMappingItemID!= NULL ) {
              $statement->bind_param("issiiisiisisiiisiisiiiii", $this->WorkbenchTemplateMappingItemID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->XCoord , $this->YCoord , $this->Caption , $this->CarryForward , $this->DataFieldLength , $this->FieldName , $this->FieldType , $this->ImportedColName , $this->IsExportableToContent , $this->IsIncludedInTitle , $this->IsRequired , $this->MetaData , $this->DataColumnIndex , $this->TableId , $this->TableName , $this->ViewOrder , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->WorkbenchTemplateID , $this->WorkbenchTemplateMappingItemID );
           } else { 
              $statement->bind_param("issiiisiisisiiisiisiiii", $this->WorkbenchTemplateMappingItemID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->XCoord , $this->YCoord , $this->Caption , $this->CarryForward , $this->DataFieldLength , $this->FieldName , $this->FieldType , $this->ImportedColName , $this->IsExportableToContent , $this->IsIncludedInTitle , $this->IsRequired , $this->MetaData , $this->DataColumnIndex , $this->TableId , $this->TableName , $this->ViewOrder , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->WorkbenchTemplateID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->WorkbenchTemplateMappingItemID != NULL) {
           $sql = 'SELECT WorkbenchTemplateMappingItemID, TimestampCreated, TimestampModified, Version, XCoord, YCoord, Caption, CarryForward, DataFieldLength, FieldName, FieldType, ImportedColName, IsExportableToContent, IsIncludedInTitle, IsRequired, MetaData, DataColumnIndex, TableId, TableName, ViewOrder, CreatedByAgentID, ModifiedByAgentID, WorkbenchTemplateID FROM workbenchtemplatemappingitem WHERE WorkbenchTemplateMappingItemID = "'.$this->WorkbenchTemplateMappingItemID.'"  ' ;

           $preparedsql = 'SELECT  FROM workbenchtemplatemappingitem WHERE  and WorkbenchTemplateMappingItemID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issiiisiisisiiisiisiiii", $this->WorkbenchTemplateMappingItemID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->XCoord, $this->YCoord, $this->Caption, $this->CarryForward, $this->DataFieldLength, $this->FieldName, $this->FieldType, $this->ImportedColName, $this->IsExportableToContent, $this->IsIncludedInTitle, $this->IsRequired, $this->MetaData, $this->DataColumnIndex, $this->TableId, $this->TableName, $this->ViewOrder, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->WorkbenchTemplateID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM workbenchtemplatemappingitem WHERE  and WorkbenchTemplateMappingItemID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issiiisiisisiiisiisiiii", $this->WorkbenchTemplateMappingItemID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->XCoord, $this->YCoord, $this->Caption, $this->CarryForward, $this->DataFieldLength, $this->FieldName, $this->FieldType, $this->ImportedColName, $this->IsExportableToContent, $this->IsIncludedInTitle, $this->IsRequired, $this->MetaData, $this->DataColumnIndex, $this->TableId, $this->TableName, $this->ViewOrder, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->WorkbenchTemplateID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->WorkbenchTemplateMappingItemID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM workbenchtemplatemappingitem';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT WorkbenchTemplateMappingItemID FROM workbenchtemplatemappingitem $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_workbenchtemplatemappingitem();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromworkbenchdataitem() { 
      // ForeignKey in: workbenchdataitem
      $t = new workbenchdataitem();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: WorkbenchTemplateID
      $t = new workbenchtemplate();
      $t->load(getWorkbenchTemplateID());
      $returnvalue[WorkbenchTemplateID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT WorkbenchTemplateMappingItemID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(XCoord,'') || ' ' || IFNULL(YCoord,'') || ' ' || IFNULL(Caption,'') || ' ' || IFNULL(CarryForward,'') || ' ' || IFNULL(DataFieldLength,'') || ' ' || IFNULL(FieldName,'') || ' ' || IFNULL(FieldType,'') || ' ' || IFNULL(ImportedColName,'') || ' ' || IFNULL(IsExportableToContent,'') || ' ' || IFNULL(IsIncludedInTitle,'') || ' ' || IFNULL(IsRequired,'') || ' ' || IFNULL(MetaData,'') || ' ' || IFNULL(DataColumnIndex,'') || ' ' || IFNULL(TableId,'') || ' ' || IFNULL(TableName,'') || ' ' || IFNULL(ViewOrder,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(WorkbenchTemplateID,'')) FROM workbenchtemplatemappingitem order by CreatedByAgentID, ModifiedByAgentID, WorkbenchTemplateID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM workbenchtemplatemappingitem order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT WorkbenchTemplateMappingItemID FROM workbenchtemplatemappingitem WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT WorkbenchTemplateMappingItemID FROM workbenchtemplatemappingitem WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_workbenchtemplatemappingitem();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT WorkbenchTemplateMappingItemID FROM workbenchtemplatemappingitem WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT WorkbenchTemplateMappingItemID FROM workbenchtemplatemappingitem WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_workbenchtemplatemappingitem();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByWorkbenchTemplateID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT WorkbenchTemplateMappingItemID FROM workbenchtemplatemappingitem WHERE WorkbenchTemplateID $operator '$searchTerm'";
        $preparedsql = "SELECT WorkbenchTemplateMappingItemID FROM workbenchtemplatemappingitem WHERE WorkbenchTemplateID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_workbenchtemplatemappingitem();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM workbenchtemplatemappingitem group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM workbenchtemplatemappingitem group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctWorkbenchTemplateID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' WorkbenchTemplateID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, WorkbenchTemplateID FROM workbenchtemplatemappingitem group by WorkbenchTemplateID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&WorkbenchTemplateID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'WorkbenchTemplateID':
             $returnvalue = $this->selectDistinctWorkbenchTemplateID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the workbenchtemplatemappingitem.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_workbenchtemplatemappingitemView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_workbenchtemplatemappingitem <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID.": ".$model->getWorkbenchTemplateMappingItemID()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::XCOORD.": ".$model->getXCoord()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::YCOORD.": ".$model->getYCoord()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::CAPTION.": ".$model->getCaption()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::CARRYFORWARD.": ".$model->getCarryForward()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::DATAFIELDLENGTH.": ".$model->getDataFieldLength()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::FIELDNAME.": ".$model->getFieldName()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::FIELDTYPE.": ".$model->getFieldType()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::IMPORTEDCOLNAME.": ".$model->getImportedColName()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT.": ".$model->getIsExportableToContent()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE.": ".$model->getIsIncludedInTitle()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::ISREQUIRED.": ".$model->getIsRequired()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::METADATA.": ".$model->getMetaData()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::DATACOLUMNINDEX.": ".$model->getDataColumnIndex()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::TABLEID.": ".$model->getTableId()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::TABLENAME.": ".$model->getTableName()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::VIEWORDER.": ".$model->getViewOrder()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID.": ".$model->getWorkbenchTemplateID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>workbenchtemplate</li>";
           $t_workbenchtemplate = new huh_workbenchtemplate();
           $t_workbenchtemplateView = new huh_workbenchtemplateView();
           $t_workbenchtemplateView->setModel($t_workbenchtemplate);
           if ($model->getWorkbenchTemplateID() != '') { 
               $t_workbenchtemplate->load($model->getWorkbenchTemplateID());
               $returnvalue .= $t_workbenchtemplateView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID.': "'.$model->getWorkbenchTemplateMappingItemID().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::XCOORD.': "'.$model->getXCoord().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::YCOORD.': "'.$model->getYCoord().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::CAPTION.': "'.$model->getCaption().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::CARRYFORWARD.': "'.$model->getCarryForward().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::DATAFIELDLENGTH.': "'.$model->getDataFieldLength().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::FIELDNAME.': "'.$model->getFieldName().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::FIELDTYPE.': "'.$model->getFieldType().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::IMPORTEDCOLNAME.': "'.$model->getImportedColName().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT.': "'.$model->getIsExportableToContent().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE.': "'.$model->getIsIncludedInTitle().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::ISREQUIRED.': "'.$model->getIsRequired().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::METADATA.': "'.$model->getMetaData().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::DATACOLUMNINDEX.': "'.$model->getDataColumnIndex().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::TABLEID.': "'.$model->getTableId().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::TABLENAME.': "'.$model->getTableName().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::VIEWORDER.': "'.$model->getViewOrder().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID.': "'.$model->getWorkbenchTemplateID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getWorkbenchTemplateMappingItemID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getXCoord()."</td>\n";
       $returnvalue .= "<td>".$model->getYCoord()."</td>\n";
       $returnvalue .= "<td>".$model->getCaption()."</td>\n";
       $returnvalue .= "<td>".$model->getCarryForward()."</td>\n";
       $returnvalue .= "<td>".$model->getDataFieldLength()."</td>\n";
       $returnvalue .= "<td>".$model->getFieldName()."</td>\n";
       $returnvalue .= "<td>".$model->getFieldType()."</td>\n";
       $returnvalue .= "<td>".$model->getImportedColName()."</td>\n";
       $returnvalue .= "<td>".$model->getIsExportableToContent()."</td>\n";
       $returnvalue .= "<td>".$model->getIsIncludedInTitle()."</td>\n";
       $returnvalue .= "<td>".$model->getIsRequired()."</td>\n";
       $returnvalue .= "<td>".$model->getMetaData()."</td>\n";
       $returnvalue .= "<td>".$model->getDataColumnIndex()."</td>\n";
       $returnvalue .= "<td>".$model->getTableId()."</td>\n";
       $returnvalue .= "<td>".$model->getTableName()."</td>\n";
       $returnvalue .= "<td>".$model->getViewOrder()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getWorkbenchTemplateID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::XCOORD."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::YCOORD."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::CAPTION."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::CARRYFORWARD."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::DATAFIELDLENGTH."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::FIELDNAME."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::FIELDTYPE."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::IMPORTEDCOLNAME."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::ISREQUIRED."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::METADATA."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::DATACOLUMNINDEX."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::TABLEID."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::TABLENAME."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::VIEWORDER."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_workbenchtemplatemappingitem">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new WorkbenchTemplateMappingItemID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID.">WORKBENCHTEMPLATEMAPPINGITEMID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID." id=".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID." value='".$model->getWorkbenchTemplateMappingItemID()."'  style=' width:".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchtemplatemappingitem::TIMESTAMPCREATED." id=".huh_workbenchtemplatemappingitem::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_workbenchtemplatemappingitem::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED." id=".huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_workbenchtemplatemappingitem::VERSION." id=".huh_workbenchtemplatemappingitem::VERSION." value='".$model->getVersion()."'  style=' width:".huh_workbenchtemplatemappingitem::VERSION_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::XCOORD.">XCOORD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchtemplatemappingitem::XCOORD." id=".huh_workbenchtemplatemappingitem::XCOORD." value='".$model->getXCoord()."'  style=' width:".huh_workbenchtemplatemappingitem::XCOORD_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::XCOORD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::YCOORD.">YCOORD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchtemplatemappingitem::YCOORD." id=".huh_workbenchtemplatemappingitem::YCOORD." value='".$model->getYCoord()."'  style=' width:".huh_workbenchtemplatemappingitem::YCOORD_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::YCOORD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::CAPTION.">CAPTION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_workbenchtemplatemappingitem::CAPTION." id=".huh_workbenchtemplatemappingitem::CAPTION." >".$model->getCaption()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::CARRYFORWARD.">CARRYFORWARD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchtemplatemappingitem::CARRYFORWARD." id=".huh_workbenchtemplatemappingitem::CARRYFORWARD." value='".$model->getCarryForward()."'  style=' width:".huh_workbenchtemplatemappingitem::CARRYFORWARD_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::CARRYFORWARD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::DATAFIELDLENGTH.">DATAFIELDLENGTH</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchtemplatemappingitem::DATAFIELDLENGTH." id=".huh_workbenchtemplatemappingitem::DATAFIELDLENGTH." value='".$model->getDataFieldLength()."'  style=' width:".huh_workbenchtemplatemappingitem::DATAFIELDLENGTH_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::DATAFIELDLENGTH_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::FIELDNAME.">FIELDNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_workbenchtemplatemappingitem::FIELDNAME." id=".huh_workbenchtemplatemappingitem::FIELDNAME." >".$model->getFieldName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::FIELDTYPE.">FIELDTYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchtemplatemappingitem::FIELDTYPE." id=".huh_workbenchtemplatemappingitem::FIELDTYPE." value='".$model->getFieldType()."'  style=' width:".huh_workbenchtemplatemappingitem::FIELDTYPE_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::FIELDTYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::IMPORTEDCOLNAME.">IMPORTEDCOLNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_workbenchtemplatemappingitem::IMPORTEDCOLNAME." id=".huh_workbenchtemplatemappingitem::IMPORTEDCOLNAME." >".$model->getImportedColName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT.">ISEXPORTABLETOCONTENT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT." id=".huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT." value='".$model->getIsExportableToContent()."'  style=' width:".huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE.">ISINCLUDEDINTITLE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE." id=".huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE." value='".$model->getIsIncludedInTitle()."'  style=' width:".huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::ISREQUIRED.">ISREQUIRED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchtemplatemappingitem::ISREQUIRED." id=".huh_workbenchtemplatemappingitem::ISREQUIRED." value='".$model->getIsRequired()."'  style=' width:".huh_workbenchtemplatemappingitem::ISREQUIRED_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::ISREQUIRED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::METADATA.">METADATA</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_workbenchtemplatemappingitem::METADATA." id=".huh_workbenchtemplatemappingitem::METADATA." >".$model->getMetaData()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::DATACOLUMNINDEX.">DATACOLUMNINDEX</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchtemplatemappingitem::DATACOLUMNINDEX." id=".huh_workbenchtemplatemappingitem::DATACOLUMNINDEX." value='".$model->getDataColumnIndex()."'  style=' width:".huh_workbenchtemplatemappingitem::DATACOLUMNINDEX_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::DATACOLUMNINDEX_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::TABLEID.">TABLEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_workbenchtemplatemappingitem::TABLEID." id=".huh_workbenchtemplatemappingitem::TABLEID." value='".$model->getTableId()."'  style=' width:".huh_workbenchtemplatemappingitem::TABLEID_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::TABLEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::TABLENAME.">TABLENAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_workbenchtemplatemappingitem::TABLENAME." id=".huh_workbenchtemplatemappingitem::TABLENAME." >".$model->getTableName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::VIEWORDER.">VIEWORDER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchtemplatemappingitem::VIEWORDER." id=".huh_workbenchtemplatemappingitem::VIEWORDER." value='".$model->getViewOrder()."'  style=' width:".huh_workbenchtemplatemappingitem::VIEWORDER_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::VIEWORDER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_workbenchtemplatemappingitem::CREATEDBYAGENTID." id=".huh_workbenchtemplatemappingitem::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_workbenchtemplatemappingitem::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID." id=".huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID.">WORKBENCHTEMPLATEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID." id=".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID." value='".$model->getWorkbenchTemplateID()."'  style=' width:".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID_SIZE ."em;  '  maxlength='".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_workbenchtemplatemappingitem">';
       $returnvalue .= '<input type=hidden name=WorkbenchTemplateMappingItemID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_workbenchtemplatemappingitem">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>WORKBENCHTEMPLATEMAPPINGITEMID<input type=text name=".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID." id=".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID." value='".$model->getWorkbenchTemplateMappingItemID()."'  size='".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEMAPPINGITEMID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_workbenchtemplatemappingitem::TIMESTAMPCREATED." id=".huh_workbenchtemplatemappingitem::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_workbenchtemplatemappingitem::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED." id=".huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_workbenchtemplatemappingitem::VERSION." id=".huh_workbenchtemplatemappingitem::VERSION." value='".$model->getVersion()."'  size='".huh_workbenchtemplatemappingitem::VERSION_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>XCOORD<input type=text name=".huh_workbenchtemplatemappingitem::XCOORD." id=".huh_workbenchtemplatemappingitem::XCOORD." value='".$model->getXCoord()."'  size='".huh_workbenchtemplatemappingitem::XCOORD_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::XCOORD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YCOORD<input type=text name=".huh_workbenchtemplatemappingitem::YCOORD." id=".huh_workbenchtemplatemappingitem::YCOORD." value='".$model->getYCoord()."'  size='".huh_workbenchtemplatemappingitem::YCOORD_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::YCOORD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CAPTION<input type=text name=".huh_workbenchtemplatemappingitem::CAPTION." id=".huh_workbenchtemplatemappingitem::CAPTION." value='".$model->getCaption()."'  size='51'  maxlength='".huh_workbenchtemplatemappingitem::CAPTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CARRYFORWARD<input type=text name=".huh_workbenchtemplatemappingitem::CARRYFORWARD." id=".huh_workbenchtemplatemappingitem::CARRYFORWARD." value='".$model->getCarryForward()."'  size='".huh_workbenchtemplatemappingitem::CARRYFORWARD_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::CARRYFORWARD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATAFIELDLENGTH<input type=text name=".huh_workbenchtemplatemappingitem::DATAFIELDLENGTH." id=".huh_workbenchtemplatemappingitem::DATAFIELDLENGTH." value='".$model->getDataFieldLength()."'  size='".huh_workbenchtemplatemappingitem::DATAFIELDLENGTH_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::DATAFIELDLENGTH_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FIELDNAME<input type=text name=".huh_workbenchtemplatemappingitem::FIELDNAME." id=".huh_workbenchtemplatemappingitem::FIELDNAME." value='".$model->getFieldName()."'  size='51'  maxlength='".huh_workbenchtemplatemappingitem::FIELDNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FIELDTYPE<input type=text name=".huh_workbenchtemplatemappingitem::FIELDTYPE." id=".huh_workbenchtemplatemappingitem::FIELDTYPE." value='".$model->getFieldType()."'  size='".huh_workbenchtemplatemappingitem::FIELDTYPE_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::FIELDTYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>IMPORTEDCOLNAME<input type=text name=".huh_workbenchtemplatemappingitem::IMPORTEDCOLNAME." id=".huh_workbenchtemplatemappingitem::IMPORTEDCOLNAME." value='".$model->getImportedColName()."'  size='51'  maxlength='".huh_workbenchtemplatemappingitem::IMPORTEDCOLNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISEXPORTABLETOCONTENT<input type=text name=".huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT." id=".huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT." value='".$model->getIsExportableToContent()."'  size='".huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::ISEXPORTABLETOCONTENT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISINCLUDEDINTITLE<input type=text name=".huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE." id=".huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE." value='".$model->getIsIncludedInTitle()."'  size='".huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::ISINCLUDEDINTITLE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISREQUIRED<input type=text name=".huh_workbenchtemplatemappingitem::ISREQUIRED." id=".huh_workbenchtemplatemappingitem::ISREQUIRED." value='".$model->getIsRequired()."'  size='".huh_workbenchtemplatemappingitem::ISREQUIRED_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::ISREQUIRED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>METADATA<input type=text name=".huh_workbenchtemplatemappingitem::METADATA." id=".huh_workbenchtemplatemappingitem::METADATA." value='".$model->getMetaData()."'  size='51'  maxlength='".huh_workbenchtemplatemappingitem::METADATA_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATACOLUMNINDEX<input type=text name=".huh_workbenchtemplatemappingitem::DATACOLUMNINDEX." id=".huh_workbenchtemplatemappingitem::DATACOLUMNINDEX." value='".$model->getDataColumnIndex()."'  size='".huh_workbenchtemplatemappingitem::DATACOLUMNINDEX_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::DATACOLUMNINDEX_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TABLEID<input type=text name=".huh_workbenchtemplatemappingitem::TABLEID." id=".huh_workbenchtemplatemappingitem::TABLEID." value='".$model->getTableId()."'  size='".huh_workbenchtemplatemappingitem::TABLEID_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::TABLEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TABLENAME<input type=text name=".huh_workbenchtemplatemappingitem::TABLENAME." id=".huh_workbenchtemplatemappingitem::TABLENAME." value='".$model->getTableName()."'  size='51'  maxlength='".huh_workbenchtemplatemappingitem::TABLENAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VIEWORDER<input type=text name=".huh_workbenchtemplatemappingitem::VIEWORDER." id=".huh_workbenchtemplatemappingitem::VIEWORDER." value='".$model->getViewOrder()."'  size='".huh_workbenchtemplatemappingitem::VIEWORDER_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::VIEWORDER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_workbenchtemplatemappingitem::CREATEDBYAGENTID." id=".huh_workbenchtemplatemappingitem::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_workbenchtemplatemappingitem::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID." id=".huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>WORKBENCHTEMPLATEID<input type=text name=".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID." id=".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID." value='".$model->getWorkbenchTemplateID()."'  size='".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID_SIZE ."'  maxlength='".huh_workbenchtemplatemappingitem::WORKBENCHTEMPLATEID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
