<?php
//==============================================================================
//===   workbenchdataitem.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_workbenchdataitem implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const WORKBENCHDATAITEMID_SIZE = 11; //INTEGER
   const CELLDATA_SIZE        = 255; //LONGVARCHAR
   const ROWNUMBER_SIZE       = 6; //SMALLINT
   const VALIDATIONSTATUS_SIZE = 6; //SMALLINT
   const WORKBENCHTEMPLATEMAPPINGITEMID_SIZE = 11; //INTEGER
   const WORKBENCHROWID_SIZE  = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const WORKBENCHDATAITEMID = 'WorkbenchDataItemID';
   const CELLDATA          = 'CellData';
   const ROWNUMBER         = 'RowNumber';
   const VALIDATIONSTATUS  = 'ValidationStatus';
   const WORKBENCHTEMPLATEMAPPINGITEMID = 'WorkbenchTemplateMappingItemID';
   const WORKBENCHROWID    = 'WorkbenchRowID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $WorkbenchDataItemID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['WorkbenchDataItemID']), 0, 11);
  $CellData = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CellData']), 0, 255);
  $RowNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['RowNumber']), 0, 6);
  $ValidationStatus = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ValidationStatus']), 0, 6);
  $WorkbenchTemplateMappingItemID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['WorkbenchTemplateMappingItemID']), 0, 11);
  $WorkbenchRowID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['WorkbenchRowID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $WorkbenchDataItemID; // PK INTEGER 
   private $CellData; // LONGVARCHAR 
   private $RowNumber; // SMALLINT 
   private $ValidationStatus; // SMALLINT 
   private $WorkbenchTemplateMappingItemID; // INTEGER 
   private $WorkbenchRowID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' WorkbenchDataItemID, CellData, RowNumber, ValidationStatus, WorkbenchTemplateMappingItemID, WorkbenchRowID, ';
   const PKFIELDLIST = ' WorkbenchDataItemID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'WorkbenchDataItemID'  ) ;
   private $allFieldsArray = array( 0 => 'WorkbenchDataItemID' , 1 => 'CellData' , 2 => 'RowNumber' , 3 => 'ValidationStatus' , 4 => 'WorkbenchTemplateMappingItemID' , 5 => 'WorkbenchRowID'  ) ;
   private $selectDistinctFieldsArray = array( 2 => 'RowNumber' , 4 => 'WorkbenchTemplateMappingItemID' , 5 => 'WorkbenchRowID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_workbenchdataitem(){
       $this->WorkbenchDataItemID = NULL;
       $this->CellData = '';
       $this->RowNumber = '';
       $this->ValidationStatus = '';
       $this->WorkbenchTemplateMappingItemID = '';
       $this->WorkbenchRowID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='WorkbenchDataItemID') { $returnvalue = $this->setWorkbenchDataItemID($value); } 
             if ($fieldname=='CellData') { $returnvalue = $this->setCellData($value); } 
             if ($fieldname=='RowNumber') { $returnvalue = $this->setRowNumber($value); } 
             if ($fieldname=='ValidationStatus') { $returnvalue = $this->setValidationStatus($value); } 
             if ($fieldname=='WorkbenchTemplateMappingItemID') { $returnvalue = $this->setWorkbenchTemplateMappingItemID($value); } 
             if ($fieldname=='WorkbenchRowID') { $returnvalue = $this->setWorkbenchRowID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='WorkbenchDataItemID') { $returnvalue = $this->getWorkbenchDataItemID(); } 
             if ($fieldname=='CellData') { $returnvalue = $this->getCellData(); } 
             if ($fieldname=='RowNumber') { $returnvalue = $this->getRowNumber(); } 
             if ($fieldname=='ValidationStatus') { $returnvalue = $this->getValidationStatus(); } 
             if ($fieldname=='WorkbenchTemplateMappingItemID') { $returnvalue = $this->getWorkbenchTemplateMappingItemID(); } 
             if ($fieldname=='WorkbenchRowID') { $returnvalue = $this->getWorkbenchRowID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*WorkbenchDataItemID*/
   public function getWorkbenchDataItemID() {
       if ($this->WorkbenchDataItemID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->WorkbenchDataItemID));
       }
   }
   public function setWorkbenchDataItemID($WorkbenchDataItemID) {
       if (strlen(preg_replace('/[^0-9]/','',$WorkbenchDataItemID)) > huh_workbenchdataitem::WORKBENCHDATAITEMID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $WorkbenchDataItemID = trim($WorkbenchDataItemID);
       if (!ctype_digit(strval($WorkbenchDataItemID)) && trim(strval($WorkbenchDataItemID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->WorkbenchDataItemID = $this->l_addslashes($WorkbenchDataItemID);
       $this->dirty = true;
   }
/*CellData*/
   public function getCellData() {
       if ($this->CellData==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CellData));
       }
   }
   public function setCellData($CellData) {
       if (strlen($CellData) > huh_workbenchdataitem::CELLDATA_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CellData = $this->l_addslashes($CellData);
       $this->dirty = true;
   }
/*RowNumber*/
   public function getRowNumber() {
       if ($this->RowNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RowNumber));
       }
   }
   public function setRowNumber($RowNumber) {
       if (strlen($RowNumber) > huh_workbenchdataitem::ROWNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->RowNumber = $this->l_addslashes($RowNumber);
       $this->dirty = true;
   }
/*ValidationStatus*/
   public function getValidationStatus() {
       if ($this->ValidationStatus==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ValidationStatus));
       }
   }
   public function setValidationStatus($ValidationStatus) {
       if (strlen($ValidationStatus) > huh_workbenchdataitem::VALIDATIONSTATUS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ValidationStatus = $this->l_addslashes($ValidationStatus);
       $this->dirty = true;
   }
/*WorkbenchTemplateMappingItemID*/
   public function getWorkbenchTemplateMappingItemID() {
       if ($this->WorkbenchTemplateMappingItemID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->WorkbenchTemplateMappingItemID));
       }
   }
   public function setWorkbenchTemplateMappingItemID($WorkbenchTemplateMappingItemID) {
       if (strlen(preg_replace('/[^0-9]/','',$WorkbenchTemplateMappingItemID)) > huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $WorkbenchTemplateMappingItemID = trim($WorkbenchTemplateMappingItemID);
       if (!ctype_digit(strval($WorkbenchTemplateMappingItemID))) {
             throw new Exception("Value must be an integer");
       }
       $this->WorkbenchTemplateMappingItemID = $this->l_addslashes($WorkbenchTemplateMappingItemID);
       $this->dirty = true;
   }
/*WorkbenchRowID*/
   public function getWorkbenchRowID() {
       if ($this->WorkbenchRowID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->WorkbenchRowID));
       }
   }
   public function setWorkbenchRowID($WorkbenchRowID) {
       if (strlen(preg_replace('/[^0-9]/','',$WorkbenchRowID)) > huh_workbenchdataitem::WORKBENCHROWID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $WorkbenchRowID = trim($WorkbenchRowID);
       if (!ctype_digit(strval($WorkbenchRowID))) {
             throw new Exception("Value must be an integer");
       }
       $this->WorkbenchRowID = $this->l_addslashes($WorkbenchRowID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getWorkbenchDataItemID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['WorkbenchDataItemID'] = $this->getWorkbenchDataItemID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_WorkbenchDataItemIDMYSQLI_TYPE = 'i';
  const C_CellDataMYSQLI_TYPE = 's';
  const C_RowNumberMYSQLI_TYPE = 'i';
  const C_ValidationStatusMYSQLI_TYPE = 'i';
  const C_WorkbenchTemplateMappingItemIDMYSQLI_TYPE = 'i';
  const C_WorkbenchRowIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='WorkbenchDataItemID') { $retval = self::C_WorkbenchDataItemIDMYSQLI_TYPE; }
      if ($aFieldname=='CellData') { $retval = self::C_CellDataMYSQLI_TYPE; }
      if ($aFieldname=='RowNumber') { $retval = self::C_RowNumberMYSQLI_TYPE; }
      if ($aFieldname=='ValidationStatus') { $retval = self::C_ValidationStatusMYSQLI_TYPE; }
      if ($aFieldname=='WorkbenchTemplateMappingItemID') { $retval = self::C_WorkbenchTemplateMappingItemIDMYSQLI_TYPE; }
      if ($aFieldname=='WorkbenchRowID') { $retval = self::C_WorkbenchRowIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setWorkbenchDataItemID($pk[WorkbenchDataItemID]);
             } else { ;
                 $this->setWorkbenchDataItemID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->WorkbenchDataItemID != NULL) {
           $sql = 'SELECT WorkbenchDataItemID, CellData, RowNumber, ValidationStatus, WorkbenchTemplateMappingItemID, WorkbenchRowID FROM workbenchdataitem WHERE WorkbenchDataItemID = '.$this->WorkbenchDataItemID ;

           $preparesql = 'SELECT WorkbenchDataItemID, CellData, RowNumber, ValidationStatus, WorkbenchTemplateMappingItemID, WorkbenchRowID FROM workbenchdataitem WHERE WorkbenchDataItemID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->WorkbenchDataItemID);
              $statement->execute();
              $statement->bind_result($this->WorkbenchDataItemID, $this->CellData, $this->RowNumber, $this->ValidationStatus, $this->WorkbenchTemplateMappingItemID, $this->WorkbenchRowID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->WorkbenchDataItemID!= NULL) {
            $sql  = 'UPDATE  workbenchdataitem SET ';
            $isInsert = false;
            $sql .=  "CellData = ? ";
            $sql .=  ", RowNumber = ? ";
            $sql .=  ", ValidationStatus = ? ";
            $sql .=  ", WorkbenchTemplateMappingItemID = ? ";
            $sql .=  ", WorkbenchRowID = ? ";

            $sql .= "  WHERE WorkbenchDataItemID = ? ";
        } else {
            $sql  = 'INSERT INTO workbenchdataitem ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( WorkbenchDataItemID ,  CellData ,  RowNumber ,  ValidationStatus ,  WorkbenchTemplateMappingItemID ,  WorkbenchRowID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->WorkbenchDataItemID!= NULL ) {
              $statement->bind_param("isiiiii", $this->WorkbenchDataItemID , $this->CellData , $this->RowNumber , $this->ValidationStatus , $this->WorkbenchTemplateMappingItemID , $this->WorkbenchRowID , $this->WorkbenchDataItemID );
           } else { 
              $statement->bind_param("isiiii", $this->WorkbenchDataItemID , $this->CellData , $this->RowNumber , $this->ValidationStatus , $this->WorkbenchTemplateMappingItemID , $this->WorkbenchRowID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->WorkbenchDataItemID != NULL) {
           $sql = 'SELECT WorkbenchDataItemID, CellData, RowNumber, ValidationStatus, WorkbenchTemplateMappingItemID, WorkbenchRowID FROM workbenchdataitem WHERE WorkbenchDataItemID = "'.$this->WorkbenchDataItemID.'"  ' ;

           $preparedsql = 'SELECT  FROM workbenchdataitem WHERE  and WorkbenchDataItemID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("isiiii", $this->WorkbenchDataItemID, $this->CellData, $this->RowNumber, $this->ValidationStatus, $this->WorkbenchTemplateMappingItemID, $this->WorkbenchRowID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM workbenchdataitem WHERE  and WorkbenchDataItemID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("isiiii", $this->WorkbenchDataItemID, $this->CellData, $this->RowNumber, $this->ValidationStatus, $this->WorkbenchTemplateMappingItemID, $this->WorkbenchRowID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->WorkbenchDataItemID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM workbenchdataitem';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT WorkbenchDataItemID FROM workbenchdataitem $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_workbenchdataitem();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: WorkbenchTemplateMappingItemID
      $t = new workbenchtemplatemappingitem();
      $t->load(getWorkbenchTemplateMappingItemID());
      $returnvalue[WorkbenchTemplateMappingItemID] = $t;
       // fk: WorkbenchRowID
      $t = new workbenchrow();
      $t->load(getWorkbenchRowID());
      $returnvalue[WorkbenchRowID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT WorkbenchDataItemID, concat(IFNULL(CellData,'') || ' ' || IFNULL(RowNumber,'') || ' ' || IFNULL(ValidationStatus,'') || ' ' || IFNULL(WorkbenchTemplateMappingItemID,'') || ' ' || IFNULL(WorkbenchRowID,'')) FROM workbenchdataitem order by RowNumber, WorkbenchTemplateMappingItemID, WorkbenchRowID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM workbenchdataitem order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByRowNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT WorkbenchDataItemID FROM workbenchdataitem WHERE RowNumber $operator '$searchTerm'";
        $preparedsql = "SELECT WorkbenchDataItemID FROM workbenchdataitem WHERE RowNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_workbenchdataitem();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByWorkbenchTemplateMappingItemID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT WorkbenchDataItemID FROM workbenchdataitem WHERE WorkbenchTemplateMappingItemID $operator '$searchTerm'";
        $preparedsql = "SELECT WorkbenchDataItemID FROM workbenchdataitem WHERE WorkbenchTemplateMappingItemID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_workbenchdataitem();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByWorkbenchRowID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT WorkbenchDataItemID FROM workbenchdataitem WHERE WorkbenchRowID $operator '$searchTerm'";
        $preparedsql = "SELECT WorkbenchDataItemID FROM workbenchdataitem WHERE WorkbenchRowID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_workbenchdataitem();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctRowNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' RowNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, RowNumber FROM workbenchdataitem group by RowNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&RowNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctWorkbenchTemplateMappingItemID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' WorkbenchTemplateMappingItemID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, WorkbenchTemplateMappingItemID FROM workbenchdataitem group by WorkbenchTemplateMappingItemID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&WorkbenchTemplateMappingItemID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctWorkbenchRowID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' WorkbenchRowID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, WorkbenchRowID FROM workbenchdataitem group by WorkbenchRowID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&WorkbenchRowID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'RowNumber':
             $returnvalue = $this->selectDistinctRowNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'WorkbenchTemplateMappingItemID':
             $returnvalue = $this->selectDistinctWorkbenchTemplateMappingItemID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'WorkbenchRowID':
             $returnvalue = $this->selectDistinctWorkbenchRowID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the workbenchdataitem.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_workbenchdataitemView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_workbenchdataitem <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_workbenchdataitem::WORKBENCHDATAITEMID.": ".$model->getWorkbenchDataItemID()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchdataitem::CELLDATA.": ".$model->getCellData()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchdataitem::ROWNUMBER.": ".$model->getRowNumber()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchdataitem::VALIDATIONSTATUS.": ".$model->getValidationStatus()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID.": ".$model->getWorkbenchTemplateMappingItemID()."</li>\n";
       $returnvalue .= "<li>".huh_workbenchdataitem::WORKBENCHROWID.": ".$model->getWorkbenchRowID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>workbenchtemplatemappingitem</li>";
           $t_workbenchtemplatemappingitem = new huh_workbenchtemplatemappingitem();
           $t_workbenchtemplatemappingitemView = new huh_workbenchtemplatemappingitemView();
           $t_workbenchtemplatemappingitemView->setModel($t_workbenchtemplatemappingitem);
           if ($model->getWorkbenchTemplateMappingItemID() != '') { 
               $t_workbenchtemplatemappingitem->load($model->getWorkbenchTemplateMappingItemID());
               $returnvalue .= $t_workbenchtemplatemappingitemView->getDetailsView(false);
           }
           $returnvalue .= "<li>workbenchrow</li>";
           $t_workbenchrow = new huh_workbenchrow();
           $t_workbenchrowView = new huh_workbenchrowView();
           $t_workbenchrowView->setModel($t_workbenchrow);
           if ($model->getWorkbenchRowID() != '') { 
               $t_workbenchrow->load($model->getWorkbenchRowID());
               $returnvalue .= $t_workbenchrowView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_workbenchdataitem::WORKBENCHDATAITEMID.': "'.$model->getWorkbenchDataItemID().'",';
       $returnvalue .= '"'.huh_workbenchdataitem::CELLDATA.': "'.$model->getCellData().'",';
       $returnvalue .= '"'.huh_workbenchdataitem::ROWNUMBER.': "'.$model->getRowNumber().'",';
       $returnvalue .= '"'.huh_workbenchdataitem::VALIDATIONSTATUS.': "'.$model->getValidationStatus().'",';
       $returnvalue .= '"'.huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID.': "'.$model->getWorkbenchTemplateMappingItemID().'",';
       $returnvalue .= '"'.huh_workbenchdataitem::WORKBENCHROWID.': "'.$model->getWorkbenchRowID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getWorkbenchDataItemID()."</td>\n";
       $returnvalue .= "<td>".$model->getCellData()."</td>\n";
       $returnvalue .= "<td>".$model->getRowNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getValidationStatus()."</td>\n";
       $returnvalue .= "<td>".$model->getWorkbenchTemplateMappingItemID()."</td>\n";
       $returnvalue .= "<td>".$model->getWorkbenchRowID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_workbenchdataitem::WORKBENCHDATAITEMID."</th>\n";
       $returnvalue .= "<th>".huh_workbenchdataitem::CELLDATA."</th>\n";
       $returnvalue .= "<th>".huh_workbenchdataitem::ROWNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_workbenchdataitem::VALIDATIONSTATUS."</th>\n";
       $returnvalue .= "<th>".huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID."</th>\n";
       $returnvalue .= "<th>".huh_workbenchdataitem::WORKBENCHROWID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_workbenchdataitem">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new WorkbenchDataItemID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_workbenchdataitem::WORKBENCHDATAITEMID.">WORKBENCHDATAITEMID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_workbenchdataitem::WORKBENCHDATAITEMID." id=".huh_workbenchdataitem::WORKBENCHDATAITEMID." value='".$model->getWorkbenchDataItemID()."'  style=' width:".huh_workbenchdataitem::WORKBENCHDATAITEMID_SIZE ."em;  '  maxlength='".huh_workbenchdataitem::WORKBENCHDATAITEMID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_workbenchdataitem::CELLDATA.">CELLDATA</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_workbenchdataitem::CELLDATA." id=".huh_workbenchdataitem::CELLDATA." >".$model->getCellData()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchdataitem::ROWNUMBER.">ROWNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchdataitem::ROWNUMBER." id=".huh_workbenchdataitem::ROWNUMBER." value='".$model->getRowNumber()."'  style=' width:".huh_workbenchdataitem::ROWNUMBER_SIZE ."em;  '  maxlength='".huh_workbenchdataitem::ROWNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchdataitem::VALIDATIONSTATUS.">VALIDATIONSTATUS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_workbenchdataitem::VALIDATIONSTATUS." id=".huh_workbenchdataitem::VALIDATIONSTATUS." value='".$model->getValidationStatus()."'  style=' width:".huh_workbenchdataitem::VALIDATIONSTATUS_SIZE ."em;  '  maxlength='".huh_workbenchdataitem::VALIDATIONSTATUS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID.">WORKBENCHTEMPLATEMAPPINGITEMID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID." id=".huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID." value='".$model->getWorkbenchTemplateMappingItemID()."'  style=' width:".huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID_SIZE ."em;  '  maxlength='".huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_workbenchdataitem::WORKBENCHROWID.">WORKBENCHROWID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_workbenchdataitem::WORKBENCHROWID." id=".huh_workbenchdataitem::WORKBENCHROWID." value='".$model->getWorkbenchRowID()."'  style=' width:".huh_workbenchdataitem::WORKBENCHROWID_SIZE ."em;  '  maxlength='".huh_workbenchdataitem::WORKBENCHROWID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_workbenchdataitem">';
       $returnvalue .= '<input type=hidden name=WorkbenchDataItemID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_workbenchdataitem">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>WORKBENCHDATAITEMID<input type=text name=".huh_workbenchdataitem::WORKBENCHDATAITEMID." id=".huh_workbenchdataitem::WORKBENCHDATAITEMID." value='".$model->getWorkbenchDataItemID()."'  size='".huh_workbenchdataitem::WORKBENCHDATAITEMID_SIZE ."'  maxlength='".huh_workbenchdataitem::WORKBENCHDATAITEMID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CELLDATA<input type=text name=".huh_workbenchdataitem::CELLDATA." id=".huh_workbenchdataitem::CELLDATA." value='".$model->getCellData()."'  size='51'  maxlength='".huh_workbenchdataitem::CELLDATA_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ROWNUMBER<input type=text name=".huh_workbenchdataitem::ROWNUMBER." id=".huh_workbenchdataitem::ROWNUMBER." value='".$model->getRowNumber()."'  size='".huh_workbenchdataitem::ROWNUMBER_SIZE ."'  maxlength='".huh_workbenchdataitem::ROWNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VALIDATIONSTATUS<input type=text name=".huh_workbenchdataitem::VALIDATIONSTATUS." id=".huh_workbenchdataitem::VALIDATIONSTATUS." value='".$model->getValidationStatus()."'  size='".huh_workbenchdataitem::VALIDATIONSTATUS_SIZE ."'  maxlength='".huh_workbenchdataitem::VALIDATIONSTATUS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>WORKBENCHTEMPLATEMAPPINGITEMID<input type=text name=".huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID." id=".huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID." value='".$model->getWorkbenchTemplateMappingItemID()."'  size='".huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID_SIZE ."'  maxlength='".huh_workbenchdataitem::WORKBENCHTEMPLATEMAPPINGITEMID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>WORKBENCHROWID<input type=text name=".huh_workbenchdataitem::WORKBENCHROWID." id=".huh_workbenchdataitem::WORKBENCHROWID." value='".$model->getWorkbenchRowID()."'  size='".huh_workbenchdataitem::WORKBENCHROWID_SIZE ."'  maxlength='".huh_workbenchdataitem::WORKBENCHROWID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
