<?php
//==============================================================================
//===   dnasequence.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_dnasequence implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const DNASEQUENCEID_SIZE   = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const COLLECTIONMEMBERID_SIZE = 11; //INTEGER
   const AMBIGUOUSRESIDUES_SIZE = 11; //INTEGER
   const BOLDBARCODEID_SIZE   = 32; //32
   const BOLDLASTUPDATEDATE_SIZE = 12; //DATE
   const BOLDSAMPLEID_SIZE    = 32; //32
   const BOLDTRANSLATIONMATRIX_SIZE = 64; //64
   const COMPA_SIZE           = 11; //INTEGER
   const COMPC_SIZE           = 11; //INTEGER
   const COMPG_SIZE           = 11; //INTEGER
   const COMPT_SIZE           = 11; //INTEGER
   const GENBANKACCESSIONNUMBER_SIZE = 32; //32
   const GENESEQUENCE_SIZE    = 255; //LONGVARCHAR
   const MOLECULETYPE_SIZE    = 32; //32
   const NUMBER1_SIZE         = 20; //REAL
   const NUMBER2_SIZE         = 20; //REAL
   const NUMBER3_SIZE         = 20; //REAL
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const TARGETMARKER_SIZE    = 32; //32
   const TEXT1_SIZE           = 32; //32
   const TEXT2_SIZE           = 32; //32
   const TEXT3_SIZE           = 64; //64
   const TOTALRESIDUES_SIZE   = 11; //INTEGER
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const YESNO3_SIZE          = 1; //1
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const AGENTID_SIZE         = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const COLLECTIONOBJECTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const DNASEQUENCEID     = 'DnaSequenceID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const COLLECTIONMEMBERID = 'CollectionMemberID';
   const AMBIGUOUSRESIDUES = 'AmbiguousResidues';
   const BOLDBARCODEID     = 'BOLDBarcodeID';
   const BOLDLASTUPDATEDATE = 'BOLDLastUpdateDate';
   const BOLDSAMPLEID      = 'BOLDSampleID';
   const BOLDTRANSLATIONMATRIX = 'BOLDTranslationMatrix';
   const COMPA             = 'CompA';
   const COMPC             = 'CompC';
   const COMPG             = 'CompG';
   const COMPT             = 'compT';
   const GENBANKACCESSIONNUMBER = 'GenBankAccessionNumber';
   const GENESEQUENCE      = 'GeneSequence';
   const MOLECULETYPE      = 'MoleculeType';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const NUMBER3           = 'Number3';
   const REMARKS           = 'Remarks';
   const TARGETMARKER      = 'TargetMarker';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const TEXT3             = 'Text3';
   const TOTALRESIDUES     = 'TotalResidues';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const YESNO3            = 'YesNo3';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const AGENTID           = 'AgentID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const COLLECTIONOBJECTID = 'CollectionObjectID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $DnaSequenceID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DnaSequenceID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $CollectionMemberID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionMemberID']), 0, 11);
  $AmbiguousResidues = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AmbiguousResidues']), 0, 11);
  $BOLDBarcodeID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['BOLDBarcodeID']), 0, 32);
  $BOLDLastUpdateDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['BOLDLastUpdateDate']), 0, 12);
  $BOLDSampleID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['BOLDSampleID']), 0, 32);
  $BOLDTranslationMatrix = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['BOLDTranslationMatrix']), 0, 64);
  $CompA = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CompA']), 0, 11);
  $CompC = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CompC']), 0, 11);
  $CompG = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CompG']), 0, 11);
  $compT = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['compT']), 0, 11);
  $GenBankAccessionNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GenBankAccessionNumber']), 0, 32);
  $GeneSequence = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GeneSequence']), 0, 255);
  $MoleculeType = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['MoleculeType']), 0, 32);
  $Number1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number1']), 0, 20);
  $Number2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number2']), 0, 20);
  $Number3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number3']), 0, 20);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $TargetMarker = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TargetMarker']), 0, 32);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 32);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 32);
  $Text3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text3']), 0, 64);
  $TotalResidues = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['TotalResidues']), 0, 11);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $YesNo3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo3']), 0, 1);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $AgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AgentID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $CollectionObjectID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionObjectID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $DnaSequenceID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $CollectionMemberID; // INTEGER 
   private $AmbiguousResidues; // INTEGER 
   private $BOLDBarcodeID; // VARCHAR(32) 
   private $BOLDLastUpdateDate; // DATE 
   private $BOLDSampleID; // VARCHAR(32) 
   private $BOLDTranslationMatrix; // VARCHAR(64) 
   private $CompA; // INTEGER 
   private $CompC; // INTEGER 
   private $CompG; // INTEGER 
   private $compT; // INTEGER 
   private $GenBankAccessionNumber; // VARCHAR(32) 
   private $GeneSequence; // LONGVARCHAR 
   private $MoleculeType; // VARCHAR(32) 
   private $Number1; // REAL 
   private $Number2; // REAL 
   private $Number3; // REAL 
   private $Remarks; // LONGVARCHAR 
   private $TargetMarker; // VARCHAR(32) 
   private $Text1; // VARCHAR(32) 
   private $Text2; // VARCHAR(32) 
   private $Text3; // VARCHAR(64) 
   private $TotalResidues; // INTEGER 
   private $YesNo1; // BIT(1) 
   private $YesNo2; // BIT(1) 
   private $YesNo3; // BIT(1) 
   private $CreatedByAgentID; // INTEGER 
   private $AgentID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $CollectionObjectID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' DnaSequenceID, TimestampCreated, TimestampModified, Version, CollectionMemberID, AmbiguousResidues, BOLDBarcodeID, BOLDLastUpdateDate, BOLDSampleID, BOLDTranslationMatrix, CompA, CompC, CompG, compT, GenBankAccessionNumber, GeneSequence, MoleculeType, Number1, Number2, Number3, Remarks, TargetMarker, Text1, Text2, Text3, TotalResidues, YesNo1, YesNo2, YesNo3, CreatedByAgentID, AgentID, ModifiedByAgentID, CollectionObjectID, ';
   const PKFIELDLIST = ' DnaSequenceID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'DnaSequenceID'  ) ;
   private $allFieldsArray = array( 0 => 'DnaSequenceID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'CollectionMemberID' , 5 => 'AmbiguousResidues' , 6 => 'BOLDBarcodeID' , 7 => 'BOLDLastUpdateDate' , 8 => 'BOLDSampleID' , 9 => 'BOLDTranslationMatrix' , 10 => 'CompA' , 11 => 'CompC' , 12 => 'CompG' , 13 => 'compT' , 14 => 'GenBankAccessionNumber' , 15 => 'GeneSequence' , 16 => 'MoleculeType' , 17 => 'Number1' , 18 => 'Number2' , 19 => 'Number3' , 20 => 'Remarks' , 21 => 'TargetMarker' , 22 => 'Text1' , 23 => 'Text2' , 24 => 'Text3' , 25 => 'TotalResidues' , 26 => 'YesNo1' , 27 => 'YesNo2' , 28 => 'YesNo3' , 29 => 'CreatedByAgentID' , 30 => 'AgentID' , 31 => 'ModifiedByAgentID' , 32 => 'CollectionObjectID'  ) ;
   private $selectDistinctFieldsArray = array( 6 => 'BOLDBarcodeID' , 8 => 'BOLDSampleID' , 14 => 'GenBankAccessionNumber' , 29 => 'CreatedByAgentID' , 30 => 'AgentID' , 31 => 'ModifiedByAgentID' , 32 => 'CollectionObjectID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_dnasequence(){
       $this->DnaSequenceID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->CollectionMemberID = '';
       $this->AmbiguousResidues = '';
       $this->BOLDBarcodeID = '';
       $this->BOLDLastUpdateDate = '';
       $this->BOLDSampleID = '';
       $this->BOLDTranslationMatrix = '';
       $this->CompA = '';
       $this->CompC = '';
       $this->CompG = '';
       $this->compT = '';
       $this->GenBankAccessionNumber = '';
       $this->GeneSequence = '';
       $this->MoleculeType = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->Number3 = '';
       $this->Remarks = '';
       $this->TargetMarker = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->Text3 = '';
       $this->TotalResidues = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->YesNo3 = '';
       $this->CreatedByAgentID = '';
       $this->AgentID = '';
       $this->ModifiedByAgentID = '';
       $this->CollectionObjectID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='DnaSequenceID') { $returnvalue = $this->setDnaSequenceID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->setCollectionMemberID($value); } 
             if ($fieldname=='AmbiguousResidues') { $returnvalue = $this->setAmbiguousResidues($value); } 
             if ($fieldname=='BOLDBarcodeID') { $returnvalue = $this->setBOLDBarcodeID($value); } 
             if ($fieldname=='BOLDLastUpdateDate') { $returnvalue = $this->setBOLDLastUpdateDate($value); } 
             if ($fieldname=='BOLDSampleID') { $returnvalue = $this->setBOLDSampleID($value); } 
             if ($fieldname=='BOLDTranslationMatrix') { $returnvalue = $this->setBOLDTranslationMatrix($value); } 
             if ($fieldname=='CompA') { $returnvalue = $this->setCompA($value); } 
             if ($fieldname=='CompC') { $returnvalue = $this->setCompC($value); } 
             if ($fieldname=='CompG') { $returnvalue = $this->setCompG($value); } 
             if ($fieldname=='compT') { $returnvalue = $this->setcompT($value); } 
             if ($fieldname=='GenBankAccessionNumber') { $returnvalue = $this->setGenBankAccessionNumber($value); } 
             if ($fieldname=='GeneSequence') { $returnvalue = $this->setGeneSequence($value); } 
             if ($fieldname=='MoleculeType') { $returnvalue = $this->setMoleculeType($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='Number3') { $returnvalue = $this->setNumber3($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='TargetMarker') { $returnvalue = $this->setTargetMarker($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='Text3') { $returnvalue = $this->setText3($value); } 
             if ($fieldname=='TotalResidues') { $returnvalue = $this->setTotalResidues($value); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); } 
             if ($fieldname=='YesNo3') { $returnvalue = $this->setYesNo3($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='AgentID') { $returnvalue = $this->setAgentID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='CollectionObjectID') { $returnvalue = $this->setCollectionObjectID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='DnaSequenceID') { $returnvalue = $this->getDnaSequenceID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->getCollectionMemberID(); } 
             if ($fieldname=='AmbiguousResidues') { $returnvalue = $this->getAmbiguousResidues(); } 
             if ($fieldname=='BOLDBarcodeID') { $returnvalue = $this->getBOLDBarcodeID(); } 
             if ($fieldname=='BOLDLastUpdateDate') { $returnvalue = $this->getBOLDLastUpdateDate(); } 
             if ($fieldname=='BOLDSampleID') { $returnvalue = $this->getBOLDSampleID(); } 
             if ($fieldname=='BOLDTranslationMatrix') { $returnvalue = $this->getBOLDTranslationMatrix(); } 
             if ($fieldname=='CompA') { $returnvalue = $this->getCompA(); } 
             if ($fieldname=='CompC') { $returnvalue = $this->getCompC(); } 
             if ($fieldname=='CompG') { $returnvalue = $this->getCompG(); } 
             if ($fieldname=='compT') { $returnvalue = $this->getcompT(); } 
             if ($fieldname=='GenBankAccessionNumber') { $returnvalue = $this->getGenBankAccessionNumber(); } 
             if ($fieldname=='GeneSequence') { $returnvalue = $this->getGeneSequence(); } 
             if ($fieldname=='MoleculeType') { $returnvalue = $this->getMoleculeType(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='Number3') { $returnvalue = $this->getNumber3(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='TargetMarker') { $returnvalue = $this->getTargetMarker(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='Text3') { $returnvalue = $this->getText3(); } 
             if ($fieldname=='TotalResidues') { $returnvalue = $this->getTotalResidues(); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); } 
             if ($fieldname=='YesNo3') { $returnvalue = $this->getYesNo3(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='AgentID') { $returnvalue = $this->getAgentID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='CollectionObjectID') { $returnvalue = $this->getCollectionObjectID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*DnaSequenceID*/
   public function getDnaSequenceID() {
       if ($this->DnaSequenceID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DnaSequenceID));
       }
   }
   public function setDnaSequenceID($DnaSequenceID) {
       if (strlen(preg_replace('/[^0-9]/','',$DnaSequenceID)) > huh_dnasequence::DNASEQUENCEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DnaSequenceID = trim($DnaSequenceID);
       if (!ctype_digit(strval($DnaSequenceID)) && trim(strval($DnaSequenceID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->DnaSequenceID = $this->l_addslashes($DnaSequenceID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_dnasequence::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_dnasequence::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_dnasequence::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*CollectionMemberID*/
   public function getCollectionMemberID() {
       if ($this->CollectionMemberID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionMemberID));
       }
   }
   public function setCollectionMemberID($CollectionMemberID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionMemberID)) > huh_dnasequence::COLLECTIONMEMBERID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectionMemberID = trim($CollectionMemberID);
       if (!ctype_digit(strval($CollectionMemberID))) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionMemberID = $this->l_addslashes($CollectionMemberID);
       $this->dirty = true;
   }
/*AmbiguousResidues*/
   public function getAmbiguousResidues() {
       if ($this->AmbiguousResidues==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AmbiguousResidues));
       }
   }
   public function setAmbiguousResidues($AmbiguousResidues) {
       if (strlen(preg_replace('/[^0-9]/','',$AmbiguousResidues)) > huh_dnasequence::AMBIGUOUSRESIDUES_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AmbiguousResidues = trim($AmbiguousResidues);
       if (!ctype_digit(strval($AmbiguousResidues)) && trim(strval($AmbiguousResidues))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AmbiguousResidues = $this->l_addslashes($AmbiguousResidues);
       $this->dirty = true;
   }
/*BOLDBarcodeID*/
   public function getBOLDBarcodeID() {
       if ($this->BOLDBarcodeID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->BOLDBarcodeID));
       }
   }
   public function setBOLDBarcodeID($BOLDBarcodeID) {
       if (strlen($BOLDBarcodeID) > huh_dnasequence::BOLDBARCODEID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->BOLDBarcodeID = $this->l_addslashes($BOLDBarcodeID);
       $this->dirty = true;
   }
/*BOLDLastUpdateDate*/
   public function getBOLDLastUpdateDate() {
       if ($this->BOLDLastUpdateDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->BOLDLastUpdateDate));
       }
   }
   public function setBOLDLastUpdateDate($BOLDLastUpdateDate) {
       if (strlen($BOLDLastUpdateDate) > huh_dnasequence::BOLDLASTUPDATEDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->BOLDLastUpdateDate = $this->l_addslashes($BOLDLastUpdateDate);
       $this->dirty = true;
   }
/*BOLDSampleID*/
   public function getBOLDSampleID() {
       if ($this->BOLDSampleID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->BOLDSampleID));
       }
   }
   public function setBOLDSampleID($BOLDSampleID) {
       if (strlen($BOLDSampleID) > huh_dnasequence::BOLDSAMPLEID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->BOLDSampleID = $this->l_addslashes($BOLDSampleID);
       $this->dirty = true;
   }
/*BOLDTranslationMatrix*/
   public function getBOLDTranslationMatrix() {
       if ($this->BOLDTranslationMatrix==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->BOLDTranslationMatrix));
       }
   }
   public function setBOLDTranslationMatrix($BOLDTranslationMatrix) {
       if (strlen($BOLDTranslationMatrix) > huh_dnasequence::BOLDTRANSLATIONMATRIX_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->BOLDTranslationMatrix = $this->l_addslashes($BOLDTranslationMatrix);
       $this->dirty = true;
   }
/*CompA*/
   public function getCompA() {
       if ($this->CompA==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CompA));
       }
   }
   public function setCompA($CompA) {
       if (strlen(preg_replace('/[^0-9]/','',$CompA)) > huh_dnasequence::COMPA_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CompA = trim($CompA);
       if (!ctype_digit(strval($CompA)) && trim(strval($CompA))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CompA = $this->l_addslashes($CompA);
       $this->dirty = true;
   }
/*CompC*/
   public function getCompC() {
       if ($this->CompC==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CompC));
       }
   }
   public function setCompC($CompC) {
       if (strlen(preg_replace('/[^0-9]/','',$CompC)) > huh_dnasequence::COMPC_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CompC = trim($CompC);
       if (!ctype_digit(strval($CompC)) && trim(strval($CompC))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CompC = $this->l_addslashes($CompC);
       $this->dirty = true;
   }
/*CompG*/
   public function getCompG() {
       if ($this->CompG==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CompG));
       }
   }
   public function setCompG($CompG) {
       if (strlen(preg_replace('/[^0-9]/','',$CompG)) > huh_dnasequence::COMPG_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CompG = trim($CompG);
       if (!ctype_digit(strval($CompG)) && trim(strval($CompG))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CompG = $this->l_addslashes($CompG);
       $this->dirty = true;
   }
/*compT*/
   public function getcompT() {
       if ($this->compT==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->compT));
       }
   }
   public function setcompT($compT) {
       if (strlen(preg_replace('/[^0-9]/','',$compT)) > huh_dnasequence::COMPT_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $compT = trim($compT);
       if (!ctype_digit(strval($compT)) && trim(strval($compT))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->compT = $this->l_addslashes($compT);
       $this->dirty = true;
   }
/*GenBankAccessionNumber*/
   public function getGenBankAccessionNumber() {
       if ($this->GenBankAccessionNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GenBankAccessionNumber));
       }
   }
   public function setGenBankAccessionNumber($GenBankAccessionNumber) {
       if (strlen($GenBankAccessionNumber) > huh_dnasequence::GENBANKACCESSIONNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GenBankAccessionNumber = $this->l_addslashes($GenBankAccessionNumber);
       $this->dirty = true;
   }
/*GeneSequence*/
   public function getGeneSequence() {
       if ($this->GeneSequence==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeneSequence));
       }
   }
   public function setGeneSequence($GeneSequence) {
       if (strlen($GeneSequence) > huh_dnasequence::GENESEQUENCE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GeneSequence = $this->l_addslashes($GeneSequence);
       $this->dirty = true;
   }
/*MoleculeType*/
   public function getMoleculeType() {
       if ($this->MoleculeType==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->MoleculeType));
       }
   }
   public function setMoleculeType($MoleculeType) {
       if (strlen($MoleculeType) > huh_dnasequence::MOLECULETYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->MoleculeType = $this->l_addslashes($MoleculeType);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen($Number1) > huh_dnasequence::NUMBER1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen($Number2) > huh_dnasequence::NUMBER2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*Number3*/
   public function getNumber3() {
       if ($this->Number3==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number3));
       }
   }
   public function setNumber3($Number3) {
       if (strlen($Number3) > huh_dnasequence::NUMBER3_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number3 = $this->l_addslashes($Number3);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_dnasequence::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*TargetMarker*/
   public function getTargetMarker() {
       if ($this->TargetMarker==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TargetMarker));
       }
   }
   public function setTargetMarker($TargetMarker) {
       if (strlen($TargetMarker) > huh_dnasequence::TARGETMARKER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TargetMarker = $this->l_addslashes($TargetMarker);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_dnasequence::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_dnasequence::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*Text3*/
   public function getText3() {
       if ($this->Text3==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text3));
       }
   }
   public function setText3($Text3) {
       if (strlen($Text3) > huh_dnasequence::TEXT3_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text3 = $this->l_addslashes($Text3);
       $this->dirty = true;
   }
/*TotalResidues*/
   public function getTotalResidues() {
       if ($this->TotalResidues==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TotalResidues));
       }
   }
   public function setTotalResidues($TotalResidues) {
       if (strlen(preg_replace('/[^0-9]/','',$TotalResidues)) > huh_dnasequence::TOTALRESIDUES_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $TotalResidues = trim($TotalResidues);
       if (!ctype_digit(strval($TotalResidues)) && trim(strval($TotalResidues))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->TotalResidues = $this->l_addslashes($TotalResidues);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_dnasequence::YESNO1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_dnasequence::YESNO2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*YesNo3*/
   public function getYesNo3() {
       if ($this->YesNo3==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo3));
       }
   }
   public function setYesNo3($YesNo3) {
       if (strlen($YesNo3) > huh_dnasequence::YESNO3_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo3 = $this->l_addslashes($YesNo3);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_dnasequence::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*AgentID*/
   public function getAgentID() {
       if ($this->AgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AgentID));
       }
   }
   public function setAgentID($AgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$AgentID)) > huh_dnasequence::AGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AgentID = trim($AgentID);
       if (!ctype_digit(strval($AgentID)) && trim(strval($AgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AgentID = $this->l_addslashes($AgentID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_dnasequence::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*CollectionObjectID*/
   public function getCollectionObjectID() {
       if ($this->CollectionObjectID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionObjectID));
       }
   }
   public function setCollectionObjectID($CollectionObjectID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionObjectID)) > huh_dnasequence::COLLECTIONOBJECTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectionObjectID = trim($CollectionObjectID);
       if (!ctype_digit(strval($CollectionObjectID)) && trim(strval($CollectionObjectID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionObjectID = $this->l_addslashes($CollectionObjectID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getDnaSequenceID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['DnaSequenceID'] = $this->getDnaSequenceID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_DnaSequenceIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_CollectionMemberIDMYSQLI_TYPE = 'i';
  const C_AmbiguousResiduesMYSQLI_TYPE = 'i';
  const C_BOLDBarcodeIDMYSQLI_TYPE = 's';
  const C_BOLDLastUpdateDateMYSQLI_TYPE = 's';
  const C_BOLDSampleIDMYSQLI_TYPE = 's';
  const C_BOLDTranslationMatrixMYSQLI_TYPE = 's';
  const C_CompAMYSQLI_TYPE = 'i';
  const C_CompCMYSQLI_TYPE = 'i';
  const C_CompGMYSQLI_TYPE = 'i';
  const C_compTMYSQLI_TYPE = 'i';
  const C_GenBankAccessionNumberMYSQLI_TYPE = 's';
  const C_GeneSequenceMYSQLI_TYPE = 's';
  const C_MoleculeTypeMYSQLI_TYPE = 's';
  const C_Number1MYSQLI_TYPE = 's';
  const C_Number2MYSQLI_TYPE = 's';
  const C_Number3MYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_TargetMarkerMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_Text3MYSQLI_TYPE = 's';
  const C_TotalResiduesMYSQLI_TYPE = 'i';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_YesNo3MYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_AgentIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_CollectionObjectIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='DnaSequenceID') { $retval = self::C_DnaSequenceIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='CollectionMemberID') { $retval = self::C_CollectionMemberIDMYSQLI_TYPE; }
      if ($aFieldname=='AmbiguousResidues') { $retval = self::C_AmbiguousResiduesMYSQLI_TYPE; }
      if ($aFieldname=='BOLDBarcodeID') { $retval = self::C_BOLDBarcodeIDMYSQLI_TYPE; }
      if ($aFieldname=='BOLDLastUpdateDate') { $retval = self::C_BOLDLastUpdateDateMYSQLI_TYPE; }
      if ($aFieldname=='BOLDSampleID') { $retval = self::C_BOLDSampleIDMYSQLI_TYPE; }
      if ($aFieldname=='BOLDTranslationMatrix') { $retval = self::C_BOLDTranslationMatrixMYSQLI_TYPE; }
      if ($aFieldname=='CompA') { $retval = self::C_CompAMYSQLI_TYPE; }
      if ($aFieldname=='CompC') { $retval = self::C_CompCMYSQLI_TYPE; }
      if ($aFieldname=='CompG') { $retval = self::C_CompGMYSQLI_TYPE; }
      if ($aFieldname=='compT') { $retval = self::C_compTMYSQLI_TYPE; }
      if ($aFieldname=='GenBankAccessionNumber') { $retval = self::C_GenBankAccessionNumberMYSQLI_TYPE; }
      if ($aFieldname=='GeneSequence') { $retval = self::C_GeneSequenceMYSQLI_TYPE; }
      if ($aFieldname=='MoleculeType') { $retval = self::C_MoleculeTypeMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='Number3') { $retval = self::C_Number3MYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='TargetMarker') { $retval = self::C_TargetMarkerMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='Text3') { $retval = self::C_Text3MYSQLI_TYPE; }
      if ($aFieldname=='TotalResidues') { $retval = self::C_TotalResiduesMYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='YesNo3') { $retval = self::C_YesNo3MYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='AgentID') { $retval = self::C_AgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='CollectionObjectID') { $retval = self::C_CollectionObjectIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setDnaSequenceID($pk[DnaSequenceID]);
             } else { ;
                 $this->setDnaSequenceID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->DnaSequenceID != NULL) {
           $sql = 'SELECT DnaSequenceID, TimestampCreated, TimestampModified, Version, CollectionMemberID, AmbiguousResidues, BOLDBarcodeID, BOLDLastUpdateDate, BOLDSampleID, BOLDTranslationMatrix, CompA, CompC, CompG, compT, GenBankAccessionNumber, GeneSequence, MoleculeType, Number1, Number2, Number3, Remarks, TargetMarker, Text1, Text2, Text3, TotalResidues, YesNo1, YesNo2, YesNo3, CreatedByAgentID, AgentID, ModifiedByAgentID, CollectionObjectID FROM dnasequence WHERE DnaSequenceID = '.$this->DnaSequenceID ;

           $preparesql = 'SELECT DnaSequenceID, TimestampCreated, TimestampModified, Version, CollectionMemberID, AmbiguousResidues, BOLDBarcodeID, BOLDLastUpdateDate, BOLDSampleID, BOLDTranslationMatrix, CompA, CompC, CompG, compT, GenBankAccessionNumber, GeneSequence, MoleculeType, Number1, Number2, Number3, Remarks, TargetMarker, Text1, Text2, Text3, TotalResidues, YesNo1, YesNo2, YesNo3, CreatedByAgentID, AgentID, ModifiedByAgentID, CollectionObjectID FROM dnasequence WHERE DnaSequenceID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->DnaSequenceID);
              $statement->execute();
              $statement->bind_result($this->DnaSequenceID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->AmbiguousResidues, $this->BOLDBarcodeID, $this->BOLDLastUpdateDate, $this->BOLDSampleID, $this->BOLDTranslationMatrix, $this->CompA, $this->CompC, $this->CompG, $this->compT, $this->GenBankAccessionNumber, $this->GeneSequence, $this->MoleculeType, $this->Number1, $this->Number2, $this->Number3, $this->Remarks, $this->TargetMarker, $this->Text1, $this->Text2, $this->Text3, $this->TotalResidues, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->CreatedByAgentID, $this->AgentID, $this->ModifiedByAgentID, $this->CollectionObjectID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->DnaSequenceID!= NULL) {
            $sql  = 'UPDATE  dnasequence SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", CollectionMemberID = ? ";
            $sql .=  ", AmbiguousResidues = ? ";
            $sql .=  ", BOLDBarcodeID = ? ";
            $sql .=  ", BOLDLastUpdateDate = ? ";
            $sql .=  ", BOLDSampleID = ? ";
            $sql .=  ", BOLDTranslationMatrix = ? ";
            $sql .=  ", CompA = ? ";
            $sql .=  ", CompC = ? ";
            $sql .=  ", CompG = ? ";
            $sql .=  ", compT = ? ";
            $sql .=  ", GenBankAccessionNumber = ? ";
            $sql .=  ", GeneSequence = ? ";
            $sql .=  ", MoleculeType = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", Number3 = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", TargetMarker = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", Text3 = ? ";
            $sql .=  ", TotalResidues = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", YesNo3 = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", AgentID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", CollectionObjectID = ? ";

            $sql .= "  WHERE DnaSequenceID = ? ";
        } else {
            $sql  = 'INSERT INTO dnasequence ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( DnaSequenceID ,  TimestampCreated ,  TimestampModified ,  Version ,  CollectionMemberID ,  AmbiguousResidues ,  BOLDBarcodeID ,  BOLDLastUpdateDate ,  BOLDSampleID ,  BOLDTranslationMatrix ,  CompA ,  CompC ,  CompG ,  compT ,  GenBankAccessionNumber ,  GeneSequence ,  MoleculeType ,  Number1 ,  Number2 ,  Number3 ,  Remarks ,  TargetMarker ,  Text1 ,  Text2 ,  Text3 ,  TotalResidues ,  YesNo1 ,  YesNo2 ,  YesNo3 ,  CreatedByAgentID ,  AgentID ,  ModifiedByAgentID ,  CollectionObjectID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->DnaSequenceID!= NULL ) {
              $statement->bind_param("issiiissssiiiisssssssssssiiiiiiiii", $this->DnaSequenceID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->AmbiguousResidues , $this->BOLDBarcodeID , $this->BOLDLastUpdateDate , $this->BOLDSampleID , $this->BOLDTranslationMatrix , $this->CompA , $this->CompC , $this->CompG , $this->compT , $this->GenBankAccessionNumber , $this->GeneSequence , $this->MoleculeType , $this->Number1 , $this->Number2 , $this->Number3 , $this->Remarks , $this->TargetMarker , $this->Text1 , $this->Text2 , $this->Text3 , $this->TotalResidues , $this->YesNo1 , $this->YesNo2 , $this->YesNo3 , $this->CreatedByAgentID , $this->AgentID , $this->ModifiedByAgentID , $this->CollectionObjectID , $this->DnaSequenceID );
           } else { 
              $statement->bind_param("issiiissssiiiisssssssssssiiiiiiii", $this->DnaSequenceID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->AmbiguousResidues , $this->BOLDBarcodeID , $this->BOLDLastUpdateDate , $this->BOLDSampleID , $this->BOLDTranslationMatrix , $this->CompA , $this->CompC , $this->CompG , $this->compT , $this->GenBankAccessionNumber , $this->GeneSequence , $this->MoleculeType , $this->Number1 , $this->Number2 , $this->Number3 , $this->Remarks , $this->TargetMarker , $this->Text1 , $this->Text2 , $this->Text3 , $this->TotalResidues , $this->YesNo1 , $this->YesNo2 , $this->YesNo3 , $this->CreatedByAgentID , $this->AgentID , $this->ModifiedByAgentID , $this->CollectionObjectID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->DnaSequenceID != NULL) {
           $sql = 'SELECT DnaSequenceID, TimestampCreated, TimestampModified, Version, CollectionMemberID, AmbiguousResidues, BOLDBarcodeID, BOLDLastUpdateDate, BOLDSampleID, BOLDTranslationMatrix, CompA, CompC, CompG, compT, GenBankAccessionNumber, GeneSequence, MoleculeType, Number1, Number2, Number3, Remarks, TargetMarker, Text1, Text2, Text3, TotalResidues, YesNo1, YesNo2, YesNo3, CreatedByAgentID, AgentID, ModifiedByAgentID, CollectionObjectID FROM dnasequence WHERE DnaSequenceID = "'.$this->DnaSequenceID.'"  ' ;

           $preparedsql = 'SELECT  FROM dnasequence WHERE  and DnaSequenceID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issiiissssiiiisssssssssssiiiiiiii", $this->DnaSequenceID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->AmbiguousResidues, $this->BOLDBarcodeID, $this->BOLDLastUpdateDate, $this->BOLDSampleID, $this->BOLDTranslationMatrix, $this->CompA, $this->CompC, $this->CompG, $this->compT, $this->GenBankAccessionNumber, $this->GeneSequence, $this->MoleculeType, $this->Number1, $this->Number2, $this->Number3, $this->Remarks, $this->TargetMarker, $this->Text1, $this->Text2, $this->Text3, $this->TotalResidues, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->CreatedByAgentID, $this->AgentID, $this->ModifiedByAgentID, $this->CollectionObjectID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM dnasequence WHERE  and DnaSequenceID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issiiissssiiiisssssssssssiiiiiiii", $this->DnaSequenceID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->AmbiguousResidues, $this->BOLDBarcodeID, $this->BOLDLastUpdateDate, $this->BOLDSampleID, $this->BOLDTranslationMatrix, $this->CompA, $this->CompC, $this->CompG, $this->compT, $this->GenBankAccessionNumber, $this->GeneSequence, $this->MoleculeType, $this->Number1, $this->Number2, $this->Number3, $this->Remarks, $this->TargetMarker, $this->Text1, $this->Text2, $this->Text3, $this->TotalResidues, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->CreatedByAgentID, $this->AgentID, $this->ModifiedByAgentID, $this->CollectionObjectID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->DnaSequenceID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM dnasequence';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT DnaSequenceID FROM dnasequence $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_dnasequence();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromdnasequencingrun() { 
      // ForeignKey in: dnasequencingrun
      $t = new dnasequencingrun();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: AgentID
      $t = new agent();
      $t->load(getAgentID());
      $returnvalue[AgentID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: CollectionObjectID
      $t = new collectionobject();
      $t->load(getCollectionObjectID());
      $returnvalue[CollectionObjectID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT DnaSequenceID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(CollectionMemberID,'') || ' ' || IFNULL(AmbiguousResidues,'') || ' ' || IFNULL(BOLDBarcodeID,'') || ' ' || IFNULL(BOLDLastUpdateDate,'') || ' ' || IFNULL(BOLDSampleID,'') || ' ' || IFNULL(BOLDTranslationMatrix,'') || ' ' || IFNULL(CompA,'') || ' ' || IFNULL(CompC,'') || ' ' || IFNULL(CompG,'') || ' ' || IFNULL(compT,'') || ' ' || IFNULL(GenBankAccessionNumber,'') || ' ' || IFNULL(GeneSequence,'') || ' ' || IFNULL(MoleculeType,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(Number3,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(TargetMarker,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(Text3,'') || ' ' || IFNULL(TotalResidues,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(YesNo3,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(AgentID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(CollectionObjectID,'')) FROM dnasequence order by BOLDBarcodeID, BOLDSampleID, GenBankAccessionNumber, CreatedByAgentID, AgentID, ModifiedByAgentID, CollectionObjectID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM dnasequence order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByBOLDBarcodeID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DnaSequenceID FROM dnasequence WHERE BOLDBarcodeID $operator '$searchTerm'";
        $preparedsql = "SELECT DnaSequenceID FROM dnasequence WHERE BOLDBarcodeID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_dnasequence();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByBOLDSampleID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DnaSequenceID FROM dnasequence WHERE BOLDSampleID $operator '$searchTerm'";
        $preparedsql = "SELECT DnaSequenceID FROM dnasequence WHERE BOLDSampleID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_dnasequence();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGenBankAccessionNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DnaSequenceID FROM dnasequence WHERE GenBankAccessionNumber $operator '$searchTerm'";
        $preparedsql = "SELECT DnaSequenceID FROM dnasequence WHERE GenBankAccessionNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_dnasequence();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DnaSequenceID FROM dnasequence WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT DnaSequenceID FROM dnasequence WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_dnasequence();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DnaSequenceID FROM dnasequence WHERE AgentID $operator '$searchTerm'";
        $preparedsql = "SELECT DnaSequenceID FROM dnasequence WHERE AgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_dnasequence();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DnaSequenceID FROM dnasequence WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT DnaSequenceID FROM dnasequence WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_dnasequence();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCollectionObjectID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT DnaSequenceID FROM dnasequence WHERE CollectionObjectID $operator '$searchTerm'";
        $preparedsql = "SELECT DnaSequenceID FROM dnasequence WHERE CollectionObjectID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_dnasequence();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctBOLDBarcodeID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' BOLDBarcodeID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, BOLDBarcodeID FROM dnasequence group by BOLDBarcodeID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&BOLDBarcodeID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctBOLDSampleID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' BOLDSampleID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, BOLDSampleID FROM dnasequence group by BOLDSampleID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&BOLDSampleID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGenBankAccessionNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GenBankAccessionNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GenBankAccessionNumber FROM dnasequence group by GenBankAccessionNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GenBankAccessionNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM dnasequence group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AgentID FROM dnasequence group by AgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM dnasequence group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCollectionObjectID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionObjectID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectionObjectID FROM dnasequence group by CollectionObjectID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectionObjectID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'BOLDBarcodeID':
             $returnvalue = $this->selectDistinctBOLDBarcodeID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'BOLDSampleID':
             $returnvalue = $this->selectDistinctBOLDSampleID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GenBankAccessionNumber':
             $returnvalue = $this->selectDistinctGenBankAccessionNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AgentID':
             $returnvalue = $this->selectDistinctAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CollectionObjectID':
             $returnvalue = $this->selectDistinctCollectionObjectID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the dnasequence.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_dnasequenceView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_dnasequence <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_dnasequence::DNASEQUENCEID.": ".$model->getDnaSequenceID()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::COLLECTIONMEMBERID.": ".$model->getCollectionMemberID()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::AMBIGUOUSRESIDUES.": ".$model->getAmbiguousResidues()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::BOLDBARCODEID.": ".$model->getBOLDBarcodeID()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::BOLDLASTUPDATEDATE.": ".$model->getBOLDLastUpdateDate()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::BOLDSAMPLEID.": ".$model->getBOLDSampleID()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::BOLDTRANSLATIONMATRIX.": ".$model->getBOLDTranslationMatrix()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::COMPA.": ".$model->getCompA()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::COMPC.": ".$model->getCompC()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::COMPG.": ".$model->getCompG()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::COMPT.": ".$model->getcompT()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::GENBANKACCESSIONNUMBER.": ".$model->getGenBankAccessionNumber()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::GENESEQUENCE.": ".$model->getGeneSequence()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::MOLECULETYPE.": ".$model->getMoleculeType()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::NUMBER3.": ".$model->getNumber3()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::TARGETMARKER.": ".$model->getTargetMarker()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::TEXT3.": ".$model->getText3()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::TOTALRESIDUES.": ".$model->getTotalResidues()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::YESNO3.": ".$model->getYesNo3()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::AGENTID.": ".$model->getAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_dnasequence::COLLECTIONOBJECTID.": ".$model->getCollectionObjectID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getAgentID() != '') { 
               $t_agent->load($model->getAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>collectionobject</li>";
           $t_collectionobject = new huh_collectionobject();
           $t_collectionobjectView = new huh_collectionobjectView();
           $t_collectionobjectView->setModel($t_collectionobject);
           if ($model->getCollectionObjectID() != '') { 
               $t_collectionobject->load($model->getCollectionObjectID());
               $returnvalue .= $t_collectionobjectView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_dnasequence::DNASEQUENCEID.': "'.$model->getDnaSequenceID().'",';
       $returnvalue .= '"'.huh_dnasequence::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_dnasequence::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_dnasequence::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_dnasequence::COLLECTIONMEMBERID.': "'.$model->getCollectionMemberID().'",';
       $returnvalue .= '"'.huh_dnasequence::AMBIGUOUSRESIDUES.': "'.$model->getAmbiguousResidues().'",';
       $returnvalue .= '"'.huh_dnasequence::BOLDBARCODEID.': "'.$model->getBOLDBarcodeID().'",';
       $returnvalue .= '"'.huh_dnasequence::BOLDLASTUPDATEDATE.': "'.$model->getBOLDLastUpdateDate().'",';
       $returnvalue .= '"'.huh_dnasequence::BOLDSAMPLEID.': "'.$model->getBOLDSampleID().'",';
       $returnvalue .= '"'.huh_dnasequence::BOLDTRANSLATIONMATRIX.': "'.$model->getBOLDTranslationMatrix().'",';
       $returnvalue .= '"'.huh_dnasequence::COMPA.': "'.$model->getCompA().'",';
       $returnvalue .= '"'.huh_dnasequence::COMPC.': "'.$model->getCompC().'",';
       $returnvalue .= '"'.huh_dnasequence::COMPG.': "'.$model->getCompG().'",';
       $returnvalue .= '"'.huh_dnasequence::COMPT.': "'.$model->getcompT().'",';
       $returnvalue .= '"'.huh_dnasequence::GENBANKACCESSIONNUMBER.': "'.$model->getGenBankAccessionNumber().'",';
       $returnvalue .= '"'.huh_dnasequence::GENESEQUENCE.': "'.$model->getGeneSequence().'",';
       $returnvalue .= '"'.huh_dnasequence::MOLECULETYPE.': "'.$model->getMoleculeType().'",';
       $returnvalue .= '"'.huh_dnasequence::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_dnasequence::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_dnasequence::NUMBER3.': "'.$model->getNumber3().'",';
       $returnvalue .= '"'.huh_dnasequence::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_dnasequence::TARGETMARKER.': "'.$model->getTargetMarker().'",';
       $returnvalue .= '"'.huh_dnasequence::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_dnasequence::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_dnasequence::TEXT3.': "'.$model->getText3().'",';
       $returnvalue .= '"'.huh_dnasequence::TOTALRESIDUES.': "'.$model->getTotalResidues().'",';
       $returnvalue .= '"'.huh_dnasequence::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_dnasequence::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_dnasequence::YESNO3.': "'.$model->getYesNo3().'",';
       $returnvalue .= '"'.huh_dnasequence::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_dnasequence::AGENTID.': "'.$model->getAgentID().'",';
       $returnvalue .= '"'.huh_dnasequence::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_dnasequence::COLLECTIONOBJECTID.': "'.$model->getCollectionObjectID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getDnaSequenceID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionMemberID()."</td>\n";
       $returnvalue .= "<td>".$model->getAmbiguousResidues()."</td>\n";
       $returnvalue .= "<td>".$model->getBOLDBarcodeID()."</td>\n";
       $returnvalue .= "<td>".$model->getBOLDLastUpdateDate()."</td>\n";
       $returnvalue .= "<td>".$model->getBOLDSampleID()."</td>\n";
       $returnvalue .= "<td>".$model->getBOLDTranslationMatrix()."</td>\n";
       $returnvalue .= "<td>".$model->getCompA()."</td>\n";
       $returnvalue .= "<td>".$model->getCompC()."</td>\n";
       $returnvalue .= "<td>".$model->getCompG()."</td>\n";
       $returnvalue .= "<td>".$model->getcompT()."</td>\n";
       $returnvalue .= "<td>".$model->getGenBankAccessionNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getGeneSequence()."</td>\n";
       $returnvalue .= "<td>".$model->getMoleculeType()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber3()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getTargetMarker()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getText3()."</td>\n";
       $returnvalue .= "<td>".$model->getTotalResidues()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo3()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionObjectID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_dnasequence::DNASEQUENCEID."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::COLLECTIONMEMBERID."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::AMBIGUOUSRESIDUES."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::BOLDBARCODEID."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::BOLDLASTUPDATEDATE."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::BOLDSAMPLEID."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::BOLDTRANSLATIONMATRIX."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::COMPA."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::COMPC."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::COMPG."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::COMPT."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::GENBANKACCESSIONNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::GENESEQUENCE."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::MOLECULETYPE."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::NUMBER3."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::TARGETMARKER."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::TEXT3."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::TOTALRESIDUES."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::YESNO3."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::AGENTID."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_dnasequence::COLLECTIONOBJECTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_dnasequence">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new DnaSequenceID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_dnasequence::DNASEQUENCEID.">DNASEQUENCEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::DNASEQUENCEID." id=".huh_dnasequence::DNASEQUENCEID." value='".$model->getDnaSequenceID()."'  style=' width:".huh_dnasequence::DNASEQUENCEID_SIZE ."em;  '  maxlength='".huh_dnasequence::DNASEQUENCEID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_dnasequence::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::TIMESTAMPCREATED." id=".huh_dnasequence::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_dnasequence::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_dnasequence::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::TIMESTAMPMODIFIED." id=".huh_dnasequence::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_dnasequence::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_dnasequence::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::VERSION." id=".huh_dnasequence::VERSION." value='".$model->getVersion()."'  style=' width:".huh_dnasequence::VERSION_SIZE ."em;  '  maxlength='".huh_dnasequence::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::COLLECTIONMEMBERID.">COLLECTIONMEMBERID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::COLLECTIONMEMBERID." id=".huh_dnasequence::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  style=' width:".huh_dnasequence::COLLECTIONMEMBERID_SIZE ."em;  '  maxlength='".huh_dnasequence::COLLECTIONMEMBERID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::AMBIGUOUSRESIDUES.">AMBIGUOUSRESIDUES</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::AMBIGUOUSRESIDUES." id=".huh_dnasequence::AMBIGUOUSRESIDUES." value='".$model->getAmbiguousResidues()."'  style=' width:".huh_dnasequence::AMBIGUOUSRESIDUES_SIZE ."em;  '  maxlength='".huh_dnasequence::AMBIGUOUSRESIDUES_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::BOLDBARCODEID.">BOLDBARCODEID</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::BOLDBARCODEID." id=".huh_dnasequence::BOLDBARCODEID." value='".$model->getBOLDBarcodeID()."'  style=' width:".huh_dnasequence::BOLDBARCODEID_SIZE ."em;  '  maxlength='".huh_dnasequence::BOLDBARCODEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::BOLDLASTUPDATEDATE.">BOLDLASTUPDATEDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::BOLDLASTUPDATEDATE." id=".huh_dnasequence::BOLDLASTUPDATEDATE." value='".$model->getBOLDLastUpdateDate()."'  style=' width:".huh_dnasequence::BOLDLASTUPDATEDATE_SIZE ."em;  '  maxlength='".huh_dnasequence::BOLDLASTUPDATEDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::BOLDSAMPLEID.">BOLDSAMPLEID</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::BOLDSAMPLEID." id=".huh_dnasequence::BOLDSAMPLEID." value='".$model->getBOLDSampleID()."'  style=' width:".huh_dnasequence::BOLDSAMPLEID_SIZE ."em;  '  maxlength='".huh_dnasequence::BOLDSAMPLEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::BOLDTRANSLATIONMATRIX.">BOLDTRANSLATIONMATRIX</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_dnasequence::BOLDTRANSLATIONMATRIX." id=".huh_dnasequence::BOLDTRANSLATIONMATRIX." >".$model->getBOLDTranslationMatrix()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::COMPA.">COMPA</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::COMPA." id=".huh_dnasequence::COMPA." value='".$model->getCompA()."'  style=' width:".huh_dnasequence::COMPA_SIZE ."em;  '  maxlength='".huh_dnasequence::COMPA_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::COMPC.">COMPC</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::COMPC." id=".huh_dnasequence::COMPC." value='".$model->getCompC()."'  style=' width:".huh_dnasequence::COMPC_SIZE ."em;  '  maxlength='".huh_dnasequence::COMPC_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::COMPG.">COMPG</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::COMPG." id=".huh_dnasequence::COMPG." value='".$model->getCompG()."'  style=' width:".huh_dnasequence::COMPG_SIZE ."em;  '  maxlength='".huh_dnasequence::COMPG_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::COMPT.">COMPT</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::COMPT." id=".huh_dnasequence::COMPT." value='".$model->getcompT()."'  style=' width:".huh_dnasequence::COMPT_SIZE ."em;  '  maxlength='".huh_dnasequence::COMPT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::GENBANKACCESSIONNUMBER.">GENBANKACCESSIONNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::GENBANKACCESSIONNUMBER." id=".huh_dnasequence::GENBANKACCESSIONNUMBER." value='".$model->getGenBankAccessionNumber()."'  style=' width:".huh_dnasequence::GENBANKACCESSIONNUMBER_SIZE ."em;  '  maxlength='".huh_dnasequence::GENBANKACCESSIONNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::GENESEQUENCE.">GENESEQUENCE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_dnasequence::GENESEQUENCE." id=".huh_dnasequence::GENESEQUENCE." >".$model->getGeneSequence()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::MOLECULETYPE.">MOLECULETYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::MOLECULETYPE." id=".huh_dnasequence::MOLECULETYPE." value='".$model->getMoleculeType()."'  style=' width:".huh_dnasequence::MOLECULETYPE_SIZE ."em;  '  maxlength='".huh_dnasequence::MOLECULETYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::NUMBER1." id=".huh_dnasequence::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_dnasequence::NUMBER1_SIZE ."em;  '  maxlength='".huh_dnasequence::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::NUMBER2." id=".huh_dnasequence::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_dnasequence::NUMBER2_SIZE ."em;  '  maxlength='".huh_dnasequence::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::NUMBER3.">NUMBER3</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::NUMBER3." id=".huh_dnasequence::NUMBER3." value='".$model->getNumber3()."'  style=' width:".huh_dnasequence::NUMBER3_SIZE ."em;  '  maxlength='".huh_dnasequence::NUMBER3_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_dnasequence::REMARKS." id=".huh_dnasequence::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::TARGETMARKER.">TARGETMARKER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::TARGETMARKER." id=".huh_dnasequence::TARGETMARKER." value='".$model->getTargetMarker()."'  style=' width:".huh_dnasequence::TARGETMARKER_SIZE ."em;  '  maxlength='".huh_dnasequence::TARGETMARKER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::TEXT1.">TEXT1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::TEXT1." id=".huh_dnasequence::TEXT1." value='".$model->getText1()."'  style=' width:".huh_dnasequence::TEXT1_SIZE ."em;  '  maxlength='".huh_dnasequence::TEXT1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::TEXT2.">TEXT2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::TEXT2." id=".huh_dnasequence::TEXT2." value='".$model->getText2()."'  style=' width:".huh_dnasequence::TEXT2_SIZE ."em;  '  maxlength='".huh_dnasequence::TEXT2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::TEXT3.">TEXT3</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_dnasequence::TEXT3." id=".huh_dnasequence::TEXT3." >".$model->getText3()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::TOTALRESIDUES.">TOTALRESIDUES</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::TOTALRESIDUES." id=".huh_dnasequence::TOTALRESIDUES." value='".$model->getTotalResidues()."'  style=' width:".huh_dnasequence::TOTALRESIDUES_SIZE ."em;  '  maxlength='".huh_dnasequence::TOTALRESIDUES_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::YESNO1." id=".huh_dnasequence::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_dnasequence::YESNO1_SIZE ."em;  '  maxlength='".huh_dnasequence::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::YESNO2." id=".huh_dnasequence::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_dnasequence::YESNO2_SIZE ."em;  '  maxlength='".huh_dnasequence::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::YESNO3.">YESNO3</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_dnasequence::YESNO3." id=".huh_dnasequence::YESNO3." value='".$model->getYesNo3()."'  style=' width:".huh_dnasequence::YESNO3_SIZE ."em;  '  maxlength='".huh_dnasequence::YESNO3_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::CREATEDBYAGENTID." id=".huh_dnasequence::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_dnasequence::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_dnasequence::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::AGENTID.">AGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::AGENTID." id=".huh_dnasequence::AGENTID." value='".$model->getAgentID()."'  style=' width:".huh_dnasequence::AGENTID_SIZE ."em;  '  maxlength='".huh_dnasequence::AGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::MODIFIEDBYAGENTID." id=".huh_dnasequence::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_dnasequence::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_dnasequence::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_dnasequence::COLLECTIONOBJECTID.">COLLECTIONOBJECTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_dnasequence::COLLECTIONOBJECTID." id=".huh_dnasequence::COLLECTIONOBJECTID." value='".$model->getCollectionObjectID()."'  style=' width:".huh_dnasequence::COLLECTIONOBJECTID_SIZE ."em;  '  maxlength='".huh_dnasequence::COLLECTIONOBJECTID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_dnasequence">';
       $returnvalue .= '<input type=hidden name=DnaSequenceID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_dnasequence">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>DNASEQUENCEID<input type=text name=".huh_dnasequence::DNASEQUENCEID." id=".huh_dnasequence::DNASEQUENCEID." value='".$model->getDnaSequenceID()."'  size='".huh_dnasequence::DNASEQUENCEID_SIZE ."'  maxlength='".huh_dnasequence::DNASEQUENCEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_dnasequence::TIMESTAMPCREATED." id=".huh_dnasequence::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_dnasequence::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_dnasequence::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_dnasequence::TIMESTAMPMODIFIED." id=".huh_dnasequence::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_dnasequence::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_dnasequence::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_dnasequence::VERSION." id=".huh_dnasequence::VERSION." value='".$model->getVersion()."'  size='".huh_dnasequence::VERSION_SIZE ."'  maxlength='".huh_dnasequence::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONMEMBERID<input type=text name=".huh_dnasequence::COLLECTIONMEMBERID." id=".huh_dnasequence::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  size='".huh_dnasequence::COLLECTIONMEMBERID_SIZE ."'  maxlength='".huh_dnasequence::COLLECTIONMEMBERID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>AMBIGUOUSRESIDUES<input type=text name=".huh_dnasequence::AMBIGUOUSRESIDUES." id=".huh_dnasequence::AMBIGUOUSRESIDUES." value='".$model->getAmbiguousResidues()."'  size='".huh_dnasequence::AMBIGUOUSRESIDUES_SIZE ."'  maxlength='".huh_dnasequence::AMBIGUOUSRESIDUES_SIZE ."' ></li>\n";
       $returnvalue .= "<li>BOLDBARCODEID<input type=text name=".huh_dnasequence::BOLDBARCODEID." id=".huh_dnasequence::BOLDBARCODEID." value='".$model->getBOLDBarcodeID()."'  size='".huh_dnasequence::BOLDBARCODEID_SIZE ."'  maxlength='".huh_dnasequence::BOLDBARCODEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>BOLDLASTUPDATEDATE<input type=text name=".huh_dnasequence::BOLDLASTUPDATEDATE." id=".huh_dnasequence::BOLDLASTUPDATEDATE." value='".$model->getBOLDLastUpdateDate()."'  size='".huh_dnasequence::BOLDLASTUPDATEDATE_SIZE ."'  maxlength='".huh_dnasequence::BOLDLASTUPDATEDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>BOLDSAMPLEID<input type=text name=".huh_dnasequence::BOLDSAMPLEID." id=".huh_dnasequence::BOLDSAMPLEID." value='".$model->getBOLDSampleID()."'  size='".huh_dnasequence::BOLDSAMPLEID_SIZE ."'  maxlength='".huh_dnasequence::BOLDSAMPLEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>BOLDTRANSLATIONMATRIX<input type=text name=".huh_dnasequence::BOLDTRANSLATIONMATRIX." id=".huh_dnasequence::BOLDTRANSLATIONMATRIX." value='".$model->getBOLDTranslationMatrix()."'  size='51'  maxlength='".huh_dnasequence::BOLDTRANSLATIONMATRIX_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COMPA<input type=text name=".huh_dnasequence::COMPA." id=".huh_dnasequence::COMPA." value='".$model->getCompA()."'  size='".huh_dnasequence::COMPA_SIZE ."'  maxlength='".huh_dnasequence::COMPA_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COMPC<input type=text name=".huh_dnasequence::COMPC." id=".huh_dnasequence::COMPC." value='".$model->getCompC()."'  size='".huh_dnasequence::COMPC_SIZE ."'  maxlength='".huh_dnasequence::COMPC_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COMPG<input type=text name=".huh_dnasequence::COMPG." id=".huh_dnasequence::COMPG." value='".$model->getCompG()."'  size='".huh_dnasequence::COMPG_SIZE ."'  maxlength='".huh_dnasequence::COMPG_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COMPT<input type=text name=".huh_dnasequence::COMPT." id=".huh_dnasequence::COMPT." value='".$model->getcompT()."'  size='".huh_dnasequence::COMPT_SIZE ."'  maxlength='".huh_dnasequence::COMPT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GENBANKACCESSIONNUMBER<input type=text name=".huh_dnasequence::GENBANKACCESSIONNUMBER." id=".huh_dnasequence::GENBANKACCESSIONNUMBER." value='".$model->getGenBankAccessionNumber()."'  size='".huh_dnasequence::GENBANKACCESSIONNUMBER_SIZE ."'  maxlength='".huh_dnasequence::GENBANKACCESSIONNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GENESEQUENCE<input type=text name=".huh_dnasequence::GENESEQUENCE." id=".huh_dnasequence::GENESEQUENCE." value='".$model->getGeneSequence()."'  size='51'  maxlength='".huh_dnasequence::GENESEQUENCE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MOLECULETYPE<input type=text name=".huh_dnasequence::MOLECULETYPE." id=".huh_dnasequence::MOLECULETYPE." value='".$model->getMoleculeType()."'  size='".huh_dnasequence::MOLECULETYPE_SIZE ."'  maxlength='".huh_dnasequence::MOLECULETYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_dnasequence::NUMBER1." id=".huh_dnasequence::NUMBER1." value='".$model->getNumber1()."'  size='".huh_dnasequence::NUMBER1_SIZE ."'  maxlength='".huh_dnasequence::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_dnasequence::NUMBER2." id=".huh_dnasequence::NUMBER2." value='".$model->getNumber2()."'  size='".huh_dnasequence::NUMBER2_SIZE ."'  maxlength='".huh_dnasequence::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER3<input type=text name=".huh_dnasequence::NUMBER3." id=".huh_dnasequence::NUMBER3." value='".$model->getNumber3()."'  size='".huh_dnasequence::NUMBER3_SIZE ."'  maxlength='".huh_dnasequence::NUMBER3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_dnasequence::REMARKS." id=".huh_dnasequence::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_dnasequence::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TARGETMARKER<input type=text name=".huh_dnasequence::TARGETMARKER." id=".huh_dnasequence::TARGETMARKER." value='".$model->getTargetMarker()."'  size='".huh_dnasequence::TARGETMARKER_SIZE ."'  maxlength='".huh_dnasequence::TARGETMARKER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_dnasequence::TEXT1." id=".huh_dnasequence::TEXT1." value='".$model->getText1()."'  size='".huh_dnasequence::TEXT1_SIZE ."'  maxlength='".huh_dnasequence::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_dnasequence::TEXT2." id=".huh_dnasequence::TEXT2." value='".$model->getText2()."'  size='".huh_dnasequence::TEXT2_SIZE ."'  maxlength='".huh_dnasequence::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT3<input type=text name=".huh_dnasequence::TEXT3." id=".huh_dnasequence::TEXT3." value='".$model->getText3()."'  size='51'  maxlength='".huh_dnasequence::TEXT3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TOTALRESIDUES<input type=text name=".huh_dnasequence::TOTALRESIDUES." id=".huh_dnasequence::TOTALRESIDUES." value='".$model->getTotalResidues()."'  size='".huh_dnasequence::TOTALRESIDUES_SIZE ."'  maxlength='".huh_dnasequence::TOTALRESIDUES_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_dnasequence::YESNO1." id=".huh_dnasequence::YESNO1." value='".$model->getYesNo1()."'  size='".huh_dnasequence::YESNO1_SIZE ."'  maxlength='".huh_dnasequence::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_dnasequence::YESNO2." id=".huh_dnasequence::YESNO2." value='".$model->getYesNo2()."'  size='".huh_dnasequence::YESNO2_SIZE ."'  maxlength='".huh_dnasequence::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO3<input type=text name=".huh_dnasequence::YESNO3." id=".huh_dnasequence::YESNO3." value='".$model->getYesNo3()."'  size='".huh_dnasequence::YESNO3_SIZE ."'  maxlength='".huh_dnasequence::YESNO3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_dnasequence::CREATEDBYAGENTID." id=".huh_dnasequence::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_dnasequence::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_dnasequence::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>AGENTID<input type=text name=".huh_dnasequence::AGENTID." id=".huh_dnasequence::AGENTID." value='".$model->getAgentID()."'  size='".huh_dnasequence::AGENTID_SIZE ."'  maxlength='".huh_dnasequence::AGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_dnasequence::MODIFIEDBYAGENTID." id=".huh_dnasequence::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_dnasequence::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_dnasequence::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONOBJECTID<input type=text name=".huh_dnasequence::COLLECTIONOBJECTID." id=".huh_dnasequence::COLLECTIONOBJECTID." value='".$model->getCollectionObjectID()."'  size='".huh_dnasequence::COLLECTIONOBJECTID_SIZE ."'  maxlength='".huh_dnasequence::COLLECTIONOBJECTID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
