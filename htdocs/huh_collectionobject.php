<?php
//==============================================================================
//===   collectionobject.php
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_collectionobject implements  model , loadableModel, saveableModel, tableSchema
{
   // These constants hold the sizes the fields in this table in the database.
   const COLLECTIONOBJECTID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const COLLECTIONMEMBERID_SIZE = 11; //INTEGER
   const ALTCATALOGNUMBER_SIZE = 32; //32
   const AVAILABILITY_SIZE    = 32; //32
   const CATALOGNUMBER_SIZE   = 32; //32
   const CATALOGEDDATE_SIZE   = 12; //DATE
   const CATALOGEDDATEPRECISION_SIZE = 4; //TINYINT
   const CATALOGEDDATEVERBATIM_SIZE = 32; //32
   const COUNTAMT_SIZE        = 11; //INTEGER
   const DESCRIPTION_SIZE     = 255; //LONGVARCHAR
   const FIELDNUMBER_SIZE     = 20; //YEAR
   const GUID_SIZE            = 128; //128
   const INTERNALREMARKS_SIZE = 255; //LONGVARCHAR
   const MODIFIER_SIZE        = 20; //YEAR
   const NAME_SIZE            = 64; //64
   const NOTIFICATIONS_SIZE   = 32; //32
   const NUMBER1_SIZE         = 20; //REAL
   const NUMBER2_SIZE         = 20; //REAL
   const PROJECTNUMBER_SIZE   = 64; //64
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const RESTRICTIONS_SIZE    = 32; //32
   const TEXT1_SIZE           = 255; //LONGVARCHAR
   const TEXT2_SIZE           = 255; //LONGVARCHAR
   const TEXT3_SIZE           = 255; //LONGVARCHAR
   const TEXT4_SIZE           = 50; // VARCHAR
   const TOTALVALUE_SIZE      = 12; //12,2
   const VISIBILITY_SIZE      = 4; //TINYINT
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const YESNO3_SIZE          = 1; //1
   const YESNO4_SIZE          = 1; //1
   const YESNO5_SIZE          = 1; //1
   const YESNO6_SIZE          = 1; //1
   const VISIBILITYSETBYID_SIZE = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const CATALOGERID_SIZE     = 11; //INTEGER
   const CONTAINERID_SIZE     = 11; //INTEGER
   const COLLECTINGEVENTID_SIZE = 11; //INTEGER
   const COLLECTIONOBJECTATTRIBUTEID_SIZE = 11; //INTEGER
   const PALEOCONTEXTID_SIZE  = 11; //INTEGER
   const COLLECTIONID_SIZE    = 11; //INTEGER
   const FIELDNOTEBOOKPAGEID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database.
   const COLLECTIONOBJECTID = 'CollectionObjectID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const COLLECTIONMEMBERID = 'CollectionMemberID';
   const ALTCATALOGNUMBER  = 'AltCatalogNumber';
   const AVAILABILITY      = 'Availability';
   const CATALOGNUMBER     = 'CatalogNumber';
   const CATALOGEDDATE     = 'CatalogedDate';
   const CATALOGEDDATEPRECISION = 'CatalogedDatePrecision';
   const CATALOGEDDATEVERBATIM = 'CatalogedDateVerbatim';
   const COUNTAMT          = 'CountAmt';
   const DESCRIPTION       = 'Description';
   const FIELDNUMBER       = 'FieldNumber';
   const GUID              = 'GUID';
   const INTERNALREMARKS   = 'InternalRemarks';
   const MODIFIER          = 'Modifier';
   const NAME              = 'Name';
   const NOTIFICATIONS     = 'Notifications';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const PROJECTNUMBER     = 'ProjectNumber';
   const REMARKS           = 'Remarks';
   const RESTRICTIONS      = 'Restrictions';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const TEXT3             = 'Text3';
   const TEXT4             = 'Text4';
   const TOTALVALUE        = 'TotalValue';
   const VISIBILITY        = 'Visibility';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const YESNO3            = 'YesNo3';
   const YESNO4            = 'YesNo4';
   const YESNO5            = 'YesNo5';
   const YESNO6            = 'YesNo6';
   const VISIBILITYSETBYID = 'VisibilitySetByID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const CATALOGERID       = 'CatalogerID';
   const CONTAINERID       = 'ContainerID';
   const COLLECTINGEVENTID = 'CollectingEventID';
   const COLLECTIONOBJECTATTRIBUTEID = 'CollectionObjectAttributeID';
   const PALEOCONTEXTID    = 'PaleoContextID';
   const COLLECTIONID      = 'CollectionID';
   const FIELDNOTEBOOKPAGEID = 'FieldNotebookPageID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   }
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   }
   // schemaFields returns array of all field names
   public function schemaFields() {
       return $this->allFieldsArray;
   }
/*  Example sanitized retrieval of variable matching object variables from $_GET
/*  Customize these to limit each variable to narrowest possible set of known good values.

  $CollectionObjectID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionObjectID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $CollectionMemberID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionMemberID']), 0, 11);
  $AltCatalogNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['AltCatalogNumber']), 0, 32);
  $Availability = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Availability']), 0, 32);
  $CatalogNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CatalogNumber']), 0, 32);
  $CatalogedDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CatalogedDate']), 0, 12);
  $CatalogedDatePrecision = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CatalogedDatePrecision']), 0, 4);
  $CatalogedDateVerbatim = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CatalogedDateVerbatim']), 0, 32);
  $CountAmt = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CountAmt']), 0, 11);
  $Description = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Description']), 0, 255);
  $FieldNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FieldNumber']), 0, 20);
  $GUID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GUID']), 0, 128);
  $InternalRemarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['InternalRemarks']), 0, 255);
  $Modifier = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Modifier']), 0, 20);
  $Name = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Name']), 0, 64);
  $Notifications = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Notifications']), 0, 32);
  $Number1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number1']), 0, 20);
  $Number2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number2']), 0, 20);
  $ProjectNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ProjectNumber']), 0, 64);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $Restrictions = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Restrictions']), 0, 32);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 255);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 255);
  $Text3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text3']), 0, 255);
  $Text4 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text4']), 0, 20);
  $TotalValue = substr(preg_replace('/[^0-9\-\.\[NULL\]]/','',$_GET['TotalValue']), 0, 12);
  $Visibility = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Visibility']), 0, 4);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $YesNo3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo3']), 0, 1);
  $YesNo4 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo4']), 0, 1);
  $YesNo5 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo5']), 0, 1);
  $YesNo6 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo6']), 0, 1);
  $VisibilitySetByID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['VisibilitySetByID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $CatalogerID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CatalogerID']), 0, 11);
  $ContainerID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ContainerID']), 0, 11);
  $CollectingEventID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectingEventID']), 0, 11);
  $CollectionObjectAttributeID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionObjectAttributeID']), 0, 11);
  $PaleoContextID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PaleoContextID']), 0, 11);
  $CollectionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionID']), 0, 11);
  $FieldNotebookPageID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['FieldNotebookPageID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $CollectionObjectID; // PK INTEGER
   private $TimestampCreated; // TIMESTAMP
   private $TimestampModified; // TIMESTAMP
   private $Version; // INTEGER
   private $CollectionMemberID; // INTEGER
   private $AltCatalogNumber; // VARCHAR(32)
   private $Availability; // VARCHAR(32)
   private $CatalogNumber; // VARCHAR(32)
   private $CatalogedDate; // DATE
   private $CatalogedDatePrecision; // TINYINT
   private $CatalogedDateVerbatim; // VARCHAR(32)
   private $CountAmt; // INTEGER
   private $Description; // LONGVARCHAR
   private $FieldNumber; // YEAR
   private $GUID; // VARCHAR(128)
   private $InternalRemarks; // LONGVARCHAR
   private $Modifier; // YEAR
   private $Name; // VARCHAR(64)
   private $Notifications; // VARCHAR(32)
   private $Number1; // REAL
   private $Number2; // REAL
   private $ProjectNumber; // VARCHAR(64)
   private $Remarks; // LONGVARCHAR
   private $Restrictions; // VARCHAR(32)
   private $Text1; // LONGVARCHAR
   private $Text2; // LONGVARCHAR
   private $Text3; // LONGVARCHAR
   private $Text4; // YEAR
   private $TotalValue; // DECIMAL(12,2)
   private $Visibility; // TINYINT
   private $YesNo1; // BIT(1)
   private $YesNo2; // BIT(1)
   private $YesNo3; // BIT(1)
   private $YesNo4; // BIT(1)
   private $YesNo5; // BIT(1)
   private $YesNo6; // BIT(1)
   private $VisibilitySetByID; // INTEGER
   private $CreatedByAgentID; // INTEGER
   private $CatalogerID; // INTEGER
   private $ContainerID; // INTEGER
   private $CollectingEventID; // INTEGER
   private $CollectionObjectAttributeID; // INTEGER
   private $PaleoContextID; // INTEGER
   private $CollectionID; // INTEGER
   private $FieldNotebookPageID; // INTEGER
   private $ModifiedByAgentID; // INTEGER
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' CollectionObjectID, TimestampCreated, TimestampModified, Version, CollectionMemberID, AltCatalogNumber, Availability, CatalogNumber, CatalogedDate, CatalogedDatePrecision, CatalogedDateVerbatim, CountAmt, Description, FieldNumber, GUID, InternalRemarks, Modifier, Name, Notifications, Number1, Number2, ProjectNumber, Remarks, Restrictions, Text1, Text2, Text3, Text4, TotalValue, Visibility, YesNo1, YesNo2, YesNo3, YesNo4, YesNo5, YesNo6, VisibilitySetByID, CreatedByAgentID, CatalogerID, ContainerID, CollectingEventID, CollectionObjectAttributeID, PaleoContextID, CollectionID, FieldNotebookPageID, ModifiedByAgentID, ';
   const PKFIELDLIST = ' CollectionObjectID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'CollectionObjectID'  ) ;
   private $allFieldsArray = array( 0 => 'CollectionObjectID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'CollectionMemberID' , 5 => 'AltCatalogNumber' , 6 => 'Availability' , 7 => 'CatalogNumber' , 8 => 'CatalogedDate' , 9 => 'CatalogedDatePrecision' , 10 => 'CatalogedDateVerbatim' , 11 => 'CountAmt' , 12 => 'Description' , 13 => 'FieldNumber' , 14 => 'GUID' , 15 => 'InternalRemarks' , 16 => 'Modifier' , 17 => 'Name' , 18 => 'Notifications' , 19 => 'Number1' , 20 => 'Number2' , 21 => 'ProjectNumber' , 22 => 'Remarks' , 23 => 'Restrictions' , 24 => 'Text1' , 25 => 'Text2' , 26 => 'Text3' , 27 => 'Text4' , 28 => 'TotalValue' , 29 => 'Visibility' , 30 => 'YesNo1' , 31 => 'YesNo2' , 32 => 'YesNo3' , 33 => 'YesNo4' , 34 => 'YesNo5' , 35 => 'YesNo6' , 36 => 'VisibilitySetByID' , 37 => 'CreatedByAgentID' , 38 => 'CatalogerID' , 39 => 'ContainerID' , 40 => 'CollectingEventID' , 41 => 'CollectionObjectAttributeID' , 42 => 'PaleoContextID' , 43 => 'CollectionID' , 44 => 'FieldNotebookPageID' , 45 => 'ModifiedByAgentID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'CollectionMemberID' , 5 => 'AltCatalogNumber' , 7 => 'CatalogNumber' , 8 => 'CatalogedDate' , 13 => 'FieldNumber' , 14 => 'GUID' , 36 => 'VisibilitySetByID' , 37 => 'CreatedByAgentID' , 38 => 'CatalogerID' , 39 => 'ContainerID' , 40 => 'CollectingEventID' , 41 => 'CollectionObjectAttributeID' , 42 => 'PaleoContextID' , 43 => 'CollectionID' , 44 => 'FieldNotebookPageID' , 45 => 'ModifiedByAgentID'  ) ;

   //---------------------------------------------------------------------------

   // constructor
   function huh_collectionobject(){
       $this->CollectionObjectID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->CollectionMemberID = '';
       $this->AltCatalogNumber = '';
       $this->Availability = '';
       $this->CatalogNumber = '';
       $this->CatalogedDate = '';
       $this->CatalogedDatePrecision = '';
       $this->CatalogedDateVerbatim = '';
       $this->CountAmt = '';
       $this->Description = '';
       $this->FieldNumber = '';
       $this->GUID = '';
       $this->InternalRemarks = '';
       $this->Modifier = '';
       $this->Name = '';
       $this->Notifications = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->ProjectNumber = '';
       $this->Remarks = '';
       $this->Restrictions = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->Text3 = '';
       $this->Text4 = '';
       $this->TotalValue = '';
       $this->Visibility = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->YesNo3 = '';
       $this->YesNo4 = '';
       $this->YesNo5 = '';
       $this->YesNo6 = '';
       $this->VisibilitySetByID = '';
       $this->CreatedByAgentID = '';
       $this->CatalogerID = '';
       $this->ContainerID = '';
       $this->CollectingEventID = '';
       $this->CollectionObjectAttributeID = '';
       $this->PaleoContextID = '';
       $this->CollectionID = '';
       $this->FieldNotebookPageID = '';
       $this->ModifiedByAgentID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) {
          try {
             if ($fieldname=='CollectionObjectID') { $returnvalue = $this->setCollectionObjectID($value); }
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); }
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); }
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); }
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->setCollectionMemberID($value); }
             if ($fieldname=='AltCatalogNumber') { $returnvalue = $this->setAltCatalogNumber($value); }
             if ($fieldname=='Availability') { $returnvalue = $this->setAvailability($value); }
             if ($fieldname=='CatalogNumber') { $returnvalue = $this->setCatalogNumber($value); }
             if ($fieldname=='CatalogedDate') { $returnvalue = $this->setCatalogedDate($value); }
             if ($fieldname=='CatalogedDatePrecision') { $returnvalue = $this->setCatalogedDatePrecision($value); }
             if ($fieldname=='CatalogedDateVerbatim') { $returnvalue = $this->setCatalogedDateVerbatim($value); }
             if ($fieldname=='CountAmt') { $returnvalue = $this->setCountAmt($value); }
             if ($fieldname=='Description') { $returnvalue = $this->setDescription($value); }
             if ($fieldname=='FieldNumber') { $returnvalue = $this->setFieldNumber($value); }
             if ($fieldname=='GUID') { $returnvalue = $this->setGUID($value); }
             if ($fieldname=='InternalRemarks') { $returnvalue = $this->setInternalRemarks($value); }
             if ($fieldname=='Modifier') { $returnvalue = $this->setModifier($value); }
             if ($fieldname=='Name') { $returnvalue = $this->setName($value); }
             if ($fieldname=='Notifications') { $returnvalue = $this->setNotifications($value); }
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); }
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); }
             if ($fieldname=='ProjectNumber') { $returnvalue = $this->setProjectNumber($value); }
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); }
             if ($fieldname=='Restrictions') { $returnvalue = $this->setRestrictions($value); }
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); }
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); }
             if ($fieldname=='Text3') { $returnvalue = $this->setText3($value); }
             if ($fieldname=='Text4') { $returnvalue = $this->setText4($value); }
             if ($fieldname=='TotalValue') { $returnvalue = $this->setTotalValue($value); }
             if ($fieldname=='Visibility') { $returnvalue = $this->setVisibility($value); }
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); }
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); }
             if ($fieldname=='YesNo3') { $returnvalue = $this->setYesNo3($value); }
             if ($fieldname=='YesNo4') { $returnvalue = $this->setYesNo4($value); }
             if ($fieldname=='YesNo5') { $returnvalue = $this->setYesNo5($value); }
             if ($fieldname=='YesNo6') { $returnvalue = $this->setYesNo6($value); }
             if ($fieldname=='VisibilitySetByID') { $returnvalue = $this->setVisibilitySetByID($value); }
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); }
             if ($fieldname=='CatalogerID') { $returnvalue = $this->setCatalogerID($value); }
             if ($fieldname=='ContainerID') { $returnvalue = $this->setContainerID($value); }
             if ($fieldname=='CollectingEventID') { $returnvalue = $this->setCollectingEventID($value); }
             if ($fieldname=='CollectionObjectAttributeID') { $returnvalue = $this->setCollectionObjectAttributeID($value); }
             if ($fieldname=='PaleoContextID') { $returnvalue = $this->setPaleoContextID($value); }
             if ($fieldname=='CollectionID') { $returnvalue = $this->setCollectionID($value); }
             if ($fieldname=='FieldNotebookPageID') { $returnvalue = $this->setFieldNotebookPageID($value); }
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); }
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage());
          }
       } else {
          throw new Exception('No Such field');
       }
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) {
          try {
             if ($fieldname=='CollectionObjectID') { $returnvalue = $this->getCollectionObjectID(); }
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); }
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); }
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); }
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->getCollectionMemberID(); }
             if ($fieldname=='AltCatalogNumber') { $returnvalue = $this->getAltCatalogNumber(); }
             if ($fieldname=='Availability') { $returnvalue = $this->getAvailability(); }
             if ($fieldname=='CatalogNumber') { $returnvalue = $this->getCatalogNumber(); }
             if ($fieldname=='CatalogedDate') { $returnvalue = $this->getCatalogedDate(); }
             if ($fieldname=='CatalogedDatePrecision') { $returnvalue = $this->getCatalogedDatePrecision(); }
             if ($fieldname=='CatalogedDateVerbatim') { $returnvalue = $this->getCatalogedDateVerbatim(); }
             if ($fieldname=='CountAmt') { $returnvalue = $this->getCountAmt(); }
             if ($fieldname=='Description') { $returnvalue = $this->getDescription(); }
             if ($fieldname=='FieldNumber') { $returnvalue = $this->getFieldNumber(); }
             if ($fieldname=='GUID') { $returnvalue = $this->getGUID(); }
             if ($fieldname=='InternalRemarks') { $returnvalue = $this->getInternalRemarks(); }
             if ($fieldname=='Modifier') { $returnvalue = $this->getModifier(); }
             if ($fieldname=='Name') { $returnvalue = $this->getName(); }
             if ($fieldname=='Notifications') { $returnvalue = $this->getNotifications(); }
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); }
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); }
             if ($fieldname=='ProjectNumber') { $returnvalue = $this->getProjectNumber(); }
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); }
             if ($fieldname=='Restrictions') { $returnvalue = $this->getRestrictions(); }
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); }
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); }
             if ($fieldname=='Text3') { $returnvalue = $this->getText3(); }
             if ($fieldname=='Text4') { $returnvalue = $this->getText4(); }
             if ($fieldname=='TotalValue') { $returnvalue = $this->getTotalValue(); }
             if ($fieldname=='Visibility') { $returnvalue = $this->getVisibility(); }
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); }
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); }
             if ($fieldname=='YesNo3') { $returnvalue = $this->getYesNo3(); }
             if ($fieldname=='YesNo4') { $returnvalue = $this->getYesNo4(); }
             if ($fieldname=='YesNo5') { $returnvalue = $this->getYesNo5(); }
             if ($fieldname=='YesNo6') { $returnvalue = $this->getYesNo6(); }
             if ($fieldname=='VisibilitySetByID') { $returnvalue = $this->getVisibilitySetByID(); }
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); }
             if ($fieldname=='CatalogerID') { $returnvalue = $this->getCatalogerID(); }
             if ($fieldname=='ContainerID') { $returnvalue = $this->getContainerID(); }
             if ($fieldname=='CollectingEventID') { $returnvalue = $this->getCollectingEventID(); }
             if ($fieldname=='CollectionObjectAttributeID') { $returnvalue = $this->getCollectionObjectAttributeID(); }
             if ($fieldname=='PaleoContextID') { $returnvalue = $this->getPaleoContextID(); }
             if ($fieldname=='CollectionID') { $returnvalue = $this->getCollectionID(); }
             if ($fieldname=='FieldNotebookPageID') { $returnvalue = $this->getFieldNotebookPageID(); }
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); }
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*CollectionObjectID*/
   public function getCollectionObjectID() {
       if ($this->CollectionObjectID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionObjectID));
       }
   }
   public function setCollectionObjectID($CollectionObjectID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionObjectID)) > huh_collectionobject::COLLECTIONOBJECTID_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $CollectionObjectID = trim($CollectionObjectID);
       if (!ctype_digit(strval($CollectionObjectID)) && trim(strval($CollectionObjectID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionObjectID = $this->l_addslashes($CollectionObjectID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_collectionobject::TIMESTAMPCREATED_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_collectionobject::TIMESTAMPMODIFIED_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_collectionobject::VERSION_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*CollectionMemberID*/
   public function getCollectionMemberID() {
       if ($this->CollectionMemberID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionMemberID));
       }
   }
   public function setCollectionMemberID($CollectionMemberID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionMemberID)) > huh_collectionobject::COLLECTIONMEMBERID_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $CollectionMemberID = trim($CollectionMemberID);
       if (!ctype_digit(strval($CollectionMemberID))) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionMemberID = $this->l_addslashes($CollectionMemberID);
       $this->dirty = true;
   }
/*AltCatalogNumber*/
   public function getAltCatalogNumber() {
       if ($this->AltCatalogNumber==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AltCatalogNumber));
       }
   }
   public function setAltCatalogNumber($AltCatalogNumber) {
       if (strlen($AltCatalogNumber) > huh_collectionobject::ALTCATALOGNUMBER_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->AltCatalogNumber = $this->l_addslashes($AltCatalogNumber);
       $this->dirty = true;
   }
/*Availability*/
   public function getAvailability() {
       if ($this->Availability==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Availability));
       }
   }
   public function setAvailability($Availability) {
       if (strlen($Availability) > huh_collectionobject::AVAILABILITY_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Availability = $this->l_addslashes($Availability);
       $this->dirty = true;
   }
/*CatalogNumber*/
   public function getCatalogNumber() {
       if ($this->CatalogNumber==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CatalogNumber));
       }
   }
   public function setCatalogNumber($CatalogNumber) {
       if (strlen($CatalogNumber) > huh_collectionobject::CATALOGNUMBER_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->CatalogNumber = $this->l_addslashes($CatalogNumber);
       $this->dirty = true;
   }
/*CatalogedDate*/
   public function getCatalogedDate() {
       if ($this->CatalogedDate==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CatalogedDate));
       }
   }
   public function setCatalogedDate($CatalogedDate) {
       if (strlen($CatalogedDate) > huh_collectionobject::CATALOGEDDATE_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->CatalogedDate = $this->l_addslashes($CatalogedDate);
       $this->dirty = true;
   }
/*CatalogedDatePrecision*/
   public function getCatalogedDatePrecision() {
       if ($this->CatalogedDatePrecision==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CatalogedDatePrecision));
       }
   }
   public function setCatalogedDatePrecision($CatalogedDatePrecision) {
       if (strlen($CatalogedDatePrecision) > huh_collectionobject::CATALOGEDDATEPRECISION_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->CatalogedDatePrecision = $this->l_addslashes($CatalogedDatePrecision);
       $this->dirty = true;
   }
/*CatalogedDateVerbatim*/
   public function getCatalogedDateVerbatim() {
       if ($this->CatalogedDateVerbatim==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CatalogedDateVerbatim));
       }
   }
   public function setCatalogedDateVerbatim($CatalogedDateVerbatim) {
       if (strlen($CatalogedDateVerbatim) > huh_collectionobject::CATALOGEDDATEVERBATIM_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->CatalogedDateVerbatim = $this->l_addslashes($CatalogedDateVerbatim);
       $this->dirty = true;
   }
/*CountAmt*/
   public function getCountAmt() {
       if ($this->CountAmt==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CountAmt));
       }
   }
   public function setCountAmt($CountAmt) {
       if (strlen(preg_replace('/[^0-9]/','',$CountAmt)) > huh_collectionobject::COUNTAMT_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $CountAmt = trim($CountAmt);
       if (!ctype_digit(strval($CountAmt)) && trim(strval($CountAmt))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CountAmt = $this->l_addslashes($CountAmt);
       $this->dirty = true;
   }
/*Description*/
   public function getDescription() {
       if ($this->Description==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Description));
       }
   }
   public function setDescription($Description) {
       if (strlen($Description) > huh_collectionobject::DESCRIPTION_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Description = $this->l_addslashes($Description);
       $this->dirty = true;
   }
/*FieldNumber*/
   public function getFieldNumber() {
       if ($this->FieldNumber==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FieldNumber));
       }
   }
   public function setFieldNumber($FieldNumber) {
       if (strlen($FieldNumber) > huh_collectionobject::FIELDNUMBER_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->FieldNumber = $this->l_addslashes($FieldNumber);
       $this->dirty = true;
   }
/*GUID*/
   public function getGUID() {
       if ($this->GUID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GUID));
       }
   }
   public function setGUID($GUID) {
       if (strlen($GUID) > huh_collectionobject::GUID_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->GUID = $this->l_addslashes($GUID);
       $this->dirty = true;
   }
/*InternalRemarks*/
   public function getInternalRemarks() {
       if ($this->InternalRemarks==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->InternalRemarks));
       }
   }
   public function setInternalRemarks($InternalRemarks) {
       if (strlen($InternalRemarks) > huh_collectionobject::INTERNALREMARKS_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->InternalRemarks = $this->l_addslashes($InternalRemarks);
       $this->dirty = true;
   }
/*Modifier*/
   public function getModifier() {
       if ($this->Modifier==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Modifier));
       }
   }
   public function setModifier($Modifier) {
       if (strlen($Modifier) > huh_collectionobject::MODIFIER_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Modifier = $this->l_addslashes($Modifier);
       $this->dirty = true;
   }
/*Name*/
   public function getName() {
       if ($this->Name==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Name));
       }
   }
   public function setName($Name) {
       if (strlen($Name) > huh_collectionobject::NAME_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Name = $this->l_addslashes($Name);
       $this->dirty = true;
   }
/*Notifications*/
   public function getNotifications() {
       if ($this->Notifications==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Notifications));
       }
   }
   public function setNotifications($Notifications) {
       if (strlen($Notifications) > huh_collectionobject::NOTIFICATIONS_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Notifications = $this->l_addslashes($Notifications);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen($Number1) > huh_collectionobject::NUMBER1_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen($Number2) > huh_collectionobject::NUMBER2_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*ProjectNumber*/
   public function getProjectNumber() {
       if ($this->ProjectNumber==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ProjectNumber));
       }
   }
   public function setProjectNumber($ProjectNumber) {
       if (strlen($ProjectNumber) > huh_collectionobject::PROJECTNUMBER_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->ProjectNumber = $this->l_addslashes($ProjectNumber);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_collectionobject::REMARKS_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*Restrictions*/
   public function getRestrictions() {
       if ($this->Restrictions==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Restrictions));
       }
   }
   public function setRestrictions($Restrictions) {
       if (strlen($Restrictions) > huh_collectionobject::RESTRICTIONS_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Restrictions = $this->l_addslashes($Restrictions);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_collectionobject::TEXT1_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_collectionobject::TEXT2_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*Text3*/
   public function getText3() {
       if ($this->Text3==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text3));
       }
   }
   public function setText3($Text3) {
       if (strlen($Text3) > huh_collectionobject::TEXT3_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Text3 = $this->l_addslashes($Text3);
       $this->dirty = true;
   }
/*Text4*/
   public function getText4() {
       if ($this->Text4==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text4));
       }
   }
   public function setText4($Text4) {
       if (strlen($Text4) > huh_collectionobject::TEXT4_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Text4 = $this->l_addslashes($Text4);
       $this->dirty = true;
   }
/*TotalValue*/
   public function getTotalValue() {
       if ($this->TotalValue==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TotalValue));
       }
   }
   public function setTotalValue($TotalValue) {
       if (strlen(preg_replace('/[^0-9]/','',$TotalValue)) > huh_collectionobject::TOTALVALUE_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $TotalValue = trim($TotalValue);
       if (!is_numeric($TotalValue) && trim(strval($TotalValue))!='' ) {
             throw new Exception("Value must be a number");
       }
       $this->TotalValue = $this->l_addslashes($TotalValue);
       $this->dirty = true;
   }
/*Visibility*/
   public function getVisibility() {
       if ($this->Visibility==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Visibility));
       }
   }
   public function setVisibility($Visibility) {
       if (strlen($Visibility) > huh_collectionobject::VISIBILITY_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->Visibility = $this->l_addslashes($Visibility);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_collectionobject::YESNO1_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_collectionobject::YESNO2_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*YesNo3*/
   public function getYesNo3() {
       if ($this->YesNo3==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo3));
       }
   }
   public function setYesNo3($YesNo3) {
       if (strlen($YesNo3) > huh_collectionobject::YESNO3_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->YesNo3 = $this->l_addslashes($YesNo3);
       $this->dirty = true;
   }
/*YesNo4*/
   public function getYesNo4() {
       if ($this->YesNo4==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo4));
       }
   }
   public function setYesNo4($YesNo4) {
       if (strlen($YesNo4) > huh_collectionobject::YESNO4_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->YesNo4 = $this->l_addslashes($YesNo4);
       $this->dirty = true;
   }
/*YesNo5*/
   public function getYesNo5() {
       if ($this->YesNo5==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo5));
       }
   }
   public function setYesNo5($YesNo5) {
       if (strlen($YesNo5) > huh_collectionobject::YESNO5_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->YesNo5 = $this->l_addslashes($YesNo5);
       $this->dirty = true;
   }
/*YesNo6*/
   public function getYesNo6() {
       if ($this->YesNo6==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo6));
       }
   }
   public function setYesNo6($YesNo6) {
       if (strlen($YesNo6) > huh_collectionobject::YESNO6_SIZE) {
           throw new Exception('Value exceeds field length.');
       }
       $this->YesNo6 = $this->l_addslashes($YesNo6);
       $this->dirty = true;
   }
/*VisibilitySetByID*/
   public function getVisibilitySetByID() {
       if ($this->VisibilitySetByID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->VisibilitySetByID));
       }
   }
   public function setVisibilitySetByID($VisibilitySetByID) {
       if (strlen(preg_replace('/[^0-9]/','',$VisibilitySetByID)) > huh_collectionobject::VISIBILITYSETBYID_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $VisibilitySetByID = trim($VisibilitySetByID);
       if (!ctype_digit(strval($VisibilitySetByID)) && trim(strval($VisibilitySetByID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->VisibilitySetByID = $this->l_addslashes($VisibilitySetByID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_collectionobject::CREATEDBYAGENTID_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*CatalogerID*/
   public function getCatalogerID() {
       if ($this->CatalogerID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CatalogerID));
       }
   }
   public function setCatalogerID($CatalogerID) {
       if (strlen(preg_replace('/[^0-9]/','',$CatalogerID)) > huh_collectionobject::CATALOGERID_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $CatalogerID = trim($CatalogerID);
       if (!ctype_digit(strval($CatalogerID)) && trim(strval($CatalogerID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CatalogerID = $this->l_addslashes($CatalogerID);
       $this->dirty = true;
   }
/*ContainerID*/
   public function getContainerID() {
       if ($this->ContainerID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ContainerID));
       }
   }
   public function setContainerID($ContainerID) {
       if (strlen(preg_replace('/[^0-9]/','',$ContainerID)) > huh_collectionobject::CONTAINERID_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $ContainerID = trim($ContainerID);
       if (!ctype_digit(strval($ContainerID)) && trim(strval($ContainerID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ContainerID = $this->l_addslashes($ContainerID);
       $this->dirty = true;
   }
/*CollectingEventID*/
   public function getCollectingEventID() {
       if ($this->CollectingEventID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectingEventID));
       }
   }
   public function setCollectingEventID($CollectingEventID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectingEventID)) > huh_collectionobject::COLLECTINGEVENTID_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $CollectingEventID = trim($CollectingEventID);
       if (!ctype_digit(strval($CollectingEventID)) && trim(strval($CollectingEventID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectingEventID = $this->l_addslashes($CollectingEventID);
       $this->dirty = true;
   }
/*CollectionObjectAttributeID*/
   public function getCollectionObjectAttributeID() {
       if ($this->CollectionObjectAttributeID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionObjectAttributeID));
       }
   }
   public function setCollectionObjectAttributeID($CollectionObjectAttributeID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionObjectAttributeID)) > huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $CollectionObjectAttributeID = trim($CollectionObjectAttributeID);
       if (!ctype_digit(strval($CollectionObjectAttributeID)) && trim(strval($CollectionObjectAttributeID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionObjectAttributeID = $this->l_addslashes($CollectionObjectAttributeID);
       $this->dirty = true;
   }
/*PaleoContextID*/
   public function getPaleoContextID() {
       if ($this->PaleoContextID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PaleoContextID));
       }
   }
   public function setPaleoContextID($PaleoContextID) {
       if (strlen(preg_replace('/[^0-9]/','',$PaleoContextID)) > huh_collectionobject::PALEOCONTEXTID_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $PaleoContextID = trim($PaleoContextID);
       if (!ctype_digit(strval($PaleoContextID)) && trim(strval($PaleoContextID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PaleoContextID = $this->l_addslashes($PaleoContextID);
       $this->dirty = true;
   }
/*CollectionID*/
   public function getCollectionID() {
       if ($this->CollectionID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionID));
       }
   }
   public function setCollectionID($CollectionID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionID)) > huh_collectionobject::COLLECTIONID_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $CollectionID = trim($CollectionID);
       if (!ctype_digit(strval($CollectionID))) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionID = $this->l_addslashes($CollectionID);
       $this->dirty = true;
   }
/*FieldNotebookPageID*/
   public function getFieldNotebookPageID() {
       if ($this->FieldNotebookPageID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FieldNotebookPageID));
       }
   }
   public function setFieldNotebookPageID($FieldNotebookPageID) {
       if (strlen(preg_replace('/[^0-9]/','',$FieldNotebookPageID)) > huh_collectionobject::FIELDNOTEBOOKPAGEID_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $FieldNotebookPageID = trim($FieldNotebookPageID);
       if (!ctype_digit(strval($FieldNotebookPageID)) && trim(strval($FieldNotebookPageID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->FieldNotebookPageID = $this->l_addslashes($FieldNotebookPageID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) {
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_collectionobject::MODIFIEDBYAGENTID_SIZE) {
           throw new Exception('Value has too many digits for the field length.');
       }
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key
        $returnvalue = '';
        $returnvalue .= $this->getCollectionObjectID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields
        $returnvalue = array();
        $returnvalue['CollectionObjectID'] = $this->getCollectionObjectID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_CollectionObjectIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_CollectionMemberIDMYSQLI_TYPE = 'i';
  const C_AltCatalogNumberMYSQLI_TYPE = 's';
  const C_AvailabilityMYSQLI_TYPE = 's';
  const C_CatalogNumberMYSQLI_TYPE = 's';
  const C_CatalogedDateMYSQLI_TYPE = 's';
  const C_CatalogedDatePrecisionMYSQLI_TYPE = 'i';
  const C_CatalogedDateVerbatimMYSQLI_TYPE = 's';
  const C_CountAmtMYSQLI_TYPE = 'i';
  const C_DescriptionMYSQLI_TYPE = 's';
  const C_FieldNumberMYSQLI_TYPE = 's';
  const C_GUIDMYSQLI_TYPE = 's';
  const C_InternalRemarksMYSQLI_TYPE = 's';
  const C_ModifierMYSQLI_TYPE = 's';
  const C_NameMYSQLI_TYPE = 's';
  const C_NotificationsMYSQLI_TYPE = 's';
  const C_Number1MYSQLI_TYPE = 's';
  const C_Number2MYSQLI_TYPE = 's';
  const C_ProjectNumberMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_RestrictionsMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_Text3MYSQLI_TYPE = 's';
  const C_Text4MYSQLI_TYPE = 's';
  const C_TotalValueMYSQLI_TYPE = 'd';
  const C_VisibilityMYSQLI_TYPE = 'i';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_YesNo3MYSQLI_TYPE = 'i';
  const C_YesNo4MYSQLI_TYPE = 'i';
  const C_YesNo5MYSQLI_TYPE = 'i';
  const C_YesNo6MYSQLI_TYPE = 'i';
  const C_VisibilitySetByIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_CatalogerIDMYSQLI_TYPE = 'i';
  const C_ContainerIDMYSQLI_TYPE = 'i';
  const C_CollectingEventIDMYSQLI_TYPE = 'i';
  const C_CollectionObjectAttributeIDMYSQLI_TYPE = 'i';
  const C_PaleoContextIDMYSQLI_TYPE = 'i';
  const C_CollectionIDMYSQLI_TYPE = 'i';
  const C_FieldNotebookPageIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) {
      $retval = '';
      if ($aFieldname=='CollectionObjectID') { $retval = self::C_CollectionObjectIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='CollectionMemberID') { $retval = self::C_CollectionMemberIDMYSQLI_TYPE; }
      if ($aFieldname=='AltCatalogNumber') { $retval = self::C_AltCatalogNumberMYSQLI_TYPE; }
      if ($aFieldname=='Availability') { $retval = self::C_AvailabilityMYSQLI_TYPE; }
      if ($aFieldname=='CatalogNumber') { $retval = self::C_CatalogNumberMYSQLI_TYPE; }
      if ($aFieldname=='CatalogedDate') { $retval = self::C_CatalogedDateMYSQLI_TYPE; }
      if ($aFieldname=='CatalogedDatePrecision') { $retval = self::C_CatalogedDatePrecisionMYSQLI_TYPE; }
      if ($aFieldname=='CatalogedDateVerbatim') { $retval = self::C_CatalogedDateVerbatimMYSQLI_TYPE; }
      if ($aFieldname=='CountAmt') { $retval = self::C_CountAmtMYSQLI_TYPE; }
      if ($aFieldname=='Description') { $retval = self::C_DescriptionMYSQLI_TYPE; }
      if ($aFieldname=='FieldNumber') { $retval = self::C_FieldNumberMYSQLI_TYPE; }
      if ($aFieldname=='GUID') { $retval = self::C_GUIDMYSQLI_TYPE; }
      if ($aFieldname=='InternalRemarks') { $retval = self::C_InternalRemarksMYSQLI_TYPE; }
      if ($aFieldname=='Modifier') { $retval = self::C_ModifierMYSQLI_TYPE; }
      if ($aFieldname=='Name') { $retval = self::C_NameMYSQLI_TYPE; }
      if ($aFieldname=='Notifications') { $retval = self::C_NotificationsMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='ProjectNumber') { $retval = self::C_ProjectNumberMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='Restrictions') { $retval = self::C_RestrictionsMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='Text3') { $retval = self::C_Text3MYSQLI_TYPE; }
      if ($aFieldname=='Text4') { $retval = self::C_Text4MYSQLI_TYPE; }
      if ($aFieldname=='TotalValue') { $retval = self::C_TotalValueMYSQLI_TYPE; }
      if ($aFieldname=='Visibility') { $retval = self::C_VisibilityMYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='YesNo3') { $retval = self::C_YesNo3MYSQLI_TYPE; }
      if ($aFieldname=='YesNo4') { $retval = self::C_YesNo4MYSQLI_TYPE; }
      if ($aFieldname=='YesNo5') { $retval = self::C_YesNo5MYSQLI_TYPE; }
      if ($aFieldname=='YesNo6') { $retval = self::C_YesNo6MYSQLI_TYPE; }
      if ($aFieldname=='VisibilitySetByID') { $retval = self::C_VisibilitySetByIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='CatalogerID') { $retval = self::C_CatalogerIDMYSQLI_TYPE; }
      if ($aFieldname=='ContainerID') { $retval = self::C_ContainerIDMYSQLI_TYPE; }
      if ($aFieldname=='CollectingEventID') { $retval = self::C_CollectingEventIDMYSQLI_TYPE; }
      if ($aFieldname=='CollectionObjectAttributeID') { $retval = self::C_CollectionObjectAttributeIDMYSQLI_TYPE; }
      if ($aFieldname=='PaleoContextID') { $retval = self::C_PaleoContextIDMYSQLI_TYPE; }
      if ($aFieldname=='CollectionID') { $retval = self::C_CollectionIDMYSQLI_TYPE; }
      if ($aFieldname=='FieldNotebookPageID') { $retval = self::C_FieldNotebookPageIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) {
                 $this->setCollectionObjectID($pk[CollectionObjectID]);
             } else { ;
                 $this->setCollectionObjectID($pk);
             };
        }
        catch (Exception $e) {
             throw new Exception($e->getMessage());
        }
        if($this->CollectionObjectID != NULL) {
           $sql = 'SELECT CollectionObjectID, TimestampCreated, TimestampModified, Version, CollectionMemberID, AltCatalogNumber, Availability, CatalogNumber, CatalogedDate, CatalogedDatePrecision, CatalogedDateVerbatim, CountAmt, Description, FieldNumber, GUID, InternalRemarks, Modifier, Name, Notifications, Number1, Number2, ProjectNumber, Remarks, Restrictions, Text1, Text2, Text3, Text4, TotalValue, Visibility, YesNo1, YesNo2, YesNo3, YesNo4, YesNo5, YesNo6, VisibilitySetByID, CreatedByAgentID, CatalogerID, ContainerID, CollectingEventID, CollectionObjectAttributeID, PaleoContextID, CollectionID, FieldNotebookPageID, ModifiedByAgentID FROM collectionobject WHERE CollectionObjectID = '.$this->CollectionObjectID ;

           $preparesql = 'SELECT CollectionObjectID, TimestampCreated, TimestampModified, Version, CollectionMemberID, AltCatalogNumber, Availability, CatalogNumber, CatalogedDate, CatalogedDatePrecision, CatalogedDateVerbatim, CountAmt, Description, FieldNumber, GUID, InternalRemarks, Modifier, Name, Notifications, Number1, Number2, ProjectNumber, Remarks, Restrictions, Text1, Text2, Text3, Text4, TotalValue, Visibility, CAST(YesNo1 AS unsigned integer), YesNo2, YesNo3, YesNo4, YesNo5, YesNo6, VisibilitySetByID, CreatedByAgentID, CatalogerID, ContainerID, CollectingEventID, CollectionObjectAttributeID, PaleoContextID, CollectionID, FieldNotebookPageID, ModifiedByAgentID FROM collectionobject WHERE CollectionObjectID = ? ';

           if ($statement = $connection->prepare($preparesql)) {
              $statement->bind_param("i", $this->CollectionObjectID);
              $statement->execute();
              $statement->bind_result($this->CollectionObjectID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->AltCatalogNumber, $this->Availability, $this->CatalogNumber, $this->CatalogedDate, $this->CatalogedDatePrecision, $this->CatalogedDateVerbatim, $this->CountAmt, $this->Description, $this->FieldNumber, $this->GUID, $this->InternalRemarks, $this->Modifier, $this->Name, $this->Notifications, $this->Number1, $this->Number2, $this->ProjectNumber, $this->Remarks, $this->Restrictions, $this->Text1, $this->Text2, $this->Text3, $this->Text4, $this->TotalValue, $this->Visibility, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->YesNo4, $this->YesNo5, $this->YesNo6, $this->VisibilitySetByID, $this->CreatedByAgentID, $this->CatalogerID, $this->ContainerID, $this->CollectingEventID, $this->CollectionObjectAttributeID, $this->PaleoContextID, $this->CollectionID, $this->FieldNotebookPageID, $this->ModifiedByAgentID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else {
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->CollectionObjectID!= NULL) {
            $sql  = 'UPDATE  collectionobject SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", CollectionMemberID = ? ";
            $sql .=  ", AltCatalogNumber = ? ";
            $sql .=  ", Availability = ? ";
            $sql .=  ", CatalogNumber = ? ";
            $sql .=  ", CatalogedDate = ? ";
            $sql .=  ", CatalogedDatePrecision = ? ";
            $sql .=  ", CatalogedDateVerbatim = ? ";
            $sql .=  ", CountAmt = ? ";
            $sql .=  ", Description = ? ";
            $sql .=  ", FieldNumber = ? ";
            $sql .=  ", GUID = ? ";
            $sql .=  ", InternalRemarks = ? ";
            $sql .=  ", Modifier = ? ";
            $sql .=  ", Name = ? ";
            $sql .=  ", Notifications = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", ProjectNumber = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", Restrictions = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", Text3 = ? ";
            $sql .=  ", Text4 = ? ";
            $sql .=  ", TotalValue = ? ";
            $sql .=  ", Visibility = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", YesNo3 = ? ";
            $sql .=  ", YesNo4 = ? ";
            $sql .=  ", YesNo5 = ? ";
            $sql .=  ", YesNo6 = ? ";
            $sql .=  ", VisibilitySetByID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", CatalogerID = ? ";
            $sql .=  ", ContainerID = ? ";
            $sql .=  ", CollectingEventID = ? ";
            $sql .=  ", CollectionObjectAttributeID = ? ";
            $sql .=  ", PaleoContextID = ? ";
            $sql .=  ", CollectionID = ? ";
            $sql .=  ", FieldNotebookPageID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";

            $sql .= "  WHERE CollectionObjectID = ? ";
        } else {
            $sql  = 'INSERT INTO collectionobject ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( CollectionObjectID ,  TimestampCreated ,  TimestampModified ,  Version ,  CollectionMemberID ,  AltCatalogNumber ,  Availability ,  CatalogNumber ,  CatalogedDate ,  CatalogedDatePrecision ,  CatalogedDateVerbatim ,  CountAmt ,  Description ,  FieldNumber ,  GUID ,  InternalRemarks ,  Modifier ,  Name ,  Notifications ,  Number1 ,  Number2 ,  ProjectNumber ,  Remarks ,  Restrictions ,  Text1 ,  Text2 ,  Text3 ,  Text4 ,  TotalValue ,  Visibility ,  YesNo1 ,  YesNo2 ,  YesNo3 ,  YesNo4 ,  YesNo5 ,  YesNo6 ,  VisibilitySetByID ,  CreatedByAgentID ,  CatalogerID ,  ContainerID ,  CollectingEventID ,  CollectionObjectAttributeID ,  PaleoContextID ,  CollectionID ,  FieldNotebookPageID ,  ModifiedByAgentID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) {
           if ($this->CollectionObjectID!= NULL ) {
              $statement->bind_param("issiissssisissssssssssssssssdiiiiiiiiiiiiiiiiii", $this->CollectionObjectID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->AltCatalogNumber , $this->Availability , $this->CatalogNumber , $this->CatalogedDate , $this->CatalogedDatePrecision , $this->CatalogedDateVerbatim , $this->CountAmt , $this->Description , $this->FieldNumber , $this->GUID , $this->InternalRemarks , $this->Modifier , $this->Name , $this->Notifications , $this->Number1 , $this->Number2 , $this->ProjectNumber , $this->Remarks , $this->Restrictions , $this->Text1 , $this->Text2 , $this->Text3 , $this->Text4 , $this->TotalValue , $this->Visibility , $this->YesNo1 , $this->YesNo2 , $this->YesNo3 , $this->YesNo4 , $this->YesNo5 , $this->YesNo6 , $this->VisibilitySetByID , $this->CreatedByAgentID , $this->CatalogerID , $this->ContainerID , $this->CollectingEventID , $this->CollectionObjectAttributeID , $this->PaleoContextID , $this->CollectionID , $this->FieldNotebookPageID , $this->ModifiedByAgentID , $this->CollectionObjectID );
           } else {
              $statement->bind_param("issiissssisissssssssssssssssdiiiiiiiiiiiiiiiii", $this->CollectionObjectID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->AltCatalogNumber , $this->Availability , $this->CatalogNumber , $this->CatalogedDate , $this->CatalogedDatePrecision , $this->CatalogedDateVerbatim , $this->CountAmt , $this->Description , $this->FieldNumber , $this->GUID , $this->InternalRemarks , $this->Modifier , $this->Name , $this->Notifications , $this->Number1 , $this->Number2 , $this->ProjectNumber , $this->Remarks , $this->Restrictions , $this->Text1 , $this->Text2 , $this->Text3 , $this->Text4 , $this->TotalValue , $this->Visibility , $this->YesNo1 , $this->YesNo2 , $this->YesNo3 , $this->YesNo4 , $this->YesNo5 , $this->YesNo6 , $this->VisibilitySetByID , $this->CreatedByAgentID , $this->CatalogerID , $this->ContainerID , $this->CollectingEventID , $this->CollectionObjectAttributeID , $this->PaleoContextID , $this->CollectionID , $this->FieldNotebookPageID , $this->ModifiedByAgentID );
           }
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error;
           }
           $statement->close();
        } else {
            $this->error = mysqli_error($connection);
        }
        if ($this->error=='') {
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->CollectionObjectID != NULL) {
           $sql = 'SELECT CollectionObjectID, TimestampCreated, TimestampModified, Version, CollectionMemberID, AltCatalogNumber, Availability, CatalogNumber, CatalogedDate, CatalogedDatePrecision, CatalogedDateVerbatim, CountAmt, Description, FieldNumber, GUID, InternalRemarks, Modifier, Name, Notifications, Number1, Number2, ProjectNumber, Remarks, Restrictions, Text1, Text2, Text3, Text4, TotalValue, Visibility, YesNo1, YesNo2, YesNo3, YesNo4, YesNo5, YesNo6, VisibilitySetByID, CreatedByAgentID, CatalogerID, ContainerID, CollectingEventID, CollectionObjectAttributeID, PaleoContextID, CollectionID, FieldNotebookPageID, ModifiedByAgentID FROM collectionobject WHERE CollectionObjectID = "'.$this->CollectionObjectID.'"  ' ;

           $preparedsql = 'SELECT  FROM collectionobject WHERE  and CollectionObjectID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) {
           $statement->bind_param("issiissssisissssssssssssssssdiiiiiiiiiiiiiiiii", $this->CollectionObjectID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->AltCatalogNumber, $this->Availability, $this->CatalogNumber, $this->CatalogedDate, $this->CatalogedDatePrecision, $this->CatalogedDateVerbatim, $this->CountAmt, $this->Description, $this->FieldNumber, $this->GUID, $this->InternalRemarks, $this->Modifier, $this->Name, $this->Notifications, $this->Number1, $this->Number2, $this->ProjectNumber, $this->Remarks, $this->Restrictions, $this->Text1, $this->Text2, $this->Text3, $this->Text4, $this->TotalValue, $this->Visibility, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->YesNo4, $this->YesNo5, $this->YesNo6, $this->VisibilitySetByID, $this->CreatedByAgentID, $this->CatalogerID, $this->ContainerID, $this->CollectingEventID, $this->CollectionObjectAttributeID, $this->PaleoContextID, $this->CollectionID, $this->FieldNotebookPageID, $this->ModifiedByAgentID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM collectionobject WHERE  and CollectionObjectID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) {
                   $stmt_delete->bind_param("issiissssisissssssssssssssssdiiiiiiiiiiiiiiiii", $this->CollectionObjectID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->AltCatalogNumber, $this->Availability, $this->CatalogNumber, $this->CatalogedDate, $this->CatalogedDatePrecision, $this->CatalogedDateVerbatim, $this->CountAmt, $this->Description, $this->FieldNumber, $this->GUID, $this->InternalRemarks, $this->Modifier, $this->Name, $this->Notifications, $this->Number1, $this->Number2, $this->ProjectNumber, $this->Remarks, $this->Restrictions, $this->Text1, $this->Text2, $this->Text3, $this->Text4, $this->TotalValue, $this->Visibility, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->YesNo4, $this->YesNo5, $this->YesNo6, $this->VisibilitySetByID, $this->CreatedByAgentID, $this->CatalogerID, $this->ContainerID, $this->CollectingEventID, $this->CollectionObjectAttributeID, $this->PaleoContextID, $this->CollectionID, $this->FieldNotebookPageID, $this->ModifiedByAgentID);
                   if ($stmnt_delete->execute()) {
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection);
                   }
                   $stmt_delete->close();
                }
           } else {
               $this->error = mysqli_error($connection);
           }
           $tatement->close();
        } else {
            $this->error = mysqli_error($connection);
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->CollectionObjectID = NULL;
        } else {
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM collectionobject';
        if ($result = $connection->query($sql)) {
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else {
           $this->error = mysqli_error($connection);
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) {
               $operator = '=';
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') {
                   $wherebit .= "$and ($fieldname is null or $fieldname='') ";
               } else {
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               }
               $and = ' and ';
           }
       }
       $sql = "SELECT CollectionObjectID FROM collectionobject $wherebit";
       if ($wherebit=='') {
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) {
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement.
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_collectionobject();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables
  public function loadLinkedFromcollectionobjectattachment() {
      // ForeignKey in: collectionobjectattachment
      $t = new collectionobjectattachment();
  }
  public function loadLinkedFromcollectionobjectattr() {
      // ForeignKey in: collectionobjectattr
      $t = new collectionobjectattr();
  }
  public function loadLinkedFromdnasequence() {
      // ForeignKey in: dnasequence
      $t = new dnasequence();
  }
  public function loadLinkedFromfragment() {
      // ForeignKey in: fragment
      $t = new fragment();
  }
  public function loadLinkedFromproject_colobj() {
      // ForeignKey in: project_colobj
      $t = new project_colobj();
  }

   //---------------------------------------------------------------------------

  public function loadLinkedTo() {
     $returnvalue = array();
       // fk: VisibilitySetByID
      $t = new huh_specifyuser();
      $t->load($this->getVisibilitySetByID());
      $returnvalue['VisibilitySetByID'] = $t;
       // fk: CreatedByAgentID
      $t = new huh_agent();
      $t->load($this->getCreatedByAgentID());
      $returnvalue['CreatedByAgentID'] = $t;
       // fk: CatalogerID
      $t = new huh_agent();
      $t->load($this->getCatalogerID());
      $returnvalue['CatalogerID'] = $t;
       // fk: ContainerID
      $t = new huh_container();
      $t->load($this->getContainerID());
      $returnvalue['ContainerID'] = $t;
       // fk: CollectingEventID
      $t = new huh_collectingevent();
      $t->load($this->getCollectingEventID());
      $returnvalue['CollectingEventID'] = $t;
       // fk: CollectionObjectAttributeID
      $t = new huh_collectionobjectattribute();
      $t->load($this->getCollectionObjectAttributeID());
      $returnvalue['CollectionObjectAttributeID'] = $t;
       // fk: PaleoContextID
      $t = new huh_paleocontext();
      $t->load($this->getPaleoContextID());
      $returnvalue['PaleoContextID'] = $t;
       // fk: CollectionID
      $t = new huh_collection();
      $t->load($this->getCollectionID());
      $returnvalue['CollectionID'] = $t;
       // fk: FieldNotebookPageID
      $t = new huh_fieldnotebookpage();
      $t->load($this->getFieldNotebookPageID());
      $returnvalue['FieldNotebookPageID'] = $t;
       // fk: ModifiedByAgentID
      $t = new huh_agent();
      $t->load($this->getModifiedByAgentID());
      $returnvalue['ModifiedByAgentID'] = $t;

     return $returnvalue;
  }

  public function loadLinkedFromotheridentifier() {
    $t = new huh_otheridentifier();
    return $t->loadArrayByCollectionObjectID($this->getCollectionObjectID());
  }

   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; }
       $sql = "SELECT CollectionObjectID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(CollectionMemberID,'') || ' ' || IFNULL(AltCatalogNumber,'') || ' ' || IFNULL(Availability,'') || ' ' || IFNULL(CatalogNumber,'') || ' ' || IFNULL(CatalogedDate,'') || ' ' || IFNULL(CatalogedDatePrecision,'') || ' ' || IFNULL(CatalogedDateVerbatim,'') || ' ' || IFNULL(CountAmt,'') || ' ' || IFNULL(Description,'') || ' ' || IFNULL(FieldNumber,'') || ' ' || IFNULL(GUID,'') || ' ' || IFNULL(InternalRemarks,'') || ' ' || IFNULL(Modifier,'') || ' ' || IFNULL(Name,'') || ' ' || IFNULL(Notifications,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(ProjectNumber,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(Restrictions,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(Text3,'') || ' ' || IFNULL(Text4,'') || ' ' || IFNULL(TotalValue,'') || ' ' || IFNULL(Visibility,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(YesNo3,'') || ' ' || IFNULL(YesNo4,'') || ' ' || IFNULL(YesNo5,'') || ' ' || IFNULL(YesNo6,'') || ' ' || IFNULL(VisibilitySetByID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(CatalogerID,'') || ' ' || IFNULL(ContainerID,'') || ' ' || IFNULL(CollectingEventID,'') || ' ' || IFNULL(CollectionObjectAttributeID,'') || ' ' || IFNULL(PaleoContextID,'') || ' ' || IFNULL(CollectionID,'') || ' ' || IFNULL(FieldNotebookPageID,'') || ' ' || IFNULL(ModifiedByAgentID,'')) FROM collectionobject order by CollectionMemberID, AltCatalogNumber, CatalogNumber, CatalogedDate, FieldNumber, GUID, VisibilitySetByID, CreatedByAgentID, CatalogerID, ContainerID, CollectingEventID, CollectionObjectAttributeID, PaleoContextID, CollectionID, FieldNotebookPageID, ModifiedByAgentID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) {
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') {
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else {
          $this->error = mysqli_error();
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) {
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; }
          $preparemysql = "SELECT DISTINCT $fieldesc FROM collectionobject order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) {
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') {
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCollectionMemberID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE CollectionMemberID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE CollectionMemberID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAltCatalogNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE AltCatalogNumber $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE AltCatalogNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCatalogNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE CatalogNumber $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE CatalogNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCatalogedDate($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE CatalogedDate $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE CatalogedDate $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByFieldNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE FieldNumber $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE FieldNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGUID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE GUID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE GUID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByVisibilitySetByID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE VisibilitySetByID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE VisibilitySetByID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCatalogerID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE CatalogerID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE CatalogerID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByContainerID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE ContainerID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE ContainerID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCollectingEventID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE CollectingEventID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE CollectingEventID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCollectionObjectAttributeID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE CollectionObjectAttributeID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE CollectionObjectAttributeID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPaleoContextID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE PaleoContextID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE PaleoContextID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCollectionID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE CollectionID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE CollectionID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByFieldNotebookPageID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE FieldNotebookPageID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE FieldNotebookPageID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT CollectionObjectID FROM collectionobject WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT CollectionObjectID FROM collectionobject WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) {
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectionobject();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCollectionMemberID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionMemberID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, CollectionMemberID FROM collectionobject group by CollectionMemberID order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&CollectionMemberID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAltCatalogNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AltCatalogNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, AltCatalogNumber FROM collectionobject group by AltCatalogNumber order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&AltCatalogNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCatalogNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CatalogNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, CatalogNumber FROM collectionobject group by CatalogNumber order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&CatalogNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCatalogedDate($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CatalogedDate ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, CatalogedDate FROM collectionobject group by CatalogedDate order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&CatalogedDate=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctFieldNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' FieldNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, FieldNumber FROM collectionobject group by FieldNumber order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&FieldNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGUID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GUID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, GUID FROM collectionobject group by GUID order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&GUID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctVisibilitySetByID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' VisibilitySetByID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, VisibilitySetByID FROM collectionobject group by VisibilitySetByID order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&VisibilitySetByID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM collectionobject group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCatalogerID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CatalogerID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, CatalogerID FROM collectionobject group by CatalogerID order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&CatalogerID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctContainerID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ContainerID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, ContainerID FROM collectionobject group by ContainerID order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&ContainerID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCollectingEventID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectingEventID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, CollectingEventID FROM collectionobject group by CollectingEventID order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&CollectingEventID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCollectionObjectAttributeID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionObjectAttributeID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, CollectionObjectAttributeID FROM collectionobject group by CollectionObjectAttributeID order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&CollectionObjectAttributeID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPaleoContextID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' PaleoContextID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, PaleoContextID FROM collectionobject group by PaleoContextID order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&PaleoContextID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCollectionID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, CollectionID FROM collectionobject group by CollectionID order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&CollectionID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctFieldNotebookPageID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' FieldNotebookPageID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, FieldNotebookPageID FROM collectionobject group by FieldNotebookPageID order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&FieldNotebookPageID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; }
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM collectionobject group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) {
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]';
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') {
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else {
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) {
          case 'CollectionMemberID':
             $returnvalue = $this->selectDistinctCollectionMemberID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AltCatalogNumber':
             $returnvalue = $this->selectDistinctAltCatalogNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CatalogNumber':
             $returnvalue = $this->selectDistinctCatalogNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CatalogedDate':
             $returnvalue = $this->selectDistinctCatalogedDate($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'FieldNumber':
             $returnvalue = $this->selectDistinctFieldNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GUID':
             $returnvalue = $this->selectDistinctGUID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'VisibilitySetByID':
             $returnvalue = $this->selectDistinctVisibilitySetByID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CatalogerID':
             $returnvalue = $this->selectDistinctCatalogerID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ContainerID':
             $returnvalue = $this->selectDistinctContainerID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CollectingEventID':
             $returnvalue = $this->selectDistinctCollectingEventID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CollectionObjectAttributeID':
             $returnvalue = $this->selectDistinctCollectionObjectAttributeID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'PaleoContextID':
             $returnvalue = $this->selectDistinctPaleoContextID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CollectionID':
             $returnvalue = $this->selectDistinctCollectionID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'FieldNotebookPageID':
             $returnvalue = $this->selectDistinctFieldNotebookPageID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) {
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the collectionobject.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
//
class huh_collectionobjectView implements viewer
{
   var $model = null;
   public function setModel($aModel) {
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') {
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; }
          $nullpk = false;
          foreach ($primarykeys as $primarykey) {
              // Add fieldname=value pairs for primary key(s) to editLinkURL.
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; }
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_collectionobject <a href='$editLinkURL'>Edit</a></li>\n";  }
       }
       $returnvalue .= "<li>".huh_collectionobject::COLLECTIONOBJECTID.": ".$model->getCollectionObjectID()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::COLLECTIONMEMBERID.": ".$model->getCollectionMemberID()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::ALTCATALOGNUMBER.": ".$model->getAltCatalogNumber()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::AVAILABILITY.": ".$model->getAvailability()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::CATALOGNUMBER.": ".$model->getCatalogNumber()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::CATALOGEDDATE.": ".$model->getCatalogedDate()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::CATALOGEDDATEPRECISION.": ".$model->getCatalogedDatePrecision()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::CATALOGEDDATEVERBATIM.": ".$model->getCatalogedDateVerbatim()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::COUNTAMT.": ".$model->getCountAmt()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::DESCRIPTION.": ".$model->getDescription()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::FIELDNUMBER.": ".$model->getFieldNumber()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::GUID.": ".$model->getGUID()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::INTERNALREMARKS.": ".$model->getInternalRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::MODIFIER.": ".$model->getModifier()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::NAME.": ".$model->getName()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::NOTIFICATIONS.": ".$model->getNotifications()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::PROJECTNUMBER.": ".$model->getProjectNumber()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::RESTRICTIONS.": ".$model->getRestrictions()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::TEXT3.": ".$model->getText3()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::TEXT4.": ".$model->getText4()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::TOTALVALUE.": ".$model->getTotalValue()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::VISIBILITY.": ".$model->getVisibility()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::YESNO3.": ".$model->getYesNo3()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::YESNO4.": ".$model->getYesNo4()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::YESNO5.": ".$model->getYesNo5()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::YESNO6.": ".$model->getYesNo6()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::VISIBILITYSETBYID.": ".$model->getVisibilitySetByID()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::CATALOGERID.": ".$model->getCatalogerID()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::CONTAINERID.": ".$model->getContainerID()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::COLLECTINGEVENTID.": ".$model->getCollectingEventID()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID.": ".$model->getCollectionObjectAttributeID()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::PALEOCONTEXTID.": ".$model->getPaleoContextID()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::COLLECTIONID.": ".$model->getCollectionID()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::FIELDNOTEBOOKPAGEID.": ".$model->getFieldNotebookPageID()."</li>\n";
       $returnvalue .= "<li>".huh_collectionobject::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       if ($includeRelated) {
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>specifyuser</li>";
           $t_specifyuser = new huh_specifyuser();
           $t_specifyuserView = new huh_specifyuserView();
           $t_specifyuserView->setModel($t_specifyuser);
           if ($model->getVisibilitySetByID() != '') {
               $t_specifyuser->load($model->getVisibilitySetByID());
               $returnvalue .= $t_specifyuserView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') {
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCatalogerID() != '') {
               $t_agent->load($model->getCatalogerID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>container</li>";
           $t_container = new huh_container();
           $t_containerView = new huh_containerView();
           $t_containerView->setModel($t_container);
           if ($model->getContainerID() != '') {
               $t_container->load($model->getContainerID());
               $returnvalue .= $t_containerView->getDetailsView(false);
           }
           $returnvalue .= "<li>collectingevent</li>";
           $t_collectingevent = new huh_collectingevent();
           $t_collectingeventView = new huh_collectingeventView();
           $t_collectingeventView->setModel($t_collectingevent);
           if ($model->getCollectingEventID() != '') {
               $t_collectingevent->load($model->getCollectingEventID());
               $returnvalue .= $t_collectingeventView->getDetailsView(false);
           }
           $returnvalue .= "<li>collectionobjectattribute</li>";
           $t_collectionobjectattribute = new huh_collectionobjectattribute();
           $t_collectionobjectattributeView = new huh_collectionobjectattributeView();
           $t_collectionobjectattributeView->setModel($t_collectionobjectattribute);
           if ($model->getCollectionObjectAttributeID() != '') {
               $t_collectionobjectattribute->load($model->getCollectionObjectAttributeID());
               $returnvalue .= $t_collectionobjectattributeView->getDetailsView(false);
           }
           $returnvalue .= "<li>paleocontext</li>";
           $t_paleocontext = new huh_paleocontext();
           $t_paleocontextView = new huh_paleocontextView();
           $t_paleocontextView->setModel($t_paleocontext);
           if ($model->getPaleoContextID() != '') {
               $t_paleocontext->load($model->getPaleoContextID());
               $returnvalue .= $t_paleocontextView->getDetailsView(false);
           }
           $returnvalue .= "<li>collection</li>";
           $t_collection = new huh_collection();
           $t_collectionView = new huh_collectionView();
           $t_collectionView->setModel($t_collection);
           if ($model->getCollectionID() != '') {
               $t_collection->load($model->getCollectionID());
               $returnvalue .= $t_collectionView->getDetailsView(false);
           }
           $returnvalue .= "<li>fieldnotebookpage</li>";
           $t_fieldnotebookpage = new huh_fieldnotebookpage();
           $t_fieldnotebookpageView = new huh_fieldnotebookpageView();
           $t_fieldnotebookpageView->setModel($t_fieldnotebookpage);
           if ($model->getFieldNotebookPageID() != '') {
               $t_fieldnotebookpage->load($model->getFieldNotebookPageID());
               $returnvalue .= $t_fieldnotebookpageView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') {
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_collectionobject::COLLECTIONOBJECTID.': "'.$model->getCollectionObjectID().'",';
       $returnvalue .= '"'.huh_collectionobject::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_collectionobject::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_collectionobject::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_collectionobject::COLLECTIONMEMBERID.': "'.$model->getCollectionMemberID().'",';
       $returnvalue .= '"'.huh_collectionobject::ALTCATALOGNUMBER.': "'.$model->getAltCatalogNumber().'",';
       $returnvalue .= '"'.huh_collectionobject::AVAILABILITY.': "'.$model->getAvailability().'",';
       $returnvalue .= '"'.huh_collectionobject::CATALOGNUMBER.': "'.$model->getCatalogNumber().'",';
       $returnvalue .= '"'.huh_collectionobject::CATALOGEDDATE.': "'.$model->getCatalogedDate().'",';
       $returnvalue .= '"'.huh_collectionobject::CATALOGEDDATEPRECISION.': "'.$model->getCatalogedDatePrecision().'",';
       $returnvalue .= '"'.huh_collectionobject::CATALOGEDDATEVERBATIM.': "'.$model->getCatalogedDateVerbatim().'",';
       $returnvalue .= '"'.huh_collectionobject::COUNTAMT.': "'.$model->getCountAmt().'",';
       $returnvalue .= '"'.huh_collectionobject::DESCRIPTION.': "'.$model->getDescription().'",';
       $returnvalue .= '"'.huh_collectionobject::FIELDNUMBER.': "'.$model->getFieldNumber().'",';
       $returnvalue .= '"'.huh_collectionobject::GUID.': "'.$model->getGUID().'",';
       $returnvalue .= '"'.huh_collectionobject::INTERNALREMARKS.': "'.$model->getInternalRemarks().'",';
       $returnvalue .= '"'.huh_collectionobject::MODIFIER.': "'.$model->getModifier().'",';
       $returnvalue .= '"'.huh_collectionobject::NAME.': "'.$model->getName().'",';
       $returnvalue .= '"'.huh_collectionobject::NOTIFICATIONS.': "'.$model->getNotifications().'",';
       $returnvalue .= '"'.huh_collectionobject::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_collectionobject::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_collectionobject::PROJECTNUMBER.': "'.$model->getProjectNumber().'",';
       $returnvalue .= '"'.huh_collectionobject::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_collectionobject::RESTRICTIONS.': "'.$model->getRestrictions().'",';
       $returnvalue .= '"'.huh_collectionobject::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_collectionobject::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_collectionobject::TEXT3.': "'.$model->getText3().'",';
       $returnvalue .= '"'.huh_collectionobject::TEXT4.': "'.$model->getText4().'",';
       $returnvalue .= '"'.huh_collectionobject::TOTALVALUE.': "'.$model->getTotalValue().'",';
       $returnvalue .= '"'.huh_collectionobject::VISIBILITY.': "'.$model->getVisibility().'",';
       $returnvalue .= '"'.huh_collectionobject::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_collectionobject::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_collectionobject::YESNO3.': "'.$model->getYesNo3().'",';
       $returnvalue .= '"'.huh_collectionobject::YESNO4.': "'.$model->getYesNo4().'",';
       $returnvalue .= '"'.huh_collectionobject::YESNO5.': "'.$model->getYesNo5().'",';
       $returnvalue .= '"'.huh_collectionobject::YESNO6.': "'.$model->getYesNo6().'",';
       $returnvalue .= '"'.huh_collectionobject::VISIBILITYSETBYID.': "'.$model->getVisibilitySetByID().'",';
       $returnvalue .= '"'.huh_collectionobject::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_collectionobject::CATALOGERID.': "'.$model->getCatalogerID().'",';
       $returnvalue .= '"'.huh_collectionobject::CONTAINERID.': "'.$model->getContainerID().'",';
       $returnvalue .= '"'.huh_collectionobject::COLLECTINGEVENTID.': "'.$model->getCollectingEventID().'",';
       $returnvalue .= '"'.huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID.': "'.$model->getCollectionObjectAttributeID().'",';
       $returnvalue .= '"'.huh_collectionobject::PALEOCONTEXTID.': "'.$model->getPaleoContextID().'",';
       $returnvalue .= '"'.huh_collectionobject::COLLECTIONID.': "'.$model->getCollectionID().'",';
       $returnvalue .= '"'.huh_collectionobject::FIELDNOTEBOOKPAGEID.': "'.$model->getFieldNotebookPageID().'",';
       $returnvalue .= '"'.huh_collectionobject::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getCollectionObjectID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionMemberID()."</td>\n";
       $returnvalue .= "<td>".$model->getAltCatalogNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getAvailability()."</td>\n";
       $returnvalue .= "<td>".$model->getCatalogNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getCatalogedDate()."</td>\n";
       $returnvalue .= "<td>".$model->getCatalogedDatePrecision()."</td>\n";
       $returnvalue .= "<td>".$model->getCatalogedDateVerbatim()."</td>\n";
       $returnvalue .= "<td>".$model->getCountAmt()."</td>\n";
       $returnvalue .= "<td>".$model->getDescription()."</td>\n";
       $returnvalue .= "<td>".$model->getFieldNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getGUID()."</td>\n";
       $returnvalue .= "<td>".$model->getInternalRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getModifier()."</td>\n";
       $returnvalue .= "<td>".$model->getName()."</td>\n";
       $returnvalue .= "<td>".$model->getNotifications()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getProjectNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getRestrictions()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getText3()."</td>\n";
       $returnvalue .= "<td>".$model->getText4()."</td>\n";
       $returnvalue .= "<td>".$model->getTotalValue()."</td>\n";
       $returnvalue .= "<td>".$model->getVisibility()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo3()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo4()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo5()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo6()."</td>\n";
       $returnvalue .= "<td>".$model->getVisibilitySetByID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getCatalogerID()."</td>\n";
       $returnvalue .= "<td>".$model->getContainerID()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectingEventID()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionObjectAttributeID()."</td>\n";
       $returnvalue .= "<td>".$model->getPaleoContextID()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionID()."</td>\n";
       $returnvalue .= "<td>".$model->getFieldNotebookPageID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_collectionobject::COLLECTIONOBJECTID."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::COLLECTIONMEMBERID."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::ALTCATALOGNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::AVAILABILITY."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::CATALOGNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::CATALOGEDDATE."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::CATALOGEDDATEPRECISION."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::CATALOGEDDATEVERBATIM."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::COUNTAMT."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::DESCRIPTION."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::FIELDNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::GUID."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::INTERNALREMARKS."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::MODIFIER."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::NAME."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::NOTIFICATIONS."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::PROJECTNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::RESTRICTIONS."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::TEXT3."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::TEXT4."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::TOTALVALUE."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::VISIBILITY."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::YESNO3."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::YESNO4."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::YESNO5."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::YESNO6."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::VISIBILITYSETBYID."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::CATALOGERID."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::CONTAINERID."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::COLLECTINGEVENTID."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::PALEOCONTEXTID."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::COLLECTIONID."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::FIELDNOTEBOOKPAGEID."</th>\n";
       $returnvalue .= "<th>".huh_collectionobject::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; }
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_collectionobject">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) {
          $returnvalue .= "Add a new CollectionObjectID";
       } else {
         $returnvalue .= "<div><label for=".huh_collectionobject::COLLECTIONOBJECTID.">COLLECTIONOBJECTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::COLLECTIONOBJECTID." id=".huh_collectionobject::COLLECTIONOBJECTID." value='".$model->getCollectionObjectID()."'  style=' width:".huh_collectionobject::COLLECTIONOBJECTID_SIZE ."em;  '  maxlength='".huh_collectionobject::COLLECTIONOBJECTID_SIZE ."' ></div>\n";
       }
       $returnvalue .= "<div><label for=".huh_collectionobject::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::TIMESTAMPCREATED." id=".huh_collectionobject::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_collectionobject::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_collectionobject::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::TIMESTAMPMODIFIED." id=".huh_collectionobject::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_collectionobject::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_collectionobject::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::VERSION." id=".huh_collectionobject::VERSION." value='".$model->getVersion()."'  style=' width:".huh_collectionobject::VERSION_SIZE ."em;  '  maxlength='".huh_collectionobject::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::COLLECTIONMEMBERID.">COLLECTIONMEMBERID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::COLLECTIONMEMBERID." id=".huh_collectionobject::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  style=' width:".huh_collectionobject::COLLECTIONMEMBERID_SIZE ."em;  '  maxlength='".huh_collectionobject::COLLECTIONMEMBERID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::ALTCATALOGNUMBER.">ALTCATALOGNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::ALTCATALOGNUMBER." id=".huh_collectionobject::ALTCATALOGNUMBER." value='".$model->getAltCatalogNumber()."'  style=' width:".huh_collectionobject::ALTCATALOGNUMBER_SIZE ."em;  '  maxlength='".huh_collectionobject::ALTCATALOGNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::AVAILABILITY.">AVAILABILITY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::AVAILABILITY." id=".huh_collectionobject::AVAILABILITY." value='".$model->getAvailability()."'  style=' width:".huh_collectionobject::AVAILABILITY_SIZE ."em;  '  maxlength='".huh_collectionobject::AVAILABILITY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::CATALOGNUMBER.">CATALOGNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::CATALOGNUMBER." id=".huh_collectionobject::CATALOGNUMBER." value='".$model->getCatalogNumber()."'  style=' width:".huh_collectionobject::CATALOGNUMBER_SIZE ."em;  '  maxlength='".huh_collectionobject::CATALOGNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::CATALOGEDDATE.">CATALOGEDDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::CATALOGEDDATE." id=".huh_collectionobject::CATALOGEDDATE." value='".$model->getCatalogedDate()."'  style=' width:".huh_collectionobject::CATALOGEDDATE_SIZE ."em;  '  maxlength='".huh_collectionobject::CATALOGEDDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::CATALOGEDDATEPRECISION.">CATALOGEDDATEPRECISION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::CATALOGEDDATEPRECISION." id=".huh_collectionobject::CATALOGEDDATEPRECISION." value='".$model->getCatalogedDatePrecision()."'  style=' width:".huh_collectionobject::CATALOGEDDATEPRECISION_SIZE ."em;  '  maxlength='".huh_collectionobject::CATALOGEDDATEPRECISION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::CATALOGEDDATEVERBATIM.">CATALOGEDDATEVERBATIM</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::CATALOGEDDATEVERBATIM." id=".huh_collectionobject::CATALOGEDDATEVERBATIM." value='".$model->getCatalogedDateVerbatim()."'  style=' width:".huh_collectionobject::CATALOGEDDATEVERBATIM_SIZE ."em;  '  maxlength='".huh_collectionobject::CATALOGEDDATEVERBATIM_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::COUNTAMT.">COUNTAMT</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::COUNTAMT." id=".huh_collectionobject::COUNTAMT." value='".$model->getCountAmt()."'  style=' width:".huh_collectionobject::COUNTAMT_SIZE ."em;  '  maxlength='".huh_collectionobject::COUNTAMT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::DESCRIPTION.">DESCRIPTION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collectionobject::DESCRIPTION." id=".huh_collectionobject::DESCRIPTION." >".$model->getDescription()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::FIELDNUMBER.">FIELDNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::FIELDNUMBER." id=".huh_collectionobject::FIELDNUMBER." value='".$model->getFieldNumber()."'  style=' width:".huh_collectionobject::FIELDNUMBER_SIZE ."em;  '  maxlength='".huh_collectionobject::FIELDNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::GUID.">GUID</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collectionobject::GUID." id=".huh_collectionobject::GUID." >".$model->getGUID()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::INTERNALREMARKS.">INTERNALREMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collectionobject::INTERNALREMARKS." id=".huh_collectionobject::INTERNALREMARKS." >".$model->getInternalRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::MODIFIER.">MODIFIER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::MODIFIER." id=".huh_collectionobject::MODIFIER." value='".$model->getModifier()."'  style=' width:".huh_collectionobject::MODIFIER_SIZE ."em;  '  maxlength='".huh_collectionobject::MODIFIER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::NAME.">NAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collectionobject::NAME." id=".huh_collectionobject::NAME." >".$model->getName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::NOTIFICATIONS.">NOTIFICATIONS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::NOTIFICATIONS." id=".huh_collectionobject::NOTIFICATIONS." value='".$model->getNotifications()."'  style=' width:".huh_collectionobject::NOTIFICATIONS_SIZE ."em;  '  maxlength='".huh_collectionobject::NOTIFICATIONS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::NUMBER1." id=".huh_collectionobject::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_collectionobject::NUMBER1_SIZE ."em;  '  maxlength='".huh_collectionobject::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::NUMBER2." id=".huh_collectionobject::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_collectionobject::NUMBER2_SIZE ."em;  '  maxlength='".huh_collectionobject::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::PROJECTNUMBER.">PROJECTNUMBER</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collectionobject::PROJECTNUMBER." id=".huh_collectionobject::PROJECTNUMBER." >".$model->getProjectNumber()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collectionobject::REMARKS." id=".huh_collectionobject::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::RESTRICTIONS.">RESTRICTIONS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::RESTRICTIONS." id=".huh_collectionobject::RESTRICTIONS." value='".$model->getRestrictions()."'  style=' width:".huh_collectionobject::RESTRICTIONS_SIZE ."em;  '  maxlength='".huh_collectionobject::RESTRICTIONS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::TEXT1.">TEXT1</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collectionobject::TEXT1." id=".huh_collectionobject::TEXT1." >".$model->getText1()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collectionobject::TEXT2." id=".huh_collectionobject::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::TEXT3.">TEXT3</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collectionobject::TEXT3." id=".huh_collectionobject::TEXT3." >".$model->getText3()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::TEXT4.">TEXT4</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::TEXT4." id=".huh_collectionobject::TEXT4." value='".$model->getText4()."'  style=' width:".huh_collectionobject::TEXT4_SIZE ."em;  '  maxlength='".huh_collectionobject::TEXT4_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::TOTALVALUE.">TOTALVALUE</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9\.-]*'  invalidMessage='The value entered is not valid.  It must be a number.'  name=".huh_collectionobject::TOTALVALUE." id=".huh_collectionobject::TOTALVALUE." value='".$model->getTotalValue()."'  style=' width:".huh_collectionobject::TOTALVALUE_SIZE ."em;  '  maxlength='".huh_collectionobject::TOTALVALUE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::VISIBILITY.">VISIBILITY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::VISIBILITY." id=".huh_collectionobject::VISIBILITY." value='".$model->getVisibility()."'  style=' width:".huh_collectionobject::VISIBILITY_SIZE ."em;  '  maxlength='".huh_collectionobject::VISIBILITY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::YESNO1." id=".huh_collectionobject::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_collectionobject::YESNO1_SIZE ."em;  '  maxlength='".huh_collectionobject::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::YESNO2." id=".huh_collectionobject::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_collectionobject::YESNO2_SIZE ."em;  '  maxlength='".huh_collectionobject::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::YESNO3.">YESNO3</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::YESNO3." id=".huh_collectionobject::YESNO3." value='".$model->getYesNo3()."'  style=' width:".huh_collectionobject::YESNO3_SIZE ."em;  '  maxlength='".huh_collectionobject::YESNO3_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::YESNO4.">YESNO4</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::YESNO4." id=".huh_collectionobject::YESNO4." value='".$model->getYesNo4()."'  style=' width:".huh_collectionobject::YESNO4_SIZE ."em;  '  maxlength='".huh_collectionobject::YESNO4_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::YESNO5.">YESNO5</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::YESNO5." id=".huh_collectionobject::YESNO5." value='".$model->getYesNo5()."'  style=' width:".huh_collectionobject::YESNO5_SIZE ."em;  '  maxlength='".huh_collectionobject::YESNO5_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::YESNO6.">YESNO6</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectionobject::YESNO6." id=".huh_collectionobject::YESNO6." value='".$model->getYesNo6()."'  style=' width:".huh_collectionobject::YESNO6_SIZE ."em;  '  maxlength='".huh_collectionobject::YESNO6_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::VISIBILITYSETBYID.">VISIBILITYSETBYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::VISIBILITYSETBYID." id=".huh_collectionobject::VISIBILITYSETBYID." value='".$model->getVisibilitySetByID()."'  style=' width:".huh_collectionobject::VISIBILITYSETBYID_SIZE ."em;  '  maxlength='".huh_collectionobject::VISIBILITYSETBYID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::CREATEDBYAGENTID." id=".huh_collectionobject::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_collectionobject::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_collectionobject::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::CATALOGERID.">CATALOGERID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::CATALOGERID." id=".huh_collectionobject::CATALOGERID." value='".$model->getCatalogerID()."'  style=' width:".huh_collectionobject::CATALOGERID_SIZE ."em;  '  maxlength='".huh_collectionobject::CATALOGERID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::CONTAINERID.">CONTAINERID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::CONTAINERID." id=".huh_collectionobject::CONTAINERID." value='".$model->getContainerID()."'  style=' width:".huh_collectionobject::CONTAINERID_SIZE ."em;  '  maxlength='".huh_collectionobject::CONTAINERID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::COLLECTINGEVENTID.">COLLECTINGEVENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::COLLECTINGEVENTID." id=".huh_collectionobject::COLLECTINGEVENTID." value='".$model->getCollectingEventID()."'  style=' width:".huh_collectionobject::COLLECTINGEVENTID_SIZE ."em;  '  maxlength='".huh_collectionobject::COLLECTINGEVENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID.">COLLECTIONOBJECTATTRIBUTEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID." id=".huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID." value='".$model->getCollectionObjectAttributeID()."'  style=' width:".huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID_SIZE ."em;  '  maxlength='".huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::PALEOCONTEXTID.">PALEOCONTEXTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::PALEOCONTEXTID." id=".huh_collectionobject::PALEOCONTEXTID." value='".$model->getPaleoContextID()."'  style=' width:".huh_collectionobject::PALEOCONTEXTID_SIZE ."em;  '  maxlength='".huh_collectionobject::PALEOCONTEXTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::COLLECTIONID.">COLLECTIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::COLLECTIONID." id=".huh_collectionobject::COLLECTIONID." value='".$model->getCollectionID()."'  style=' width:".huh_collectionobject::COLLECTIONID_SIZE ."em;  '  maxlength='".huh_collectionobject::COLLECTIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::FIELDNOTEBOOKPAGEID.">FIELDNOTEBOOKPAGEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::FIELDNOTEBOOKPAGEID." id=".huh_collectionobject::FIELDNOTEBOOKPAGEID." value='".$model->getFieldNotebookPageID()."'  style=' width:".huh_collectionobject::FIELDNOTEBOOKPAGEID_SIZE ."em;  '  maxlength='".huh_collectionobject::FIELDNOTEBOOKPAGEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectionobject::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectionobject::MODIFIEDBYAGENTID." id=".huh_collectionobject::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_collectionobject::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_collectionobject::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       if ($includeRelated) {
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) {
          // show delete button if editing an existing record
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_collectionobject">';
       $returnvalue .= '<input type=hidden name=CollectionObjectID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       }
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_collectionobject">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>COLLECTIONOBJECTID<input type=text name=".huh_collectionobject::COLLECTIONOBJECTID." id=".huh_collectionobject::COLLECTIONOBJECTID." value='".$model->getCollectionObjectID()."'  size='".huh_collectionobject::COLLECTIONOBJECTID_SIZE ."'  maxlength='".huh_collectionobject::COLLECTIONOBJECTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_collectionobject::TIMESTAMPCREATED." id=".huh_collectionobject::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_collectionobject::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_collectionobject::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_collectionobject::TIMESTAMPMODIFIED." id=".huh_collectionobject::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_collectionobject::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_collectionobject::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_collectionobject::VERSION." id=".huh_collectionobject::VERSION." value='".$model->getVersion()."'  size='".huh_collectionobject::VERSION_SIZE ."'  maxlength='".huh_collectionobject::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONMEMBERID<input type=text name=".huh_collectionobject::COLLECTIONMEMBERID." id=".huh_collectionobject::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  size='".huh_collectionobject::COLLECTIONMEMBERID_SIZE ."'  maxlength='".huh_collectionobject::COLLECTIONMEMBERID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ALTCATALOGNUMBER<input type=text name=".huh_collectionobject::ALTCATALOGNUMBER." id=".huh_collectionobject::ALTCATALOGNUMBER." value='".$model->getAltCatalogNumber()."'  size='".huh_collectionobject::ALTCATALOGNUMBER_SIZE ."'  maxlength='".huh_collectionobject::ALTCATALOGNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>AVAILABILITY<input type=text name=".huh_collectionobject::AVAILABILITY." id=".huh_collectionobject::AVAILABILITY." value='".$model->getAvailability()."'  size='".huh_collectionobject::AVAILABILITY_SIZE ."'  maxlength='".huh_collectionobject::AVAILABILITY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CATALOGNUMBER<input type=text name=".huh_collectionobject::CATALOGNUMBER." id=".huh_collectionobject::CATALOGNUMBER." value='".$model->getCatalogNumber()."'  size='".huh_collectionobject::CATALOGNUMBER_SIZE ."'  maxlength='".huh_collectionobject::CATALOGNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CATALOGEDDATE<input type=text name=".huh_collectionobject::CATALOGEDDATE." id=".huh_collectionobject::CATALOGEDDATE." value='".$model->getCatalogedDate()."'  size='".huh_collectionobject::CATALOGEDDATE_SIZE ."'  maxlength='".huh_collectionobject::CATALOGEDDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CATALOGEDDATEPRECISION<input type=text name=".huh_collectionobject::CATALOGEDDATEPRECISION." id=".huh_collectionobject::CATALOGEDDATEPRECISION." value='".$model->getCatalogedDatePrecision()."'  size='".huh_collectionobject::CATALOGEDDATEPRECISION_SIZE ."'  maxlength='".huh_collectionobject::CATALOGEDDATEPRECISION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CATALOGEDDATEVERBATIM<input type=text name=".huh_collectionobject::CATALOGEDDATEVERBATIM." id=".huh_collectionobject::CATALOGEDDATEVERBATIM." value='".$model->getCatalogedDateVerbatim()."'  size='".huh_collectionobject::CATALOGEDDATEVERBATIM_SIZE ."'  maxlength='".huh_collectionobject::CATALOGEDDATEVERBATIM_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COUNTAMT<input type=text name=".huh_collectionobject::COUNTAMT." id=".huh_collectionobject::COUNTAMT." value='".$model->getCountAmt()."'  size='".huh_collectionobject::COUNTAMT_SIZE ."'  maxlength='".huh_collectionobject::COUNTAMT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DESCRIPTION<input type=text name=".huh_collectionobject::DESCRIPTION." id=".huh_collectionobject::DESCRIPTION." value='".$model->getDescription()."'  size='51'  maxlength='".huh_collectionobject::DESCRIPTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FIELDNUMBER<input type=text name=".huh_collectionobject::FIELDNUMBER." id=".huh_collectionobject::FIELDNUMBER." value='".$model->getFieldNumber()."'  size='".huh_collectionobject::FIELDNUMBER_SIZE ."'  maxlength='".huh_collectionobject::FIELDNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GUID<input type=text name=".huh_collectionobject::GUID." id=".huh_collectionobject::GUID." value='".$model->getGUID()."'  size='51'  maxlength='".huh_collectionobject::GUID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>INTERNALREMARKS<input type=text name=".huh_collectionobject::INTERNALREMARKS." id=".huh_collectionobject::INTERNALREMARKS." value='".$model->getInternalRemarks()."'  size='51'  maxlength='".huh_collectionobject::INTERNALREMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIER<input type=text name=".huh_collectionobject::MODIFIER." id=".huh_collectionobject::MODIFIER." value='".$model->getModifier()."'  size='".huh_collectionobject::MODIFIER_SIZE ."'  maxlength='".huh_collectionobject::MODIFIER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NAME<input type=text name=".huh_collectionobject::NAME." id=".huh_collectionobject::NAME." value='".$model->getName()."'  size='51'  maxlength='".huh_collectionobject::NAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NOTIFICATIONS<input type=text name=".huh_collectionobject::NOTIFICATIONS." id=".huh_collectionobject::NOTIFICATIONS." value='".$model->getNotifications()."'  size='".huh_collectionobject::NOTIFICATIONS_SIZE ."'  maxlength='".huh_collectionobject::NOTIFICATIONS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_collectionobject::NUMBER1." id=".huh_collectionobject::NUMBER1." value='".$model->getNumber1()."'  size='".huh_collectionobject::NUMBER1_SIZE ."'  maxlength='".huh_collectionobject::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_collectionobject::NUMBER2." id=".huh_collectionobject::NUMBER2." value='".$model->getNumber2()."'  size='".huh_collectionobject::NUMBER2_SIZE ."'  maxlength='".huh_collectionobject::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PROJECTNUMBER<input type=text name=".huh_collectionobject::PROJECTNUMBER." id=".huh_collectionobject::PROJECTNUMBER." value='".$model->getProjectNumber()."'  size='51'  maxlength='".huh_collectionobject::PROJECTNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_collectionobject::REMARKS." id=".huh_collectionobject::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_collectionobject::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RESTRICTIONS<input type=text name=".huh_collectionobject::RESTRICTIONS." id=".huh_collectionobject::RESTRICTIONS." value='".$model->getRestrictions()."'  size='".huh_collectionobject::RESTRICTIONS_SIZE ."'  maxlength='".huh_collectionobject::RESTRICTIONS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_collectionobject::TEXT1." id=".huh_collectionobject::TEXT1." value='".$model->getText1()."'  size='51'  maxlength='".huh_collectionobject::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_collectionobject::TEXT2." id=".huh_collectionobject::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_collectionobject::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT3<input type=text name=".huh_collectionobject::TEXT3." id=".huh_collectionobject::TEXT3." value='".$model->getText3()."'  size='51'  maxlength='".huh_collectionobject::TEXT3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT4<input type=text name=".huh_collectionobject::TEXT4." id=".huh_collectionobject::TEXT4." value='".$model->getText4()."'  size='".huh_collectionobject::TEXT4_SIZE ."'  maxlength='".huh_collectionobject::TEXT4_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TOTALVALUE<input type=text name=".huh_collectionobject::TOTALVALUE." id=".huh_collectionobject::TOTALVALUE." value='".$model->getTotalValue()."'  size='".huh_collectionobject::TOTALVALUE_SIZE ."'  maxlength='".huh_collectionobject::TOTALVALUE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VISIBILITY<input type=text name=".huh_collectionobject::VISIBILITY." id=".huh_collectionobject::VISIBILITY." value='".$model->getVisibility()."'  size='".huh_collectionobject::VISIBILITY_SIZE ."'  maxlength='".huh_collectionobject::VISIBILITY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_collectionobject::YESNO1." id=".huh_collectionobject::YESNO1." value='".$model->getYesNo1()."'  size='".huh_collectionobject::YESNO1_SIZE ."'  maxlength='".huh_collectionobject::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_collectionobject::YESNO2." id=".huh_collectionobject::YESNO2." value='".$model->getYesNo2()."'  size='".huh_collectionobject::YESNO2_SIZE ."'  maxlength='".huh_collectionobject::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO3<input type=text name=".huh_collectionobject::YESNO3." id=".huh_collectionobject::YESNO3." value='".$model->getYesNo3()."'  size='".huh_collectionobject::YESNO3_SIZE ."'  maxlength='".huh_collectionobject::YESNO3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO4<input type=text name=".huh_collectionobject::YESNO4." id=".huh_collectionobject::YESNO4." value='".$model->getYesNo4()."'  size='".huh_collectionobject::YESNO4_SIZE ."'  maxlength='".huh_collectionobject::YESNO4_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO5<input type=text name=".huh_collectionobject::YESNO5." id=".huh_collectionobject::YESNO5." value='".$model->getYesNo5()."'  size='".huh_collectionobject::YESNO5_SIZE ."'  maxlength='".huh_collectionobject::YESNO5_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO6<input type=text name=".huh_collectionobject::YESNO6." id=".huh_collectionobject::YESNO6." value='".$model->getYesNo6()."'  size='".huh_collectionobject::YESNO6_SIZE ."'  maxlength='".huh_collectionobject::YESNO6_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VISIBILITYSETBYID<input type=text name=".huh_collectionobject::VISIBILITYSETBYID." id=".huh_collectionobject::VISIBILITYSETBYID." value='".$model->getVisibilitySetByID()."'  size='".huh_collectionobject::VISIBILITYSETBYID_SIZE ."'  maxlength='".huh_collectionobject::VISIBILITYSETBYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_collectionobject::CREATEDBYAGENTID." id=".huh_collectionobject::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_collectionobject::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_collectionobject::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CATALOGERID<input type=text name=".huh_collectionobject::CATALOGERID." id=".huh_collectionobject::CATALOGERID." value='".$model->getCatalogerID()."'  size='".huh_collectionobject::CATALOGERID_SIZE ."'  maxlength='".huh_collectionobject::CATALOGERID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CONTAINERID<input type=text name=".huh_collectionobject::CONTAINERID." id=".huh_collectionobject::CONTAINERID." value='".$model->getContainerID()."'  size='".huh_collectionobject::CONTAINERID_SIZE ."'  maxlength='".huh_collectionobject::CONTAINERID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTINGEVENTID<input type=text name=".huh_collectionobject::COLLECTINGEVENTID." id=".huh_collectionobject::COLLECTINGEVENTID." value='".$model->getCollectingEventID()."'  size='".huh_collectionobject::COLLECTINGEVENTID_SIZE ."'  maxlength='".huh_collectionobject::COLLECTINGEVENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONOBJECTATTRIBUTEID<input type=text name=".huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID." id=".huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID." value='".$model->getCollectionObjectAttributeID()."'  size='".huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID_SIZE ."'  maxlength='".huh_collectionobject::COLLECTIONOBJECTATTRIBUTEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PALEOCONTEXTID<input type=text name=".huh_collectionobject::PALEOCONTEXTID." id=".huh_collectionobject::PALEOCONTEXTID." value='".$model->getPaleoContextID()."'  size='".huh_collectionobject::PALEOCONTEXTID_SIZE ."'  maxlength='".huh_collectionobject::PALEOCONTEXTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONID<input type=text name=".huh_collectionobject::COLLECTIONID." id=".huh_collectionobject::COLLECTIONID." value='".$model->getCollectionID()."'  size='".huh_collectionobject::COLLECTIONID_SIZE ."'  maxlength='".huh_collectionobject::COLLECTIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FIELDNOTEBOOKPAGEID<input type=text name=".huh_collectionobject::FIELDNOTEBOOKPAGEID." id=".huh_collectionobject::FIELDNOTEBOOKPAGEID." value='".$model->getFieldNotebookPageID()."'  size='".huh_collectionobject::FIELDNOTEBOOKPAGEID_SIZE ."'  maxlength='".huh_collectionobject::FIELDNOTEBOOKPAGEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_collectionobject::MODIFIEDBYAGENTID." id=".huh_collectionobject::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_collectionobject::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_collectionobject::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       if ($includeRelated) {
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
