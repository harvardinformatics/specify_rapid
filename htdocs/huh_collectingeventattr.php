<?php
//==============================================================================
//===   collectingeventattr.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_collectingeventattr implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const ATTRID_SIZE          = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const COLLECTIONMEMBERID_SIZE = 11; //INTEGER
   const DOUBLEVALUE_SIZE     = 24; //DOUBLE
   const STRVALUE_SIZE        = 255; //255
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const COLLECTINGEVENTID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const ATTRIBUTEDEFID_SIZE  = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const ATTRID            = 'AttrID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const COLLECTIONMEMBERID = 'CollectionMemberID';
   const DOUBLEVALUE       = 'DoubleValue';
   const STRVALUE          = 'StrValue';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const COLLECTINGEVENTID = 'CollectingEventID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const ATTRIBUTEDEFID    = 'AttributeDefID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $AttrID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AttrID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $CollectionMemberID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionMemberID']), 0, 11);
  $DoubleValue = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DoubleValue']), 0, 24);
  $StrValue = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StrValue']), 0, 255);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $CollectingEventID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectingEventID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $AttributeDefID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AttributeDefID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $AttrID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $CollectionMemberID; // INTEGER 
   private $DoubleValue; // DOUBLE 
   private $StrValue; // VARCHAR(255) 
   private $CreatedByAgentID; // INTEGER 
   private $CollectingEventID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $AttributeDefID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' AttrID, TimestampCreated, TimestampModified, Version, CollectionMemberID, DoubleValue, StrValue, CreatedByAgentID, CollectingEventID, ModifiedByAgentID, AttributeDefID, ';
   const PKFIELDLIST = ' AttrID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'AttrID'  ) ;
   private $allFieldsArray = array( 0 => 'AttrID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'CollectionMemberID' , 5 => 'DoubleValue' , 6 => 'StrValue' , 7 => 'CreatedByAgentID' , 8 => 'CollectingEventID' , 9 => 'ModifiedByAgentID' , 10 => 'AttributeDefID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'CollectionMemberID' , 7 => 'CreatedByAgentID' , 8 => 'CollectingEventID' , 9 => 'ModifiedByAgentID' , 10 => 'AttributeDefID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_collectingeventattr(){
       $this->AttrID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->CollectionMemberID = '';
       $this->DoubleValue = '';
       $this->StrValue = '';
       $this->CreatedByAgentID = '';
       $this->CollectingEventID = '';
       $this->ModifiedByAgentID = '';
       $this->AttributeDefID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='AttrID') { $returnvalue = $this->setAttrID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->setCollectionMemberID($value); } 
             if ($fieldname=='DoubleValue') { $returnvalue = $this->setDoubleValue($value); } 
             if ($fieldname=='StrValue') { $returnvalue = $this->setStrValue($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='CollectingEventID') { $returnvalue = $this->setCollectingEventID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='AttributeDefID') { $returnvalue = $this->setAttributeDefID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='AttrID') { $returnvalue = $this->getAttrID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->getCollectionMemberID(); } 
             if ($fieldname=='DoubleValue') { $returnvalue = $this->getDoubleValue(); } 
             if ($fieldname=='StrValue') { $returnvalue = $this->getStrValue(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='CollectingEventID') { $returnvalue = $this->getCollectingEventID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='AttributeDefID') { $returnvalue = $this->getAttributeDefID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*AttrID*/
   public function getAttrID() {
       if ($this->AttrID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AttrID));
       }
   }
   public function setAttrID($AttrID) {
       if (strlen(preg_replace('/[^0-9]/','',$AttrID)) > huh_collectingeventattr::ATTRID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AttrID = trim($AttrID);
       if (!ctype_digit(strval($AttrID)) && trim(strval($AttrID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AttrID = $this->l_addslashes($AttrID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_collectingeventattr::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_collectingeventattr::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_collectingeventattr::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*CollectionMemberID*/
   public function getCollectionMemberID() {
       if ($this->CollectionMemberID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionMemberID));
       }
   }
   public function setCollectionMemberID($CollectionMemberID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionMemberID)) > huh_collectingeventattr::COLLECTIONMEMBERID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectionMemberID = trim($CollectionMemberID);
       if (!ctype_digit(strval($CollectionMemberID))) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionMemberID = $this->l_addslashes($CollectionMemberID);
       $this->dirty = true;
   }
/*DoubleValue*/
   public function getDoubleValue() {
       if ($this->DoubleValue==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DoubleValue));
       }
   }
   public function setDoubleValue($DoubleValue) {
       if (strlen($DoubleValue) > huh_collectingeventattr::DOUBLEVALUE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DoubleValue = $this->l_addslashes($DoubleValue);
       $this->dirty = true;
   }
/*StrValue*/
   public function getStrValue() {
       if ($this->StrValue==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StrValue));
       }
   }
   public function setStrValue($StrValue) {
       if (strlen($StrValue) > huh_collectingeventattr::STRVALUE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StrValue = $this->l_addslashes($StrValue);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_collectingeventattr::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*CollectingEventID*/
   public function getCollectingEventID() {
       if ($this->CollectingEventID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectingEventID));
       }
   }
   public function setCollectingEventID($CollectingEventID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectingEventID)) > huh_collectingeventattr::COLLECTINGEVENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectingEventID = trim($CollectingEventID);
       if (!ctype_digit(strval($CollectingEventID))) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectingEventID = $this->l_addslashes($CollectingEventID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_collectingeventattr::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*AttributeDefID*/
   public function getAttributeDefID() {
       if ($this->AttributeDefID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AttributeDefID));
       }
   }
   public function setAttributeDefID($AttributeDefID) {
       if (strlen(preg_replace('/[^0-9]/','',$AttributeDefID)) > huh_collectingeventattr::ATTRIBUTEDEFID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AttributeDefID = trim($AttributeDefID);
       if (!ctype_digit(strval($AttributeDefID))) {
             throw new Exception("Value must be an integer");
       }
       $this->AttributeDefID = $this->l_addslashes($AttributeDefID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getAttrID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['AttrID'] = $this->getAttrID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_AttrIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_CollectionMemberIDMYSQLI_TYPE = 'i';
  const C_DoubleValueMYSQLI_TYPE = 'd';
  const C_StrValueMYSQLI_TYPE = 's';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_CollectingEventIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_AttributeDefIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='AttrID') { $retval = self::C_AttrIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='CollectionMemberID') { $retval = self::C_CollectionMemberIDMYSQLI_TYPE; }
      if ($aFieldname=='DoubleValue') { $retval = self::C_DoubleValueMYSQLI_TYPE; }
      if ($aFieldname=='StrValue') { $retval = self::C_StrValueMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='CollectingEventID') { $retval = self::C_CollectingEventIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='AttributeDefID') { $retval = self::C_AttributeDefIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setAttrID($pk[AttrID]);
             } else { ;
                 $this->setAttrID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->AttrID != NULL) {
           $sql = 'SELECT AttrID, TimestampCreated, TimestampModified, Version, CollectionMemberID, DoubleValue, StrValue, CreatedByAgentID, CollectingEventID, ModifiedByAgentID, AttributeDefID FROM collectingeventattr WHERE AttrID = '.$this->AttrID ;

           $preparesql = 'SELECT AttrID, TimestampCreated, TimestampModified, Version, CollectionMemberID, DoubleValue, StrValue, CreatedByAgentID, CollectingEventID, ModifiedByAgentID, AttributeDefID FROM collectingeventattr WHERE AttrID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->AttrID);
              $statement->execute();
              $statement->bind_result($this->AttrID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->DoubleValue, $this->StrValue, $this->CreatedByAgentID, $this->CollectingEventID, $this->ModifiedByAgentID, $this->AttributeDefID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->AttrID!= NULL) {
            $sql  = 'UPDATE  collectingeventattr SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", CollectionMemberID = ? ";
            $sql .=  ", DoubleValue = ? ";
            $sql .=  ", StrValue = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", CollectingEventID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", AttributeDefID = ? ";

            $sql .= "  WHERE AttrID = ? ";
        } else {
            $sql  = 'INSERT INTO collectingeventattr ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( AttrID ,  TimestampCreated ,  TimestampModified ,  Version ,  CollectionMemberID ,  DoubleValue ,  StrValue ,  CreatedByAgentID ,  CollectingEventID ,  ModifiedByAgentID ,  AttributeDefID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->AttrID!= NULL ) {
              $statement->bind_param("issiidsiiiii", $this->AttrID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->DoubleValue , $this->StrValue , $this->CreatedByAgentID , $this->CollectingEventID , $this->ModifiedByAgentID , $this->AttributeDefID , $this->AttrID );
           } else { 
              $statement->bind_param("issiidsiiii", $this->AttrID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->DoubleValue , $this->StrValue , $this->CreatedByAgentID , $this->CollectingEventID , $this->ModifiedByAgentID , $this->AttributeDefID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->AttrID != NULL) {
           $sql = 'SELECT AttrID, TimestampCreated, TimestampModified, Version, CollectionMemberID, DoubleValue, StrValue, CreatedByAgentID, CollectingEventID, ModifiedByAgentID, AttributeDefID FROM collectingeventattr WHERE AttrID = "'.$this->AttrID.'"  ' ;

           $preparedsql = 'SELECT  FROM collectingeventattr WHERE  and AttrID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issiidsiiii", $this->AttrID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->DoubleValue, $this->StrValue, $this->CreatedByAgentID, $this->CollectingEventID, $this->ModifiedByAgentID, $this->AttributeDefID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM collectingeventattr WHERE  and AttrID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issiidsiiii", $this->AttrID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->DoubleValue, $this->StrValue, $this->CreatedByAgentID, $this->CollectingEventID, $this->ModifiedByAgentID, $this->AttributeDefID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->AttrID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM collectingeventattr';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT AttrID FROM collectingeventattr $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_collectingeventattr();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: CollectingEventID
      $t = new collectingevent();
      $t->load(getCollectingEventID());
      $returnvalue[CollectingEventID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: AttributeDefID
      $t = new attributedef();
      $t->load(getAttributeDefID());
      $returnvalue[AttributeDefID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT AttrID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(CollectionMemberID,'') || ' ' || IFNULL(DoubleValue,'') || ' ' || IFNULL(StrValue,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(CollectingEventID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(AttributeDefID,'')) FROM collectingeventattr order by CollectionMemberID, CreatedByAgentID, CollectingEventID, ModifiedByAgentID, AttributeDefID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM collectingeventattr order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCollectionMemberID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AttrID FROM collectingeventattr WHERE CollectionMemberID $operator '$searchTerm'";
        $preparedsql = "SELECT AttrID FROM collectingeventattr WHERE CollectionMemberID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingeventattr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AttrID FROM collectingeventattr WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT AttrID FROM collectingeventattr WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingeventattr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCollectingEventID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AttrID FROM collectingeventattr WHERE CollectingEventID $operator '$searchTerm'";
        $preparedsql = "SELECT AttrID FROM collectingeventattr WHERE CollectingEventID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingeventattr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AttrID FROM collectingeventattr WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT AttrID FROM collectingeventattr WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingeventattr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAttributeDefID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT AttrID FROM collectingeventattr WHERE AttributeDefID $operator '$searchTerm'";
        $preparedsql = "SELECT AttrID FROM collectingeventattr WHERE AttributeDefID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_collectingeventattr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCollectionMemberID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionMemberID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectionMemberID FROM collectingeventattr group by CollectionMemberID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectionMemberID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM collectingeventattr group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCollectingEventID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectingEventID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectingEventID FROM collectingeventattr group by CollectingEventID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectingEventID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM collectingeventattr group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAttributeDefID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AttributeDefID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AttributeDefID FROM collectingeventattr group by AttributeDefID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AttributeDefID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'CollectionMemberID':
             $returnvalue = $this->selectDistinctCollectionMemberID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CollectingEventID':
             $returnvalue = $this->selectDistinctCollectingEventID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AttributeDefID':
             $returnvalue = $this->selectDistinctAttributeDefID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the collectingeventattr.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_collectingeventattrView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_collectingeventattr <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_collectingeventattr::ATTRID.": ".$model->getAttrID()."</li>\n";
       $returnvalue .= "<li>".huh_collectingeventattr::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_collectingeventattr::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_collectingeventattr::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_collectingeventattr::COLLECTIONMEMBERID.": ".$model->getCollectionMemberID()."</li>\n";
       $returnvalue .= "<li>".huh_collectingeventattr::DOUBLEVALUE.": ".$model->getDoubleValue()."</li>\n";
       $returnvalue .= "<li>".huh_collectingeventattr::STRVALUE.": ".$model->getStrValue()."</li>\n";
       $returnvalue .= "<li>".huh_collectingeventattr::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_collectingeventattr::COLLECTINGEVENTID.": ".$model->getCollectingEventID()."</li>\n";
       $returnvalue .= "<li>".huh_collectingeventattr::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_collectingeventattr::ATTRIBUTEDEFID.": ".$model->getAttributeDefID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>collectingevent</li>";
           $t_collectingevent = new huh_collectingevent();
           $t_collectingeventView = new huh_collectingeventView();
           $t_collectingeventView->setModel($t_collectingevent);
           if ($model->getCollectingEventID() != '') { 
               $t_collectingevent->load($model->getCollectingEventID());
               $returnvalue .= $t_collectingeventView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>attributedef</li>";
           $t_attributedef = new huh_attributedef();
           $t_attributedefView = new huh_attributedefView();
           $t_attributedefView->setModel($t_attributedef);
           if ($model->getAttributeDefID() != '') { 
               $t_attributedef->load($model->getAttributeDefID());
               $returnvalue .= $t_attributedefView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_collectingeventattr::ATTRID.': "'.$model->getAttrID().'",';
       $returnvalue .= '"'.huh_collectingeventattr::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_collectingeventattr::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_collectingeventattr::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_collectingeventattr::COLLECTIONMEMBERID.': "'.$model->getCollectionMemberID().'",';
       $returnvalue .= '"'.huh_collectingeventattr::DOUBLEVALUE.': "'.$model->getDoubleValue().'",';
       $returnvalue .= '"'.huh_collectingeventattr::STRVALUE.': "'.$model->getStrValue().'",';
       $returnvalue .= '"'.huh_collectingeventattr::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_collectingeventattr::COLLECTINGEVENTID.': "'.$model->getCollectingEventID().'",';
       $returnvalue .= '"'.huh_collectingeventattr::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_collectingeventattr::ATTRIBUTEDEFID.': "'.$model->getAttributeDefID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getAttrID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionMemberID()."</td>\n";
       $returnvalue .= "<td>".$model->getDoubleValue()."</td>\n";
       $returnvalue .= "<td>".$model->getStrValue()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectingEventID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getAttributeDefID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_collectingeventattr::ATTRID."</th>\n";
       $returnvalue .= "<th>".huh_collectingeventattr::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_collectingeventattr::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_collectingeventattr::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_collectingeventattr::COLLECTIONMEMBERID."</th>\n";
       $returnvalue .= "<th>".huh_collectingeventattr::DOUBLEVALUE."</th>\n";
       $returnvalue .= "<th>".huh_collectingeventattr::STRVALUE."</th>\n";
       $returnvalue .= "<th>".huh_collectingeventattr::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_collectingeventattr::COLLECTINGEVENTID."</th>\n";
       $returnvalue .= "<th>".huh_collectingeventattr::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_collectingeventattr::ATTRIBUTEDEFID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_collectingeventattr">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new AttrID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_collectingeventattr::ATTRID.">ATTRID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingeventattr::ATTRID." id=".huh_collectingeventattr::ATTRID." value='".$model->getAttrID()."'  style=' width:".huh_collectingeventattr::ATTRID_SIZE ."em;  '  maxlength='".huh_collectingeventattr::ATTRID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_collectingeventattr::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingeventattr::TIMESTAMPCREATED." id=".huh_collectingeventattr::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_collectingeventattr::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_collectingeventattr::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingeventattr::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingeventattr::TIMESTAMPMODIFIED." id=".huh_collectingeventattr::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_collectingeventattr::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_collectingeventattr::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingeventattr::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingeventattr::VERSION." id=".huh_collectingeventattr::VERSION." value='".$model->getVersion()."'  style=' width:".huh_collectingeventattr::VERSION_SIZE ."em;  '  maxlength='".huh_collectingeventattr::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingeventattr::COLLECTIONMEMBERID.">COLLECTIONMEMBERID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingeventattr::COLLECTIONMEMBERID." id=".huh_collectingeventattr::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  style=' width:".huh_collectingeventattr::COLLECTIONMEMBERID_SIZE ."em;  '  maxlength='".huh_collectingeventattr::COLLECTIONMEMBERID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingeventattr::DOUBLEVALUE.">DOUBLEVALUE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_collectingeventattr::DOUBLEVALUE." id=".huh_collectingeventattr::DOUBLEVALUE." value='".$model->getDoubleValue()."'  style=' width:".huh_collectingeventattr::DOUBLEVALUE_SIZE ."em;  '  maxlength='".huh_collectingeventattr::DOUBLEVALUE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingeventattr::STRVALUE.">STRVALUE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_collectingeventattr::STRVALUE." id=".huh_collectingeventattr::STRVALUE." >".$model->getStrValue()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingeventattr::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingeventattr::CREATEDBYAGENTID." id=".huh_collectingeventattr::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_collectingeventattr::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_collectingeventattr::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingeventattr::COLLECTINGEVENTID.">COLLECTINGEVENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingeventattr::COLLECTINGEVENTID." id=".huh_collectingeventattr::COLLECTINGEVENTID." value='".$model->getCollectingEventID()."'  style=' width:".huh_collectingeventattr::COLLECTINGEVENTID_SIZE ."em;  '  maxlength='".huh_collectingeventattr::COLLECTINGEVENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingeventattr::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingeventattr::MODIFIEDBYAGENTID." id=".huh_collectingeventattr::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_collectingeventattr::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_collectingeventattr::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_collectingeventattr::ATTRIBUTEDEFID.">ATTRIBUTEDEFID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_collectingeventattr::ATTRIBUTEDEFID." id=".huh_collectingeventattr::ATTRIBUTEDEFID." value='".$model->getAttributeDefID()."'  style=' width:".huh_collectingeventattr::ATTRIBUTEDEFID_SIZE ."em;  '  maxlength='".huh_collectingeventattr::ATTRIBUTEDEFID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_collectingeventattr">';
       $returnvalue .= '<input type=hidden name=AttrID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_collectingeventattr">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>ATTRID<input type=text name=".huh_collectingeventattr::ATTRID." id=".huh_collectingeventattr::ATTRID." value='".$model->getAttrID()."'  size='".huh_collectingeventattr::ATTRID_SIZE ."'  maxlength='".huh_collectingeventattr::ATTRID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_collectingeventattr::TIMESTAMPCREATED." id=".huh_collectingeventattr::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_collectingeventattr::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_collectingeventattr::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_collectingeventattr::TIMESTAMPMODIFIED." id=".huh_collectingeventattr::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_collectingeventattr::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_collectingeventattr::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_collectingeventattr::VERSION." id=".huh_collectingeventattr::VERSION." value='".$model->getVersion()."'  size='".huh_collectingeventattr::VERSION_SIZE ."'  maxlength='".huh_collectingeventattr::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONMEMBERID<input type=text name=".huh_collectingeventattr::COLLECTIONMEMBERID." id=".huh_collectingeventattr::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  size='".huh_collectingeventattr::COLLECTIONMEMBERID_SIZE ."'  maxlength='".huh_collectingeventattr::COLLECTIONMEMBERID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DOUBLEVALUE<input type=text name=".huh_collectingeventattr::DOUBLEVALUE." id=".huh_collectingeventattr::DOUBLEVALUE." value='".$model->getDoubleValue()."'  size='".huh_collectingeventattr::DOUBLEVALUE_SIZE ."'  maxlength='".huh_collectingeventattr::DOUBLEVALUE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STRVALUE<input type=text name=".huh_collectingeventattr::STRVALUE." id=".huh_collectingeventattr::STRVALUE." value='".$model->getStrValue()."'  size='51'  maxlength='".huh_collectingeventattr::STRVALUE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_collectingeventattr::CREATEDBYAGENTID." id=".huh_collectingeventattr::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_collectingeventattr::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_collectingeventattr::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTINGEVENTID<input type=text name=".huh_collectingeventattr::COLLECTINGEVENTID." id=".huh_collectingeventattr::COLLECTINGEVENTID." value='".$model->getCollectingEventID()."'  size='".huh_collectingeventattr::COLLECTINGEVENTID_SIZE ."'  maxlength='".huh_collectingeventattr::COLLECTINGEVENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_collectingeventattr::MODIFIEDBYAGENTID." id=".huh_collectingeventattr::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_collectingeventattr::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_collectingeventattr::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ATTRIBUTEDEFID<input type=text name=".huh_collectingeventattr::ATTRIBUTEDEFID." id=".huh_collectingeventattr::ATTRIBUTEDEFID." value='".$model->getAttributeDefID()."'  size='".huh_collectingeventattr::ATTRIBUTEDEFID_SIZE ."'  maxlength='".huh_collectingeventattr::ATTRIBUTEDEFID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
