<?php
// *******  This file won't be overwritten by druid if PHP code is regenerated.
// *******  You may customize this file for your own purposes.
?>
<?php
// Autogenerated by Druid from MySQL db Build:6
// *******
// *******  Customize this file to provide the desired behavior for your application.
// *******

session_start();

$debug = false;
if ($debug) {
   echo  "[". $_SESSION["user_ticket"] . "][". $_SESSION["session_id"] ."]";
	// See PHP documentation.
	mysqli_report(MYSQLI_REPORT_ALL ^ MYSQLI_REPORT_STRICT);
} else { 
	mysqli_report(MYSQLI_REPORT_OFF);
}


include_once('class_lib.php');  // contains declaration of User() class

// *******
// *******  You must provide connections.php or a replacement means of
// *******  having a database connection in scope before including druid_handler.
// *******
// *******  Warning: You must limit the rights of the user for this
// *******  connection with appropriate (e.g. select only) privileges.
// *******
include_once('connection_library.php'); // contains declaration of make_database_connection()
if (!function_exists('specify_connect')) {
   echo 'Error: Database connection function not defined.';
}
@$connection = specify_connect();


// check authentication
$authenticated=false;
if (isset($_SESSION['user_ticket'])) {
   $u = new User();
   $u->setEmail($_SESSION["username"]);
   if ($u->validateTicket($_SESSION['user_ticket'],$_SERVER['REMOTE_ADDR'])) {
      $u->setFullname($_SESSION["fullname"]);
      $u->setAgentId($_SESSION["agentid"]);
      $u->setLastLogin($_SESSION["lastlogin"]);
      $u->setAbout($_SESSION["about"]);
      $authenticated = true;
   }
}

if ($connection && $authenticated) {
   include_once('druid_handler.php');

   @$action = substr(preg_replace('/[^a-z]/','',$_GET['druid_action']),0,40);

   if ($debug) { echo "[$action]"; } 
   
   switch ($action) {
      case 'rapidaddprocessor':
         $feedback = "";
         
            $todo = 100;
            $truncation = false;
            $truncated = "";

        	@$collectors= substr(preg_replace('/[^0-9]/','',$_GET['collectors']),0,huh_agentvariant::NAME_SIZE);
        	@$etal= substr(preg_replace('/[^A-Za-z&\, \.0-9]/','',$_GET['etal']),0,huh_collector::ETAL_SIZE);
        	@$fieldnumber= substr(preg_replace('/[^A-Za-z\- \.0-9\,\/]/','',$_GET['fieldnumber']),0,huh_collectingevent::STATIONFIELDNUMBER_SIZE);
        	@$verbatimdate= substr(preg_replace('/[^A-Za-z:\- \/\.\,0-9\[\]\&\']/','',$_GET['verbatimdate']),0,huh_collectingevent::VERBATIMDATE_SIZE);
        	@$datecollected= substr(preg_replace('/[^\-\/0-9]/','',$_GET['datecollected']),0,40);  // allow larger than date to parse ISO date range
        	@$herbariumacronym= substr(preg_replace('/[^A-Z]/','',$_GET['herbariumacronym']),0,huh_fragment::TEXT1_SIZE);
        	@$barcode= substr(preg_replace('/[^0-9]/','',$_GET['barcode']),0,huh_fragment::IDENTIFIER_SIZE);
        	@$filedundername= substr(preg_replace('/[^A-Za-z[:alpha:]\(\) 0-9]/','',$_GET['filedundername']),0,huh_taxon::FULLNAME_SIZE);
        	@$fiidentificationqualifier= substr(preg_replace('/[^A-Za-z]/','',$_GET['fiidentificationqualifier']),0,huh_determination::QUALIFIER_SIZE);
        	@$currentdetermination= substr(preg_replace('/[^A-Za-z[:alpha:]\(\) 0-9]/','',$_GET['currentdetermination']),0,huh_taxon::FULLNAME_SIZE);
        	@$identificationqualifier= substr(preg_replace('/[^A-Za-z]/','',$_GET['identificationqualifier']),0,huh_determination::QUALIFIER_SIZE);
        	@$identifiedby= substr(preg_replace('/[^0-9]/','',$_GET['identifiedby']),0,huh_determination::DETERMINERID_SIZE);
        	@$dateidentified= substr(preg_replace('/[^0-9\-\/]/','',$_GET['dateidentified']),0,huh_determination::DETERMINEDDATE_SIZE);
        	@$highergeography= substr(preg_replace('/[^0-9]/','',$_GET['highergeography']),0,huh_geography::GEOGRAPHYID_SIZE);
        	@$specificlocality = substr(preg_replace('/[^A-Za-z[:alpha:]0-9\;\:() \.\-\,\[\]\&\'\/?]/','',$_GET['specificlocality']),0,huh_locality::LOCALITYNAME_SIZE);
        	@$prepmethod = substr(preg_replace('/[^A-Za-z]/','',$_GET['prepmethod']),0,huh_preparation::PREPTYPEID_SIZE);
        	@$format = substr(preg_replace('/[^A-Za-z]/','',$_GET['format']),0,huh_preptype::NAME_SIZE);

        	@$verbatimlat= substr(preg_replace('/[^0-9\. \'"°NSn-]/','',$_GET['verbatimlat']),0,huh_locality::LAT1TEXT_SIZE);
        	@$verbatimlong= substr(preg_replace('/[^0-9\. \'"°EWew\-]/','',$_GET['verbatimlong']),0,huh_locality::LONG1TEXT_SIZE);
        	@$decimallat= substr(preg_replace('/[^0-9\.]/','',$_GET['decimallat']),0,huh_locality::LATITUDE1_SIZE);
        	@$decimallong= substr(preg_replace('/[^0-9\.]/','',$_GET['decimallong']),0,huh_locality::LONGITUDE1_SIZE);
        	@$datum= substr(preg_replace('/[^A-Za-z0-9]/','',$_GET['datum']),0,huh_locality::DATUM_SIZE);
        	@$coordinateuncertanty= substr(preg_replace('/[^0-9]/','',$_GET['coordinateuncertanty']),0,huh_geocoorddetail::MAXUNCERTAINTYEST_SIZE);
        	@$georeferencedby= substr(preg_replace('/[^0-9]/','',$_GET['georeferencedby']),0,huh_agentvariant::NAME_SIZE);
        	@$georeferencedate= substr(preg_replace('/[^\-\/0-9]/','',$_GET['georeferencedate']),0,huh_geocoorddetail::GEOREFDETDATE_SIZE);
        	@$georeferencesource= substr(preg_replace('/[^A-Za-z]/','',$_GET['georeferencesource']),0,huh_locality::LATLONGMETHOD_SIZE);
        	@$utmzone= substr(preg_replace('/[^0-9A-Z]/','',$_GET['utmzone']),0,huh_localitydetail::UTMZONE_SIZE);
        	@$utmeasting= substr(preg_replace('/[^0-9]/','',$_GET['utmeasting']),0,huh_localitydetail::UTMEASTING_SIZE);
        	@$utmnorthing= substr(preg_replace('/[^0-9]/','',$_GET['utmnorthing']),0,huh_localitydetail::UTMNORTHING_SIZE);

        	@$typestatus= substr(preg_replace('/[^A-Za-z]/','',$_GET['typestatus']),0,huh_determination::TYPESTATUSNAME_SIZE);
        	@$basionym= substr(preg_replace('/[^0-9]/','',$_GET['basionym']),0,huh_taxon::FULLNAME_SIZE);
        	@$publication= substr(preg_replace('/[^[:alpha:]A-Za-z 0-9]/','',$_GET['publication']),0,huh_referencework::REFERENCEWORKID_SIZE);
        	@$page= substr(preg_replace('/[^0-9 A-Za-z]/','',$_GET['page']),0,huh_taxoncitation::TEXT1_SIZE);
        	@$datepublished= substr(preg_replace('/[^0-9\- ]/','',$_GET['datepublished']),0,huh_taxoncitation::TEXT2_SIZE);
        	@$isfragment= substr(preg_replace('/[^0-9a-z]/','',$_GET['isfragment']),0,1);   // taxon 
        	@$habitat= substr(preg_replace('/[^A-Za-z 0-9]/','',$_GET['habitat']),0,huh_collectingevent::REMARKS_SIZE); 
          	@$phenology= substr(preg_replace('/[^A-Za-z ]/','',$_GET['phenology']),0,huh_fragment::PHENOLOGY_SIZE);
        	@$verbatimelevation= substr(preg_replace('/[^A-Za-z0-9°\-\.\, \[\]\(\)\? \&\']/','',$_GET['verbatimelevation']),0,huh_locality::VERBATIMELEVATION_SIZE);
        	@$minelevation= substr(preg_replace('/[^0-9\.]/','',$_GET['minelevation']),0,huh_locality::MINELEVATION_SIZE);
        	@$maxelevation= substr(preg_replace('/[^0-9\.]/','',$_GET['maxelevation']),0,huh_locality::MAXELEVATION_SIZE);
        	@$specimenremarks= substr(preg_replace('/[^A-Za-z[:alpha:]0-9\- \.\,\;\&\']/','',$_GET['specimenremarks']),0,huh_collectionobject::REMARKS_SIZE);
        	@$container= substr(preg_replace('/[^0-9]/','',$_GET['container']),0,huh_collectionobject::CONTAINERID_SIZE);
            
        	//@$= substr(preg_replace('/[^0-9]/','',$_GET['']),0,huh_);

        	if ($collectors!=$_GET['collectors'])  { $truncation = true; $truncated .= "Collector: [$collectors] "; }  
        	if ($etal!=$_GET['etal']) { $truncation = true; $truncated .= "etal : [$etal] "; }
        	if ($fieldnumber!=$_GET['fieldnumber']) { $truncation = true; $truncated .= "fieldnumber : [$fieldnumber] "; }
        	if ($verbatimdate!=$_GET['verbatimdate']) { $truncation = true; $truncated .= "verbatimdate : [$verbatimdate] "; }
        	if ($datecollected!=$_GET['datecollected']) { $truncation = true; $truncated .= "datecollected : [$datecollected] "; }
        	if ($herbariumacronym!=$_GET['herbariumacronym']) { $truncation = true; $truncated .= "herbariumacronym : [$herbariumacronym] "; }
        	if ($barcode!=$_GET['barcode']) { $truncation = true; $truncated .= "barcode : [$barcode] "; }
        	if ($filedundername!=$_GET['filedundername']) { $truncation = true; $truncated .= "filedundername : [$filedundername] "; }
        	if ($fiidentificationqualifier!=$_GET['fiidentificationqualifier']) { $truncation = true; $truncated .= "fiidentificationqualifier : [$fiidentificationqualifier] "; }
        	if ($currentdetermination!=$_GET['currentdetermination']) { $truncation = true; $truncated .= "currentdetermination : [$currentdetermination] "; }
        	if ($identificationqualifier!=$_GET['identificationqualifier']) { $truncation = true; $truncated .= "identificationqualifier : [$identificationqualifier] "; }
        	if ($identifiedby!=$_GET['identifiedby']) { $truncation = true; $truncated .= "identifiedby : [$identifiedby] "; }
        	if ($dateidentified!=$_GET['dateidentified']) { $truncation = true; $truncated .= "dateidentified : [$dateidentified] "; }
        	if ($highergeography!=$_GET['highergeography']) { $truncation = true; $truncated .= "highergeography : [$highergeography] "; }
        	if ($specificlocality!=$_GET['specificlocality']) { $truncation = true; $truncated .= "specificlocality : [$specificlocality] "; } 
        	if ($prepmethod!=$_GET['prepmethod']) { $truncation = true; $truncated .= "prepmethod : [$prepmethod] "; } 
        	if ($format!=$_GET['format']) { $truncation = true; $truncated .= "format : [$format] "; } 

        	if ($verbatimlat!=$_GET['verbatimlat']) { $truncation = true; $truncated .= "verbatimlat : [$verbatimlat] "; }
        	if ($verbatimlong!=$_GET['verbatimlong']) { $truncation = true; $truncated .= "verbatimlong : [$verbatimlong] "; }
        	if ($decimallat!=$_GET['decimallat']) { $truncation = true; $truncated .= "decimallat : [$decimallat] "; }
        	if ($decimallong!=$_GET['decimallong']) { $truncation = true; $truncated .= "decimallong : [$decimallong] "; }
        	if ($datum!=$_GET['datum']) { $truncation = true; $truncated .= "datum : [$datum] "; }
        	if ($coordinateuncertanty!=$_GET['coordinateuncertanty']) { $truncation = true; $truncated .= "coordinateuncertanty : [$coordinateuncertanty] "; }
        	if ($georeferencedby!=$_GET['georeferencedby']) { $truncation = true; $truncated .= "georeferencedby : [$georeferencedby] "; }
        	if ($georeferencedate!=$_GET['georeferencedate']) { $truncation = true; $truncated .= "georeferencedate : [$georeferencedate] "; }
        	if ($georeferencesource!=$_GET['georeferencesource']) { $truncation = true; $truncated .= "georeferencesource : [$georeferencesource] "; }
        	if ($utmzone!=$_GET['utmzone']) { $truncation = true; $truncated .= "utmzone : [$utmzone] "; }
        	if ($utmeasting!=$_GET['utmeasting']) { $truncation = true; $truncated .= "utmeasting : [$utmeasting] "; }
        	if ($utmnorthing!=$_GET['utmnorthing']) { $truncation = true; $truncated .= "utmnorthing : [$utmnorthing] "; }

        	if ($typestatus!=$_GET['typestatus']) { $truncation = true; $truncated .= "typestatus : [$typestatus] "; }
        	if ($basionym!=$_GET['basionym']) { $truncation = true; $truncated .= "basionym : [$basionym] "; }
        	if ($publication!=$_GET['publication']) { $truncation = true; $truncated .= "publication : [$publication] "; }
        	if ($page!=$_GET['page']) { $truncation = true; $truncated .= "page : [$page] "; }
        	if ($datepublished!=$_GET['datepublished']) { $truncation = true; $truncated .= "datepublished : [$datepublished] "; }
        	if ($isfragment!=$_GET['isfragment']) { $truncation = true; $truncated .= "isfragment : [$isfragment] "; }
        	if ($habitat!=$_GET['habitat']) { $truncation = true; $truncated .= "habitat : [$habitat] "; }
          	if ($phenology!=$_GET['phenology']) { $truncation = true; $truncated .= "phenology : [$phenology] "; }
        	if ($verbatimelevation!=$_GET['verbatimelevation']) { $truncation = true; $truncated .= "verbatimelevation : [$verbatimelevation] "; }
        	if ($minelevation!=$_GET['minelevation']) { $truncation = true; $truncated .= "minelevation : [$minelevation] "; }
        	if ($maxelevation!=$_GET['maxelevation']) { $truncation = true; $truncated .= "maxelevation : [$maxelevation] "; }
        	if ($specimenremarks!=$_GET['specimenremarks']) { $truncation = true; $truncated .= "specimenremarks : [$specimenremarks] "; }
        	if ($container!=$_GET['container']) { $truncation = true; $truncated .= "container : [$container] "; }

        	$feedback = ingestCollectionObject();

        	echo $feedback;
        	break;

      case 'returndistinctjsonpreptype':
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';
         @$table = substr(preg_replace('/[^A-Za-z0-9_\.]/','',$_GET['table']),0,40); // name of the table to update
         @$field= substr(preg_replace('/[^A-Za-z0-9_]/','',$_GET['field']),0,40);  // field to update in table

         if ($debug) {
            echo "[$table][$field]";
         }
         // check that table is on allowed list
         $schema = new database_schema();
         $error = '';
         if ($schema->hasTable($table)) {
            // we know table is an allowed target
            if ($table=='huh_preptype') {
               $t = new huh_preptype_custom();
            } else {
               $t = $schema->getClass($table);
            }
            if ($t->hasField($field)) {
               try {
                  $values = $t->keySelectDistinctJSON($field);
                  $ok = true;
               } catch (Exception $e) {
                  $ok = false;
               }
            } else {
               if ($debug) {
                  echo "[$field not found in $table]";
               }
            }
         }
         //header("Content-type application/json");
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo '{ "identifier":"value", "label":"name",';
            echo '"items": [ ';
            echo $values;
            echo ' ] }';
         } else {
            $response = '{ }';
         }
         break;

      case 'returndistinctjsonpicklist':
         // test call: druid_handler.php?action=returndistinctjsonpicklist&field=value&picklistid=55
         // use with dojo dojox.data.QueryReadDataStore and dijit.form.ComboBox to generate a pick list from the specify picklist table
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';
         @$limit= substr(preg_replace('/[^0-9]/','',$_GET['picklistid']),0,6);  // value to limit
         @$field= substr(preg_replace('/[^A-Za-z0-9_]/','',$_GET['field']),0,40);  // field to update in table
         $required = false;
         @$req = substr(preg_replace('/[^a-z]/','',$_GET['required']),0,6);
         if ($req=='true') {
            $required=true;
         }

         $field = "Value";
         $t = new huh_picklistitem_custom();
         if ($t->hasField($field)) {
            try {
               $values = $t->keySelectDistinctJSONPicklist($field,$limit,$required);
               $ok = true;
            } catch (Exception $e) {
               $ok = false;
            }
         } else {
            if ($debug) {
               echo "[$field not found in picklistitem]";
            }
         }
         //header("Content-type application/json");
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo '{ "identifier":"value", "label":"name",';
            echo '"items": [ ';
            echo $values;
            echo ' ] }';
         } else {
            $response = '{ }';
         }
         break;
         
         case 'returndistinctjsoncontainer':
         	$ok = false;
         	$table = '';
         	$key = '';
         	$field = '';
         	$value = '';
         	$uniqueid = '';
         	$controltype = '';
         	@$limit= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['name']),0,60);  // value to limit
         
         	if (strlen($limit)>4) {
         		$t = new huh_container_custom();
         		try {
         			$values = $t->keySelectDistinctJSONname($limit);
         			$ok = true;
         		} catch (Exception $e) {
         			$ok = false;
         		}
         	}
         	//header("Content-type application/json");
         	header("Content-type text/json-comment-filtered");
         	if ($ok) {
         		$response = '';
         		echo '{ "identifier":"value", "label":"name",';
         		echo '"items": [ ';
         		echo $values;
         		echo ' ] }';
         	} else {
         		$response = '{ }';
         	}
         	break;         
         
      case 'returndistinctjsoncollector':
         // test call: druid_handler.php?action=returndistinctjsoncollectors&term=*Gray*
         // use with dojo dojox.data.QueryReadDataStore and dijit.form.ComboBox to generate a pick list from the specify picklist table
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';
         @$limit= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['name']),0,60);  // value to limit

         if (strlen($limit)>4) {
            $t = new huh_agentvariant_custom();
            try {
               $values = $t->keySelectDistinctJSONCollector($limit);
               $ok = true;
            } catch (Exception $e) {
               $ok = false;
            }
         }
         //header("Content-type application/json");
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo '{ "identifier":"value", "label":"name",';
           	echo '"items": [ ';
           	echo $values;
           	echo ' ] }';
         } else {
            $response = '{ }';
         }
         break;
         
         case 'returndistinctjsontitle':
         	$ok = false;
         	$table = '';
         	$key = '';
         	$field = '';
         	$value = '';
         	$uniqueid = '';
         	$controltype = '';
         	@$limit= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['name']),0,60);  // value to limit
         
         	if (strlen($limit)>4) {
         		$t = new huh_referencework_custom();
         		try {
         			$values = $t->keySelectDistinctJSONTitle($limit);
         			$ok = true;
         		} catch (Exception $e) {
         			$ok = false;
         		}
         	}
         	//header("Content-type application/json");
         	header("Content-type text/json-comment-filtered");
         	if ($ok) {
         		$response = '';
         		echo '{ "identifier":"value", "label":"name",';
         		echo '"items": [ ';
         		echo $values;
         		echo ' ] }';
         	} else {
         		$response = '{ }';
         	}
         	break;         

      case 'returncountryjson':
         // test call: druid_handler.php?action=returncountryjson
         // use with dojo dojo.data.ItemFileDataStore and dijit.form.ComboBox to generate a pick list of countries
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';

         $t = new huh_geography_custom();
         try {
            $values = $t->selectDistinctJSONCountry();
            $ok = true;
         } catch (Exception $e) {
            $ok = false;
         }
         //header("Content-type application/json");
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo '{ "identifier":"value", "label":"name",';
            echo '"items": [ ';
            echo $values;
            echo ' ] }';
         } else {
            $response = '{ }';
         }
         break;

      case 'returnprimaryjson':
         // test call: druid_handler.php?action=returnprimaryjson
         // use with dojo dojo.data.ItemFileDataStore and dijit.form.ComboBox to generate a pick list of states/provinces
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';

         $t = new huh_geography_custom();
         try {
            $values = $t->selectDistinctJSONPrimary();
            $ok = true;
         } catch (Exception $e) {
            $ok = false;
         }
         //header("Content-type application/json");
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo '{ "identifier":"value", "label":"name",';
            echo '"items": [ ';
            echo $values;
            echo ' ] }';
         } else {
            $response = '{ }';
         }
         break;

    		case 'returndistinctgeography':
    		   $ok = false;
    		   $table = '';
    		   $key = '';
    		   $field = '';
    		   $value = '';
    		   $uniqueid = '';
    		   $controltype = '';
    		   @$country= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['country']),0,240);  // value to limit
    		   @$primary= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['primary']),0,240);  // value to limit

    		   $t = new huh_geography_custom();
    		   try {
    		      $values = $t->limitedSelectDistinctJSONGeography($country, $primary);
    		      $ok = true;
    		   } catch (Exception $e) {
    		      $ok = false;
    		   }
    		   //header("Content-type application/json");
    		   header("Content-type text/json-comment-filtered");
    		   if ($ok) {
    		      $response = '';
    		      echo '{ "identifier":"value", "label":"name",';
    		      echo '"items": [ ';
    		      echo $values;
    		      echo ' ] }';
    		   } else {
    		      $response = '{ }';
    		   }
    		   break;

    		case 'returndistinctjsonidnamelimited':
    		   $ok = false;
    		   $table = '';
    		   $key = '';
    		   $field = '';
    		   $value = '';
    		   $uniqueid = '';
    		   $controltype = '';
    		   @$table = substr(preg_replace('/[^A-Za-z0-9_\.]/','',$_GET['table']),0,40); // name of the table to update
    		   @$field= substr(preg_replace('/[^A-Za-z0-9_]/','',$_GET['field']),0,40);  // field to find distinct values for in table
    		   @$limit= substr(preg_replace('/[^A-Za-z0-9\ _*]/','',$_GET['name']),0,40);  // value to limit

    		   if ($debug) {
    		      echo "[$table][$field][$limit]";
    		   }
    		   // check that custom table exists
    		   if ($table=='huh_taxon') {
    		      $t = new huh_taxon_CUSTOM();
    		      if ($t->hasField($field)) {
    		         try {
    		            $values = $t->keySelectDistinctJSONLimit($field,$limit);
    		            $ok = true;
    		         } catch (Exception $e) {
    		            $ok = false;
    		         }
    		      } else {
    		         if ($debug) {
    		            echo "[$field not found in $table]";
    		         }
    		      }
    		   } else {
    		      $schema = new database_schema();
    		      $error = '';
    		      if ($schema->hasTable($table)) {
    		         // we know table is an allowed target
    		         $t = $schema->getClass($table);
    		         if ($t->hasField($field)) {
    		            try {
    		               $values = $t->keySelectDistinctJSONLimit($field,$limit);
    		               $ok = true;
    		            } catch (Exception $e) {
    		               $ok = false;
    		            }
    		         } else {
    		            if ($debug) {
    		               echo "[$field not found in $table]";
    		            }
    		         }
    		      }
    		   }
    		   //header("Content-type application/json");
    		   header("Content-type text/json-comment-filtered");
    		   if ($ok) {
    		      $response = '';
    		      echo '{ "identifier":"value", "label":"name",';
    			   		echo '"items": [ ';
    			   		echo $values;
    			   		echo ' ] }';
    		   } else {
    			   		$response = '{ }';
    		   }
    		   break;

    		default:
    		   // no action
   } // End switch/case block

} else {
   echo 'Error: Unable to connect to database.';
}

mysqli_report(MYSQLI_REPORT_OFF);

?>
