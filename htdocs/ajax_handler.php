<?php
// *******  This file won't be overwritten by druid if PHP code is regenerated.
// *******  You may customize this file for your own purposes.
?>
<?php
// Autogenerated by Druid from MySQL db Build:6
// *******
// *******  Customize this file to provide the desired behavior for your application.
// *******

session_start();
session_write_close();

$debug = false;
if ($debug) {
   echo  "[". $_SESSION["user_ticket"] . "][". $_SESSION["session_id"] ."]";
	// See PHP documentation.
	mysqli_report(MYSQLI_REPORT_ALL ^ MYSQLI_REPORT_STRICT);
} else {
	mysqli_report(MYSQLI_REPORT_OFF);
}

class Result {
  public $success;
  public $html;
  public $errors;
}

include_once('class_lib.php');  // contains declaration of User() class

// *******
// *******  You must provide connections.php or a replacement means of
// *******  having a database connection in scope before including druid_handler.
// *******
// *******  Warning: You must limit the rights of the user for this
// *******  connection with appropriate (e.g. select only) privileges.
// *******
include_once('connection_library.php'); // contains declaration of make_database_connection()
if (!function_exists('specify_connect')) {
   echo 'Error: Database connection function not defined.';
}
@$connection = specify_connect();

// check authentication
$authenticated=false;
if (isset($_SESSION['user_ticket'])) {
   $u = new User();
   $u->setEmail($_SESSION["username"]);
   if ($u->validateTicket($_SESSION['user_ticket'],$_SERVER['REMOTE_ADDR'])) {
      $u->setFullname($_SESSION["fullname"]);
      $u->setAgentId($_SESSION["agentid"]);
      $u->setLastLogin($_SESSION["lastlogin"]);
      $u->setAbout($_SESSION["about"]);
      $authenticated = true;
   }
}

if ($connection && $authenticated) {
   include_once('druid_handler.php');

   @$action = substr(preg_replace('/[^a-z]/','',$_GET['druid_action']),0,45);

   $debug = false;

   if ($debug) { echo "[$action]"; }

   $alpha = "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ";

   switch ($action) {
      case 'prepmergeprocessorpre':
        	@$firstbarcode= substr(preg_replace('/[^0-9]/','',$_GET['targetbarcode']),0,huh_fragment::IDENTIFIER_SIZE);
        	@$secondbarcode= substr(preg_replace('/[^0-9]/','',$_GET['movebarcode']),0,huh_fragment::IDENTIFIER_SIZE);
            if (strlen($firstbarcode)==0 || strlen($secondbarcode)==0) {
               echo "You must provide two barcodes.";
            } elseif ($firstbarcode==$secondbarcode) {
               echo "You must provide two different barcodes.";
            } else {
               $barcodes[0]=$firstbarcode;
               $barcodes[1]=$secondbarcode;

               $result =  preMergeCheck($barcodes);
               echo $result->html;
               echo $result->errors;
               if ($result->success===TRUE) {
                  echo "Merge preparation for $firstbarcode with $secondbarcode?";
                  echo '<div>';
                  echo "<form action='ajax_handler.php' method='GET' id='doMergeForm' >\n";
                  echo "<input type=hidden name='druid_action' value='prepmergeprocessor'>";
                  echo "<input type=hidden name='targetbarcode' value='$firstbarcode'>";
                  echo "<input type=hidden name='movebarcode' value='$secondbarcode'>";
                  echo "<button type='submit' dojoType='dijit.form.Button' id='doMergeButton'>Merge</button>";
                  echo "</form >";
                  echo "</div >";
               }
            }
         break;
      case 'prepmergeprocessor':
        	@$firstbarcode= substr(preg_replace('/[^0-9]/','',$_GET['targetbarcode']),0,huh_fragment::IDENTIFIER_SIZE);
        	@$secondbarcode= substr(preg_replace('/[^0-9]/','',$_GET['movebarcode']),0,huh_fragment::IDENTIFIER_SIZE);
            $barcodes[0]=$firstbarcode;
            $barcodes[1]=$secondbarcode;
            $result =  preMergeCheck($barcodes);
            if ($result->success===TRUE) {

               if (TRUE) {
                  echo "Merge function not currently enabled. ";
               } else {

               $result = merge($barcodes);
               echo "Merge $firstbarcode with $secondbarcode ";
               if ($result->success) {
                  echo "<strong>success</strong>.<br/>";
               } else {
                  echo "<strong>failed</strong>.<br/>";
                  echo $result->errors;
               }

               }

            } else {
               echo $result->errors;
            }
         break;
      case 'showstructure':
        	@$barcode= substr(preg_replace('/[^0-9]/','',$_GET['barcode']),0,huh_fragment::IDENTIFIER_SIZE);
            $result = showStructure($barcode);
            if ($result->success===TRUE) {
               echo $result->html;
            } else {
               echo $result->errors;
            }

         break;
      case 'rapidaddprocessor':
         $feedback = "";

            $todo = 100;
            $truncation = false;
            $truncated = "";
        	@$collectors= substr(preg_replace('/[^0-9]/','',$_GET['collectors']),0,huh_agentvariant::NAME_SIZE);
        	@$etal= substr($_GET['etal'],0,huh_collector::ETAL_SIZE);
        	@$fieldnumber= substr(preg_replace('/[^A-Za-z\- \.0-9\,\/\(\)\[\]=#]/','',$_GET['fieldnumber']),0,huh_collectingevent::STATIONFIELDNUMBER_SIZE);
        	@$accessionnumber= substr(preg_replace('/[^A-Za-z\- \.0-9\,\/\(\)\[\]=#]/','',$_GET['accessionnumber']),0,huh_collectingevent::STATIONFIELDNUMBER_SIZE);
        	@$verbatimdate= substr($_GET['verbatimdate'],0,huh_collectingevent::VERBATIMDATE_SIZE);
        	@$datecollected= substr(preg_replace('/[^\-\/0-9]/','',$_GET['datecollected']),0,40);  // allow larger than date to parse ISO date range
        	@$herbariumacronym= substr(preg_replace('/[^A-Z]/','',$_GET['herbariumacronym']),0,huh_fragment::TEXT1_SIZE);
        	@$barcode= substr(preg_replace('/[^0-9]/','',$_GET['barcode']),0,huh_fragment::IDENTIFIER_SIZE);
        	@$provenance= substr(preg_replace('/^A-Za-z 0-9\[\]\.\-\,\(\)\?\;\:]/','',$_GET['provenance']),0,huh_fragment::PROVENANCE_SIZE);
        	@$filedundername= substr(preg_replace('/[^A-Za-z[:alpha:]\(\) 0-9]/','',$_GET['filedundername']),0,huh_taxon::FULLNAME_SIZE);
        	@$fiidentificationqualifier= substr(preg_replace('/[^A-Za-z]/','',$_GET['fiidentificationqualifier']),0,huh_determination::QUALIFIER_SIZE);
          @$fiidentifiedby= substr(preg_replace('/[^0-9]/','',$_GET['fiidentifiedby']),0,huh_determination::DETERMINERID_SIZE);
          @$fideterminertext= substr($_GET['fideterminertext'],0,huh_determination::TEXT1_SIZE);
          @$fiannotationtext= substr($_GET['fiannotationtext'],0,huh_determination::TEXT2_SIZE);
          @$fidateidentified= substr(preg_replace('/[^0-9\-\/]/','',$_GET['fidateidentified']),0,huh_determination::DETERMINEDDATE_SIZE);

        	@$currentdetermination= substr(preg_replace('/[^A-Za-z[:alpha:]\(\) 0-9]/','',$_GET['currentdetermination']),0,huh_taxon::FULLNAME_SIZE);
        	@$identificationqualifier= substr(preg_replace('/[^A-Za-z]/','',$_GET['identificationqualifier']),0,huh_determination::QUALIFIER_SIZE);
        	@$identifiedby=      substr(preg_replace('/[^0-9]/','',$_GET['identifiedby']),0,huh_determination::DETERMINERID_SIZE);
        	@$determinertext= substr(preg_replace('/[^A-Za-z[:alpha:]'.$alpha.'0-9+\;\:() \.\-\,\[\]\&\'\/?#"ñ°]/','',$_GET['determinertext']),0,huh_determination::TEXT1_SIZE);
          @$annotationtext= substr($_GET['annotationtext'],0,huh_determination::TEXT2_SIZE);
        	@$dateidentified= substr($_GET['dateidentified'],0,huh_determination::DETERMINEDDATE_SIZE);
        	@$highergeography= substr(preg_replace('/[^0-9]/','',$_GET['highergeography']),0,huh_geography::GEOGRAPHYID_SIZE);
        	@$specificlocality = substr($_GET['specificlocality'],0,huh_locality::LOCALITYNAME_SIZE);
        	@$prepmethod = substr(preg_replace('/[^A-Za-z]/','',$_GET['prepmethod']),0,huh_preparation::PREPTYPEID_SIZE);
        	@$format = substr(preg_replace('/[^A-Za-z]/','',$_GET['format']),0,huh_preptype::NAME_SIZE);

        	@$verbatimlat= substr(preg_replace('/[^0-9\. \'"°NSn-]/','',$_GET['verbatimlat']),0,huh_locality::LAT1TEXT_SIZE);
        	@$verbatimlong= substr(preg_replace('/[^0-9\. \'"°EWew\-]/','',$_GET['verbatimlong']),0,huh_locality::LONG1TEXT_SIZE);
        	@$decimallat= substr(preg_replace('/[^0-9\.\-]/','',$_GET['decimallat']),0,huh_locality::LATITUDE1_SIZE);
        	@$decimallong= substr(preg_replace('/[^0-9\.\-]/','',$_GET['decimallong']),0,huh_locality::LONGITUDE1_SIZE);
        	@$datum= substr(preg_replace('/[^A-Za-z0-9]/','',$_GET['datum']),0,huh_locality::DATUM_SIZE);
        	@$coordinateuncertanty= substr(preg_replace('/[^0-9]/','',$_GET['coordinateuncertanty']),0,huh_geocoorddetail::MAXUNCERTAINTYEST_SIZE);
        	@$georeferencedby= substr(preg_replace('/[^0-9]/','',$_GET['georeferencedby']),0,huh_agentvariant::NAME_SIZE);
        	@$georeferencedate= substr(preg_replace('/[^\-\/0-9]/','',$_GET['georeferencedate']),0,huh_geocoorddetail::GEOREFDETDATE_SIZE);
        	@$georeferencesource= substr(preg_replace('/[^A-Za-z]/','',$_GET['georeferencesource']),0,huh_locality::LATLONGMETHOD_SIZE);
        	@$utmzone= substr(preg_replace('/[^0-9A-Z]/','',$_GET['utmzone']),0,huh_localitydetail::UTMZONE_SIZE);
        	@$utmeasting= substr(preg_replace('/[^0-9]/','',$_GET['utmeasting']),0,huh_localitydetail::UTMEASTING_SIZE);
        	@$utmnorthing= substr(preg_replace('/[^0-9]/','',$_GET['utmnorthing']),0,huh_localitydetail::UTMNORTHING_SIZE);

        	@$typestatus= substr(preg_replace('/[^A-Za-z]/','',$_GET['typestatus']),0,huh_determination::TYPESTATUSNAME_SIZE);
        	@$typeconfidence= substr(preg_replace('/[^A-Za-z]/','',$_GET['typeconfidence']),0,huh_determination::CONFIDENCE_SIZE);
        	@$basionym= substr(preg_replace('/[^0-9]/','',$_GET['basionym']),0,huh_taxon::FULLNAME_SIZE);
        	@$publication= substr(preg_replace('/[^[:alpha:]A-Za-z 0-9]/','',$_GET['publication']),0,huh_referencework::REFERENCEWORKID_SIZE);
        	@$page= substr(preg_replace('/[^0-9 A-Za-z\,\(\)\-\:\;\.\[\]]/','',$_GET['page']),0,huh_taxoncitation::TEXT1_SIZE);
        	@$datepublished= substr(preg_replace('/[^0-9 A-Za-z\,\(\)\-\:\;\.\[\]]/','',$_GET['datepublished']),0,huh_taxoncitation::TEXT2_SIZE);
        	@$isfragment= substr(preg_replace('/[^0-9a-z]/','',$_GET['isfragment']),0,1);   // taxon
        	@$habitat= substr($_GET['habitat'],0,huh_collectingevent::REMARKS_SIZE);
        	@$host = substr($_GET['host'],0,900);
        	@$substrate= substr(preg_replace('/[^A-Za-z[:alpha:]'.$alpha.'0-9+\;\:() \.\-\,\[\]\&\'\/?#"ñ°]/','',$_GET['substrate']),0,huh_fragment::TEXT2_SIZE);
        	@$phenology= substr(preg_replace('/[^A-Za-z ]/','',$_GET['phenology']),0,huh_fragment::PHENOLOGY_SIZE);
        	@$verbatimelevation= substr($_GET['verbatimelevation'],0,huh_locality::VERBATIMELEVATION_SIZE);
        	@$minelevation= substr(preg_replace('/[^0-9\.]/','',$_GET['minelevation']),0,huh_locality::MINELEVATION_SIZE);
        	@$maxelevation= substr(preg_replace('/[^0-9\.]/','',$_GET['maxelevation']),0,huh_locality::MAXELEVATION_SIZE);
        	@$specimenremarks= substr($_GET['specimenremarks'],0,huh_collectionobject::REMARKS_SIZE);
        	@$specimendescription= substr($_GET['specimendescription'],0,huh_collectionobject::DESCRIPTION_SIZE);
        	@$itemdescription= substr($_GET['itemdescription'],0,huh_fragment::DESCRIPTION_SIZE);
        	@$container= substr(preg_replace('/[^0-9]/','',$_GET['container']),0,huh_collectionobject::CONTAINERID_SIZE);
			    @$collectingtrip = substr(preg_replace('/[^0-9]/','',$_GET['collectingtrip']),0,huh_collectingevent::COLLECTINGTRIPID_SIZE);
        	@$storagelocation= substr(preg_replace('/[^A-Za-z'.$alpha.'0-9+\;\:() \.\-\,\[\]\&\'\/?#"ñ]/','',$_GET['storagelocation']),0,huh_preparation::STORAGELOCATION_SIZE);
        	@$project= substr(preg_replace('/[^A-Za-z\. \-0-9]/','',$_GET['project']),0,huh_project::PROJECTNAME_SIZE);
        	@$storage= substr(preg_replace('/[^0-9]/','',$_GET['storage']),0,huh_storage::STORAGEID_SIZE); // subcollection
        	@$exsiccati= substr(preg_replace('/[^0-9]/','',$_GET['exsiccati']),0,huh_referencework::REFERENCEWORKID_SIZE);
        	@$fascicle= substr(preg_replace('/[^A-Za-z\. 0-9]/','',$_GET['fascicle']),0,huh_fragmentcitation::TEXT1_SIZE);
        	@$exsiccatinumber= substr(preg_replace('/[^A-Za-z\. 0-9]/','',$_GET['exsiccatinumber']),0,huh_fragmentcitation::TEXT2_SIZE);
          @$label_name= substr(preg_replace('/[^A-Za-z[:alpha:]\(\) 0-9]/','',$_GET['label_name']),0,huh_taxon::FULLNAME_SIZE);
          @$label_identificationqualifier= substr(preg_replace('/[^A-Za-z]/','',$_GET['label_identificationqualifier']),0,huh_determination::QUALIFIER_SIZE);
          @$label_identifiedby= substr(preg_replace('/[^0-9]/','',$_GET['label_identifiedby']),0,huh_determination::DETERMINERID_SIZE);
          @$label_determinertext= substr($_GET['label_determinertext'],0,huh_determination::TEXT1_SIZE);
          @$label_annotationtext= substr($_GET['label_annotationtext'],0,huh_determination::TEXT2_SIZE);
          @$label_dateidentified= substr(preg_replace('/[^0-9\-\/]/','',$_GET['label_dateidentified']),0,huh_determination::DETERMINEDDATE_SIZE);

        	//@$= substr(preg_replace('/[^0-9]/','',$_GET['']),0,huh_);

        	if ($collectors!=$_GET['collectors'])  { $truncation = true; $truncated .= "Collector: [$collectors] "; }
        	if ($etal!=$_GET['etal']) { $truncation = true; $truncated .= "etal : [$etal] "; }
        	if ($fieldnumber!=$_GET['fieldnumber']) { $truncation = true; $truncated .= "fieldnumber : [$fieldnumber] "; }
        	if ($accessionnumber!=$_GET['accessionnumber']) { $truncation = true; $truncated .= "accessionnumber : [$accessionnumber] "; }
        	if ($verbatimdate!=$_GET['verbatimdate']) { $truncation = true; $truncated .= "verbatimdate : [$verbatimdate] "; }
        	if ($datecollected!=$_GET['datecollected']) { $truncation = true; $truncated .= "datecollected : [$datecollected] "; }
        	if ($herbariumacronym!=$_GET['herbariumacronym']) { $truncation = true; $truncated .= "herbariumacronym : [$herbariumacronym] "; }
        	if ($barcode!=$_GET['barcode']) { $truncation = true; $truncated .= "barcode : [$barcode] "; }
        	if ($provenance!=$_GET['provenance']) { $truncation = true; $truncated .= "provenance : [$provenance] "; }
        	if ($filedundername!=$_GET['filedundername']) { $truncation = true; $truncated .= "filedundername : [$filedundername] "; }
        	if ($fiidentificationqualifier!=$_GET['fiidentificationqualifier']) { $truncation = true; $truncated .= "fiidentificationqualifier : [$fiidentificationqualifier] "; }
          if ($fiidentifiedby!=$_GET['fiidentifiedby']) { $truncation = true; $truncated .= "fiidentifiedby : [$fiidentifiedby] "; }
          if ($fideterminertext!=$_GET['fideterminertext']) { $truncation = true; $truncated .= "fideterminertext : [$fideterminertext] "; }
          if ($fiannotationtext!=$_GET['fiannotationtext']) { $truncation = true; $truncated .= "fiannotationtext : [$fiannotationtext] "; }
          if ($fidateidentified!=$_GET['fidateidentified']) { $truncation = true; $truncated .= "fidateidentified : [$fidateidentified] "; }
        	if ($currentdetermination!=$_GET['currentdetermination']) { $truncation = true; $truncated .= "currentdetermination : [$currentdetermination] "; }
        	if ($identificationqualifier!=$_GET['identificationqualifier']) { $truncation = true; $truncated .= "identificationqualifier : [$identificationqualifier] "; }
        	if ($identifiedby!=$_GET['identifiedby']) { $truncation = true; $truncated .= "identifiedby : [$identifiedby] "; }
        	if ($determinertext!=$_GET['determinertext']) { $truncation = true; $truncated .= "determinertext : [$determinertext] "; }
          if ($annotationtext!=$_GET['annotationtext']) { $truncation = true; $truncated .= "annotationtext : [$annotationtext] "; }
        	if ($dateidentified!=$_GET['dateidentified']) { $truncation = true; $truncated .= "dateidentified : [$dateidentified] "; }
        	if ($highergeography!=$_GET['highergeography']) { $truncation = true; $truncated .= "highergeography : [$highergeography] "; }
        	if ($specificlocality!=$_GET['specificlocality']) { $truncation = true; $truncated .= "specificlocality : [$specificlocality] "; }
        	if ($prepmethod!=$_GET['prepmethod']) { $truncation = true; $truncated .= "prepmethod : [$prepmethod] "; }
        	if ($format!=$_GET['format']) { $truncation = true; $truncated .= "format : [$format] "; }
          if ($label_name!=$_GET['label_name']) { $truncation = true; $truncated .= "label_name : [$label_name] "; }
          if ($label_identificationqualifier!=$_GET['label_identificationqualifier']) { $truncation = true; $truncated .= "label_identificationqualifier : [$label_identificationqualifier] "; }
          if ($label_identifiedby!=$_GET['label_identifiedby']) { $truncation = true; $truncated .= "label_identifiedby : [$label_identifiedby] "; }
          if ($label_determinertext!=$_GET['label_determinertext']) { $truncation = true; $truncated .= "label_determinertext : [$label_determinertext] "; }
          if ($label_annotationtext!=$_GET['label_annotationtext']) { $truncation = true; $truncated .= "label_annotationtext : [$label_annotationtext] "; }
          if ($label_dateidentified!=$_GET['label_dateidentified']) { $truncation = true; $truncated .= "label_dateidentified : [$label_dateidentified] "; }

        	if ($verbatimlat!=$_GET['verbatimlat']) { $truncation = true; $truncated .= "verbatimlat : [$verbatimlat] "; }
        	if ($verbatimlong!=$_GET['verbatimlong']) { $truncation = true; $truncated .= "verbatimlong : [$verbatimlong] "; }
        	if ($decimallat!=$_GET['decimallat']) { $truncation = true; $truncated .= "decimallat : [$decimallat] "; }
        	if ($decimallong!=$_GET['decimallong']) { $truncation = true; $truncated .= "decimallong : [$decimallong] "; }
        	if ($datum!=$_GET['datum']) { $truncation = true; $truncated .= "datum : [$datum] "; }
        	if ($coordinateuncertanty!=$_GET['coordinateuncertanty']) { $truncation = true; $truncated .= "coordinateuncertanty : [$coordinateuncertanty] "; }
        	if ($georeferencedby!=$_GET['georeferencedby']) { $truncation = true; $truncated .= "georeferencedby : [$georeferencedby] "; }
        	if ($georeferencedate!=$_GET['georeferencedate']) { $truncation = true; $truncated .= "georeferencedate : [$georeferencedate] "; }
        	if ($georeferencesource!=$_GET['georeferencesource']) { $truncation = true; $truncated .= "georeferencesource : [$georeferencesource] "; }
        	if ($utmzone!=$_GET['utmzone']) { $truncation = true; $truncated .= "utmzone : [$utmzone] "; }
        	if ($utmeasting!=$_GET['utmeasting']) { $truncation = true; $truncated .= "utmeasting : [$utmeasting] "; }
        	if ($utmnorthing!=$_GET['utmnorthing']) { $truncation = true; $truncated .= "utmnorthing : [$utmnorthing] "; }

        	if ($typestatus!=$_GET['typestatus']) { $truncation = true; $truncated .= "typestatus : [$typestatus] "; }
        	if ($typeconfidence!=@$_GET['typeconfidence']) { $truncation = true; $truncated .= "typeconfidence : [$typeconfidence] "; }
        	if ($basionym!=$_GET['basionym']) { $truncation = true; $truncated .= "basionym : [$basionym] "; }
        	if ($publication!=$_GET['publication']) { $truncation = true; $truncated .= "publication : [$publication] "; }
        	if ($page!=$_GET['page']) { $truncation = true; $truncated .= "page : [$page] "; }
        	if ($datepublished!=$_GET['datepublished']) { $truncation = true; $truncated .= "datepublished : [$datepublished] "; }
        	if ($isfragment!=$_GET['isfragment']) { $truncation = true; $truncated .= "isfragment : [$isfragment] "; }
        	if ($habitat!=$_GET['habitat']) { $truncation = true; $truncated .= "habitat : [$habitat] "; }
        	if ($host!=$_GET['host']) { $truncation = true; $truncated .= "host : [$host] "; }
        	if ($substrate!=$_GET['substrate']) { $truncation = true; $truncated .= "substrate : [$substrate] "; }
        	if ($phenology!=$_GET['phenology']) { $truncation = true; $truncated .= "phenology : [$phenology] "; }
        	if ($verbatimelevation!=$_GET['verbatimelevation']) { $truncation = true; $truncated .= "verbatimelevation : [$verbatimelevation] "; }
        	if ($minelevation!=@$_GET['minelevation']) { $truncation = true; $truncated .= "minelevation : [$minelevation] "; }
        	if ($maxelevation!=@$_GET['maxelevation']) { $truncation = true; $truncated .= "maxelevation : [$maxelevation] "; }
        	if ($specimenremarks!=$_GET['specimenremarks']) { $truncation = true; $truncated .= "specimenremarks : [$specimenremarks] "; }
        	if ($specimendescription!=$_GET['specimendescription']) { $truncation = true; $truncated .= "specimendescription : [$specimendescription] "; }
        	if ($itemdescription!=$_GET['itemdescription']) { $truncation = true; $truncated .= "itemdescription : [$itemdescription] "; }
        	if ($container!=$_GET['container']) { $truncation = true; $truncated .= "container : [$container] "; }
        	if ($collectingtrip!=$_GET['collectingtrip']) { $truncation = true; $truncated .= "collectingtrip : [$collectingtrip] "; }
        	if ($storagelocation!=$_GET['storagelocation']) { $truncation = true; $truncated .= "storagelocation : [$storagelocation] "; }
        	if ($project!=$_GET['project']) { $truncation = true; $truncated .= "project : [$project] "; }
        	if ($storage!=$_GET['storage']) { $truncation = true; $truncated .= "storage : [$storage] "; }  // subcollection
        	if ($exsiccati!=$_GET['exsiccati']) { $truncation = true; $truncated .= "exsiccati : [$exsiccati] "; }
        	if ($fascicle!=$_GET['fascicle']) { $truncation = true; $truncated .= "fascicle : [$fascicle] "; }
        	if ($exsiccatinumber!=$_GET['exsiccatinumber']) { $truncation = true; $truncated .= "exsiccatinumber : [$exsiccatinumber] "; }


        	$feedback = ingestCollectionObject();

        	echo $feedback;
        	break;

      case 'returndistinctjsonpreptype':
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';
         @$table = substr(preg_replace('/[^A-Za-z0-9_\.]/','',$_GET['table']),0,40); // name of the table to update
         @$field= substr(preg_replace('/[^A-Za-z0-9_]/','',$_GET['field']),0,40);  // field to update in table

         if ($debug) {
            echo "[$table][$field]";
         }
         // check that table is on allowed list
         $schema = new database_schema();
         $error = '';
         if ($schema->hasTable($table)) {
            // we know table is an allowed target
            if ($table=='huh_preptype') {
               $t = new huh_preptype_custom();
            } else {
               $t = $schema->getClass($table);
            }
            if ($t->hasField($field)) {
               try {
                  $values = $t->keySelectDistinctJSON($field);
                  $ok = true;
               } catch (Exception $e) {
                  $ok = false;
               }
            } else {
               if ($debug) {
                  echo "[$field not found in $table]";
               }
            }
         }
         //header("Content-type application/json");
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo '{ "identifier":"value", "label":"name",';
            echo '"items": [ ';
            echo $values;
            echo ' ] }';
         } else {
            $response = '{ }';
         }
         break;
    case 'taxonidtaxonjsonp':
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';
         $term = $_GET['term'];
         $table="taxon";
         $t = new huh_taxon_custom();
         if (strlen($term)>0) {
            try {
               $values = $t->keySelectTaxonTaxonIDJSON("$term%");
               if (! empty($values)) {
                 $values .= ", ";
               }
               $values = "[" . $values . $t->keySelectTaxonTaxonIDJSON("%$term%") . "]";
               $ok = true;
            } catch (Exception $e) {
               $ok = false;
            }
         } else {
            $values = "[]";
         }
         header("Content-Type: application/json; charset=UTF-8");
         if ($ok) {
            $response = '';
            //echo '{ "identifier":"value", "label":"name",';
            //echo '"items": [ ';
            echo $values;
            //echo ' ] }';
         } else {
            $response = '{ }';
         }
         break;
    case 'geoidgeojson':
         $ok = false;
         $within = "";
         @$within = $_GET['within'];
         @$rank = $_GET['rank'];
         if (strlen($rank)==0) {
           $rank = 10000;
         }
         $key = '';
         @$field = $_GET['field'];
         $value = '';
         $uniqueid = '';
         $controltype = '';
         $term = $_GET['term'];
         $t = new huh_geography_custom();
         if (strlen($term)>0) {
            try {
               if ($field=='geographyfilter') {
                   $values = $t->keySelectGeoGeoIDJSONHigher("%$term%",$rank);
               } else {
                   $values = $t->keySelectGeoGeoIDJSON("%$term%",$within,$rank);
               }
               $ok = true;
            } catch (Exception $e) {
               $ok = false;
            }
         } else {
            $values = "[]";
         }
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo $values;
         } else {
            $response = '{ }';
         }
         break;
    case 'collagentidjson':
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';
         $term = $_GET['term'];
         $table="taxon";
         $t = new huh_collector_custom();
         if (strlen($term)>0) {
            try {
               $values = $t->keySelectCollectorAgentIDJSON("%$term%");
               $ok = true;
            } catch (Exception $e) {
               $ok = false;
            }
         } else {
            $values = "[]";
         }
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo $values;
         } else {
            $response = '[]';
         }
         break;

    case 'colltripidcolltripjson':
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';
         $term = $_GET['term'];
         $table="taxon";
         $t = new huh_collectingtrip_custom();
         if (strlen($term)>0) {
            try {
               $values = $t->keySelectCollectingTripIDJSON("%$term%");
               $ok = true;
            } catch (Exception $e) {
               $ok = false;
            }
         } else {
            $values = "[]";
         }
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo $values;
         } else {
            $response = '[]';
         }
         break;

    case 'returndistinctjqaprepmethod':
         @$term = $_GET['term'];
         $values = array( "DNAsample", "Drawing", "Dried", "Fossil", "Glycerine", "Other", "Photograph", "Pressed", "Protolog", "SpiritMedium", "Wood" );
         header("Content-type text/json-comment-filtered");
         if ($term==null || $term=='') {
            echo json_encode($values);
         } elseif (strlen($term)>0) {
             $retval = array();
             foreach ($values as $val){
                if(strpos($val,$term)!== false) {
                   array_push($retval,$val);
                }
             }
             echo json_encode($retval);
         } else {
            echo '[]';
         }
         break;

    case 'returndistinctjqapreptype':
         $ok = false;
         $table = 'huh_preptype';
         $key = '';
         $field = 'Name';
         $value = '';
         @$term = $_GET['term'];
         $term = "$term%";
         $uniqueid = '';
         $controltype = '';

         if ($debug) {
            echo "[$table][$field]";
         }
         // check that table is on allowed list
         $schema = new database_schema();
         $error = '';
         if ($schema->hasTable($table)) {
            // we know table is an allowed target
            if ($table=='huh_preptype') {
               $t = new huh_preptype_custom();
            } else {
               $t = $schema->getClass($table);
            }
            if ($t->hasField($field)) {
               try {
                  $values = $t->keySelectDistinctJSONFiltered($field,$term);
                  $ok = true;
               } catch (Exception $e) {
                  $ok = false;
               }
            } else {
               if ($debug) {
                  echo "[$field not found in $table]";
               }
            }
         }
         //header("Content-type application/json");
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            echo '[ ';
            echo $values;
            echo ' ]';
         } else {
            echo '[]';
         }
         break;

   case 'returndistinctseriestype':
        $ok = false;
        $values = '';
        @$term = $_GET['term'];
        $term = "%$term%";

        // check that table is on allowed list
        $schema = new database_schema();
        $error = '';
        $required = false;

        $t = new huh_picklistitem_custom();

         try {
            $values = $t->keySelectDistinctJSONPicklist(41,$term,$required);
            $ok = true;
         } catch (Exception $e) {
            $ok = false;
         }

        //header("Content-type application/json");
        header("Content-type text/json-comment-filtered");
        if ($ok) {
           echo '[ ';
           echo $values;
           echo ' ]';
        } else {
           echo '[]';
        }
        break;

      case 'returndistinctjsonpicklist':
         // test call: druid_handler.php?action=returndistinctjsonpicklist&field=value&picklistid=55
         // use with dojo dojox.data.QueryReadDataStore and dijit.form.ComboBox to generate a pick list from the specify picklist table
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';
         @$limit= substr(preg_replace('/[^0-9]/','',$_GET['picklistid']),0,6);  // value to limit
         @$field= substr(preg_replace('/[^A-Za-z0-9_]/','',$_GET['field']),0,40);  // field to update in table
         $required = false;
         @$req = substr(preg_replace('/[^a-z]/','',$_GET['required']),0,6);
         if ($req=='true') {
            $required=true;
         }

         $field = "Value";
         $t = new huh_picklistitem_custom();
         if ($t->hasField($field)) {
            try {
               $values = $t->keySelectDistinctJSONPicklist($limit,'%',$required);
               $ok = true;
            } catch (Exception $e) {
               $ok = false;
            }
         } else {
            if ($debug) {
               echo "[$field not found in picklistitem]";
            }
         }
         //header("Content-type application/json");
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo '{ "identifier":"value", "label":"label",';
            echo '"items": [ ';
            echo $values;
            echo ' ] }';
         } else {
            $response = '{ }';
         }
         break;

         case 'returnjsoncontainer':
         	$ok = false;
         	$table = '';
         	$key = '';
         	$field = '';
         	$value = '';
         	$uniqueid = '';
         	$controltype = '';
         	@$limit= $_GET['term'];  // value to limit

         	if (strlen($limit)>4) {
         		$t = new huh_container_custom();
         		try {
         			$values = $t->keySelectJSONname("%$limit%");
         			$ok = true;
         		} catch (Exception $e) {
         			$ok = false;
         		}
         	}
         	//header("Content-type application/json");
         	header("Content-type text/json-comment-filtered");
         	if ($ok) {
         		$response = '';
         		echo '[ ';
         		echo $values;
         		echo ' ]';
         	} else {
         		$response = '{ }';
         	}
         	break;

         case 'returndistinctjsoncontainer':
         	$ok = false;
         	$table = '';
         	$key = '';
         	$field = '';
         	$value = '';
         	$uniqueid = '';
         	$controltype = '';
         	@$limit= $_GET['name'];  // value to limit

         	if (strlen($limit)>4) {
         		$t = new huh_container_custom();
         		try {
         			$values = $t->keySelectDistinctJSONname($limit);
         			$ok = true;
         		} catch (Exception $e) {
         			$ok = false;
         		}
         	}
         	//header("Content-type application/json");
         	header("Content-type text/json-comment-filtered");
         	if ($ok) {
         		$response = '';
            echo '{ "identifier":"value", "label":"name",';
         		echo '"items": [ ';
         		echo $values;
         		echo ' ] }';
         	} else {
         		$response = '{ }';
         	}
         	break;

         case 'returndistinctjsoncollectingtrip':
         	$ok = false;
         	$table = '';
         	$key = '';
         	$field = '';
         	$value = '';
         	$uniqueid = '';
         	$controltype = '';
         	@$limit= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['name']),0,60);  // value to limit

         	if (strlen($limit)>4) {
         		$t = new huh_collectingtrip_custom();
         		try {
         			$values = $t->keySelectDistinctJSONname($limit);
        			$ok = true;
         		} catch (Exception $e) {
         			$ok = false;
         		}
         	}
         	//header("Content-type application/json");
         	header("Content-type text/json-comment-filtered");
         	if ($ok) {
         		$response = '';
         		echo '{ "identifier":"value", "label":"name",';
         		echo '"items": [ ';
         		echo $values;
         		echo ' ] }';
         	} else {
         		$response = '{ }';
         	}
         	break;

         case 'returndistinctjsonproject':
            $ok = false;
            $table = '';
            $key = '';
            $field = '';
            $value = '';
            $uniqueid = '';
            $controltype = '';
            @$limit= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['name']),0,60);  // value to limit
            if (@isset($_GET['term']) && strlen($_GET['term'])>0) {
               $limit= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['term']),0,60);  // value to limit
               if (strlen($limit)==0) {
                  $limit = "%";
               } else {
                  $limit = "%$limit%";
               }
            }

            if (strlen($limit)>0) {
                $t = new huh_project_custom();
                try {
                    $values = $t->keySelectDistinctJSONname($limit);
                    $ok = true;
                } catch (Exception $e) {
                    $ok = false;
                }
            }
            //header("Content-type application/json");
            header("Content-type text/json-comment-filtered");
            if ($ok) {
                $response = '';
                echo '{ "identifier":"value", "label":"name",';
                echo '"items": [ ';
                echo $values;
                echo ' ] }';
            } else {
                $response = '{ }';
            }
            break;


         // to back jquery autocomplete
         case 'returndistinctjqaproject':
            $ok = false;
            $table = '';
            $key = '';
            $field = '';
            $value = '';
            $uniqueid = '';
            $controltype = '';
            if (@isset($_GET['term']) && strlen($_GET['term'])>0) {
               $limit= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['term']),0,60);  // value to limit
               if (strlen($limit)==0) {
                  $limit = "%";
               } else {
                  $limit = "%$limit%";
               }
            }

            if (strlen($limit)>0) {
                $t = new huh_project_custom();
                try {
                    $values = $t->keySelectDistinctJSONname($limit,TRUE);
                    $ok = true;
                } catch (Exception $e) {
                    $ok = false;
                }
            }
            //header("Content-type application/json");
            header("Content-type text/json-comment-filtered");
            if ($ok) {
                $response = '';
                echo '[';
                echo $values;
                echo ']';
            } else {
                $response = '[]';
            }
            break;


      case 'returndistinctjsoncollector':
         // test call: druid_handler.php?action=returndistinctjsoncollectors&term=*Gray*
         // use with dojo dojox.data.QueryReadDataStore and dijit.form.ComboBox to generate a pick list from the specify picklist table
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';
         @$limit= substr(preg_replace('/[^A-Za-z,\. &*%\[\]]/','',$_GET['name']),0,60);  // value to limit

         if (strlen($limit)>4) {
            $t = new huh_agentvariant_custom();
            try {
               $values = $t->keySelectDistinctJSONCollector($limit);
               $ok = true;
            } catch (Exception $e) {
               $ok = false;
            }
         }
         //header("Content-type application/json");
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo '{ "identifier":"value", "label":"name",';
           	echo '"items": [ ';
           	echo $values;
           	echo ' ] }';
         } else {
            $response = '{ }';
         }
         break;

         case 'returndistinctjsontitle':
         	$ok = false;
         	$table = '';
         	$key = '';
         	$field = '';
         	$value = '';
         	$uniqueid = '';
         	$controltype = '';
         	@$limit= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['name']),0,60);  // value to limit

         	if (strlen($limit)>4) {
         		$t = new huh_referencework_custom();
         		try {
         			$values = $t->keySelectDistinctJSONTitle($limit);
         			$ok = true;
         		} catch (Exception $e) {
         			$ok = false;
         		}
         	}
         	//header("Content-type application/json");
         	header("Content-type text/json-comment-filtered");
         	if ($ok) {
         		$response = '';
         		echo '{ "identifier":"value", "label":"name",';
         		echo '"items": [ ';
         		echo $values;
         		echo ' ] }';
         	} else {
         		$response = '{ }';
         	}
         	break;
         case 'returndistinctjsonexsiccati':
         	$ok = false;
         	$table = '';
         	$key = '';
         	$field = '';
         	$value = '';
         	$uniqueid = '';
         	$controltype = '';
         	@$limit= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['name']),0,60);  // value to limit

         	if (strlen($limit)>4) {
         		$t = new huh_referencework_custom();
         		try {
         			$values = $t->keySelectDistinctJSONText1($limit);
         			$ok = true;
         		} catch (Exception $e) {
         			$ok = false;
         		}
         	}
         	//header("Content-type application/json");
         	header("Content-type text/json-comment-filtered");
         	if ($ok) {
         		$response = '';
         		echo '{ "identifier":"value", "label":"name",';
         		echo '"items": [ ';
         		echo $values;
         		echo ' ] }';
         	} else {
         		$response = '{ }';
         	}
         	break;

         case 'returndistinctjsonstorage':
            $ok = false;
            $table = '';
            $key = '';
            $field = '';
            $value = '';
            $uniqueid = '';
            $controltype = '';
            @$limit= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['name']),0,60);  // value to limit

            if (strlen($limit)>4) {
                $t = new huh_storage_custom();
                try {
                    $values = $t->keySelectDistinctJSONName($limit);
                    $ok = true;
                } catch (Exception $e) {
                    $ok = false;
                }
            }
            //header("Content-type application/json");
            header("Content-type text/json-comment-filtered");
            if ($ok) {
                $response = '';
                echo '{ "identifier":"value", "label":"name",';
                echo '"items": [ ';
                echo $values;
                echo ' ] }';
            } else {
                $response = '{ }';
            }
            break;

        case 'returnparentgeographyjson':
           // test call: druid_handler.php?action=returncountryjson
           // use with dojo dojo.data.ItemFileDataStore and dijit.form.ComboBox to generate a pick list of countries
           $ok = false;
           @$childid= substr(preg_replace('/[^0-9]/','',$_GET['id']),0,60);  // value to limit
           @$parentrank= substr(preg_replace('/[^0-9]/','',$_GET['rank']),0,60);  // value to limit

           $t = new huh_geography_custom();
           try {
              $response = $t->selectDistinctParentGeographyJSON($childid, $parentrank);
              $ok = true;
           } catch (Exception $e) {
              $ok = false;
           }
           //header("Content-type application/json");
           header("Content-type text/json-comment-filtered");
           if (! $ok) {
              $response = '{ }';
           }

           echo $response;
           break;

      case 'returncountryjson':
         // test call: druid_handler.php?action=returncountryjson
         // use with dojo dojo.data.ItemFileDataStore and dijit.form.ComboBox to generate a pick list of countries
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';

         $t = new huh_geography_custom();
         try {
            $values = $t->selectDistinctJSONCountry();
            $ok = true;
         } catch (Exception $e) {
            $ok = false;
         }
         //header("Content-type application/json");
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo '{ "identifier":"value", "label":"name",';
            echo '"items": [ ';
            echo $values;
            echo ' ] }';
         } else {
            $response = '{ }';
         }
         break;

      case 'returnprimaryjson':
         // test call: druid_handler.php?action=returnprimaryjson
         // use with dojo dojo.data.ItemFileDataStore and dijit.form.ComboBox to generate a pick list of states/provinces
         $ok = false;
         $table = '';
         $key = '';
         $field = '';
         $value = '';
         $uniqueid = '';
         $controltype = '';

         $t = new huh_geography_custom();
         try {
            $values = $t->selectDistinctJSONPrimary();
            $ok = true;
         } catch (Exception $e) {
            $ok = false;
         }
         //header("Content-type application/json");
         header("Content-type text/json-comment-filtered");
         if ($ok) {
            $response = '';
            echo '{ "identifier":"value", "label":"name",';
            echo '"items": [ ';
            echo $values;
            echo ' ] }';
         } else {
            $response = '{ }';
         }
         break;

    		case 'returndistinctgeography':
    		   $ok = false;
    		   $table = '';
    		   $key = '';
    		   $field = '';
    		   $value = '';
    		   $uniqueid = '';
    		   $controltype = '';
    		   @$country= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['country']),0,240);  // value to limit
    		   @$primary= substr(preg_replace('/[^A-Za-z\. &*%]/','',$_GET['primary']),0,240);  // value to limit

    		   $t = new huh_geography_custom();
    		   try {
    		      $values = $t->limitedSelectDistinctJSONGeography($country, $primary);
    		      $ok = true;
    		   } catch (Exception $e) {
    		      $ok = false;
    		   }
    		   //header("Content-type application/json");
    		   header("Content-type text/json-comment-filtered");
    		   if ($ok) {
    		      $response = '';
    		      echo '{ "identifier":"value", "label":"name",';
    		      echo '"items": [ ';
    		      echo $values;
    		      echo ' ] }';
    		   } else {
    		      $response = '{ }';
    		   }
    		   break;

    		case 'returndistinctjsonidnamelimited':
    		   $ok = false;
    		   $table = '';
    		   $key = '';
    		   $field = '';
    		   $value = '';
    		   $uniqueid = '';
    		   $controltype = '';
    		   @$table = substr(preg_replace('/[^A-Za-z0-9_\.]/','',$_GET['table']),0,40); // name of the table to update
    		   @$field= substr(preg_replace('/[^A-Za-z0-9_]/','',$_GET['field']),0,40);  // field to find distinct values for in table
    		   @$limit= substr(preg_replace('/[^A-Za-z0-9\ _*]/','',$_GET['name']),0,40);  // value to limit

    		   if ($debug) {
    		      echo "[$table][$field][$limit]";
    		   }
    		   // check that custom table exists
    		   if ($table=='huh_taxon') {
    		      $t = new huh_taxon_CUSTOM();
    		      if ($t->hasField($field)) {
    		         try {
    		            $values = $t->keySelectDistinctJSONLimit($field,$limit);
    		            $ok = true;
    		         } catch (Exception $e) {
    		            $ok = false;
    		         }
    		      } else {
    		         if ($debug) {
    		            echo "[$field not found in $table]";
    		         }
    		      }
    		   } else {
    		      $schema = new database_schema();
    		      $error = '';
    		      if ($schema->hasTable($table)) {
    		         // we know table is an allowed target
    		         $t = $schema->getClass($table);
    		         if ($t->hasField($field)) {
    		            try {
    		               $values = $t->keySelectDistinctJSONLimit($field,$limit);
    		               $ok = true;
    		            } catch (Exception $e) {
    		               $ok = false;
    		            }
    		         } else {
    		            if ($debug) {
    		               echo "[$field not found in $table]";
    		            }
    		         }
    		      }
    		   }
    		   //header("Content-type application/json");
    		   header("Content-type text/json-comment-filtered");
    		   if ($ok) {
    		      $response = '';
    		      echo '{ "identifier":"value", "label":"name",';
    			   		echo '"items": [ ';
    			   		echo $values;
    			   		echo ' ] }';
    		   } else {
    			   		$response = '{ }';
    		   }
    		   break;

    		default:
    		   // no action
   } // End switch/case block

} else {
   echo 'Error: Unable to connect to database.';
}

function preMergeCheck($barcodes) {
   global $connection;
   $retval = new Result();
   $retval->html = "";
   $hitFailureCondition = FALSE;
   $retval->success = FALSE;

   $coPrepList = Array();
   $prepCount = 0;
   $coCount = 0;
   $allowedPrepsToMerge = Array();
   $allowedPrepsToMerge[]="Sheet";

   $sql = "select identifier, f.text1, f.remarks, prepmethod, f.timestampcreated, co.timestampcreated, co.catalogeddate, ce.stationfieldnumber, ce.collectingeventid, l.localityname, g.name, g.geographyid, f.preparationid, co.createdbyagentid, f.createdbyagentid, f.fragmentid from fragment f left join collectionobject co on f.collectionobjectid = co.collectionobjectid left join collectingevent ce on co.collectingeventid = ce.collectingeventid left join locality l on ce.localityid = l.localityid left join geography g on l.geographyid = g.geographyid where f.identifier = ? ";
   $stmt = $connection->prepare($sql);
   $sqlprep = "select preparation.timestampcreated, preparation.createdbyagentid, preptype.name, preparation.parentid from preparation left join preptype on preparation.preptypeid = preptype.preptypeid where preparationid = ? ";
   $stmtprep = $connection->prepare($sqlprep);
   $sqlcoll = " select name, etal  from collector left join agentvariant on collector.agentid = agentvariant.agentid where collectingeventid = ? and vartype = 4 order by isprimary, ordernumber";
   $stmtcoll = $connection->prepare($sqlcoll);
   $sqldet= "select fullname, typestatusname from determination left join taxon on determination.taxonid = taxon.taxonid where fragmentid = ? order by yesno3 desc, iscurrent desc limit 1 ";
   $stmtdet = $connection->prepare($sqldet);
   $sqlhg= "select trim(concat(ifnull(p5.name,''), ' ' ,ifnull(p4.name,''), ' ', ifnull(ppp.name,''),' ', ifnull(pp.name,''), ' ', ifnull(p.name,''), ' ', ifnull(g.name, ''))) hg from geography g left join geography p on g.parentid = p.geographyid left join geography pp on p.parentid = pp.geographyid left join geography ppp on pp.parentid = ppp.geographyid left join geography p4 on ppp.parentid = p4.geographyid left join geography p5 on p4.parentid = p5.geographyid where g.geographyid = ? ";
   $stmthg = $connection->prepare($sqlhg);
   $sqlimg = "select url_prefix, uri, barcodes from fragment f left join IMAGE_SET_collectionobject isco on f.collectionobjectid = isco.collectionobjectid left join IMAGE_OBJECT io on isco.imagesetid = io.image_set_id left join REPOSITORY r on io.repository_id = r.id  where identifier = ? and object_type_id = 2 limit 1 ";
   $stmtimg = $connection->prepare($sqlimg);
   if ($connection->error!="") {
      $result .=  '['.$connection->error.']';
   } else {
      $initialPrepType = "";
      $itemCount= 0;
      $prepCount= 0;
      $prepIds = Array();
      foreach ($barcodes as $barcode) {
         $stmt->bind_param("i",$barcode);
         $stmt->execute();
         $stmt->store_result();
         $stmt->bind_result($identifier, $acronym, $fragmentremarks, $prepmethod, $fragmentcreated, $cocreated, $catalogeddate, $fieldnumber, $collectingeventid, $localityname, $geographyname, $geographyid, $preparationid, $cocreatedbyagentid, $fcreatedbyagentid,$fragmentid);
         $itemCount += $stmt->num_rows;
         if ($stmt->num_rows==1) {
            $stmt->fetch();

            $stmtdet->bind_param("i",$fragmentid);
            $stmtdet->execute();
            $stmtdet->store_result();
            $stmtdet->bind_result($fullname,$typestatus);
            $stmtdet->fetch();

            $etal = "";
            $collector = "";
            $stmtcoll->bind_param("i",$collectingeventid);
            $stmtcoll->execute();
            $stmtcoll->store_result();
            $stmtcoll->bind_result($name, $et_al);
            while ($stmtcoll->fetch()) {
                $collector .= " " . $name;
                $etal .= " " .$et_al;
            }
            $collector .= $etal;
            $collector = trim($collector);

            $stmthg->bind_param("i",$geographyid);
            $stmthg->execute();
            $stmthg->store_result();
            $stmthg->bind_result($highergeography);
            $stmthg->fetch();

            $stmtimg->bind_param("i",$barcode);
            $stmtimg->execute();
            $stmtimg->store_result();
            $stmtimg->bind_result($url_prefix, $url, $barcodesfound);
            while ($stmtimg->fetch()) {
               $result .= "<div><img src='$url_prefix$url' width='100' />$barcodesfound</div>";
            }
            if (in_array($preparationid,$prepIds)) {
               $hitFailureCondition = TRUE;
               $retval->errors .= "Items share a preparation. ";
            } else {
                $prepIds[] = $preparationid;
            }
            $stmtprep->bind_param("i",$preparationid);
            $stmtprep->execute();
            $stmtprep->store_result();
            $stmtprep->bind_result($prepcreated,$prcreatedbyagentid,$preptype,$prepparent);
            if ($prepparent=="0") { $prepparent = ""; }
            $preps = "";
            // Rule, if preparation is child, don't merge.
            if ($stmtprep->num_rows!=1 || strlen($prepparent)>0 ) {
               $hitFailureCondition = TRUE;
               $retval->errors .= "Unable to merge when preparation is a child of another preparation. ";
            }
            $prepCount += $stmtprep->num_rows;
            while ($stmtprep->fetch()) {
               if ($initialPrepType=="") { $initialPrepType = $preptype; }
               $prepAgent = getAgentName($prcreatedbyagentid);
               // Rule, if preparation isn't the same type as , don't merge.
               if ($preptype != $initialPrepType ) {
                  $hitFailureCondition = TRUE;
                  $retval->errors .= "Unable to merge when preparations aren't all the same type  ";
               }
               if (array_key_exists($preptype,$allowedPrepsToMerge)) {
                  $hitFailureCondition = TRUE;
                  $retval->errors .= "Only sheets can be merged. ";
               }
               $preps .= "<strong>$preptype</strong>: $prepAgent,$prepcreated id=[$preparationid]<br>";
            }
            $coAgent = getAgentName($cocreatedbyagentid);
            $fAgent = getAgentName($fcreatedbyagentid);
            $result .= "<strong>$acronym $identifier</strong><br/>$highergeography $geographyname $localityname <br/>$fullname $typestatus<br/>$collector $fieldnumber  $fragmentremarks<br/> $prepmethod cataloged:$catalogeddate <br/>Data Entry: coll.obj.:$coAgent,$cocreated; item:$fAgent,$fragmentcreated<br>$preps<hr>";
         } else {
            $hitFailureCondition = TRUE;
            $retval->errors .= "Barcode $barcode not found. ";
         }
      }
      // if got an equal number of items and preps, set success to true
      if ($itemCount>0 && $itemCount==$prepCount) { $retval->success=TRUE; }
   }
   $stmt->close();
   $stmtprep->close();
   // but if we hit any failure condition, set success to false.
   if ($hitFailureCondition===TRUE) { $retval->success=FALSE; }
   $retval->html = $result;
   return $retval;
}

function getAgentName($agentid) {
   $result = "[No Agent]";
   if (strlen($agentid)>0) {
      $agent = new HUH_AGENT();
      $agent->load($agentid);
      $result = $agent->getFirstName() . " " . $agent->getLastName();
   }
   return $result;
}

function merge($barcodes) {
   global $connection;
   $retval = new Result();
   $retval->html = "";
   $retval->success = FALSE;
   $hitFailureCondition = FALSE;

   if (count($barcodes) < 2) {
      $retval->errors = "Provided less than two barcodes";
   } else {

      $sql = " select preparationid from fragment where identifier = ? ";
      $stmt = $connection->prepare($sql);
      $stmt->bind_param("i",$barcodes[0]);
      $stmt->execute();
      $stmt->store_result();
      $stmt->bind_result($targetPreparationId);
      $stmt->fetch();
      $targetCount = $stmt->num_rows;
      $stmt->close();
      if ($targetCount!=1) {
         $retval->errors .= "Barcode " .$barcodes[0]. " not found.";
      } else {
         // begin transaction
         $connection->autocommit(false);
         // $connection->begin_transaction();
         $sql = " ";
         $stmt = $connection->prepare($sql);
         // loop through barcodes, skipping first (it is the target).
         for($i=1; $i<count($barcodes); $i++) {
            $sql = "select fragmentid, preparationid from fragment where identifier = ? ";

            $stmt = $connection->prepare($sql);
            $stmt->bind_param("i",$barcodes[$i]);
            $stmt->execute();
            $stmt->store_result();
            $stmt->bind_result($moveFragmentId,$movePreparationId);
            $stmt->fetch();
            $moveCount = $stmt->num_rows;
            $stmt->close();
            if ($moveCount!=1) {
               $hitFailureCondition = TRUE;
               $retval->errors .= "Barcode " .$barcodes[$i]. " found other than 1 fragment.  ";
            } else {
               $sql = "update fragment set preparationid = ? where fragmentid = ? ";
               $stmt = $connection->prepare($sql);
               $stmt->bind_param("ii",$targetPreparationId,$moveFragmentId);
               if (!$stmt->execute()) {
                  $hitFailureCondition = TRUE;
                  $retval->errors .= "Barcode " . $stmt->error . "  ";
               }
               $stmt->close();

               $sql = "select count(*) from fragment where preparationid = ? ";
               $stmt = $connection->prepare($sql);
               $stmt->bind_param("i",$movePreparationId);
               $stmt->execute();
               $stmt->bind_result($moveCount);
               $stmt->store_result();
               $stmt->fetch();
               $moveCount = $stmt->num_rows;
               $stmt->close();
               if ($moveCount!=1) {
                  $hitFailureCondition = TRUE;
                  $retval->errors .= "Barcode " .$barcodes[$i]. " is attached to a preparation with multiple Items. ";
               } else {
                   $usql = Array();
                   $usql[] = "update loanpreparation set preparationid = ? where preparationid = ? ";
                   $usql[] = "update accessionpreparation set preparationid = ? where preparationid = ? ";
                   $usql[] = "update conservdescription set preparationid = ? where preparationid = ? ";
                   $usql[] = "update deaccessionpreparation set preparationid = ? where preparationid = ?  ";
                   $usql[] = "update exchangeoutpreparation set preparationid = ? where preparationid = ?  ";
                   $usql[] = "update giftpreparation set preparationid = ? where preparationid = ?  ";
                   $usql[] = "update preparationattachment set preparationid = ? where preparationid = ?  ";
                   $usql[] = "update preparationattr set preparationid = ? where preparationid = ?  ";
                   $usql[] = "update treatmentevent set preparationid = ? where preparationid = ? ";
                   foreach($usql as $sql) {
                       $updateResult = movePreparation($targetPreparationId,$movePreparationId,$sql);
                       if ($updateResult->success!==TRUE) {
                          $hitFailureCondition = TRUE;
                          $retval->errors .= "Update Failed. ". $updateResult->errors;
                       }
                   }
                    $sql = "delete from preparation where preparationid = ? ";

               }

            }
         }

         if ($hitFailureCondition===FALSE) {
            // success, commit
            if ($connection->commit()) {
               $retval->success = TRUE;
            } else {
               $retval->errors .= "Commit failed. ". $connection->error ;
            }
         } else {
            // failure, rollback
            $connection->rollback();
         }
      }
   }
   return $retval;
}

/**
 * Given a sql statement in the form
 * update loanpreparation set preparationid = ? where preparationid = ?
 * and two preparationIds, execute the query.
 * @param targetPreparationId the preparation to move to.
 * @param movePreparationId the preparation that is being moved from (and
 * which is expected to be deleted by the code that calls this function).
 * @param the sql statement to be executed
 *
 * @return a Result object with Result->success indicating successful
 * execution of the sql statement or not, and Result->errors containing
 * any error messages.
 */
function movePreparation($targetPreparationId,$movePreparationId,$sql) {
   global $connection;
   $result = new Result();
   $result->success=FALSE;
   $regex="/^update [a-zA-Z]+ set preparationid = \? where preparationid = \? */";
   if (preg_match($regex,$sql)) {
      if ($stmt = $connection->prepare($sql)) {
         $stmt->bind_param("ii",$targetPreparationId,$movePreparationId);
         if ($stmt->execute()) {
            $result->success=TRUE;
         } else {
            $result->errors .= $stmt->error . " ";
         }
      } else {
        $result->errors .= $connection->error . " ";
      }
   } else {
     $result->errors .= " sql statement not in expected form. ";
   }
   return $result;
}

function showStructure($barcode) {
   global $connection;
   $result = new Result();
   $result->success=FALSE;




   $sql = "select f.text1, f.prepmethod, f.fragmentid, f.createdbyagentid, f.timestampcreated, f.preparationid, f.collectionobjectid, co.createdbyagentid, co.timestampcreated, co.text1 as habitat, co.catalogeddate, p.createdbyagentid, p.timestampcreated, preptype.name, ce.collectingeventid, ce.createdbyagentid, ce.timestampcreated, l.localityid, l.createdbyagentid, l.timestampcreated, g.geographyid, ce.stationfieldnumber, l.localityname, g.name, p.remarks, f.remarks, co.remarks from fragment f left join collectionobject co on f.collectionobjectid = co.collectionobjectid left join preparation p on f.preparationid = p.preparationid left join preptype on p.preptypeid = preptype.preptypeid left join collectingevent ce on co.collectingeventid = ce.collectingeventid left join locality l on ce.localityid = l.localityid left join geography g on l.geographyid = g.geographyid where f.identifier = ? ";
   $stmt0 = $connection->prepare($sql);
   $stmt0->bind_param("i",$barcode);
   $stmt0->execute();
   $stmt0->bind_result($acronym,$prepmethod,$fragmentid,$fcreatedby,$fcreated,$preparationid,$collectionobjectid,$cocreatedby, $cocreated, $habitat, $datecataloged, $pcreatedby, $pcreated, $preptype,$collectingeventid,$cecreatedby,$cecreated,$localityid,$lcreatedby,$lcreated,$geographyid,$collectornumber,$localityname,$geography,$premarks,$fremarks,$coremarks);
   $stmt0->store_result();
   $barcodecount = 0;
   while ($stmt0->fetch()) {
      $barcodecount++;
      if (strlen(trim($habitat))>0) { $habitat = "$habitat<br/>"; }
      $loans = "";
      $sql = "select isresolved, loannumber,isclosed from loanpreparation lp left join loan lo on lp.loanid = lo.loanid left join loanreturnpreparation lrp on lp.loanpreparationid = lrp.loanpreparationid where lp.preparationid = ? ";
      $stmt = $connection->prepare($sql);
      $stmt->bind_param("i",$preparationid);
      $stmt->execute();
      $stmt->bind_result($isresolved,$loannumber,$isclosed);
      $stmt->store_result();
      $loancount = $stmt->num_rows;
      while ($stmt->fetch()) {
         $loans .= "$loannumber</br>";
      }
      $stmt->close();

      $coitems = "";
      $sql = "select text1, identifier from fragment where collectionobjectid = ? and fragmentid <> ? ";
      $stmt = $connection->prepare($sql);
      $stmt->bind_param("ii",$collectionobjectid,$fragmentid);
      $stmt->execute();
      $stmt->bind_result($coac, $cobarcode);
      $stmt->store_result();
      $cofcount = $stmt->num_rows;
      while ($stmt->fetch()) {
         $coitems .= "<a href='utility.php?barcode=$cobarcode'>$coac-$cobarcode</a></br>";
      }
      $stmt->close();

      $pitems = "";
      $sql = "select text1, identifier from fragment where preparationid = ? and fragmentid <> ? ";
      $stmt = $connection->prepare($sql);
      $stmt->bind_param("ii",$preparationid,$fragmentid);
      $stmt->execute();
      $stmt->bind_result($pac,$pbarcode);
      $stmt->store_result();
      $pfcount = $stmt->num_rows;
      while ($stmt->fetch()) {
         $pitems .= "<a href='utility.php?barcode=$pbarcode'>$pac-$pbarcode</a></br>";
      }
      $stmt->close();

      $sql= "select trim(concat(ifnull(p5.name,''), ': ' ,ifnull(p4.name,''), ': ', ifnull(ppp.name,''),': ', ifnull(pp.name,''), ': ', ifnull(p.name,''), ': ', ifnull(g.name, ''))) hg from geography g left join geography p on g.parentid = p.geographyid left join geography pp on p.parentid = pp.geographyid left join geography ppp on pp.parentid = ppp.geographyid left join geography p4 on ppp.parentid = p4.geographyid left join geography p5 on p4.parentid = p5.geographyid where g.geographyid = ? ";
      $stmt = $connection->prepare($sql);
      $stmt->bind_param("i",$geographyid);
      $stmt->execute();
      $stmt->bind_result($highergeography);
      $stmt->store_result();
      $stmt->fetch();
      $stmt->close();
      $highergeography = preg_replace("/^[: ]*/","",$highergeography);


      $ceitems = "";
      $sql = "select f.text1, identifier from collectionobject co left join fragment f on co.collectionobjectid = f.collectionobjectid where collectingeventid = ? and fragmentid <> ? ";
      $stmt = $connection->prepare($sql);
      $stmt->bind_param("ii",$collectingeventid,$fragmentid);
      $stmt->execute();
      $stmt->bind_result($ceac,$cebarcode);
      $stmt->store_result();
      $cefcount = $stmt->num_rows;
      while ($stmt->fetch()) {
         $ceitems .= "<a href='utility.php?barcode=$cebarcode'>$ceac-$cebarcode</a></br>";
      }
      $stmt->close();

      $litems = "";
      $sql = "select f.text1, identifier from collectingevent ce left join  collectionobject co on ce.collectingeventid = co.collectingeventid left join fragment f on co.collectionobjectid = f.collectionobjectid where localityid = ? and fragmentid <> ? ";
      $stmt = $connection->prepare($sql);
      $stmt->bind_param("ii",$localityid,$fragmentid);
      $stmt->execute();
      $stmt->bind_result($lac,$lbarcode);
      $stmt->store_result();
      $lfcount = $stmt->num_rows;
      while ($stmt->fetch()) {
         $litems .= "<a href='utility.php?barcode=$lbarcode'>$lac-$lbarcode</a></br>";
      }
      $stmt->close();

      $collector = "";
      $sql = " select name, etal  from collector left join agentvariant on collector.agentid = agentvariant.agentid where collectingeventid = ? and vartype = 4 order by isprimary, ordernumber";
      $stmt = $connection->prepare($sql);
      $stmt->bind_param("i",$collectingeventid);
      $stmt->execute();
      $stmt->bind_result($collname,$etal);
      $stmt->store_result();
      while ($stmt->fetch()) {
         $colls .= " " . $collname;
         $et_al .= " " . $etal;
      }
      $stmt->close();
      $collector = trim($colls . $et_al);

      $determinations = "";
      $sql = "select fullname, author, typestatusname from determination left join taxon on determination.taxonid = taxon.taxonid where fragmentid = ? order by yesno3 desc, iscurrent desc ";
      $stmt = $connection->prepare($sql);
      $stmt->bind_param("i",$fragmentid);
      $stmt->execute();
      $stmt->bind_result($fullname,$author,$typestatus);
      $stmt->store_result();
      while ($stmt->fetch()) {
         $determinations .= "<em>$fullname</em> $author $typestatus</br>";
      }
      $stmt->close();


      if ($barcodecount>1) {
      $html .= "<strong style='color: Red;'>Warning: $barcode is not unique.</strong><br/>";
      } else {
      $html .= "Relationships of <strong>$acronym-$barcode</strong>:<br/>";
      }

      $html .= "<table border=1>";
      $html .= "<tr>";

      $html .= "<th style='text-align: center; font-weight: bold;'>Geography</th>";
      $html .= "<th style='text-align: center; font-weight: bold;'>Locality</th>";
      $html .= "<th style='text-align: center; font-weight: bold;'>Collecting Event</th>";
      $html .= "<th style='text-align: center; font-weight: bold;'>Collection Object</th>";
      $html .= "<th style='text-align: center; font-weight: bold;'>Item</th>";
      $html .= "<th style='text-align: center; font-weight: bold;'>Preparation</th>";
      $html .= "<th style='text-align: center; font-weight: bold;'>Loan</th>";

      $html .= "</tr><tr>";

      $html .= "<td style='vertical-align:text-top; text-align: center;'>$geography [$geographyid]</td>";
      $html .= "<td style='vertical-align:text-top; text-align: center;'>$localityname [$localityid]<br/>".getAgentName($lcreatedby)." $lcreated</td>";
      $html .= "<td style='vertical-align:text-top; text-align: center;'>$collector $collectornumber [$collectingeventid]<br/>".getAgentName($cecreatedby)." $cecreated</td>";
      $html .= "<td style='vertical-align:text-top; text-align: center;'>Cataloged: $datecataloged<br/>$habitat [$collectionobjectid]<br/>".getAgentName($cocreatedby)." $cocreated<br/>$coremarks</td>";
      $html .= "<td style='vertical-align:text-top; text-align: center;'><strong>$acronym-$barcode</strong> [$fragmentid]<br/>".getAgentName($fcreatedby)." $fcreated<br/>$fremarks</td>";
      $html .= "<td style='vertical-align:text-top; text-align: center;'>$preptype [$preparationid]<br/>".getAgentName($pcreatedby)." $pcreated<br/>$premarks</td>";
      $html .= "<td style='vertical-align:text-top; text-align: center;'>In $loancount loan".plural($loancount).".<br/>$loans</td>";

      $html .= "</tr><tr>";

      $html .= "<td style='vertical-align:text-top; text-align: center;'>$highergeography</td>";
      $html .= "<td style='vertical-align:text-top; text-align: center;'>$lfcount other Item".plural($lfcount)." from this locality.<br/>$litems</td>";
      $html .= "<td style='vertical-align:text-top; text-align: center;'>Collected with $cefcount other Item".plural($cefcount)."<br/>$ceitems</td>";
      $html .= "<td style='vertical-align:text-top; text-align: center;'>Collection includes $cofcount other Item".plural($cofcount)."<br/>$coitems</td>";
      $html .= "<td style='vertical-align:text-top; text-align: center;'>$determinations</td>";
      $html .= "<td style='vertical-align:text-top; text-align: center;'>Shares preparation with $pfcount other Item".plural($pfcount)."<br/>$pitems</td>";
      $html .= "<td style='vertical-align:text-top; text-align: center;'></td>";

      $html .= "</tr>";
      $html .= "</table>";

      $html .= "Numbers in square brackets are internal database identifiers.  Created by and date created shown for locality, collecting event, collection object, item, and preparation records.  Date created of 2010-08-16 was date of migration from ASA to Specify-HUH.<br/>";

      $result->success = TRUE;
      $result->html = $html;
   }
   $count = $stmt0->num_rows;
   $stmt0->close();

   if ($count==0) {
     $result->errors .= "Barcode $barcode not found.";
   }

   return $result;
}

function plural($count) {
  $result = "s";
  if ($count==1) { $result = ""; }
  return $result;
}

mysqli_report(MYSQLI_REPORT_OFF);

?>
