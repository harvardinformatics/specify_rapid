<?php
//==============================================================================
//===   paleocontext.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_paleocontext implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const PALEOCONTEXTID_SIZE  = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const COLLECTIONMEMBERID_SIZE = 11; //INTEGER
   const BOTTOMDISTANCE_SIZE  = 20; //REAL
   const DIRECTION_SIZE       = 32; //32
   const DISTANCEUNITS_SIZE   = 16; //16
   const POSITIONSTATE_SIZE   = 32; //32
   const TEXT1_SIZE           = 32; //32
   const TEXT2_SIZE           = 32; //32
   const TOPDISTANCE_SIZE     = 20; //REAL
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const LITHOSTRATID_SIZE    = 11; //INTEGER
   const CHRONOSSTRATID_SIZE  = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const BIOSTRATID_SIZE      = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const PALEOCONTEXTID    = 'PaleoContextID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const COLLECTIONMEMBERID = 'CollectionMemberID';
   const BOTTOMDISTANCE    = 'BottomDistance';
   const DIRECTION         = 'Direction';
   const DISTANCEUNITS     = 'DistanceUnits';
   const POSITIONSTATE     = 'PositionState';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const TOPDISTANCE       = 'TopDistance';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const LITHOSTRATID      = 'LithoStratID';
   const CHRONOSSTRATID    = 'ChronosStratID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const BIOSTRATID        = 'BioStratID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $PaleoContextID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PaleoContextID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $CollectionMemberID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionMemberID']), 0, 11);
  $BottomDistance = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['BottomDistance']), 0, 20);
  $Direction = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Direction']), 0, 32);
  $DistanceUnits = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DistanceUnits']), 0, 16);
  $PositionState = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PositionState']), 0, 32);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 32);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 32);
  $TopDistance = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TopDistance']), 0, 20);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $LithoStratID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['LithoStratID']), 0, 11);
  $ChronosStratID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ChronosStratID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $BioStratID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['BioStratID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $PaleoContextID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $CollectionMemberID; // INTEGER 
   private $BottomDistance; // REAL 
   private $Direction; // VARCHAR(32) 
   private $DistanceUnits; // VARCHAR(16) 
   private $PositionState; // VARCHAR(32) 
   private $Text1; // VARCHAR(32) 
   private $Text2; // VARCHAR(32) 
   private $TopDistance; // REAL 
   private $YesNo1; // BIT(1) 
   private $YesNo2; // BIT(1) 
   private $CreatedByAgentID; // INTEGER 
   private $LithoStratID; // INTEGER 
   private $ChronosStratID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $BioStratID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' PaleoContextID, TimestampCreated, TimestampModified, Version, CollectionMemberID, BottomDistance, Direction, DistanceUnits, PositionState, Text1, Text2, TopDistance, YesNo1, YesNo2, CreatedByAgentID, LithoStratID, ChronosStratID, ModifiedByAgentID, BioStratID, ';
   const PKFIELDLIST = ' PaleoContextID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'PaleoContextID'  ) ;
   private $allFieldsArray = array( 0 => 'PaleoContextID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'CollectionMemberID' , 5 => 'BottomDistance' , 6 => 'Direction' , 7 => 'DistanceUnits' , 8 => 'PositionState' , 9 => 'Text1' , 10 => 'Text2' , 11 => 'TopDistance' , 12 => 'YesNo1' , 13 => 'YesNo2' , 14 => 'CreatedByAgentID' , 15 => 'LithoStratID' , 16 => 'ChronosStratID' , 17 => 'ModifiedByAgentID' , 18 => 'BioStratID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'CollectionMemberID' , 14 => 'CreatedByAgentID' , 15 => 'LithoStratID' , 16 => 'ChronosStratID' , 17 => 'ModifiedByAgentID' , 18 => 'BioStratID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_paleocontext(){
       $this->PaleoContextID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->CollectionMemberID = '';
       $this->BottomDistance = '';
       $this->Direction = '';
       $this->DistanceUnits = '';
       $this->PositionState = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->TopDistance = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->CreatedByAgentID = '';
       $this->LithoStratID = '';
       $this->ChronosStratID = '';
       $this->ModifiedByAgentID = '';
       $this->BioStratID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='PaleoContextID') { $returnvalue = $this->setPaleoContextID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->setCollectionMemberID($value); } 
             if ($fieldname=='BottomDistance') { $returnvalue = $this->setBottomDistance($value); } 
             if ($fieldname=='Direction') { $returnvalue = $this->setDirection($value); } 
             if ($fieldname=='DistanceUnits') { $returnvalue = $this->setDistanceUnits($value); } 
             if ($fieldname=='PositionState') { $returnvalue = $this->setPositionState($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='TopDistance') { $returnvalue = $this->setTopDistance($value); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='LithoStratID') { $returnvalue = $this->setLithoStratID($value); } 
             if ($fieldname=='ChronosStratID') { $returnvalue = $this->setChronosStratID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='BioStratID') { $returnvalue = $this->setBioStratID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='PaleoContextID') { $returnvalue = $this->getPaleoContextID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->getCollectionMemberID(); } 
             if ($fieldname=='BottomDistance') { $returnvalue = $this->getBottomDistance(); } 
             if ($fieldname=='Direction') { $returnvalue = $this->getDirection(); } 
             if ($fieldname=='DistanceUnits') { $returnvalue = $this->getDistanceUnits(); } 
             if ($fieldname=='PositionState') { $returnvalue = $this->getPositionState(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='TopDistance') { $returnvalue = $this->getTopDistance(); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='LithoStratID') { $returnvalue = $this->getLithoStratID(); } 
             if ($fieldname=='ChronosStratID') { $returnvalue = $this->getChronosStratID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='BioStratID') { $returnvalue = $this->getBioStratID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*PaleoContextID*/
   public function getPaleoContextID() {
       if ($this->PaleoContextID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PaleoContextID));
       }
   }
   public function setPaleoContextID($PaleoContextID) {
       if (strlen(preg_replace('/[^0-9]/','',$PaleoContextID)) > huh_paleocontext::PALEOCONTEXTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PaleoContextID = trim($PaleoContextID);
       if (!ctype_digit(strval($PaleoContextID)) && trim(strval($PaleoContextID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PaleoContextID = $this->l_addslashes($PaleoContextID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_paleocontext::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_paleocontext::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_paleocontext::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*CollectionMemberID*/
   public function getCollectionMemberID() {
       if ($this->CollectionMemberID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionMemberID));
       }
   }
   public function setCollectionMemberID($CollectionMemberID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionMemberID)) > huh_paleocontext::COLLECTIONMEMBERID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectionMemberID = trim($CollectionMemberID);
       if (!ctype_digit(strval($CollectionMemberID))) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionMemberID = $this->l_addslashes($CollectionMemberID);
       $this->dirty = true;
   }
/*BottomDistance*/
   public function getBottomDistance() {
       if ($this->BottomDistance==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->BottomDistance));
       }
   }
   public function setBottomDistance($BottomDistance) {
       if (strlen($BottomDistance) > huh_paleocontext::BOTTOMDISTANCE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->BottomDistance = $this->l_addslashes($BottomDistance);
       $this->dirty = true;
   }
/*Direction*/
   public function getDirection() {
       if ($this->Direction==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Direction));
       }
   }
   public function setDirection($Direction) {
       if (strlen($Direction) > huh_paleocontext::DIRECTION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Direction = $this->l_addslashes($Direction);
       $this->dirty = true;
   }
/*DistanceUnits*/
   public function getDistanceUnits() {
       if ($this->DistanceUnits==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DistanceUnits));
       }
   }
   public function setDistanceUnits($DistanceUnits) {
       if (strlen($DistanceUnits) > huh_paleocontext::DISTANCEUNITS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DistanceUnits = $this->l_addslashes($DistanceUnits);
       $this->dirty = true;
   }
/*PositionState*/
   public function getPositionState() {
       if ($this->PositionState==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PositionState));
       }
   }
   public function setPositionState($PositionState) {
       if (strlen($PositionState) > huh_paleocontext::POSITIONSTATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PositionState = $this->l_addslashes($PositionState);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_paleocontext::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_paleocontext::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*TopDistance*/
   public function getTopDistance() {
       if ($this->TopDistance==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TopDistance));
       }
   }
   public function setTopDistance($TopDistance) {
       if (strlen($TopDistance) > huh_paleocontext::TOPDISTANCE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TopDistance = $this->l_addslashes($TopDistance);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_paleocontext::YESNO1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_paleocontext::YESNO2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_paleocontext::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*LithoStratID*/
   public function getLithoStratID() {
       if ($this->LithoStratID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LithoStratID));
       }
   }
   public function setLithoStratID($LithoStratID) {
       if (strlen(preg_replace('/[^0-9]/','',$LithoStratID)) > huh_paleocontext::LITHOSTRATID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $LithoStratID = trim($LithoStratID);
       if (!ctype_digit(strval($LithoStratID)) && trim(strval($LithoStratID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->LithoStratID = $this->l_addslashes($LithoStratID);
       $this->dirty = true;
   }
/*ChronosStratID*/
   public function getChronosStratID() {
       if ($this->ChronosStratID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ChronosStratID));
       }
   }
   public function setChronosStratID($ChronosStratID) {
       if (strlen(preg_replace('/[^0-9]/','',$ChronosStratID)) > huh_paleocontext::CHRONOSSTRATID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ChronosStratID = trim($ChronosStratID);
       if (!ctype_digit(strval($ChronosStratID)) && trim(strval($ChronosStratID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ChronosStratID = $this->l_addslashes($ChronosStratID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_paleocontext::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*BioStratID*/
   public function getBioStratID() {
       if ($this->BioStratID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->BioStratID));
       }
   }
   public function setBioStratID($BioStratID) {
       if (strlen(preg_replace('/[^0-9]/','',$BioStratID)) > huh_paleocontext::BIOSTRATID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $BioStratID = trim($BioStratID);
       if (!ctype_digit(strval($BioStratID)) && trim(strval($BioStratID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->BioStratID = $this->l_addslashes($BioStratID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getPaleoContextID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['PaleoContextID'] = $this->getPaleoContextID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_PaleoContextIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_CollectionMemberIDMYSQLI_TYPE = 'i';
  const C_BottomDistanceMYSQLI_TYPE = 's';
  const C_DirectionMYSQLI_TYPE = 's';
  const C_DistanceUnitsMYSQLI_TYPE = 's';
  const C_PositionStateMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_TopDistanceMYSQLI_TYPE = 's';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_LithoStratIDMYSQLI_TYPE = 'i';
  const C_ChronosStratIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_BioStratIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='PaleoContextID') { $retval = self::C_PaleoContextIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='CollectionMemberID') { $retval = self::C_CollectionMemberIDMYSQLI_TYPE; }
      if ($aFieldname=='BottomDistance') { $retval = self::C_BottomDistanceMYSQLI_TYPE; }
      if ($aFieldname=='Direction') { $retval = self::C_DirectionMYSQLI_TYPE; }
      if ($aFieldname=='DistanceUnits') { $retval = self::C_DistanceUnitsMYSQLI_TYPE; }
      if ($aFieldname=='PositionState') { $retval = self::C_PositionStateMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='TopDistance') { $retval = self::C_TopDistanceMYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='LithoStratID') { $retval = self::C_LithoStratIDMYSQLI_TYPE; }
      if ($aFieldname=='ChronosStratID') { $retval = self::C_ChronosStratIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='BioStratID') { $retval = self::C_BioStratIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setPaleoContextID($pk[PaleoContextID]);
             } else { ;
                 $this->setPaleoContextID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->PaleoContextID != NULL) {
           $sql = 'SELECT PaleoContextID, TimestampCreated, TimestampModified, Version, CollectionMemberID, BottomDistance, Direction, DistanceUnits, PositionState, Text1, Text2, TopDistance, YesNo1, YesNo2, CreatedByAgentID, LithoStratID, ChronosStratID, ModifiedByAgentID, BioStratID FROM paleocontext WHERE PaleoContextID = '.$this->PaleoContextID ;

           $preparesql = 'SELECT PaleoContextID, TimestampCreated, TimestampModified, Version, CollectionMemberID, BottomDistance, Direction, DistanceUnits, PositionState, Text1, Text2, TopDistance, YesNo1, YesNo2, CreatedByAgentID, LithoStratID, ChronosStratID, ModifiedByAgentID, BioStratID FROM paleocontext WHERE PaleoContextID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->PaleoContextID);
              $statement->execute();
              $statement->bind_result($this->PaleoContextID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->BottomDistance, $this->Direction, $this->DistanceUnits, $this->PositionState, $this->Text1, $this->Text2, $this->TopDistance, $this->YesNo1, $this->YesNo2, $this->CreatedByAgentID, $this->LithoStratID, $this->ChronosStratID, $this->ModifiedByAgentID, $this->BioStratID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->PaleoContextID!= NULL) {
            $sql  = 'UPDATE  paleocontext SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", CollectionMemberID = ? ";
            $sql .=  ", BottomDistance = ? ";
            $sql .=  ", Direction = ? ";
            $sql .=  ", DistanceUnits = ? ";
            $sql .=  ", PositionState = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", TopDistance = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", LithoStratID = ? ";
            $sql .=  ", ChronosStratID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", BioStratID = ? ";

            $sql .= "  WHERE PaleoContextID = ? ";
        } else {
            $sql  = 'INSERT INTO paleocontext ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( PaleoContextID ,  TimestampCreated ,  TimestampModified ,  Version ,  CollectionMemberID ,  BottomDistance ,  Direction ,  DistanceUnits ,  PositionState ,  Text1 ,  Text2 ,  TopDistance ,  YesNo1 ,  YesNo2 ,  CreatedByAgentID ,  LithoStratID ,  ChronosStratID ,  ModifiedByAgentID ,  BioStratID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->PaleoContextID!= NULL ) {
              $statement->bind_param("issiisssssssiiiiiiii", $this->PaleoContextID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->BottomDistance , $this->Direction , $this->DistanceUnits , $this->PositionState , $this->Text1 , $this->Text2 , $this->TopDistance , $this->YesNo1 , $this->YesNo2 , $this->CreatedByAgentID , $this->LithoStratID , $this->ChronosStratID , $this->ModifiedByAgentID , $this->BioStratID , $this->PaleoContextID );
           } else { 
              $statement->bind_param("issiisssssssiiiiiii", $this->PaleoContextID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->BottomDistance , $this->Direction , $this->DistanceUnits , $this->PositionState , $this->Text1 , $this->Text2 , $this->TopDistance , $this->YesNo1 , $this->YesNo2 , $this->CreatedByAgentID , $this->LithoStratID , $this->ChronosStratID , $this->ModifiedByAgentID , $this->BioStratID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->PaleoContextID != NULL) {
           $sql = 'SELECT PaleoContextID, TimestampCreated, TimestampModified, Version, CollectionMemberID, BottomDistance, Direction, DistanceUnits, PositionState, Text1, Text2, TopDistance, YesNo1, YesNo2, CreatedByAgentID, LithoStratID, ChronosStratID, ModifiedByAgentID, BioStratID FROM paleocontext WHERE PaleoContextID = "'.$this->PaleoContextID.'"  ' ;

           $preparedsql = 'SELECT  FROM paleocontext WHERE  and PaleoContextID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issiisssssssiiiiiii", $this->PaleoContextID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->BottomDistance, $this->Direction, $this->DistanceUnits, $this->PositionState, $this->Text1, $this->Text2, $this->TopDistance, $this->YesNo1, $this->YesNo2, $this->CreatedByAgentID, $this->LithoStratID, $this->ChronosStratID, $this->ModifiedByAgentID, $this->BioStratID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM paleocontext WHERE  and PaleoContextID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issiisssssssiiiiiii", $this->PaleoContextID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->BottomDistance, $this->Direction, $this->DistanceUnits, $this->PositionState, $this->Text1, $this->Text2, $this->TopDistance, $this->YesNo1, $this->YesNo2, $this->CreatedByAgentID, $this->LithoStratID, $this->ChronosStratID, $this->ModifiedByAgentID, $this->BioStratID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->PaleoContextID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM paleocontext';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT PaleoContextID FROM paleocontext $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_paleocontext();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromcollectionobject() { 
      // ForeignKey in: collectionobject
      $t = new collectionobject();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: LithoStratID
      $t = new lithostrat();
      $t->load(getLithoStratID());
      $returnvalue[LithoStratID] = $t;
       // fk: ChronosStratID
      $t = new geologictimeperiod();
      $t->load(getChronosStratID());
      $returnvalue[ChronosStratID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: BioStratID
      $t = new geologictimeperiod();
      $t->load(getBioStratID());
      $returnvalue[BioStratID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT PaleoContextID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(CollectionMemberID,'') || ' ' || IFNULL(BottomDistance,'') || ' ' || IFNULL(Direction,'') || ' ' || IFNULL(DistanceUnits,'') || ' ' || IFNULL(PositionState,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(TopDistance,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(LithoStratID,'') || ' ' || IFNULL(ChronosStratID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(BioStratID,'')) FROM paleocontext order by CollectionMemberID, CreatedByAgentID, LithoStratID, ChronosStratID, ModifiedByAgentID, BioStratID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM paleocontext order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCollectionMemberID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PaleoContextID FROM paleocontext WHERE CollectionMemberID $operator '$searchTerm'";
        $preparedsql = "SELECT PaleoContextID FROM paleocontext WHERE CollectionMemberID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_paleocontext();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PaleoContextID FROM paleocontext WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT PaleoContextID FROM paleocontext WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_paleocontext();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByLithoStratID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PaleoContextID FROM paleocontext WHERE LithoStratID $operator '$searchTerm'";
        $preparedsql = "SELECT PaleoContextID FROM paleocontext WHERE LithoStratID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_paleocontext();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByChronosStratID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PaleoContextID FROM paleocontext WHERE ChronosStratID $operator '$searchTerm'";
        $preparedsql = "SELECT PaleoContextID FROM paleocontext WHERE ChronosStratID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_paleocontext();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PaleoContextID FROM paleocontext WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT PaleoContextID FROM paleocontext WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_paleocontext();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByBioStratID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PaleoContextID FROM paleocontext WHERE BioStratID $operator '$searchTerm'";
        $preparedsql = "SELECT PaleoContextID FROM paleocontext WHERE BioStratID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_paleocontext();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCollectionMemberID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionMemberID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectionMemberID FROM paleocontext group by CollectionMemberID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectionMemberID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM paleocontext group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctLithoStratID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' LithoStratID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, LithoStratID FROM paleocontext group by LithoStratID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&LithoStratID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctChronosStratID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ChronosStratID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ChronosStratID FROM paleocontext group by ChronosStratID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ChronosStratID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM paleocontext group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctBioStratID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' BioStratID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, BioStratID FROM paleocontext group by BioStratID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&BioStratID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'CollectionMemberID':
             $returnvalue = $this->selectDistinctCollectionMemberID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'LithoStratID':
             $returnvalue = $this->selectDistinctLithoStratID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ChronosStratID':
             $returnvalue = $this->selectDistinctChronosStratID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'BioStratID':
             $returnvalue = $this->selectDistinctBioStratID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the paleocontext.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_paleocontextView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_paleocontext <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_paleocontext::PALEOCONTEXTID.": ".$model->getPaleoContextID()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::COLLECTIONMEMBERID.": ".$model->getCollectionMemberID()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::BOTTOMDISTANCE.": ".$model->getBottomDistance()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::DIRECTION.": ".$model->getDirection()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::DISTANCEUNITS.": ".$model->getDistanceUnits()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::POSITIONSTATE.": ".$model->getPositionState()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::TOPDISTANCE.": ".$model->getTopDistance()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::LITHOSTRATID.": ".$model->getLithoStratID()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::CHRONOSSTRATID.": ".$model->getChronosStratID()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_paleocontext::BIOSTRATID.": ".$model->getBioStratID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>lithostrat</li>";
           $t_lithostrat = new huh_lithostrat();
           $t_lithostratView = new huh_lithostratView();
           $t_lithostratView->setModel($t_lithostrat);
           if ($model->getLithoStratID() != '') { 
               $t_lithostrat->load($model->getLithoStratID());
               $returnvalue .= $t_lithostratView->getDetailsView(false);
           }
           $returnvalue .= "<li>geologictimeperiod</li>";
           $t_geologictimeperiod = new huh_geologictimeperiod();
           $t_geologictimeperiodView = new huh_geologictimeperiodView();
           $t_geologictimeperiodView->setModel($t_geologictimeperiod);
           if ($model->getChronosStratID() != '') { 
               $t_geologictimeperiod->load($model->getChronosStratID());
               $returnvalue .= $t_geologictimeperiodView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>geologictimeperiod</li>";
           $t_geologictimeperiod = new huh_geologictimeperiod();
           $t_geologictimeperiodView = new huh_geologictimeperiodView();
           $t_geologictimeperiodView->setModel($t_geologictimeperiod);
           if ($model->getBioStratID() != '') { 
               $t_geologictimeperiod->load($model->getBioStratID());
               $returnvalue .= $t_geologictimeperiodView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_paleocontext::PALEOCONTEXTID.': "'.$model->getPaleoContextID().'",';
       $returnvalue .= '"'.huh_paleocontext::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_paleocontext::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_paleocontext::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_paleocontext::COLLECTIONMEMBERID.': "'.$model->getCollectionMemberID().'",';
       $returnvalue .= '"'.huh_paleocontext::BOTTOMDISTANCE.': "'.$model->getBottomDistance().'",';
       $returnvalue .= '"'.huh_paleocontext::DIRECTION.': "'.$model->getDirection().'",';
       $returnvalue .= '"'.huh_paleocontext::DISTANCEUNITS.': "'.$model->getDistanceUnits().'",';
       $returnvalue .= '"'.huh_paleocontext::POSITIONSTATE.': "'.$model->getPositionState().'",';
       $returnvalue .= '"'.huh_paleocontext::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_paleocontext::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_paleocontext::TOPDISTANCE.': "'.$model->getTopDistance().'",';
       $returnvalue .= '"'.huh_paleocontext::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_paleocontext::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_paleocontext::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_paleocontext::LITHOSTRATID.': "'.$model->getLithoStratID().'",';
       $returnvalue .= '"'.huh_paleocontext::CHRONOSSTRATID.': "'.$model->getChronosStratID().'",';
       $returnvalue .= '"'.huh_paleocontext::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_paleocontext::BIOSTRATID.': "'.$model->getBioStratID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getPaleoContextID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionMemberID()."</td>\n";
       $returnvalue .= "<td>".$model->getBottomDistance()."</td>\n";
       $returnvalue .= "<td>".$model->getDirection()."</td>\n";
       $returnvalue .= "<td>".$model->getDistanceUnits()."</td>\n";
       $returnvalue .= "<td>".$model->getPositionState()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getTopDistance()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getLithoStratID()."</td>\n";
       $returnvalue .= "<td>".$model->getChronosStratID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getBioStratID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_paleocontext::PALEOCONTEXTID."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::COLLECTIONMEMBERID."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::BOTTOMDISTANCE."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::DIRECTION."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::DISTANCEUNITS."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::POSITIONSTATE."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::TOPDISTANCE."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::LITHOSTRATID."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::CHRONOSSTRATID."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_paleocontext::BIOSTRATID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_paleocontext">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new PaleoContextID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_paleocontext::PALEOCONTEXTID.">PALEOCONTEXTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_paleocontext::PALEOCONTEXTID." id=".huh_paleocontext::PALEOCONTEXTID." value='".$model->getPaleoContextID()."'  style=' width:".huh_paleocontext::PALEOCONTEXTID_SIZE ."em;  '  maxlength='".huh_paleocontext::PALEOCONTEXTID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_paleocontext::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_paleocontext::TIMESTAMPCREATED." id=".huh_paleocontext::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_paleocontext::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_paleocontext::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_paleocontext::TIMESTAMPMODIFIED." id=".huh_paleocontext::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_paleocontext::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_paleocontext::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_paleocontext::VERSION." id=".huh_paleocontext::VERSION." value='".$model->getVersion()."'  style=' width:".huh_paleocontext::VERSION_SIZE ."em;  '  maxlength='".huh_paleocontext::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::COLLECTIONMEMBERID.">COLLECTIONMEMBERID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_paleocontext::COLLECTIONMEMBERID." id=".huh_paleocontext::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  style=' width:".huh_paleocontext::COLLECTIONMEMBERID_SIZE ."em;  '  maxlength='".huh_paleocontext::COLLECTIONMEMBERID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::BOTTOMDISTANCE.">BOTTOMDISTANCE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_paleocontext::BOTTOMDISTANCE." id=".huh_paleocontext::BOTTOMDISTANCE." value='".$model->getBottomDistance()."'  style=' width:".huh_paleocontext::BOTTOMDISTANCE_SIZE ."em;  '  maxlength='".huh_paleocontext::BOTTOMDISTANCE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::DIRECTION.">DIRECTION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_paleocontext::DIRECTION." id=".huh_paleocontext::DIRECTION." value='".$model->getDirection()."'  style=' width:".huh_paleocontext::DIRECTION_SIZE ."em;  '  maxlength='".huh_paleocontext::DIRECTION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::DISTANCEUNITS.">DISTANCEUNITS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_paleocontext::DISTANCEUNITS." id=".huh_paleocontext::DISTANCEUNITS." value='".$model->getDistanceUnits()."'  style=' width:".huh_paleocontext::DISTANCEUNITS_SIZE ."em;  '  maxlength='".huh_paleocontext::DISTANCEUNITS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::POSITIONSTATE.">POSITIONSTATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_paleocontext::POSITIONSTATE." id=".huh_paleocontext::POSITIONSTATE." value='".$model->getPositionState()."'  style=' width:".huh_paleocontext::POSITIONSTATE_SIZE ."em;  '  maxlength='".huh_paleocontext::POSITIONSTATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::TEXT1.">TEXT1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_paleocontext::TEXT1." id=".huh_paleocontext::TEXT1." value='".$model->getText1()."'  style=' width:".huh_paleocontext::TEXT1_SIZE ."em;  '  maxlength='".huh_paleocontext::TEXT1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::TEXT2.">TEXT2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_paleocontext::TEXT2." id=".huh_paleocontext::TEXT2." value='".$model->getText2()."'  style=' width:".huh_paleocontext::TEXT2_SIZE ."em;  '  maxlength='".huh_paleocontext::TEXT2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::TOPDISTANCE.">TOPDISTANCE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_paleocontext::TOPDISTANCE." id=".huh_paleocontext::TOPDISTANCE." value='".$model->getTopDistance()."'  style=' width:".huh_paleocontext::TOPDISTANCE_SIZE ."em;  '  maxlength='".huh_paleocontext::TOPDISTANCE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_paleocontext::YESNO1." id=".huh_paleocontext::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_paleocontext::YESNO1_SIZE ."em;  '  maxlength='".huh_paleocontext::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_paleocontext::YESNO2." id=".huh_paleocontext::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_paleocontext::YESNO2_SIZE ."em;  '  maxlength='".huh_paleocontext::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_paleocontext::CREATEDBYAGENTID." id=".huh_paleocontext::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_paleocontext::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_paleocontext::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::LITHOSTRATID.">LITHOSTRATID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_paleocontext::LITHOSTRATID." id=".huh_paleocontext::LITHOSTRATID." value='".$model->getLithoStratID()."'  style=' width:".huh_paleocontext::LITHOSTRATID_SIZE ."em;  '  maxlength='".huh_paleocontext::LITHOSTRATID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::CHRONOSSTRATID.">CHRONOSSTRATID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_paleocontext::CHRONOSSTRATID." id=".huh_paleocontext::CHRONOSSTRATID." value='".$model->getChronosStratID()."'  style=' width:".huh_paleocontext::CHRONOSSTRATID_SIZE ."em;  '  maxlength='".huh_paleocontext::CHRONOSSTRATID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_paleocontext::MODIFIEDBYAGENTID." id=".huh_paleocontext::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_paleocontext::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_paleocontext::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_paleocontext::BIOSTRATID.">BIOSTRATID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_paleocontext::BIOSTRATID." id=".huh_paleocontext::BIOSTRATID." value='".$model->getBioStratID()."'  style=' width:".huh_paleocontext::BIOSTRATID_SIZE ."em;  '  maxlength='".huh_paleocontext::BIOSTRATID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_paleocontext">';
       $returnvalue .= '<input type=hidden name=PaleoContextID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_paleocontext">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>PALEOCONTEXTID<input type=text name=".huh_paleocontext::PALEOCONTEXTID." id=".huh_paleocontext::PALEOCONTEXTID." value='".$model->getPaleoContextID()."'  size='".huh_paleocontext::PALEOCONTEXTID_SIZE ."'  maxlength='".huh_paleocontext::PALEOCONTEXTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_paleocontext::TIMESTAMPCREATED." id=".huh_paleocontext::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_paleocontext::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_paleocontext::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_paleocontext::TIMESTAMPMODIFIED." id=".huh_paleocontext::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_paleocontext::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_paleocontext::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_paleocontext::VERSION." id=".huh_paleocontext::VERSION." value='".$model->getVersion()."'  size='".huh_paleocontext::VERSION_SIZE ."'  maxlength='".huh_paleocontext::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONMEMBERID<input type=text name=".huh_paleocontext::COLLECTIONMEMBERID." id=".huh_paleocontext::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  size='".huh_paleocontext::COLLECTIONMEMBERID_SIZE ."'  maxlength='".huh_paleocontext::COLLECTIONMEMBERID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>BOTTOMDISTANCE<input type=text name=".huh_paleocontext::BOTTOMDISTANCE." id=".huh_paleocontext::BOTTOMDISTANCE." value='".$model->getBottomDistance()."'  size='".huh_paleocontext::BOTTOMDISTANCE_SIZE ."'  maxlength='".huh_paleocontext::BOTTOMDISTANCE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DIRECTION<input type=text name=".huh_paleocontext::DIRECTION." id=".huh_paleocontext::DIRECTION." value='".$model->getDirection()."'  size='".huh_paleocontext::DIRECTION_SIZE ."'  maxlength='".huh_paleocontext::DIRECTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISTANCEUNITS<input type=text name=".huh_paleocontext::DISTANCEUNITS." id=".huh_paleocontext::DISTANCEUNITS." value='".$model->getDistanceUnits()."'  size='".huh_paleocontext::DISTANCEUNITS_SIZE ."'  maxlength='".huh_paleocontext::DISTANCEUNITS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>POSITIONSTATE<input type=text name=".huh_paleocontext::POSITIONSTATE." id=".huh_paleocontext::POSITIONSTATE." value='".$model->getPositionState()."'  size='".huh_paleocontext::POSITIONSTATE_SIZE ."'  maxlength='".huh_paleocontext::POSITIONSTATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_paleocontext::TEXT1." id=".huh_paleocontext::TEXT1." value='".$model->getText1()."'  size='".huh_paleocontext::TEXT1_SIZE ."'  maxlength='".huh_paleocontext::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_paleocontext::TEXT2." id=".huh_paleocontext::TEXT2." value='".$model->getText2()."'  size='".huh_paleocontext::TEXT2_SIZE ."'  maxlength='".huh_paleocontext::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TOPDISTANCE<input type=text name=".huh_paleocontext::TOPDISTANCE." id=".huh_paleocontext::TOPDISTANCE." value='".$model->getTopDistance()."'  size='".huh_paleocontext::TOPDISTANCE_SIZE ."'  maxlength='".huh_paleocontext::TOPDISTANCE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_paleocontext::YESNO1." id=".huh_paleocontext::YESNO1." value='".$model->getYesNo1()."'  size='".huh_paleocontext::YESNO1_SIZE ."'  maxlength='".huh_paleocontext::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_paleocontext::YESNO2." id=".huh_paleocontext::YESNO2." value='".$model->getYesNo2()."'  size='".huh_paleocontext::YESNO2_SIZE ."'  maxlength='".huh_paleocontext::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_paleocontext::CREATEDBYAGENTID." id=".huh_paleocontext::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_paleocontext::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_paleocontext::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LITHOSTRATID<input type=text name=".huh_paleocontext::LITHOSTRATID." id=".huh_paleocontext::LITHOSTRATID." value='".$model->getLithoStratID()."'  size='".huh_paleocontext::LITHOSTRATID_SIZE ."'  maxlength='".huh_paleocontext::LITHOSTRATID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CHRONOSSTRATID<input type=text name=".huh_paleocontext::CHRONOSSTRATID." id=".huh_paleocontext::CHRONOSSTRATID." value='".$model->getChronosStratID()."'  size='".huh_paleocontext::CHRONOSSTRATID_SIZE ."'  maxlength='".huh_paleocontext::CHRONOSSTRATID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_paleocontext::MODIFIEDBYAGENTID." id=".huh_paleocontext::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_paleocontext::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_paleocontext::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>BIOSTRATID<input type=text name=".huh_paleocontext::BIOSTRATID." id=".huh_paleocontext::BIOSTRATID." value='".$model->getBioStratID()."'  size='".huh_paleocontext::BIOSTRATID_SIZE ."'  maxlength='".huh_paleocontext::BIOSTRATID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
