<?php
//==============================================================================
//===   referencework.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_referencework implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const REFERENCEWORKID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const GUID_SIZE            = 128; //128
   const ISPUBLISHED_SIZE     = 1; //1
   const ISBN_SIZE            = 16; //16
   const LIBRARYNUMBER_SIZE   = 20; //YEAR
   const NUMBER1_SIZE         = 20; //REAL
   const NUMBER2_SIZE         = 20; //REAL
   const PAGES_SIZE           = 20; //YEAR
   const PLACEOFPUBLICATION_SIZE = 64; //64
   const PUBLISHER_SIZE       = 64; //64
   const REFERENCEWORKTYPE_SIZE = 4; //TINYINT
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const TEXT1_SIZE           = 255; //255
   const TEXT2_SIZE           = 255; //LONGVARCHAR
   const TITLE_SIZE           = 900; //900
   const URL_SIZE             = 255; //LONGVARCHAR
   const VOLUME_SIZE          = 25; //25
   const WORKDATE_SIZE        = 25; //25
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const JOURNALID_SIZE       = 11; //INTEGER
   const CONTAINEDRFPARENTID_SIZE = 11; //INTEGER
   const PRECEDINGWORKID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const SUCCEEDINGWORKID_SIZE = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const REFERENCEWORKID   = 'ReferenceWorkID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const GUID              = 'GUID';
   const ISPUBLISHED       = 'IsPublished';
   const ISBN              = 'ISBN';
   const LIBRARYNUMBER     = 'LibraryNumber';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const PAGES             = 'Pages';
   const PLACEOFPUBLICATION = 'PlaceOfPublication';
   const PUBLISHER         = 'Publisher';
   const REFERENCEWORKTYPE = 'ReferenceWorkType';
   const REMARKS           = 'Remarks';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const TITLE             = 'title';
   const URL               = 'URL';
   const VOLUME            = 'Volume';
   const WORKDATE          = 'WorkDate';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const JOURNALID         = 'JournalID';
   const CONTAINEDRFPARENTID = 'ContainedRFParentID';
   const PRECEDINGWORKID   = 'PrecedingWorkID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const SUCCEEDINGWORKID  = 'SucceedingWorkID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $ReferenceWorkID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ReferenceWorkID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $GUID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GUID']), 0, 128);
  $IsPublished = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsPublished']), 0, 1);
  $ISBN = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ISBN']), 0, 16);
  $LibraryNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['LibraryNumber']), 0, 20);
  $Number1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number1']), 0, 20);
  $Number2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number2']), 0, 20);
  $Pages = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Pages']), 0, 20);
  $PlaceOfPublication = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PlaceOfPublication']), 0, 64);
  $Publisher = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Publisher']), 0, 64);
  $ReferenceWorkType = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ReferenceWorkType']), 0, 4);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 255);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 255);
  $title = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['title']), 0, 900);
  $URL = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['URL']), 0, 255);
  $Volume = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Volume']), 0, 25);
  $WorkDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['WorkDate']), 0, 25);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $JournalID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['JournalID']), 0, 11);
  $ContainedRFParentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ContainedRFParentID']), 0, 11);
  $PrecedingWorkID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PrecedingWorkID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $SucceedingWorkID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['SucceedingWorkID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $ReferenceWorkID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $GUID; // VARCHAR(128) 
   private $IsPublished; // BIT(1) 
   private $ISBN; // VARCHAR(16) 
   private $LibraryNumber; // YEAR 
   private $Number1; // REAL 
   private $Number2; // REAL 
   private $Pages; // YEAR 
   private $PlaceOfPublication; // VARCHAR(64) 
   private $Publisher; // VARCHAR(64) 
   private $ReferenceWorkType; // TINYINT 
   private $Remarks; // LONGVARCHAR 
   private $Text1; // VARCHAR(255) 
   private $Text2; // LONGVARCHAR 
   private $title; // VARCHAR(900) 
   private $URL; // LONGVARCHAR 
   private $Volume; // VARCHAR(25) 
   private $WorkDate; // VARCHAR(25) 
   private $YesNo1; // BIT(1) 
   private $YesNo2; // BIT(1) 
   private $JournalID; // INTEGER 
   private $ContainedRFParentID; // INTEGER 
   private $PrecedingWorkID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $SucceedingWorkID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' ReferenceWorkID, TimestampCreated, TimestampModified, Version, GUID, IsPublished, ISBN, LibraryNumber, Number1, Number2, Pages, PlaceOfPublication, Publisher, ReferenceWorkType, Remarks, Text1, Text2, title, URL, Volume, WorkDate, YesNo1, YesNo2, JournalID, ContainedRFParentID, PrecedingWorkID, ModifiedByAgentID, SucceedingWorkID, CreatedByAgentID, ';
   const PKFIELDLIST = ' ReferenceWorkID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'ReferenceWorkID'  ) ;
   private $allFieldsArray = array( 0 => 'ReferenceWorkID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'GUID' , 5 => 'IsPublished' , 6 => 'ISBN' , 7 => 'LibraryNumber' , 8 => 'Number1' , 9 => 'Number2' , 10 => 'Pages' , 11 => 'PlaceOfPublication' , 12 => 'Publisher' , 13 => 'ReferenceWorkType' , 14 => 'Remarks' , 15 => 'Text1' , 16 => 'Text2' , 17 => 'title' , 18 => 'URL' , 19 => 'Volume' , 20 => 'WorkDate' , 21 => 'YesNo1' , 22 => 'YesNo2' , 23 => 'JournalID' , 24 => 'ContainedRFParentID' , 25 => 'PrecedingWorkID' , 26 => 'ModifiedByAgentID' , 27 => 'SucceedingWorkID' , 28 => 'CreatedByAgentID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'GUID' , 6 => 'ISBN' , 12 => 'Publisher' , 15 => 'Text1' , 17 => 'title' , 23 => 'JournalID' , 24 => 'ContainedRFParentID' , 25 => 'PrecedingWorkID' , 26 => 'ModifiedByAgentID' , 27 => 'SucceedingWorkID' , 28 => 'CreatedByAgentID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_referencework(){
       $this->ReferenceWorkID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->GUID = '';
       $this->IsPublished = '';
       $this->ISBN = '';
       $this->LibraryNumber = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->Pages = '';
       $this->PlaceOfPublication = '';
       $this->Publisher = '';
       $this->ReferenceWorkType = '';
       $this->Remarks = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->title = '';
       $this->URL = '';
       $this->Volume = '';
       $this->WorkDate = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->JournalID = '';
       $this->ContainedRFParentID = '';
       $this->PrecedingWorkID = '';
       $this->ModifiedByAgentID = '';
       $this->SucceedingWorkID = '';
       $this->CreatedByAgentID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='ReferenceWorkID') { $returnvalue = $this->setReferenceWorkID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='GUID') { $returnvalue = $this->setGUID($value); } 
             if ($fieldname=='IsPublished') { $returnvalue = $this->setIsPublished($value); } 
             if ($fieldname=='ISBN') { $returnvalue = $this->setISBN($value); } 
             if ($fieldname=='LibraryNumber') { $returnvalue = $this->setLibraryNumber($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='Pages') { $returnvalue = $this->setPages($value); } 
             if ($fieldname=='PlaceOfPublication') { $returnvalue = $this->setPlaceOfPublication($value); } 
             if ($fieldname=='Publisher') { $returnvalue = $this->setPublisher($value); } 
             if ($fieldname=='ReferenceWorkType') { $returnvalue = $this->setReferenceWorkType($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='title') { $returnvalue = $this->settitle($value); } 
             if ($fieldname=='URL') { $returnvalue = $this->setURL($value); } 
             if ($fieldname=='Volume') { $returnvalue = $this->setVolume($value); } 
             if ($fieldname=='WorkDate') { $returnvalue = $this->setWorkDate($value); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); } 
             if ($fieldname=='JournalID') { $returnvalue = $this->setJournalID($value); } 
             if ($fieldname=='ContainedRFParentID') { $returnvalue = $this->setContainedRFParentID($value); } 
             if ($fieldname=='PrecedingWorkID') { $returnvalue = $this->setPrecedingWorkID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='SucceedingWorkID') { $returnvalue = $this->setSucceedingWorkID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='ReferenceWorkID') { $returnvalue = $this->getReferenceWorkID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='GUID') { $returnvalue = $this->getGUID(); } 
             if ($fieldname=='IsPublished') { $returnvalue = $this->getIsPublished(); } 
             if ($fieldname=='ISBN') { $returnvalue = $this->getISBN(); } 
             if ($fieldname=='LibraryNumber') { $returnvalue = $this->getLibraryNumber(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='Pages') { $returnvalue = $this->getPages(); } 
             if ($fieldname=='PlaceOfPublication') { $returnvalue = $this->getPlaceOfPublication(); } 
             if ($fieldname=='Publisher') { $returnvalue = $this->getPublisher(); } 
             if ($fieldname=='ReferenceWorkType') { $returnvalue = $this->getReferenceWorkType(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='title') { $returnvalue = $this->gettitle(); } 
             if ($fieldname=='URL') { $returnvalue = $this->getURL(); } 
             if ($fieldname=='Volume') { $returnvalue = $this->getVolume(); } 
             if ($fieldname=='WorkDate') { $returnvalue = $this->getWorkDate(); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); } 
             if ($fieldname=='JournalID') { $returnvalue = $this->getJournalID(); } 
             if ($fieldname=='ContainedRFParentID') { $returnvalue = $this->getContainedRFParentID(); } 
             if ($fieldname=='PrecedingWorkID') { $returnvalue = $this->getPrecedingWorkID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='SucceedingWorkID') { $returnvalue = $this->getSucceedingWorkID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*ReferenceWorkID*/
   public function getReferenceWorkID() {
       if ($this->ReferenceWorkID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ReferenceWorkID));
       }
   }
   public function setReferenceWorkID($ReferenceWorkID) {
       if (strlen(preg_replace('/[^0-9]/','',$ReferenceWorkID)) > huh_referencework::REFERENCEWORKID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ReferenceWorkID = trim($ReferenceWorkID);
       if (!ctype_digit(strval($ReferenceWorkID)) && trim(strval($ReferenceWorkID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ReferenceWorkID = $this->l_addslashes($ReferenceWorkID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_referencework::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_referencework::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_referencework::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*GUID*/
   public function getGUID() {
       if ($this->GUID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GUID));
       }
   }
   public function setGUID($GUID) {
       if (strlen($GUID) > huh_referencework::GUID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GUID = $this->l_addslashes($GUID);
       $this->dirty = true;
   }
/*IsPublished*/
   public function getIsPublished() {
       if ($this->IsPublished==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsPublished));
       }
   }
   public function setIsPublished($IsPublished) {
       if (strlen($IsPublished) > huh_referencework::ISPUBLISHED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsPublished = $this->l_addslashes($IsPublished);
       $this->dirty = true;
   }
/*ISBN*/
   public function getISBN() {
       if ($this->ISBN==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ISBN));
       }
   }
   public function setISBN($ISBN) {
       if (strlen($ISBN) > huh_referencework::ISBN_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ISBN = $this->l_addslashes($ISBN);
       $this->dirty = true;
   }
/*LibraryNumber*/
   public function getLibraryNumber() {
       if ($this->LibraryNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LibraryNumber));
       }
   }
   public function setLibraryNumber($LibraryNumber) {
       if (strlen($LibraryNumber) > huh_referencework::LIBRARYNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->LibraryNumber = $this->l_addslashes($LibraryNumber);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen($Number1) > huh_referencework::NUMBER1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen($Number2) > huh_referencework::NUMBER2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*Pages*/
   public function getPages() {
       if ($this->Pages==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Pages));
       }
   }
   public function setPages($Pages) {
       if (strlen($Pages) > huh_referencework::PAGES_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Pages = $this->l_addslashes($Pages);
       $this->dirty = true;
   }
/*PlaceOfPublication*/
   public function getPlaceOfPublication() {
       if ($this->PlaceOfPublication==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PlaceOfPublication));
       }
   }
   public function setPlaceOfPublication($PlaceOfPublication) {
       if (strlen($PlaceOfPublication) > huh_referencework::PLACEOFPUBLICATION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PlaceOfPublication = $this->l_addslashes($PlaceOfPublication);
       $this->dirty = true;
   }
/*Publisher*/
   public function getPublisher() {
       if ($this->Publisher==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Publisher));
       }
   }
   public function setPublisher($Publisher) {
       if (strlen($Publisher) > huh_referencework::PUBLISHER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Publisher = $this->l_addslashes($Publisher);
       $this->dirty = true;
   }
/*ReferenceWorkType*/
   public function getReferenceWorkType() {
       if ($this->ReferenceWorkType==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ReferenceWorkType));
       }
   }
   public function setReferenceWorkType($ReferenceWorkType) {
       if (strlen($ReferenceWorkType) > huh_referencework::REFERENCEWORKTYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ReferenceWorkType = $this->l_addslashes($ReferenceWorkType);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_referencework::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_referencework::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_referencework::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*title*/
   public function gettitle() {
       if ($this->title==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->title));
       }
   }
   public function settitle($title) {
       if (strlen($title) > huh_referencework::TITLE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->title = $this->l_addslashes($title);
       $this->dirty = true;
   }
/*URL*/
   public function getURL() {
       if ($this->URL==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->URL));
       }
   }
   public function setURL($URL) {
       if (strlen($URL) > huh_referencework::URL_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->URL = $this->l_addslashes($URL);
       $this->dirty = true;
   }
/*Volume*/
   public function getVolume() {
       if ($this->Volume==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Volume));
       }
   }
   public function setVolume($Volume) {
       if (strlen($Volume) > huh_referencework::VOLUME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Volume = $this->l_addslashes($Volume);
       $this->dirty = true;
   }
/*WorkDate*/
   public function getWorkDate() {
       if ($this->WorkDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->WorkDate));
       }
   }
   public function setWorkDate($WorkDate) {
       if (strlen($WorkDate) > huh_referencework::WORKDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->WorkDate = $this->l_addslashes($WorkDate);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_referencework::YESNO1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_referencework::YESNO2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*JournalID*/
   public function getJournalID() {
       if ($this->JournalID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->JournalID));
       }
   }
   public function setJournalID($JournalID) {
       if (strlen(preg_replace('/[^0-9]/','',$JournalID)) > huh_referencework::JOURNALID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $JournalID = trim($JournalID);
       if (!ctype_digit(strval($JournalID)) && trim(strval($JournalID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->JournalID = $this->l_addslashes($JournalID);
       $this->dirty = true;
   }
/*ContainedRFParentID*/
   public function getContainedRFParentID() {
       if ($this->ContainedRFParentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ContainedRFParentID));
       }
   }
   public function setContainedRFParentID($ContainedRFParentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ContainedRFParentID)) > huh_referencework::CONTAINEDRFPARENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ContainedRFParentID = trim($ContainedRFParentID);
       if (!ctype_digit(strval($ContainedRFParentID)) && trim(strval($ContainedRFParentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ContainedRFParentID = $this->l_addslashes($ContainedRFParentID);
       $this->dirty = true;
   }
/*PrecedingWorkID*/
   public function getPrecedingWorkID() {
       if ($this->PrecedingWorkID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PrecedingWorkID));
       }
   }
   public function setPrecedingWorkID($PrecedingWorkID) {
       if (strlen(preg_replace('/[^0-9]/','',$PrecedingWorkID)) > huh_referencework::PRECEDINGWORKID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PrecedingWorkID = trim($PrecedingWorkID);
       if (!ctype_digit(strval($PrecedingWorkID)) && trim(strval($PrecedingWorkID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PrecedingWorkID = $this->l_addslashes($PrecedingWorkID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_referencework::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*SucceedingWorkID*/
   public function getSucceedingWorkID() {
       if ($this->SucceedingWorkID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SucceedingWorkID));
       }
   }
   public function setSucceedingWorkID($SucceedingWorkID) {
       if (strlen(preg_replace('/[^0-9]/','',$SucceedingWorkID)) > huh_referencework::SUCCEEDINGWORKID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $SucceedingWorkID = trim($SucceedingWorkID);
       if (!ctype_digit(strval($SucceedingWorkID)) && trim(strval($SucceedingWorkID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->SucceedingWorkID = $this->l_addslashes($SucceedingWorkID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_referencework::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getReferenceWorkID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['ReferenceWorkID'] = $this->getReferenceWorkID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_ReferenceWorkIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_GUIDMYSQLI_TYPE = 's';
  const C_IsPublishedMYSQLI_TYPE = 'i';
  const C_ISBNMYSQLI_TYPE = 's';
  const C_LibraryNumberMYSQLI_TYPE = 's';
  const C_Number1MYSQLI_TYPE = 's';
  const C_Number2MYSQLI_TYPE = 's';
  const C_PagesMYSQLI_TYPE = 's';
  const C_PlaceOfPublicationMYSQLI_TYPE = 's';
  const C_PublisherMYSQLI_TYPE = 's';
  const C_ReferenceWorkTypeMYSQLI_TYPE = 'i';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_titleMYSQLI_TYPE = 's';
  const C_URLMYSQLI_TYPE = 's';
  const C_VolumeMYSQLI_TYPE = 's';
  const C_WorkDateMYSQLI_TYPE = 's';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_JournalIDMYSQLI_TYPE = 'i';
  const C_ContainedRFParentIDMYSQLI_TYPE = 'i';
  const C_PrecedingWorkIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_SucceedingWorkIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='ReferenceWorkID') { $retval = self::C_ReferenceWorkIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='GUID') { $retval = self::C_GUIDMYSQLI_TYPE; }
      if ($aFieldname=='IsPublished') { $retval = self::C_IsPublishedMYSQLI_TYPE; }
      if ($aFieldname=='ISBN') { $retval = self::C_ISBNMYSQLI_TYPE; }
      if ($aFieldname=='LibraryNumber') { $retval = self::C_LibraryNumberMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='Pages') { $retval = self::C_PagesMYSQLI_TYPE; }
      if ($aFieldname=='PlaceOfPublication') { $retval = self::C_PlaceOfPublicationMYSQLI_TYPE; }
      if ($aFieldname=='Publisher') { $retval = self::C_PublisherMYSQLI_TYPE; }
      if ($aFieldname=='ReferenceWorkType') { $retval = self::C_ReferenceWorkTypeMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='title') { $retval = self::C_titleMYSQLI_TYPE; }
      if ($aFieldname=='URL') { $retval = self::C_URLMYSQLI_TYPE; }
      if ($aFieldname=='Volume') { $retval = self::C_VolumeMYSQLI_TYPE; }
      if ($aFieldname=='WorkDate') { $retval = self::C_WorkDateMYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='JournalID') { $retval = self::C_JournalIDMYSQLI_TYPE; }
      if ($aFieldname=='ContainedRFParentID') { $retval = self::C_ContainedRFParentIDMYSQLI_TYPE; }
      if ($aFieldname=='PrecedingWorkID') { $retval = self::C_PrecedingWorkIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='SucceedingWorkID') { $retval = self::C_SucceedingWorkIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setReferenceWorkID($pk[ReferenceWorkID]);
             } else { ;
                 $this->setReferenceWorkID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->ReferenceWorkID != NULL) {
           $sql = 'SELECT ReferenceWorkID, TimestampCreated, TimestampModified, Version, GUID, IsPublished, ISBN, LibraryNumber, Number1, Number2, Pages, PlaceOfPublication, Publisher, ReferenceWorkType, Remarks, Text1, Text2, title, URL, Volume, WorkDate, YesNo1, YesNo2, JournalID, ContainedRFParentID, PrecedingWorkID, ModifiedByAgentID, SucceedingWorkID, CreatedByAgentID FROM referencework WHERE ReferenceWorkID = '.$this->ReferenceWorkID ;

           $preparesql = 'SELECT ReferenceWorkID, TimestampCreated, TimestampModified, Version, GUID, IsPublished, ISBN, LibraryNumber, Number1, Number2, Pages, PlaceOfPublication, Publisher, ReferenceWorkType, Remarks, Text1, Text2, title, URL, Volume, WorkDate, YesNo1, YesNo2, JournalID, ContainedRFParentID, PrecedingWorkID, ModifiedByAgentID, SucceedingWorkID, CreatedByAgentID FROM referencework WHERE ReferenceWorkID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->ReferenceWorkID);
              $statement->execute();
              $statement->bind_result($this->ReferenceWorkID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->GUID, $this->IsPublished, $this->ISBN, $this->LibraryNumber, $this->Number1, $this->Number2, $this->Pages, $this->PlaceOfPublication, $this->Publisher, $this->ReferenceWorkType, $this->Remarks, $this->Text1, $this->Text2, $this->title, $this->URL, $this->Volume, $this->WorkDate, $this->YesNo1, $this->YesNo2, $this->JournalID, $this->ContainedRFParentID, $this->PrecedingWorkID, $this->ModifiedByAgentID, $this->SucceedingWorkID, $this->CreatedByAgentID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->ReferenceWorkID!= NULL) {
            $sql  = 'UPDATE  referencework SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", GUID = ? ";
            $sql .=  ", IsPublished = ? ";
            $sql .=  ", ISBN = ? ";
            $sql .=  ", LibraryNumber = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", Pages = ? ";
            $sql .=  ", PlaceOfPublication = ? ";
            $sql .=  ", Publisher = ? ";
            $sql .=  ", ReferenceWorkType = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", title = ? ";
            $sql .=  ", URL = ? ";
            $sql .=  ", Volume = ? ";
            $sql .=  ", WorkDate = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", JournalID = ? ";
            $sql .=  ", ContainedRFParentID = ? ";
            $sql .=  ", PrecedingWorkID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", SucceedingWorkID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";

            $sql .= "  WHERE ReferenceWorkID = ? ";
        } else {
            $sql  = 'INSERT INTO referencework ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( ReferenceWorkID ,  TimestampCreated ,  TimestampModified ,  Version ,  GUID ,  IsPublished ,  ISBN ,  LibraryNumber ,  Number1 ,  Number2 ,  Pages ,  PlaceOfPublication ,  Publisher ,  ReferenceWorkType ,  Remarks ,  Text1 ,  Text2 ,  title ,  URL ,  Volume ,  WorkDate ,  YesNo1 ,  YesNo2 ,  JournalID ,  ContainedRFParentID ,  PrecedingWorkID ,  ModifiedByAgentID ,  SucceedingWorkID ,  CreatedByAgentID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->ReferenceWorkID!= NULL ) {
              $statement->bind_param("issisisssssssisssssssiiiiiiiii", $this->ReferenceWorkID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->GUID , $this->IsPublished , $this->ISBN , $this->LibraryNumber , $this->Number1 , $this->Number2 , $this->Pages , $this->PlaceOfPublication , $this->Publisher , $this->ReferenceWorkType , $this->Remarks , $this->Text1 , $this->Text2 , $this->title , $this->URL , $this->Volume , $this->WorkDate , $this->YesNo1 , $this->YesNo2 , $this->JournalID , $this->ContainedRFParentID , $this->PrecedingWorkID , $this->ModifiedByAgentID , $this->SucceedingWorkID , $this->CreatedByAgentID , $this->ReferenceWorkID );
           } else { 
              $statement->bind_param("issisisssssssisssssssiiiiiiii", $this->ReferenceWorkID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->GUID , $this->IsPublished , $this->ISBN , $this->LibraryNumber , $this->Number1 , $this->Number2 , $this->Pages , $this->PlaceOfPublication , $this->Publisher , $this->ReferenceWorkType , $this->Remarks , $this->Text1 , $this->Text2 , $this->title , $this->URL , $this->Volume , $this->WorkDate , $this->YesNo1 , $this->YesNo2 , $this->JournalID , $this->ContainedRFParentID , $this->PrecedingWorkID , $this->ModifiedByAgentID , $this->SucceedingWorkID , $this->CreatedByAgentID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->ReferenceWorkID != NULL) {
           $sql = 'SELECT ReferenceWorkID, TimestampCreated, TimestampModified, Version, GUID, IsPublished, ISBN, LibraryNumber, Number1, Number2, Pages, PlaceOfPublication, Publisher, ReferenceWorkType, Remarks, Text1, Text2, title, URL, Volume, WorkDate, YesNo1, YesNo2, JournalID, ContainedRFParentID, PrecedingWorkID, ModifiedByAgentID, SucceedingWorkID, CreatedByAgentID FROM referencework WHERE ReferenceWorkID = "'.$this->ReferenceWorkID.'"  ' ;

           $preparedsql = 'SELECT  FROM referencework WHERE  and ReferenceWorkID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issisisssssssisssssssiiiiiiii", $this->ReferenceWorkID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->GUID, $this->IsPublished, $this->ISBN, $this->LibraryNumber, $this->Number1, $this->Number2, $this->Pages, $this->PlaceOfPublication, $this->Publisher, $this->ReferenceWorkType, $this->Remarks, $this->Text1, $this->Text2, $this->title, $this->URL, $this->Volume, $this->WorkDate, $this->YesNo1, $this->YesNo2, $this->JournalID, $this->ContainedRFParentID, $this->PrecedingWorkID, $this->ModifiedByAgentID, $this->SucceedingWorkID, $this->CreatedByAgentID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM referencework WHERE  and ReferenceWorkID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issisisssssssisssssssiiiiiiii", $this->ReferenceWorkID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->GUID, $this->IsPublished, $this->ISBN, $this->LibraryNumber, $this->Number1, $this->Number2, $this->Pages, $this->PlaceOfPublication, $this->Publisher, $this->ReferenceWorkType, $this->Remarks, $this->Text1, $this->Text2, $this->title, $this->URL, $this->Volume, $this->WorkDate, $this->YesNo1, $this->YesNo2, $this->JournalID, $this->ContainedRFParentID, $this->PrecedingWorkID, $this->ModifiedByAgentID, $this->SucceedingWorkID, $this->CreatedByAgentID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->ReferenceWorkID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM referencework';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT ReferenceWorkID FROM referencework $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_referencework();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromagentcitation() { 
      // ForeignKey in: agentcitation
      $t = new agentcitation();
  } 
  public function loadLinkedFromauthor() { 
      // ForeignKey in: author
      $t = new author();
  } 
  public function loadLinkedFromcommonnametxcitation() { 
      // ForeignKey in: commonnametxcitation
      $t = new commonnametxcitation();
  } 
  public function loadLinkedFromdeterminationcitation() { 
      // ForeignKey in: determinationcitation
      $t = new determinationcitation();
  } 
  public function loadLinkedFromdnasequencingruncitation() { 
      // ForeignKey in: dnasequencingruncitation
      $t = new dnasequencingruncitation();
  } 
  public function loadLinkedFromfragmentcitation() { 
      // ForeignKey in: fragmentcitation
      $t = new fragmentcitation();
  } 
  public function loadLinkedFromlocalitycitation() { 
      // ForeignKey in: localitycitation
      $t = new localitycitation();
  } 
  public function loadLinkedFromreferenceworkidentifier() { 
      // ForeignKey in: referenceworkidentifier
      $t = new referenceworkidentifier();
  } 
  public function loadLinkedFromreferenceworkvariant() { 
      // ForeignKey in: referenceworkvariant
      $t = new referenceworkvariant();
  } 
  public function loadLinkedFromtaxoncitation() { 
      // ForeignKey in: taxoncitation
      $t = new taxoncitation();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: JournalID
      $t = new journal();
      $t->load(getJournalID());
      $returnvalue[JournalID] = $t;
       // fk: ContainedRFParentID
      $t = new referencework();
      $t->load(getContainedRFParentID());
      $returnvalue[ContainedRFParentID] = $t;
       // fk: PrecedingWorkID
      $t = new referencework();
      $t->load(getPrecedingWorkID());
      $returnvalue[PrecedingWorkID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: SucceedingWorkID
      $t = new referencework();
      $t->load(getSucceedingWorkID());
      $returnvalue[SucceedingWorkID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT ReferenceWorkID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(GUID,'') || ' ' || IFNULL(IsPublished,'') || ' ' || IFNULL(ISBN,'') || ' ' || IFNULL(LibraryNumber,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(Pages,'') || ' ' || IFNULL(PlaceOfPublication,'') || ' ' || IFNULL(Publisher,'') || ' ' || IFNULL(ReferenceWorkType,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(title,'') || ' ' || IFNULL(URL,'') || ' ' || IFNULL(Volume,'') || ' ' || IFNULL(WorkDate,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(JournalID,'') || ' ' || IFNULL(ContainedRFParentID,'') || ' ' || IFNULL(PrecedingWorkID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(SucceedingWorkID,'') || ' ' || IFNULL(CreatedByAgentID,'')) FROM referencework order by GUID, ISBN, Publisher, Text1, title, JournalID, ContainedRFParentID, PrecedingWorkID, ModifiedByAgentID, SucceedingWorkID, CreatedByAgentID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM referencework order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByGUID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ReferenceWorkID FROM referencework WHERE GUID $operator '$searchTerm'";
        $preparedsql = "SELECT ReferenceWorkID FROM referencework WHERE GUID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_referencework();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByISBN($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ReferenceWorkID FROM referencework WHERE ISBN $operator '$searchTerm'";
        $preparedsql = "SELECT ReferenceWorkID FROM referencework WHERE ISBN $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_referencework();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPublisher($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ReferenceWorkID FROM referencework WHERE Publisher $operator '$searchTerm'";
        $preparedsql = "SELECT ReferenceWorkID FROM referencework WHERE Publisher $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_referencework();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByText1($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ReferenceWorkID FROM referencework WHERE Text1 $operator '$searchTerm'";
        $preparedsql = "SELECT ReferenceWorkID FROM referencework WHERE Text1 $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_referencework();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayBytitle($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ReferenceWorkID FROM referencework WHERE title $operator '$searchTerm'";
        $preparedsql = "SELECT ReferenceWorkID FROM referencework WHERE title $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_referencework();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByJournalID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ReferenceWorkID FROM referencework WHERE JournalID $operator '$searchTerm'";
        $preparedsql = "SELECT ReferenceWorkID FROM referencework WHERE JournalID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_referencework();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByContainedRFParentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ReferenceWorkID FROM referencework WHERE ContainedRFParentID $operator '$searchTerm'";
        $preparedsql = "SELECT ReferenceWorkID FROM referencework WHERE ContainedRFParentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_referencework();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPrecedingWorkID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ReferenceWorkID FROM referencework WHERE PrecedingWorkID $operator '$searchTerm'";
        $preparedsql = "SELECT ReferenceWorkID FROM referencework WHERE PrecedingWorkID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_referencework();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ReferenceWorkID FROM referencework WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT ReferenceWorkID FROM referencework WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_referencework();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayBySucceedingWorkID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ReferenceWorkID FROM referencework WHERE SucceedingWorkID $operator '$searchTerm'";
        $preparedsql = "SELECT ReferenceWorkID FROM referencework WHERE SucceedingWorkID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_referencework();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ReferenceWorkID FROM referencework WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT ReferenceWorkID FROM referencework WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_referencework();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctGUID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GUID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GUID FROM referencework group by GUID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GUID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctISBN($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ISBN ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ISBN FROM referencework group by ISBN order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ISBN=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPublisher($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Publisher ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Publisher FROM referencework group by Publisher order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Publisher=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctText1($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Text1 ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Text1 FROM referencework group by Text1 order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Text1=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistincttitle($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' title ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, title FROM referencework group by title order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&title=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctJournalID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' JournalID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, JournalID FROM referencework group by JournalID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&JournalID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctContainedRFParentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ContainedRFParentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ContainedRFParentID FROM referencework group by ContainedRFParentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ContainedRFParentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPrecedingWorkID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' PrecedingWorkID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, PrecedingWorkID FROM referencework group by PrecedingWorkID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&PrecedingWorkID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM referencework group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctSucceedingWorkID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' SucceedingWorkID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, SucceedingWorkID FROM referencework group by SucceedingWorkID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&SucceedingWorkID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM referencework group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'GUID':
             $returnvalue = $this->selectDistinctGUID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ISBN':
             $returnvalue = $this->selectDistinctISBN($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'Publisher':
             $returnvalue = $this->selectDistinctPublisher($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'Text1':
             $returnvalue = $this->selectDistinctText1($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'title':
             $returnvalue = $this->selectDistincttitle($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'JournalID':
             $returnvalue = $this->selectDistinctJournalID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ContainedRFParentID':
             $returnvalue = $this->selectDistinctContainedRFParentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'PrecedingWorkID':
             $returnvalue = $this->selectDistinctPrecedingWorkID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'SucceedingWorkID':
             $returnvalue = $this->selectDistinctSucceedingWorkID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the referencework.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_referenceworkView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_referencework <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_referencework::REFERENCEWORKID.": ".$model->getReferenceWorkID()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::GUID.": ".$model->getGUID()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::ISPUBLISHED.": ".$model->getIsPublished()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::ISBN.": ".$model->getISBN()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::LIBRARYNUMBER.": ".$model->getLibraryNumber()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::PAGES.": ".$model->getPages()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::PLACEOFPUBLICATION.": ".$model->getPlaceOfPublication()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::PUBLISHER.": ".$model->getPublisher()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::REFERENCEWORKTYPE.": ".$model->getReferenceWorkType()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::TITLE.": ".$model->gettitle()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::URL.": ".$model->getURL()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::VOLUME.": ".$model->getVolume()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::WORKDATE.": ".$model->getWorkDate()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::JOURNALID.": ".$model->getJournalID()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::CONTAINEDRFPARENTID.": ".$model->getContainedRFParentID()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::PRECEDINGWORKID.": ".$model->getPrecedingWorkID()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::SUCCEEDINGWORKID.": ".$model->getSucceedingWorkID()."</li>\n";
       $returnvalue .= "<li>".huh_referencework::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>journal</li>";
           $t_journal = new huh_journal();
           $t_journalView = new huh_journalView();
           $t_journalView->setModel($t_journal);
           if ($model->getJournalID() != '') { 
               $t_journal->load($model->getJournalID());
               $returnvalue .= $t_journalView->getDetailsView(false);
           }
           $returnvalue .= "<li>referencework</li>";
           $t_referencework = new huh_referencework();
           $t_referenceworkView = new huh_referenceworkView();
           $t_referenceworkView->setModel($t_referencework);
           if ($model->getContainedRFParentID() != '') { 
               $t_referencework->load($model->getContainedRFParentID());
               $returnvalue .= $t_referenceworkView->getDetailsView(false);
           }
           $returnvalue .= "<li>referencework</li>";
           $t_referencework = new huh_referencework();
           $t_referenceworkView = new huh_referenceworkView();
           $t_referenceworkView->setModel($t_referencework);
           if ($model->getPrecedingWorkID() != '') { 
               $t_referencework->load($model->getPrecedingWorkID());
               $returnvalue .= $t_referenceworkView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>referencework</li>";
           $t_referencework = new huh_referencework();
           $t_referenceworkView = new huh_referenceworkView();
           $t_referenceworkView->setModel($t_referencework);
           if ($model->getSucceedingWorkID() != '') { 
               $t_referencework->load($model->getSucceedingWorkID());
               $returnvalue .= $t_referenceworkView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_referencework::REFERENCEWORKID.': "'.$model->getReferenceWorkID().'",';
       $returnvalue .= '"'.huh_referencework::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_referencework::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_referencework::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_referencework::GUID.': "'.$model->getGUID().'",';
       $returnvalue .= '"'.huh_referencework::ISPUBLISHED.': "'.$model->getIsPublished().'",';
       $returnvalue .= '"'.huh_referencework::ISBN.': "'.$model->getISBN().'",';
       $returnvalue .= '"'.huh_referencework::LIBRARYNUMBER.': "'.$model->getLibraryNumber().'",';
       $returnvalue .= '"'.huh_referencework::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_referencework::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_referencework::PAGES.': "'.$model->getPages().'",';
       $returnvalue .= '"'.huh_referencework::PLACEOFPUBLICATION.': "'.$model->getPlaceOfPublication().'",';
       $returnvalue .= '"'.huh_referencework::PUBLISHER.': "'.$model->getPublisher().'",';
       $returnvalue .= '"'.huh_referencework::REFERENCEWORKTYPE.': "'.$model->getReferenceWorkType().'",';
       $returnvalue .= '"'.huh_referencework::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_referencework::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_referencework::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_referencework::TITLE.': "'.$model->gettitle().'",';
       $returnvalue .= '"'.huh_referencework::URL.': "'.$model->getURL().'",';
       $returnvalue .= '"'.huh_referencework::VOLUME.': "'.$model->getVolume().'",';
       $returnvalue .= '"'.huh_referencework::WORKDATE.': "'.$model->getWorkDate().'",';
       $returnvalue .= '"'.huh_referencework::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_referencework::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_referencework::JOURNALID.': "'.$model->getJournalID().'",';
       $returnvalue .= '"'.huh_referencework::CONTAINEDRFPARENTID.': "'.$model->getContainedRFParentID().'",';
       $returnvalue .= '"'.huh_referencework::PRECEDINGWORKID.': "'.$model->getPrecedingWorkID().'",';
       $returnvalue .= '"'.huh_referencework::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_referencework::SUCCEEDINGWORKID.': "'.$model->getSucceedingWorkID().'",';
       $returnvalue .= '"'.huh_referencework::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getReferenceWorkID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getGUID()."</td>\n";
       $returnvalue .= "<td>".$model->getIsPublished()."</td>\n";
       $returnvalue .= "<td>".$model->getISBN()."</td>\n";
       $returnvalue .= "<td>".$model->getLibraryNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getPages()."</td>\n";
       $returnvalue .= "<td>".$model->getPlaceOfPublication()."</td>\n";
       $returnvalue .= "<td>".$model->getPublisher()."</td>\n";
       $returnvalue .= "<td>".$model->getReferenceWorkType()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->gettitle()."</td>\n";
       $returnvalue .= "<td>".$model->getURL()."</td>\n";
       $returnvalue .= "<td>".$model->getVolume()."</td>\n";
       $returnvalue .= "<td>".$model->getWorkDate()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getJournalID()."</td>\n";
       $returnvalue .= "<td>".$model->getContainedRFParentID()."</td>\n";
       $returnvalue .= "<td>".$model->getPrecedingWorkID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getSucceedingWorkID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_referencework::REFERENCEWORKID."</th>\n";
       $returnvalue .= "<th>".huh_referencework::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_referencework::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_referencework::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_referencework::GUID."</th>\n";
       $returnvalue .= "<th>".huh_referencework::ISPUBLISHED."</th>\n";
       $returnvalue .= "<th>".huh_referencework::ISBN."</th>\n";
       $returnvalue .= "<th>".huh_referencework::LIBRARYNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_referencework::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_referencework::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_referencework::PAGES."</th>\n";
       $returnvalue .= "<th>".huh_referencework::PLACEOFPUBLICATION."</th>\n";
       $returnvalue .= "<th>".huh_referencework::PUBLISHER."</th>\n";
       $returnvalue .= "<th>".huh_referencework::REFERENCEWORKTYPE."</th>\n";
       $returnvalue .= "<th>".huh_referencework::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_referencework::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_referencework::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_referencework::TITLE."</th>\n";
       $returnvalue .= "<th>".huh_referencework::URL."</th>\n";
       $returnvalue .= "<th>".huh_referencework::VOLUME."</th>\n";
       $returnvalue .= "<th>".huh_referencework::WORKDATE."</th>\n";
       $returnvalue .= "<th>".huh_referencework::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_referencework::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_referencework::JOURNALID."</th>\n";
       $returnvalue .= "<th>".huh_referencework::CONTAINEDRFPARENTID."</th>\n";
       $returnvalue .= "<th>".huh_referencework::PRECEDINGWORKID."</th>\n";
       $returnvalue .= "<th>".huh_referencework::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_referencework::SUCCEEDINGWORKID."</th>\n";
       $returnvalue .= "<th>".huh_referencework::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_referencework">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new ReferenceWorkID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_referencework::REFERENCEWORKID.">REFERENCEWORKID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_referencework::REFERENCEWORKID." id=".huh_referencework::REFERENCEWORKID." value='".$model->getReferenceWorkID()."'  style=' width:".huh_referencework::REFERENCEWORKID_SIZE ."em;  '  maxlength='".huh_referencework::REFERENCEWORKID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_referencework::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::TIMESTAMPCREATED." id=".huh_referencework::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_referencework::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_referencework::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::TIMESTAMPMODIFIED." id=".huh_referencework::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_referencework::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_referencework::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_referencework::VERSION." id=".huh_referencework::VERSION." value='".$model->getVersion()."'  style=' width:".huh_referencework::VERSION_SIZE ."em;  '  maxlength='".huh_referencework::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::GUID.">GUID</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_referencework::GUID." id=".huh_referencework::GUID." >".$model->getGUID()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::ISPUBLISHED.">ISPUBLISHED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::ISPUBLISHED." id=".huh_referencework::ISPUBLISHED." value='".$model->getIsPublished()."'  style=' width:".huh_referencework::ISPUBLISHED_SIZE ."em;  '  maxlength='".huh_referencework::ISPUBLISHED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::ISBN.">ISBN</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::ISBN." id=".huh_referencework::ISBN." value='".$model->getISBN()."'  style=' width:".huh_referencework::ISBN_SIZE ."em;  '  maxlength='".huh_referencework::ISBN_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::LIBRARYNUMBER.">LIBRARYNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::LIBRARYNUMBER." id=".huh_referencework::LIBRARYNUMBER." value='".$model->getLibraryNumber()."'  style=' width:".huh_referencework::LIBRARYNUMBER_SIZE ."em;  '  maxlength='".huh_referencework::LIBRARYNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::NUMBER1." id=".huh_referencework::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_referencework::NUMBER1_SIZE ."em;  '  maxlength='".huh_referencework::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::NUMBER2." id=".huh_referencework::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_referencework::NUMBER2_SIZE ."em;  '  maxlength='".huh_referencework::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::PAGES.">PAGES</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::PAGES." id=".huh_referencework::PAGES." value='".$model->getPages()."'  style=' width:".huh_referencework::PAGES_SIZE ."em;  '  maxlength='".huh_referencework::PAGES_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::PLACEOFPUBLICATION.">PLACEOFPUBLICATION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_referencework::PLACEOFPUBLICATION." id=".huh_referencework::PLACEOFPUBLICATION." >".$model->getPlaceOfPublication()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::PUBLISHER.">PUBLISHER</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_referencework::PUBLISHER." id=".huh_referencework::PUBLISHER." >".$model->getPublisher()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::REFERENCEWORKTYPE.">REFERENCEWORKTYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::REFERENCEWORKTYPE." id=".huh_referencework::REFERENCEWORKTYPE." value='".$model->getReferenceWorkType()."'  style=' width:".huh_referencework::REFERENCEWORKTYPE_SIZE ."em;  '  maxlength='".huh_referencework::REFERENCEWORKTYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_referencework::REMARKS." id=".huh_referencework::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::TEXT1.">TEXT1</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_referencework::TEXT1." id=".huh_referencework::TEXT1." >".$model->getText1()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_referencework::TEXT2." id=".huh_referencework::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::TITLE.">TITLE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_referencework::TITLE." id=".huh_referencework::TITLE." >".$model->gettitle()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::URL.">URL</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_referencework::URL." id=".huh_referencework::URL." >".$model->getURL()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::VOLUME.">VOLUME</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::VOLUME." id=".huh_referencework::VOLUME." value='".$model->getVolume()."'  style=' width:".huh_referencework::VOLUME_SIZE ."em;  '  maxlength='".huh_referencework::VOLUME_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::WORKDATE.">WORKDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::WORKDATE." id=".huh_referencework::WORKDATE." value='".$model->getWorkDate()."'  style=' width:".huh_referencework::WORKDATE_SIZE ."em;  '  maxlength='".huh_referencework::WORKDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::YESNO1." id=".huh_referencework::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_referencework::YESNO1_SIZE ."em;  '  maxlength='".huh_referencework::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_referencework::YESNO2." id=".huh_referencework::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_referencework::YESNO2_SIZE ."em;  '  maxlength='".huh_referencework::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::JOURNALID.">JOURNALID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_referencework::JOURNALID." id=".huh_referencework::JOURNALID." value='".$model->getJournalID()."'  style=' width:".huh_referencework::JOURNALID_SIZE ."em;  '  maxlength='".huh_referencework::JOURNALID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::CONTAINEDRFPARENTID.">CONTAINEDRFPARENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_referencework::CONTAINEDRFPARENTID." id=".huh_referencework::CONTAINEDRFPARENTID." value='".$model->getContainedRFParentID()."'  style=' width:".huh_referencework::CONTAINEDRFPARENTID_SIZE ."em;  '  maxlength='".huh_referencework::CONTAINEDRFPARENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::PRECEDINGWORKID.">PRECEDINGWORKID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_referencework::PRECEDINGWORKID." id=".huh_referencework::PRECEDINGWORKID." value='".$model->getPrecedingWorkID()."'  style=' width:".huh_referencework::PRECEDINGWORKID_SIZE ."em;  '  maxlength='".huh_referencework::PRECEDINGWORKID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_referencework::MODIFIEDBYAGENTID." id=".huh_referencework::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_referencework::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_referencework::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::SUCCEEDINGWORKID.">SUCCEEDINGWORKID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_referencework::SUCCEEDINGWORKID." id=".huh_referencework::SUCCEEDINGWORKID." value='".$model->getSucceedingWorkID()."'  style=' width:".huh_referencework::SUCCEEDINGWORKID_SIZE ."em;  '  maxlength='".huh_referencework::SUCCEEDINGWORKID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_referencework::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_referencework::CREATEDBYAGENTID." id=".huh_referencework::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_referencework::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_referencework::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_referencework">';
       $returnvalue .= '<input type=hidden name=ReferenceWorkID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_referencework">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>REFERENCEWORKID<input type=text name=".huh_referencework::REFERENCEWORKID." id=".huh_referencework::REFERENCEWORKID." value='".$model->getReferenceWorkID()."'  size='".huh_referencework::REFERENCEWORKID_SIZE ."'  maxlength='".huh_referencework::REFERENCEWORKID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_referencework::TIMESTAMPCREATED." id=".huh_referencework::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_referencework::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_referencework::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_referencework::TIMESTAMPMODIFIED." id=".huh_referencework::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_referencework::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_referencework::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_referencework::VERSION." id=".huh_referencework::VERSION." value='".$model->getVersion()."'  size='".huh_referencework::VERSION_SIZE ."'  maxlength='".huh_referencework::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GUID<input type=text name=".huh_referencework::GUID." id=".huh_referencework::GUID." value='".$model->getGUID()."'  size='51'  maxlength='".huh_referencework::GUID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISPUBLISHED<input type=text name=".huh_referencework::ISPUBLISHED." id=".huh_referencework::ISPUBLISHED." value='".$model->getIsPublished()."'  size='".huh_referencework::ISPUBLISHED_SIZE ."'  maxlength='".huh_referencework::ISPUBLISHED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISBN<input type=text name=".huh_referencework::ISBN." id=".huh_referencework::ISBN." value='".$model->getISBN()."'  size='".huh_referencework::ISBN_SIZE ."'  maxlength='".huh_referencework::ISBN_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LIBRARYNUMBER<input type=text name=".huh_referencework::LIBRARYNUMBER." id=".huh_referencework::LIBRARYNUMBER." value='".$model->getLibraryNumber()."'  size='".huh_referencework::LIBRARYNUMBER_SIZE ."'  maxlength='".huh_referencework::LIBRARYNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_referencework::NUMBER1." id=".huh_referencework::NUMBER1." value='".$model->getNumber1()."'  size='".huh_referencework::NUMBER1_SIZE ."'  maxlength='".huh_referencework::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_referencework::NUMBER2." id=".huh_referencework::NUMBER2." value='".$model->getNumber2()."'  size='".huh_referencework::NUMBER2_SIZE ."'  maxlength='".huh_referencework::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PAGES<input type=text name=".huh_referencework::PAGES." id=".huh_referencework::PAGES." value='".$model->getPages()."'  size='".huh_referencework::PAGES_SIZE ."'  maxlength='".huh_referencework::PAGES_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PLACEOFPUBLICATION<input type=text name=".huh_referencework::PLACEOFPUBLICATION." id=".huh_referencework::PLACEOFPUBLICATION." value='".$model->getPlaceOfPublication()."'  size='51'  maxlength='".huh_referencework::PLACEOFPUBLICATION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PUBLISHER<input type=text name=".huh_referencework::PUBLISHER." id=".huh_referencework::PUBLISHER." value='".$model->getPublisher()."'  size='51'  maxlength='".huh_referencework::PUBLISHER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REFERENCEWORKTYPE<input type=text name=".huh_referencework::REFERENCEWORKTYPE." id=".huh_referencework::REFERENCEWORKTYPE." value='".$model->getReferenceWorkType()."'  size='".huh_referencework::REFERENCEWORKTYPE_SIZE ."'  maxlength='".huh_referencework::REFERENCEWORKTYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_referencework::REMARKS." id=".huh_referencework::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_referencework::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_referencework::TEXT1." id=".huh_referencework::TEXT1." value='".$model->getText1()."'  size='51'  maxlength='".huh_referencework::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_referencework::TEXT2." id=".huh_referencework::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_referencework::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TITLE<input type=text name=".huh_referencework::TITLE." id=".huh_referencework::TITLE." value='".$model->gettitle()."'  size='51'  maxlength='".huh_referencework::TITLE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>URL<input type=text name=".huh_referencework::URL." id=".huh_referencework::URL." value='".$model->getURL()."'  size='51'  maxlength='".huh_referencework::URL_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VOLUME<input type=text name=".huh_referencework::VOLUME." id=".huh_referencework::VOLUME." value='".$model->getVolume()."'  size='".huh_referencework::VOLUME_SIZE ."'  maxlength='".huh_referencework::VOLUME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>WORKDATE<input type=text name=".huh_referencework::WORKDATE." id=".huh_referencework::WORKDATE." value='".$model->getWorkDate()."'  size='".huh_referencework::WORKDATE_SIZE ."'  maxlength='".huh_referencework::WORKDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_referencework::YESNO1." id=".huh_referencework::YESNO1." value='".$model->getYesNo1()."'  size='".huh_referencework::YESNO1_SIZE ."'  maxlength='".huh_referencework::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_referencework::YESNO2." id=".huh_referencework::YESNO2." value='".$model->getYesNo2()."'  size='".huh_referencework::YESNO2_SIZE ."'  maxlength='".huh_referencework::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>JOURNALID<input type=text name=".huh_referencework::JOURNALID." id=".huh_referencework::JOURNALID." value='".$model->getJournalID()."'  size='".huh_referencework::JOURNALID_SIZE ."'  maxlength='".huh_referencework::JOURNALID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CONTAINEDRFPARENTID<input type=text name=".huh_referencework::CONTAINEDRFPARENTID." id=".huh_referencework::CONTAINEDRFPARENTID." value='".$model->getContainedRFParentID()."'  size='".huh_referencework::CONTAINEDRFPARENTID_SIZE ."'  maxlength='".huh_referencework::CONTAINEDRFPARENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PRECEDINGWORKID<input type=text name=".huh_referencework::PRECEDINGWORKID." id=".huh_referencework::PRECEDINGWORKID." value='".$model->getPrecedingWorkID()."'  size='".huh_referencework::PRECEDINGWORKID_SIZE ."'  maxlength='".huh_referencework::PRECEDINGWORKID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_referencework::MODIFIEDBYAGENTID." id=".huh_referencework::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_referencework::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_referencework::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SUCCEEDINGWORKID<input type=text name=".huh_referencework::SUCCEEDINGWORKID." id=".huh_referencework::SUCCEEDINGWORKID." value='".$model->getSucceedingWorkID()."'  size='".huh_referencework::SUCCEEDINGWORKID_SIZE ."'  maxlength='".huh_referencework::SUCCEEDINGWORKID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_referencework::CREATEDBYAGENTID." id=".huh_referencework::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_referencework::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_referencework::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
