<?php
//==============================================================================
//===   fragment.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_fragment implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const FRAGMENTID_SIZE      = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const COLLECTIONMEMBERID_SIZE = 11; //INTEGER
   const ACCESSIONNUMBER_SIZE = 32; //32
   const DEACCESSIONED_SIZE   = 1; //1
   const DESCRIPTION_SIZE     = 255; //255
   const DISTRIBUTION_SIZE    = 100; //100
   const GUID_SIZE            = 128; //128
   const IDENTIFIER_SIZE      = 32; //32
   const NUMBER1_SIZE         = 11; //INTEGER
   const NUMBER2_SIZE         = 11; //INTEGER
   const PHENOLOGY_SIZE       = 32; //32
   const PREPMETHOD_SIZE      = 32; //32
   const PROVENANCE_SIZE      = 255; //255
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const SEX_SIZE             = 32; //32
   const TEXT1_SIZE           = 255; //LONGVARCHAR
   const TEXT2_SIZE           = 255; //LONGVARCHAR
   const VOUCHER_SIZE         = 255; //255
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const COLLECTIONOBJECTID_SIZE = 11; //INTEGER
   const PREPARATIONID_SIZE   = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const FRAGMENTID        = 'FragmentID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const COLLECTIONMEMBERID = 'CollectionMemberID';
   const ACCESSIONNUMBER   = 'AccessionNumber';
   const DEACCESSIONED     = 'Deaccessioned';
   const DESCRIPTION       = 'Description';
   const DISTRIBUTION      = 'Distribution';
   const GUID              = 'GUID';
   const IDENTIFIER        = 'Identifier';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const PHENOLOGY         = 'Phenology';
   const PREPMETHOD        = 'PrepMethod';
   const PROVENANCE        = 'Provenance';
   const REMARKS           = 'Remarks';
   const SEX               = 'Sex';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const VOUCHER           = 'Voucher';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const COLLECTIONOBJECTID = 'CollectionObjectID';
   const PREPARATIONID     = 'PreparationID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $FragmentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['FragmentID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $CollectionMemberID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionMemberID']), 0, 11);
  $AccessionNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['AccessionNumber']), 0, 32);
  $Deaccessioned = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Deaccessioned']), 0, 1);
  $Description = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Description']), 0, 255);
  $Distribution = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Distribution']), 0, 100);
  $GUID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GUID']), 0, 128);
  $Identifier = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Identifier']), 0, 32);
  $Number1 = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Number1']), 0, 11);
  $Number2 = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Number2']), 0, 11);
  $Phenology = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Phenology']), 0, 32);
  $PrepMethod = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PrepMethod']), 0, 32);
  $Provenance = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Provenance']), 0, 255);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $Sex = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Sex']), 0, 32);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 255);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 255);
  $Voucher = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Voucher']), 0, 255);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $CollectionObjectID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionObjectID']), 0, 11);
  $PreparationID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PreparationID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $FragmentID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $CollectionMemberID; // INTEGER 
   private $AccessionNumber; // VARCHAR(32) 
   private $Deaccessioned; // BIT(1) 
   private $Description; // VARCHAR(255) 
   private $Distribution; // VARCHAR(100) 
   private $GUID; // VARCHAR(128) 
   private $Identifier; // VARCHAR(32) 
   private $Number1; // INTEGER 
   private $Number2; // INTEGER 
   private $Phenology; // VARCHAR(32) 
   private $PrepMethod; // VARCHAR(32) 
   private $Provenance; // VARCHAR(255) 
   private $Remarks; // LONGVARCHAR 
   private $Sex; // VARCHAR(32) 
   private $Text1; // LONGVARCHAR 
   private $Text2; // LONGVARCHAR 
   private $Voucher; // VARCHAR(255) 
   private $YesNo1; // BIT(1) 
   private $YesNo2; // BIT(1) 
   private $ModifiedByAgentID; // INTEGER 
   private $CollectionObjectID; // INTEGER 
   private $PreparationID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' FragmentID, TimestampCreated, TimestampModified, Version, CollectionMemberID, AccessionNumber, Deaccessioned, Description, Distribution, GUID, Identifier, Number1, Number2, Phenology, PrepMethod, Provenance, Remarks, Sex, Text1, Text2, Voucher, YesNo1, YesNo2, ModifiedByAgentID, CollectionObjectID, PreparationID, CreatedByAgentID, ';
   const PKFIELDLIST = ' FragmentID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'FragmentID'  ) ;
   private $allFieldsArray = array( 0 => 'FragmentID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'CollectionMemberID' , 5 => 'AccessionNumber' , 6 => 'Deaccessioned' , 7 => 'Description' , 8 => 'Distribution' , 9 => 'GUID' , 10 => 'Identifier' , 11 => 'Number1' , 12 => 'Number2' , 13 => 'Phenology' , 14 => 'PrepMethod' , 15 => 'Provenance' , 16 => 'Remarks' , 17 => 'Sex' , 18 => 'Text1' , 19 => 'Text2' , 20 => 'Voucher' , 21 => 'YesNo1' , 22 => 'YesNo2' , 23 => 'ModifiedByAgentID' , 24 => 'CollectionObjectID' , 25 => 'PreparationID' , 26 => 'CreatedByAgentID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'CollectionMemberID' , 9 => 'GUID' , 10 => 'Identifier' , 15 => 'Provenance' , 23 => 'ModifiedByAgentID' , 24 => 'CollectionObjectID' , 25 => 'PreparationID' , 26 => 'CreatedByAgentID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_fragment(){
       $this->FragmentID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->CollectionMemberID = '';
       $this->AccessionNumber = '';
       $this->Deaccessioned = '';
       $this->Description = '';
       $this->Distribution = '';
       $this->GUID = '';
       $this->Identifier = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->Phenology = '';
       $this->PrepMethod = '';
       $this->Provenance = '';
       $this->Remarks = '';
       $this->Sex = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->Voucher = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->ModifiedByAgentID = '';
       $this->CollectionObjectID = '';
       $this->PreparationID = '';
       $this->CreatedByAgentID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='FragmentID') { $returnvalue = $this->setFragmentID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->setCollectionMemberID($value); } 
             if ($fieldname=='AccessionNumber') { $returnvalue = $this->setAccessionNumber($value); } 
             if ($fieldname=='Deaccessioned') { $returnvalue = $this->setDeaccessioned($value); } 
             if ($fieldname=='Description') { $returnvalue = $this->setDescription($value); } 
             if ($fieldname=='Distribution') { $returnvalue = $this->setDistribution($value); } 
             if ($fieldname=='GUID') { $returnvalue = $this->setGUID($value); } 
             if ($fieldname=='Identifier') { $returnvalue = $this->setIdentifier($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='Phenology') { $returnvalue = $this->setPhenology($value); } 
             if ($fieldname=='PrepMethod') { $returnvalue = $this->setPrepMethod($value); } 
             if ($fieldname=='Provenance') { $returnvalue = $this->setProvenance($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='Sex') { $returnvalue = $this->setSex($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='Voucher') { $returnvalue = $this->setVoucher($value); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='CollectionObjectID') { $returnvalue = $this->setCollectionObjectID($value); } 
             if ($fieldname=='PreparationID') { $returnvalue = $this->setPreparationID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='FragmentID') { $returnvalue = $this->getFragmentID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->getCollectionMemberID(); } 
             if ($fieldname=='AccessionNumber') { $returnvalue = $this->getAccessionNumber(); } 
             if ($fieldname=='Deaccessioned') { $returnvalue = $this->getDeaccessioned(); } 
             if ($fieldname=='Description') { $returnvalue = $this->getDescription(); } 
             if ($fieldname=='Distribution') { $returnvalue = $this->getDistribution(); } 
             if ($fieldname=='GUID') { $returnvalue = $this->getGUID(); } 
             if ($fieldname=='Identifier') { $returnvalue = $this->getIdentifier(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='Phenology') { $returnvalue = $this->getPhenology(); } 
             if ($fieldname=='PrepMethod') { $returnvalue = $this->getPrepMethod(); } 
             if ($fieldname=='Provenance') { $returnvalue = $this->getProvenance(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='Sex') { $returnvalue = $this->getSex(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='Voucher') { $returnvalue = $this->getVoucher(); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='CollectionObjectID') { $returnvalue = $this->getCollectionObjectID(); } 
             if ($fieldname=='PreparationID') { $returnvalue = $this->getPreparationID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*FragmentID*/
   public function getFragmentID() {
       if ($this->FragmentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FragmentID));
       }
   }
   public function setFragmentID($FragmentID) {
       if (strlen(preg_replace('/[^0-9]/','',$FragmentID)) > huh_fragment::FRAGMENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $FragmentID = trim($FragmentID);
       if (!ctype_digit(strval($FragmentID)) && trim(strval($FragmentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->FragmentID = $this->l_addslashes($FragmentID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_fragment::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_fragment::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_fragment::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*CollectionMemberID*/
   public function getCollectionMemberID() {
       if ($this->CollectionMemberID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionMemberID));
       }
   }
   public function setCollectionMemberID($CollectionMemberID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionMemberID)) > huh_fragment::COLLECTIONMEMBERID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectionMemberID = trim($CollectionMemberID);
       if (!ctype_digit(strval($CollectionMemberID))) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionMemberID = $this->l_addslashes($CollectionMemberID);
       $this->dirty = true;
   }
/*AccessionNumber*/
   public function getAccessionNumber() {
       if ($this->AccessionNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AccessionNumber));
       }
   }
   public function setAccessionNumber($AccessionNumber) {
       if (strlen($AccessionNumber) > huh_fragment::ACCESSIONNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->AccessionNumber = $this->l_addslashes($AccessionNumber);
       $this->dirty = true;
   }
/*Deaccessioned*/
   public function getDeaccessioned() {
       if ($this->Deaccessioned==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Deaccessioned));
       }
   }
   public function setDeaccessioned($Deaccessioned) {
       if (strlen($Deaccessioned) > huh_fragment::DEACCESSIONED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Deaccessioned = $this->l_addslashes($Deaccessioned);
       $this->dirty = true;
   }
/*Description*/
   public function getDescription() {
       if ($this->Description==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Description));
       }
   }
   public function setDescription($Description) {
       if (strlen($Description) > huh_fragment::DESCRIPTION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Description = $this->l_addslashes($Description);
       $this->dirty = true;
   }
/*Distribution*/
   public function getDistribution() {
       if ($this->Distribution==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Distribution));
       }
   }
   public function setDistribution($Distribution) {
       if (strlen($Distribution) > huh_fragment::DISTRIBUTION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Distribution = $this->l_addslashes($Distribution);
       $this->dirty = true;
   }
/*GUID*/
   public function getGUID() {
       if ($this->GUID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GUID));
       }
   }
   public function setGUID($GUID) {
       if (strlen($GUID) > huh_fragment::GUID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GUID = $this->l_addslashes($GUID);
       $this->dirty = true;
   }
/*Identifier*/
   public function getIdentifier() {
       if ($this->Identifier==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Identifier));
       }
   }
   public function setIdentifier($Identifier) {
       if (strlen($Identifier) > huh_fragment::IDENTIFIER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Identifier = $this->l_addslashes($Identifier);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen(preg_replace('/[^0-9]/','',$Number1)) > huh_fragment::NUMBER1_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Number1 = trim($Number1);
       if (!ctype_digit(strval($Number1)) && trim(strval($Number1))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen(preg_replace('/[^0-9]/','',$Number2)) > huh_fragment::NUMBER2_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Number2 = trim($Number2);
       if (!ctype_digit(strval($Number2)) && trim(strval($Number2))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*Phenology*/
   public function getPhenology() {
       if ($this->Phenology==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Phenology));
       }
   }
   public function setPhenology($Phenology) {
       if (strlen($Phenology) > huh_fragment::PHENOLOGY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Phenology = $this->l_addslashes($Phenology);
       $this->dirty = true;
   }
/*PrepMethod*/
   public function getPrepMethod() {
       if ($this->PrepMethod==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PrepMethod));
       }
   }
   public function setPrepMethod($PrepMethod) {
       if (strlen($PrepMethod) > huh_fragment::PREPMETHOD_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PrepMethod = $this->l_addslashes($PrepMethod);
       $this->dirty = true;
   }
/*Provenance*/
   public function getProvenance() {
       if ($this->Provenance==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Provenance));
       }
   }
   public function setProvenance($Provenance) {
       if (strlen($Provenance) > huh_fragment::PROVENANCE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Provenance = $this->l_addslashes($Provenance);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_fragment::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*Sex*/
   public function getSex() {
       if ($this->Sex==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Sex));
       }
   }
   public function setSex($Sex) {
       if (strlen($Sex) > huh_fragment::SEX_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Sex = $this->l_addslashes($Sex);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_fragment::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_fragment::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*Voucher*/
   public function getVoucher() {
       if ($this->Voucher==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Voucher));
       }
   }
   public function setVoucher($Voucher) {
       if (strlen($Voucher) > huh_fragment::VOUCHER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Voucher = $this->l_addslashes($Voucher);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_fragment::YESNO1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_fragment::YESNO2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_fragment::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*CollectionObjectID*/
   public function getCollectionObjectID() {
       if ($this->CollectionObjectID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionObjectID));
       }
   }
   public function setCollectionObjectID($CollectionObjectID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionObjectID)) > huh_fragment::COLLECTIONOBJECTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectionObjectID = trim($CollectionObjectID);
       if (!ctype_digit(strval($CollectionObjectID)) && trim(strval($CollectionObjectID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionObjectID = $this->l_addslashes($CollectionObjectID);
       $this->dirty = true;
   }
/*PreparationID*/
   public function getPreparationID() {
       if ($this->PreparationID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PreparationID));
       }
   }
   public function setPreparationID($PreparationID) {
       if (strlen(preg_replace('/[^0-9]/','',$PreparationID)) > huh_fragment::PREPARATIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PreparationID = trim($PreparationID);
       if (!ctype_digit(strval($PreparationID)) && trim(strval($PreparationID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PreparationID = $this->l_addslashes($PreparationID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_fragment::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getFragmentID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['FragmentID'] = $this->getFragmentID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_FragmentIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_CollectionMemberIDMYSQLI_TYPE = 'i';
  const C_AccessionNumberMYSQLI_TYPE = 's';
  const C_DeaccessionedMYSQLI_TYPE = 'i';
  const C_DescriptionMYSQLI_TYPE = 's';
  const C_DistributionMYSQLI_TYPE = 's';
  const C_GUIDMYSQLI_TYPE = 's';
  const C_IdentifierMYSQLI_TYPE = 's';
  const C_Number1MYSQLI_TYPE = 'i';
  const C_Number2MYSQLI_TYPE = 'i';
  const C_PhenologyMYSQLI_TYPE = 's';
  const C_PrepMethodMYSQLI_TYPE = 's';
  const C_ProvenanceMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_SexMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_VoucherMYSQLI_TYPE = 's';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_CollectionObjectIDMYSQLI_TYPE = 'i';
  const C_PreparationIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='FragmentID') { $retval = self::C_FragmentIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='CollectionMemberID') { $retval = self::C_CollectionMemberIDMYSQLI_TYPE; }
      if ($aFieldname=='AccessionNumber') { $retval = self::C_AccessionNumberMYSQLI_TYPE; }
      if ($aFieldname=='Deaccessioned') { $retval = self::C_DeaccessionedMYSQLI_TYPE; }
      if ($aFieldname=='Description') { $retval = self::C_DescriptionMYSQLI_TYPE; }
      if ($aFieldname=='Distribution') { $retval = self::C_DistributionMYSQLI_TYPE; }
      if ($aFieldname=='GUID') { $retval = self::C_GUIDMYSQLI_TYPE; }
      if ($aFieldname=='Identifier') { $retval = self::C_IdentifierMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='Phenology') { $retval = self::C_PhenologyMYSQLI_TYPE; }
      if ($aFieldname=='PrepMethod') { $retval = self::C_PrepMethodMYSQLI_TYPE; }
      if ($aFieldname=='Provenance') { $retval = self::C_ProvenanceMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='Sex') { $retval = self::C_SexMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='Voucher') { $retval = self::C_VoucherMYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='CollectionObjectID') { $retval = self::C_CollectionObjectIDMYSQLI_TYPE; }
      if ($aFieldname=='PreparationID') { $retval = self::C_PreparationIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setFragmentID($pk[FragmentID]);
             } else { ;
                 $this->setFragmentID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->FragmentID != NULL) {
           $sql = 'SELECT FragmentID, TimestampCreated, TimestampModified, Version, CollectionMemberID, AccessionNumber, Deaccessioned, Description, Distribution, GUID, Identifier, Number1, Number2, Phenology, PrepMethod, Provenance, Remarks, Sex, Text1, Text2, Voucher, YesNo1, YesNo2, ModifiedByAgentID, CollectionObjectID, PreparationID, CreatedByAgentID FROM fragment WHERE FragmentID = '.$this->FragmentID ;

           $preparesql = 'SELECT FragmentID, TimestampCreated, TimestampModified, Version, CollectionMemberID, AccessionNumber, Deaccessioned, Description, Distribution, GUID, Identifier, Number1, Number2, Phenology, PrepMethod, Provenance, Remarks, Sex, Text1, Text2, Voucher, YesNo1, YesNo2, ModifiedByAgentID, CollectionObjectID, PreparationID, CreatedByAgentID FROM fragment WHERE FragmentID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->FragmentID);
              $statement->execute();
              $statement->bind_result($this->FragmentID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->AccessionNumber, $this->Deaccessioned, $this->Description, $this->Distribution, $this->GUID, $this->Identifier, $this->Number1, $this->Number2, $this->Phenology, $this->PrepMethod, $this->Provenance, $this->Remarks, $this->Sex, $this->Text1, $this->Text2, $this->Voucher, $this->YesNo1, $this->YesNo2, $this->ModifiedByAgentID, $this->CollectionObjectID, $this->PreparationID, $this->CreatedByAgentID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->FragmentID!= NULL) {
            $sql  = 'UPDATE  fragment SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", CollectionMemberID = ? ";
            $sql .=  ", AccessionNumber = ? ";
            $sql .=  ", Deaccessioned = ? ";
            $sql .=  ", Description = ? ";
            $sql .=  ", Distribution = ? ";
            $sql .=  ", GUID = ? ";
            $sql .=  ", Identifier = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", Phenology = ? ";
            $sql .=  ", PrepMethod = ? ";
            $sql .=  ", Provenance = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", Sex = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", Voucher = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", CollectionObjectID = ? ";
            $sql .=  ", PreparationID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";

            $sql .= "  WHERE FragmentID = ? ";
        } else {
            $sql  = 'INSERT INTO fragment ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( FragmentID ,  TimestampCreated ,  TimestampModified ,  Version ,  CollectionMemberID ,  AccessionNumber ,  Deaccessioned ,  Description ,  Distribution ,  GUID ,  Identifier ,  Number1 ,  Number2 ,  Phenology ,  PrepMethod ,  Provenance ,  Remarks ,  Sex ,  Text1 ,  Text2 ,  Voucher ,  YesNo1 ,  YesNo2 ,  ModifiedByAgentID ,  CollectionObjectID ,  PreparationID ,  CreatedByAgentID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->FragmentID!= NULL ) {
              $statement->bind_param("issiisissssiissssssssiiiiiii", $this->FragmentID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->AccessionNumber , $this->Deaccessioned , $this->Description , $this->Distribution , $this->GUID , $this->Identifier , $this->Number1 , $this->Number2 , $this->Phenology , $this->PrepMethod , $this->Provenance , $this->Remarks , $this->Sex , $this->Text1 , $this->Text2 , $this->Voucher , $this->YesNo1 , $this->YesNo2 , $this->ModifiedByAgentID , $this->CollectionObjectID , $this->PreparationID , $this->CreatedByAgentID , $this->FragmentID );
           } else { 
              $statement->bind_param("issiisissssiissssssssiiiiii", $this->FragmentID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->AccessionNumber , $this->Deaccessioned , $this->Description , $this->Distribution , $this->GUID , $this->Identifier , $this->Number1 , $this->Number2 , $this->Phenology , $this->PrepMethod , $this->Provenance , $this->Remarks , $this->Sex , $this->Text1 , $this->Text2 , $this->Voucher , $this->YesNo1 , $this->YesNo2 , $this->ModifiedByAgentID , $this->CollectionObjectID , $this->PreparationID , $this->CreatedByAgentID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->FragmentID != NULL) {
           $sql = 'SELECT FragmentID, TimestampCreated, TimestampModified, Version, CollectionMemberID, AccessionNumber, Deaccessioned, Description, Distribution, GUID, Identifier, Number1, Number2, Phenology, PrepMethod, Provenance, Remarks, Sex, Text1, Text2, Voucher, YesNo1, YesNo2, ModifiedByAgentID, CollectionObjectID, PreparationID, CreatedByAgentID FROM fragment WHERE FragmentID = "'.$this->FragmentID.'"  ' ;

           $preparedsql = 'SELECT  FROM fragment WHERE  and FragmentID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issiisissssiissssssssiiiiii", $this->FragmentID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->AccessionNumber, $this->Deaccessioned, $this->Description, $this->Distribution, $this->GUID, $this->Identifier, $this->Number1, $this->Number2, $this->Phenology, $this->PrepMethod, $this->Provenance, $this->Remarks, $this->Sex, $this->Text1, $this->Text2, $this->Voucher, $this->YesNo1, $this->YesNo2, $this->ModifiedByAgentID, $this->CollectionObjectID, $this->PreparationID, $this->CreatedByAgentID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM fragment WHERE  and FragmentID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issiisissssiissssssssiiiiii", $this->FragmentID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->AccessionNumber, $this->Deaccessioned, $this->Description, $this->Distribution, $this->GUID, $this->Identifier, $this->Number1, $this->Number2, $this->Phenology, $this->PrepMethod, $this->Provenance, $this->Remarks, $this->Sex, $this->Text1, $this->Text2, $this->Voucher, $this->YesNo1, $this->YesNo2, $this->ModifiedByAgentID, $this->CollectionObjectID, $this->PreparationID, $this->CreatedByAgentID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->FragmentID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM fragment';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT FragmentID FROM fragment $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_fragment();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromcollectionrelationship() { 
      // ForeignKey in: collectionrelationship
      $t = new collectionrelationship();
  } 
  public function loadLinkedFromdetermination() { 
      // ForeignKey in: determination
      $t = new determination();
  } 
  public function loadLinkedFromfragmentattachment() { 
      // ForeignKey in: fragmentattachment
      $t = new fragmentattachment();
  } 
  public function loadLinkedFromfragmentcitation() { 
      // ForeignKey in: fragmentcitation
      $t = new fragmentcitation();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: ModifiedByAgentID
      $t = new huh_agent();
      $t->load($this->getModifiedByAgentID());
      $returnvalue['ModifiedByAgentID'] = $t;
       // fk: CollectionObjectID
      $t = new huh_collectionobject();
      $t->load($this->getCollectionObjectID());
      $returnvalue['CollectionObjectID'] = $t;
       // fk: PreparationID
      $t = new huh_preparation();
      $t->load($this->getPreparationID());
      $returnvalue['PreparationID'] = $t;
       // fk: CreatedByAgentID
      $t = new huh_agent();
      $t->load($this->getCreatedByAgentID());
      $returnvalue['CreatedByAgentID'] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT FragmentID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(CollectionMemberID,'') || ' ' || IFNULL(AccessionNumber,'') || ' ' || IFNULL(Deaccessioned,'') || ' ' || IFNULL(Description,'') || ' ' || IFNULL(Distribution,'') || ' ' || IFNULL(GUID,'') || ' ' || IFNULL(Identifier,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(Phenology,'') || ' ' || IFNULL(PrepMethod,'') || ' ' || IFNULL(Provenance,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(Sex,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(Voucher,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(CollectionObjectID,'') || ' ' || IFNULL(PreparationID,'') || ' ' || IFNULL(CreatedByAgentID,'')) FROM fragment order by CollectionMemberID, GUID, Identifier, Provenance, ModifiedByAgentID, CollectionObjectID, PreparationID, CreatedByAgentID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM fragment order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCollectionMemberID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT FragmentID FROM fragment WHERE CollectionMemberID $operator '$searchTerm'";
        $preparedsql = "SELECT FragmentID FROM fragment WHERE CollectionMemberID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_fragment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGUID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT FragmentID FROM fragment WHERE GUID $operator '$searchTerm'";
        $preparedsql = "SELECT FragmentID FROM fragment WHERE GUID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_fragment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByIdentifier($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $preparedsql = "SELECT FragmentID FROM fragment WHERE Identifier $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            $statement->store_result();
            while ($statement->fetch()) { ;
                $obj = new huh_fragment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByProvenance($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT FragmentID FROM fragment WHERE Provenance $operator '$searchTerm'";
        $preparedsql = "SELECT FragmentID FROM fragment WHERE Provenance $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            $statement->store_result();
            while ($statement->fetch()) { ;
                $obj = new huh_fragment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT FragmentID FROM fragment WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT FragmentID FROM fragment WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_fragment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCollectionObjectID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT FragmentID FROM fragment WHERE CollectionObjectID $operator '$searchTerm'";
        $preparedsql = "SELECT FragmentID FROM fragment WHERE CollectionObjectID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_fragment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPreparationID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT FragmentID FROM fragment WHERE PreparationID $operator '$searchTerm'";
        $preparedsql = "SELECT FragmentID FROM fragment WHERE PreparationID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_fragment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT FragmentID FROM fragment WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT FragmentID FROM fragment WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_fragment();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCollectionMemberID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionMemberID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectionMemberID FROM fragment group by CollectionMemberID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectionMemberID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGUID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GUID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GUID FROM fragment group by GUID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GUID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctIdentifier($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Identifier ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Identifier FROM fragment group by Identifier order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Identifier=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctProvenance($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Provenance ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Provenance FROM fragment group by Provenance order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Provenance=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM fragment group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCollectionObjectID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionObjectID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectionObjectID FROM fragment group by CollectionObjectID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectionObjectID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPreparationID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' PreparationID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, PreparationID FROM fragment group by PreparationID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&PreparationID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM fragment group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'CollectionMemberID':
             $returnvalue = $this->selectDistinctCollectionMemberID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GUID':
             $returnvalue = $this->selectDistinctGUID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'Identifier':
             $returnvalue = $this->selectDistinctIdentifier($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'Provenance':
             $returnvalue = $this->selectDistinctProvenance($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CollectionObjectID':
             $returnvalue = $this->selectDistinctCollectionObjectID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'PreparationID':
             $returnvalue = $this->selectDistinctPreparationID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the fragment.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_fragmentView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_fragment <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_fragment::FRAGMENTID.": ".$model->getFragmentID()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::COLLECTIONMEMBERID.": ".$model->getCollectionMemberID()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::ACCESSIONNUMBER.": ".$model->getAccessionNumber()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::DEACCESSIONED.": ".$model->getDeaccessioned()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::DESCRIPTION.": ".$model->getDescription()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::DISTRIBUTION.": ".$model->getDistribution()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::GUID.": ".$model->getGUID()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::IDENTIFIER.": ".$model->getIdentifier()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::PHENOLOGY.": ".$model->getPhenology()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::PREPMETHOD.": ".$model->getPrepMethod()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::PROVENANCE.": ".$model->getProvenance()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::SEX.": ".$model->getSex()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::VOUCHER.": ".$model->getVoucher()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::COLLECTIONOBJECTID.": ".$model->getCollectionObjectID()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::PREPARATIONID.": ".$model->getPreparationID()."</li>\n";
       $returnvalue .= "<li>".huh_fragment::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>collectionobject</li>";
           $t_collectionobject = new huh_collectionobject();
           $t_collectionobjectView = new huh_collectionobjectView();
           $t_collectionobjectView->setModel($t_collectionobject);
           if ($model->getCollectionObjectID() != '') { 
               $t_collectionobject->load($model->getCollectionObjectID());
               $returnvalue .= $t_collectionobjectView->getDetailsView(false);
           }
           $returnvalue .= "<li>preparation</li>";
           $t_preparation = new huh_preparation();
           $t_preparationView = new huh_preparationView();
           $t_preparationView->setModel($t_preparation);
           if ($model->getPreparationID() != '') { 
               $t_preparation->load($model->getPreparationID());
               $returnvalue .= $t_preparationView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_fragment::FRAGMENTID.': "'.$model->getFragmentID().'",';
       $returnvalue .= '"'.huh_fragment::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_fragment::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_fragment::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_fragment::COLLECTIONMEMBERID.': "'.$model->getCollectionMemberID().'",';
       $returnvalue .= '"'.huh_fragment::ACCESSIONNUMBER.': "'.$model->getAccessionNumber().'",';
       $returnvalue .= '"'.huh_fragment::DEACCESSIONED.': "'.$model->getDeaccessioned().'",';
       $returnvalue .= '"'.huh_fragment::DESCRIPTION.': "'.$model->getDescription().'",';
       $returnvalue .= '"'.huh_fragment::DISTRIBUTION.': "'.$model->getDistribution().'",';
       $returnvalue .= '"'.huh_fragment::GUID.': "'.$model->getGUID().'",';
       $returnvalue .= '"'.huh_fragment::IDENTIFIER.': "'.$model->getIdentifier().'",';
       $returnvalue .= '"'.huh_fragment::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_fragment::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_fragment::PHENOLOGY.': "'.$model->getPhenology().'",';
       $returnvalue .= '"'.huh_fragment::PREPMETHOD.': "'.$model->getPrepMethod().'",';
       $returnvalue .= '"'.huh_fragment::PROVENANCE.': "'.$model->getProvenance().'",';
       $returnvalue .= '"'.huh_fragment::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_fragment::SEX.': "'.$model->getSex().'",';
       $returnvalue .= '"'.huh_fragment::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_fragment::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_fragment::VOUCHER.': "'.$model->getVoucher().'",';
       $returnvalue .= '"'.huh_fragment::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_fragment::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_fragment::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_fragment::COLLECTIONOBJECTID.': "'.$model->getCollectionObjectID().'",';
       $returnvalue .= '"'.huh_fragment::PREPARATIONID.': "'.$model->getPreparationID().'",';
       $returnvalue .= '"'.huh_fragment::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getFragmentID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionMemberID()."</td>\n";
       $returnvalue .= "<td>".$model->getAccessionNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getDeaccessioned()."</td>\n";
       $returnvalue .= "<td>".$model->getDescription()."</td>\n";
       $returnvalue .= "<td>".$model->getDistribution()."</td>\n";
       $returnvalue .= "<td>".$model->getGUID()."</td>\n";
       $returnvalue .= "<td>".$model->getIdentifier()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getPhenology()."</td>\n";
       $returnvalue .= "<td>".$model->getPrepMethod()."</td>\n";
       $returnvalue .= "<td>".$model->getProvenance()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getSex()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getVoucher()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionObjectID()."</td>\n";
       $returnvalue .= "<td>".$model->getPreparationID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_fragment::FRAGMENTID."</th>\n";
       $returnvalue .= "<th>".huh_fragment::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_fragment::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_fragment::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_fragment::COLLECTIONMEMBERID."</th>\n";
       $returnvalue .= "<th>".huh_fragment::ACCESSIONNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_fragment::DEACCESSIONED."</th>\n";
       $returnvalue .= "<th>".huh_fragment::DESCRIPTION."</th>\n";
       $returnvalue .= "<th>".huh_fragment::DISTRIBUTION."</th>\n";
       $returnvalue .= "<th>".huh_fragment::GUID."</th>\n";
       $returnvalue .= "<th>".huh_fragment::IDENTIFIER."</th>\n";
       $returnvalue .= "<th>".huh_fragment::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_fragment::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_fragment::PHENOLOGY."</th>\n";
       $returnvalue .= "<th>".huh_fragment::PREPMETHOD."</th>\n";
       $returnvalue .= "<th>".huh_fragment::PROVENANCE."</th>\n";
       $returnvalue .= "<th>".huh_fragment::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_fragment::SEX."</th>\n";
       $returnvalue .= "<th>".huh_fragment::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_fragment::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_fragment::VOUCHER."</th>\n";
       $returnvalue .= "<th>".huh_fragment::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_fragment::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_fragment::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_fragment::COLLECTIONOBJECTID."</th>\n";
       $returnvalue .= "<th>".huh_fragment::PREPARATIONID."</th>\n";
       $returnvalue .= "<th>".huh_fragment::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_fragment">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new FragmentID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_fragment::FRAGMENTID.">FRAGMENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_fragment::FRAGMENTID." id=".huh_fragment::FRAGMENTID." value='".$model->getFragmentID()."'  style=' width:".huh_fragment::FRAGMENTID_SIZE ."em;  '  maxlength='".huh_fragment::FRAGMENTID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_fragment::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_fragment::TIMESTAMPCREATED." id=".huh_fragment::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_fragment::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_fragment::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_fragment::TIMESTAMPMODIFIED." id=".huh_fragment::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_fragment::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_fragment::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_fragment::VERSION." id=".huh_fragment::VERSION." value='".$model->getVersion()."'  style=' width:".huh_fragment::VERSION_SIZE ."em;  '  maxlength='".huh_fragment::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::COLLECTIONMEMBERID.">COLLECTIONMEMBERID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_fragment::COLLECTIONMEMBERID." id=".huh_fragment::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  style=' width:".huh_fragment::COLLECTIONMEMBERID_SIZE ."em;  '  maxlength='".huh_fragment::COLLECTIONMEMBERID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::ACCESSIONNUMBER.">ACCESSIONNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_fragment::ACCESSIONNUMBER." id=".huh_fragment::ACCESSIONNUMBER." value='".$model->getAccessionNumber()."'  style=' width:".huh_fragment::ACCESSIONNUMBER_SIZE ."em;  '  maxlength='".huh_fragment::ACCESSIONNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::DEACCESSIONED.">DEACCESSIONED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_fragment::DEACCESSIONED." id=".huh_fragment::DEACCESSIONED." value='".$model->getDeaccessioned()."'  style=' width:".huh_fragment::DEACCESSIONED_SIZE ."em;  '  maxlength='".huh_fragment::DEACCESSIONED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::DESCRIPTION.">DESCRIPTION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_fragment::DESCRIPTION." id=".huh_fragment::DESCRIPTION." >".$model->getDescription()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::DISTRIBUTION.">DISTRIBUTION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_fragment::DISTRIBUTION." id=".huh_fragment::DISTRIBUTION." >".$model->getDistribution()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::GUID.">GUID</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_fragment::GUID." id=".huh_fragment::GUID." >".$model->getGUID()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::IDENTIFIER.">IDENTIFIER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_fragment::IDENTIFIER." id=".huh_fragment::IDENTIFIER." value='".$model->getIdentifier()."'  style=' width:".huh_fragment::IDENTIFIER_SIZE ."em;  '  maxlength='".huh_fragment::IDENTIFIER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_fragment::NUMBER1." id=".huh_fragment::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_fragment::NUMBER1_SIZE ."em;  '  maxlength='".huh_fragment::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_fragment::NUMBER2." id=".huh_fragment::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_fragment::NUMBER2_SIZE ."em;  '  maxlength='".huh_fragment::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::PHENOLOGY.">PHENOLOGY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_fragment::PHENOLOGY." id=".huh_fragment::PHENOLOGY." value='".$model->getPhenology()."'  style=' width:".huh_fragment::PHENOLOGY_SIZE ."em;  '  maxlength='".huh_fragment::PHENOLOGY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::PREPMETHOD.">PREPMETHOD</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_fragment::PREPMETHOD." id=".huh_fragment::PREPMETHOD." value='".$model->getPrepMethod()."'  style=' width:".huh_fragment::PREPMETHOD_SIZE ."em;  '  maxlength='".huh_fragment::PREPMETHOD_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::PROVENANCE.">PROVENANCE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_fragment::PROVENANCE." id=".huh_fragment::PROVENANCE." >".$model->getProvenance()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_fragment::REMARKS." id=".huh_fragment::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::SEX.">SEX</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_fragment::SEX." id=".huh_fragment::SEX." value='".$model->getSex()."'  style=' width:".huh_fragment::SEX_SIZE ."em;  '  maxlength='".huh_fragment::SEX_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::TEXT1.">TEXT1</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_fragment::TEXT1." id=".huh_fragment::TEXT1." >".$model->getText1()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_fragment::TEXT2." id=".huh_fragment::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::VOUCHER.">VOUCHER</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_fragment::VOUCHER." id=".huh_fragment::VOUCHER." >".$model->getVoucher()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_fragment::YESNO1." id=".huh_fragment::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_fragment::YESNO1_SIZE ."em;  '  maxlength='".huh_fragment::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_fragment::YESNO2." id=".huh_fragment::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_fragment::YESNO2_SIZE ."em;  '  maxlength='".huh_fragment::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_fragment::MODIFIEDBYAGENTID." id=".huh_fragment::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_fragment::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_fragment::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::COLLECTIONOBJECTID.">COLLECTIONOBJECTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_fragment::COLLECTIONOBJECTID." id=".huh_fragment::COLLECTIONOBJECTID." value='".$model->getCollectionObjectID()."'  style=' width:".huh_fragment::COLLECTIONOBJECTID_SIZE ."em;  '  maxlength='".huh_fragment::COLLECTIONOBJECTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::PREPARATIONID.">PREPARATIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_fragment::PREPARATIONID." id=".huh_fragment::PREPARATIONID." value='".$model->getPreparationID()."'  style=' width:".huh_fragment::PREPARATIONID_SIZE ."em;  '  maxlength='".huh_fragment::PREPARATIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_fragment::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_fragment::CREATEDBYAGENTID." id=".huh_fragment::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_fragment::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_fragment::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_fragment">';
       $returnvalue .= '<input type=hidden name=FragmentID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_fragment">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>FRAGMENTID<input type=text name=".huh_fragment::FRAGMENTID." id=".huh_fragment::FRAGMENTID." value='".$model->getFragmentID()."'  size='".huh_fragment::FRAGMENTID_SIZE ."'  maxlength='".huh_fragment::FRAGMENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_fragment::TIMESTAMPCREATED." id=".huh_fragment::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_fragment::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_fragment::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_fragment::TIMESTAMPMODIFIED." id=".huh_fragment::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_fragment::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_fragment::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_fragment::VERSION." id=".huh_fragment::VERSION." value='".$model->getVersion()."'  size='".huh_fragment::VERSION_SIZE ."'  maxlength='".huh_fragment::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONMEMBERID<input type=text name=".huh_fragment::COLLECTIONMEMBERID." id=".huh_fragment::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  size='".huh_fragment::COLLECTIONMEMBERID_SIZE ."'  maxlength='".huh_fragment::COLLECTIONMEMBERID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ACCESSIONNUMBER<input type=text name=".huh_fragment::ACCESSIONNUMBER." id=".huh_fragment::ACCESSIONNUMBER." value='".$model->getAccessionNumber()."'  size='".huh_fragment::ACCESSIONNUMBER_SIZE ."'  maxlength='".huh_fragment::ACCESSIONNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DEACCESSIONED<input type=text name=".huh_fragment::DEACCESSIONED." id=".huh_fragment::DEACCESSIONED." value='".$model->getDeaccessioned()."'  size='".huh_fragment::DEACCESSIONED_SIZE ."'  maxlength='".huh_fragment::DEACCESSIONED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DESCRIPTION<input type=text name=".huh_fragment::DESCRIPTION." id=".huh_fragment::DESCRIPTION." value='".$model->getDescription()."'  size='51'  maxlength='".huh_fragment::DESCRIPTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISTRIBUTION<input type=text name=".huh_fragment::DISTRIBUTION." id=".huh_fragment::DISTRIBUTION." value='".$model->getDistribution()."'  size='51'  maxlength='".huh_fragment::DISTRIBUTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GUID<input type=text name=".huh_fragment::GUID." id=".huh_fragment::GUID." value='".$model->getGUID()."'  size='51'  maxlength='".huh_fragment::GUID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>IDENTIFIER<input type=text name=".huh_fragment::IDENTIFIER." id=".huh_fragment::IDENTIFIER." value='".$model->getIdentifier()."'  size='".huh_fragment::IDENTIFIER_SIZE ."'  maxlength='".huh_fragment::IDENTIFIER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_fragment::NUMBER1." id=".huh_fragment::NUMBER1." value='".$model->getNumber1()."'  size='".huh_fragment::NUMBER1_SIZE ."'  maxlength='".huh_fragment::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_fragment::NUMBER2." id=".huh_fragment::NUMBER2." value='".$model->getNumber2()."'  size='".huh_fragment::NUMBER2_SIZE ."'  maxlength='".huh_fragment::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PHENOLOGY<input type=text name=".huh_fragment::PHENOLOGY." id=".huh_fragment::PHENOLOGY." value='".$model->getPhenology()."'  size='".huh_fragment::PHENOLOGY_SIZE ."'  maxlength='".huh_fragment::PHENOLOGY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PREPMETHOD<input type=text name=".huh_fragment::PREPMETHOD." id=".huh_fragment::PREPMETHOD." value='".$model->getPrepMethod()."'  size='".huh_fragment::PREPMETHOD_SIZE ."'  maxlength='".huh_fragment::PREPMETHOD_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PROVENANCE<input type=text name=".huh_fragment::PROVENANCE." id=".huh_fragment::PROVENANCE." value='".$model->getProvenance()."'  size='51'  maxlength='".huh_fragment::PROVENANCE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_fragment::REMARKS." id=".huh_fragment::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_fragment::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SEX<input type=text name=".huh_fragment::SEX." id=".huh_fragment::SEX." value='".$model->getSex()."'  size='".huh_fragment::SEX_SIZE ."'  maxlength='".huh_fragment::SEX_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_fragment::TEXT1." id=".huh_fragment::TEXT1." value='".$model->getText1()."'  size='51'  maxlength='".huh_fragment::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_fragment::TEXT2." id=".huh_fragment::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_fragment::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VOUCHER<input type=text name=".huh_fragment::VOUCHER." id=".huh_fragment::VOUCHER." value='".$model->getVoucher()."'  size='51'  maxlength='".huh_fragment::VOUCHER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_fragment::YESNO1." id=".huh_fragment::YESNO1." value='".$model->getYesNo1()."'  size='".huh_fragment::YESNO1_SIZE ."'  maxlength='".huh_fragment::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_fragment::YESNO2." id=".huh_fragment::YESNO2." value='".$model->getYesNo2()."'  size='".huh_fragment::YESNO2_SIZE ."'  maxlength='".huh_fragment::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_fragment::MODIFIEDBYAGENTID." id=".huh_fragment::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_fragment::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_fragment::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONOBJECTID<input type=text name=".huh_fragment::COLLECTIONOBJECTID." id=".huh_fragment::COLLECTIONOBJECTID." value='".$model->getCollectionObjectID()."'  size='".huh_fragment::COLLECTIONOBJECTID_SIZE ."'  maxlength='".huh_fragment::COLLECTIONOBJECTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PREPARATIONID<input type=text name=".huh_fragment::PREPARATIONID." id=".huh_fragment::PREPARATIONID." value='".$model->getPreparationID()."'  size='".huh_fragment::PREPARATIONID_SIZE ."'  maxlength='".huh_fragment::PREPARATIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_fragment::CREATEDBYAGENTID." id=".huh_fragment::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_fragment::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_fragment::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>