<?php
//==============================================================================
//===   localitydetail.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_localitydetail implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const LOCALITYDETAILID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const BASEMERIDIAN_SIZE    = 20; //YEAR
   const DRAINAGE_SIZE        = 64; //64
   const GML_SIZE             = 255; //LONGVARCHAR
   const HUCCODE_SIZE         = 16; //16
   const ISLAND_SIZE          = 64; //64
   const ISLANDGROUP_SIZE     = 64; //64
   const NATIONALPARKNAME_SIZE = 64; //64
   const NUMBER1_SIZE         = 24; //DOUBLE
   const NUMBER2_SIZE         = 24; //DOUBLE
   const RANGEDESC_SIZE       = 20; //YEAR
   const RANGEDIRECTION_SIZE  = 20; //YEAR
   const SECTION_SIZE         = 20; //YEAR
   const SECTIONPART_SIZE     = 20; //YEAR
   const TEXT1_SIZE           = 255; //LONGVARCHAR
   const TEXT2_SIZE           = 255; //LONGVARCHAR
   const TOWNSHIP_SIZE        = 20; //YEAR
   const TOWNSHIPDIRECTION_SIZE = 20; //YEAR
   const UTMDATUM_SIZE        = 32; //32
   const UTMEASTING_SIZE      = 20; //REAL
   const UTMFALSEEASTING_SIZE = 11; //INTEGER
   const UTMFALSENORTHING_SIZE = 11; //INTEGER
   const UTMNORTHING_SIZE     = 20; //REAL
   const UTMORIGLATITUDE_SIZE = 19; //19,2
   const UTMORIGLONGITUDE_SIZE = 19; //19,2
   const UTMSCALE_SIZE        = 8; //8
   const UTMZONE_SIZE         = 6; //SMALLINT
   const WATERBODY_SIZE       = 64; //64
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const LOCALITYID_SIZE      = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const LOCALITYDETAILID  = 'LocalityDetailID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const BASEMERIDIAN      = 'BaseMeridian';
   const DRAINAGE          = 'Drainage';
   const GML               = 'GML';
   const HUCCODE           = 'HucCode';
   const ISLAND            = 'Island';
   const ISLANDGROUP       = 'IslandGroup';
   const NATIONALPARKNAME  = 'NationalParkName';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const RANGEDESC         = 'RangeDesc';
   const RANGEDIRECTION    = 'RangeDirection';
   const SECTION           = 'Section';
   const SECTIONPART       = 'SectionPart';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const TOWNSHIP          = 'Township';
   const TOWNSHIPDIRECTION = 'TownshipDirection';
   const UTMDATUM          = 'UtmDatum';
   const UTMEASTING        = 'UtmEasting';
   const UTMFALSEEASTING   = 'UtmFalseEasting';
   const UTMFALSENORTHING  = 'UtmFalseNorthing';
   const UTMNORTHING       = 'UtmNorthing';
   const UTMORIGLATITUDE   = 'UtmOrigLatitude';
   const UTMORIGLONGITUDE  = 'UtmOrigLongitude';
   const UTMSCALE          = 'UtmScale';
   const UTMZONE           = 'UtmZone';
   const WATERBODY         = 'WaterBody';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const LOCALITYID        = 'LocalityID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $LocalityDetailID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['LocalityDetailID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $BaseMeridian = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['BaseMeridian']), 0, 20);
  $Drainage = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Drainage']), 0, 64);
  $GML = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GML']), 0, 255);
  $HucCode = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['HucCode']), 0, 16);
  $Island = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Island']), 0, 64);
  $IslandGroup = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IslandGroup']), 0, 64);
  $NationalParkName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['NationalParkName']), 0, 64);
  $Number1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number1']), 0, 24);
  $Number2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number2']), 0, 24);
  $RangeDesc = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['RangeDesc']), 0, 20);
  $RangeDirection = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['RangeDirection']), 0, 20);
  $Section = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Section']), 0, 20);
  $SectionPart = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['SectionPart']), 0, 20);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 255);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 255);
  $Township = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Township']), 0, 20);
  $TownshipDirection = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TownshipDirection']), 0, 20);
  $UtmDatum = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UtmDatum']), 0, 32);
  $UtmEasting = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UtmEasting']), 0, 20);
  $UtmFalseEasting = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['UtmFalseEasting']), 0, 11);
  $UtmFalseNorthing = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['UtmFalseNorthing']), 0, 11);
  $UtmNorthing = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UtmNorthing']), 0, 20);
  $UtmOrigLatitude = substr(preg_replace('/[^0-9\-\.\[NULL\]]/','',$_GET['UtmOrigLatitude']), 0, 19);
  $UtmOrigLongitude = substr(preg_replace('/[^0-9\-\.\[NULL\]]/','',$_GET['UtmOrigLongitude']), 0, 19);
  $UtmScale = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UtmScale']), 0, 8);
  $UtmZone = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['UtmZone']), 0, 6);
  $WaterBody = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['WaterBody']), 0, 64);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $LocalityID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['LocalityID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $LocalityDetailID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $BaseMeridian; // YEAR 
   private $Drainage; // VARCHAR(64) 
   private $GML; // LONGVARCHAR 
   private $HucCode; // VARCHAR(16) 
   private $Island; // VARCHAR(64) 
   private $IslandGroup; // VARCHAR(64) 
   private $NationalParkName; // VARCHAR(64) 
   private $Number1; // DOUBLE 
   private $Number2; // DOUBLE 
   private $RangeDesc; // YEAR 
   private $RangeDirection; // YEAR 
   private $Section; // YEAR 
   private $SectionPart; // YEAR 
   private $Text1; // LONGVARCHAR 
   private $Text2; // LONGVARCHAR 
   private $Township; // YEAR 
   private $TownshipDirection; // YEAR 
   private $UtmDatum; // VARCHAR(32) 
   private $UtmEasting; // REAL 
   private $UtmFalseEasting; // INTEGER 
   private $UtmFalseNorthing; // INTEGER 
   private $UtmNorthing; // REAL 
   private $UtmOrigLatitude; // DECIMAL(19,2) 
   private $UtmOrigLongitude; // DECIMAL(19,2) 
   private $UtmScale; // VARCHAR(8) 
   private $UtmZone; // SMALLINT 
   private $WaterBody; // VARCHAR(64) 
   private $YesNo1; // BIT(1) 
   private $YesNo2; // BIT(1) 
   private $ModifiedByAgentID; // INTEGER 
   private $LocalityID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' LocalityDetailID, TimestampCreated, TimestampModified, Version, BaseMeridian, Drainage, GML, HucCode, Island, IslandGroup, NationalParkName, Number1, Number2, RangeDesc, RangeDirection, Section, SectionPart, Text1, Text2, Township, TownshipDirection, UtmDatum, UtmEasting, UtmFalseEasting, UtmFalseNorthing, UtmNorthing, UtmOrigLatitude, UtmOrigLongitude, UtmScale, UtmZone, WaterBody, YesNo1, YesNo2, ModifiedByAgentID, LocalityID, CreatedByAgentID, ';
   const PKFIELDLIST = ' LocalityDetailID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'LocalityDetailID'  ) ;
   private $allFieldsArray = array( 0 => 'LocalityDetailID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'BaseMeridian' , 5 => 'Drainage' , 6 => 'GML' , 7 => 'HucCode' , 8 => 'Island' , 9 => 'IslandGroup' , 10 => 'NationalParkName' , 11 => 'Number1' , 12 => 'Number2' , 13 => 'RangeDesc' , 14 => 'RangeDirection' , 15 => 'Section' , 16 => 'SectionPart' , 17 => 'Text1' , 18 => 'Text2' , 19 => 'Township' , 20 => 'TownshipDirection' , 21 => 'UtmDatum' , 22 => 'UtmEasting' , 23 => 'UtmFalseEasting' , 24 => 'UtmFalseNorthing' , 25 => 'UtmNorthing' , 26 => 'UtmOrigLatitude' , 27 => 'UtmOrigLongitude' , 28 => 'UtmScale' , 29 => 'UtmZone' , 30 => 'WaterBody' , 31 => 'YesNo1' , 32 => 'YesNo2' , 33 => 'ModifiedByAgentID' , 34 => 'LocalityID' , 35 => 'CreatedByAgentID'  ) ;
   private $selectDistinctFieldsArray = array( 33 => 'ModifiedByAgentID' , 34 => 'LocalityID' , 35 => 'CreatedByAgentID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_localitydetail(){
       $this->LocalityDetailID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->BaseMeridian = '';
       $this->Drainage = '';
       $this->GML = '';
       $this->HucCode = '';
       $this->Island = '';
       $this->IslandGroup = '';
       $this->NationalParkName = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->RangeDesc = '';
       $this->RangeDirection = '';
       $this->Section = '';
       $this->SectionPart = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->Township = '';
       $this->TownshipDirection = '';
       $this->UtmDatum = '';
       $this->UtmEasting = '';
       $this->UtmFalseEasting = '';
       $this->UtmFalseNorthing = '';
       $this->UtmNorthing = '';
       $this->UtmOrigLatitude = '';
       $this->UtmOrigLongitude = '';
       $this->UtmScale = '';
       $this->UtmZone = '';
       $this->WaterBody = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->ModifiedByAgentID = '';
       $this->LocalityID = '';
       $this->CreatedByAgentID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='LocalityDetailID') { $returnvalue = $this->setLocalityDetailID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='BaseMeridian') { $returnvalue = $this->setBaseMeridian($value); } 
             if ($fieldname=='Drainage') { $returnvalue = $this->setDrainage($value); } 
             if ($fieldname=='GML') { $returnvalue = $this->setGML($value); } 
             if ($fieldname=='HucCode') { $returnvalue = $this->setHucCode($value); } 
             if ($fieldname=='Island') { $returnvalue = $this->setIsland($value); } 
             if ($fieldname=='IslandGroup') { $returnvalue = $this->setIslandGroup($value); } 
             if ($fieldname=='NationalParkName') { $returnvalue = $this->setNationalParkName($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='RangeDesc') { $returnvalue = $this->setRangeDesc($value); } 
             if ($fieldname=='RangeDirection') { $returnvalue = $this->setRangeDirection($value); } 
             if ($fieldname=='Section') { $returnvalue = $this->setSection($value); } 
             if ($fieldname=='SectionPart') { $returnvalue = $this->setSectionPart($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='Township') { $returnvalue = $this->setTownship($value); } 
             if ($fieldname=='TownshipDirection') { $returnvalue = $this->setTownshipDirection($value); } 
             if ($fieldname=='UtmDatum') { $returnvalue = $this->setUtmDatum($value); } 
             if ($fieldname=='UtmEasting') { $returnvalue = $this->setUtmEasting($value); } 
             if ($fieldname=='UtmFalseEasting') { $returnvalue = $this->setUtmFalseEasting($value); } 
             if ($fieldname=='UtmFalseNorthing') { $returnvalue = $this->setUtmFalseNorthing($value); } 
             if ($fieldname=='UtmNorthing') { $returnvalue = $this->setUtmNorthing($value); } 
             if ($fieldname=='UtmOrigLatitude') { $returnvalue = $this->setUtmOrigLatitude($value); } 
             if ($fieldname=='UtmOrigLongitude') { $returnvalue = $this->setUtmOrigLongitude($value); } 
             if ($fieldname=='UtmScale') { $returnvalue = $this->setUtmScale($value); } 
             if ($fieldname=='UtmZone') { $returnvalue = $this->setUtmZone($value); } 
             if ($fieldname=='WaterBody') { $returnvalue = $this->setWaterBody($value); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='LocalityID') { $returnvalue = $this->setLocalityID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='LocalityDetailID') { $returnvalue = $this->getLocalityDetailID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='BaseMeridian') { $returnvalue = $this->getBaseMeridian(); } 
             if ($fieldname=='Drainage') { $returnvalue = $this->getDrainage(); } 
             if ($fieldname=='GML') { $returnvalue = $this->getGML(); } 
             if ($fieldname=='HucCode') { $returnvalue = $this->getHucCode(); } 
             if ($fieldname=='Island') { $returnvalue = $this->getIsland(); } 
             if ($fieldname=='IslandGroup') { $returnvalue = $this->getIslandGroup(); } 
             if ($fieldname=='NationalParkName') { $returnvalue = $this->getNationalParkName(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='RangeDesc') { $returnvalue = $this->getRangeDesc(); } 
             if ($fieldname=='RangeDirection') { $returnvalue = $this->getRangeDirection(); } 
             if ($fieldname=='Section') { $returnvalue = $this->getSection(); } 
             if ($fieldname=='SectionPart') { $returnvalue = $this->getSectionPart(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='Township') { $returnvalue = $this->getTownship(); } 
             if ($fieldname=='TownshipDirection') { $returnvalue = $this->getTownshipDirection(); } 
             if ($fieldname=='UtmDatum') { $returnvalue = $this->getUtmDatum(); } 
             if ($fieldname=='UtmEasting') { $returnvalue = $this->getUtmEasting(); } 
             if ($fieldname=='UtmFalseEasting') { $returnvalue = $this->getUtmFalseEasting(); } 
             if ($fieldname=='UtmFalseNorthing') { $returnvalue = $this->getUtmFalseNorthing(); } 
             if ($fieldname=='UtmNorthing') { $returnvalue = $this->getUtmNorthing(); } 
             if ($fieldname=='UtmOrigLatitude') { $returnvalue = $this->getUtmOrigLatitude(); } 
             if ($fieldname=='UtmOrigLongitude') { $returnvalue = $this->getUtmOrigLongitude(); } 
             if ($fieldname=='UtmScale') { $returnvalue = $this->getUtmScale(); } 
             if ($fieldname=='UtmZone') { $returnvalue = $this->getUtmZone(); } 
             if ($fieldname=='WaterBody') { $returnvalue = $this->getWaterBody(); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='LocalityID') { $returnvalue = $this->getLocalityID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*LocalityDetailID*/
   public function getLocalityDetailID() {
       if ($this->LocalityDetailID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LocalityDetailID));
       }
   }
   public function setLocalityDetailID($LocalityDetailID) {
       if (strlen(preg_replace('/[^0-9]/','',$LocalityDetailID)) > huh_localitydetail::LOCALITYDETAILID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $LocalityDetailID = trim($LocalityDetailID);
       if (!ctype_digit(strval($LocalityDetailID)) && trim(strval($LocalityDetailID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->LocalityDetailID = $this->l_addslashes($LocalityDetailID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_localitydetail::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_localitydetail::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_localitydetail::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*BaseMeridian*/
   public function getBaseMeridian() {
       if ($this->BaseMeridian==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->BaseMeridian));
       }
   }
   public function setBaseMeridian($BaseMeridian) {
       if (strlen($BaseMeridian) > huh_localitydetail::BASEMERIDIAN_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->BaseMeridian = $this->l_addslashes($BaseMeridian);
       $this->dirty = true;
   }
/*Drainage*/
   public function getDrainage() {
       if ($this->Drainage==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Drainage));
       }
   }
   public function setDrainage($Drainage) {
       if (strlen($Drainage) > huh_localitydetail::DRAINAGE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Drainage = $this->l_addslashes($Drainage);
       $this->dirty = true;
   }
/*GML*/
   public function getGML() {
       if ($this->GML==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GML));
       }
   }
   public function setGML($GML) {
       if (strlen($GML) > huh_localitydetail::GML_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GML = $this->l_addslashes($GML);
       $this->dirty = true;
   }
/*HucCode*/
   public function getHucCode() {
       if ($this->HucCode==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->HucCode));
       }
   }
   public function setHucCode($HucCode) {
       if (strlen($HucCode) > huh_localitydetail::HUCCODE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->HucCode = $this->l_addslashes($HucCode);
       $this->dirty = true;
   }
/*Island*/
   public function getIsland() {
       if ($this->Island==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Island));
       }
   }
   public function setIsland($Island) {
       if (strlen($Island) > huh_localitydetail::ISLAND_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Island = $this->l_addslashes($Island);
       $this->dirty = true;
   }
/*IslandGroup*/
   public function getIslandGroup() {
       if ($this->IslandGroup==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IslandGroup));
       }
   }
   public function setIslandGroup($IslandGroup) {
       if (strlen($IslandGroup) > huh_localitydetail::ISLANDGROUP_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IslandGroup = $this->l_addslashes($IslandGroup);
       $this->dirty = true;
   }
/*NationalParkName*/
   public function getNationalParkName() {
       if ($this->NationalParkName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NationalParkName));
       }
   }
   public function setNationalParkName($NationalParkName) {
       if (strlen($NationalParkName) > huh_localitydetail::NATIONALPARKNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->NationalParkName = $this->l_addslashes($NationalParkName);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen($Number1) > huh_localitydetail::NUMBER1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen($Number2) > huh_localitydetail::NUMBER2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*RangeDesc*/
   public function getRangeDesc() {
       if ($this->RangeDesc==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RangeDesc));
       }
   }
   public function setRangeDesc($RangeDesc) {
       if (strlen($RangeDesc) > huh_localitydetail::RANGEDESC_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->RangeDesc = $this->l_addslashes($RangeDesc);
       $this->dirty = true;
   }
/*RangeDirection*/
   public function getRangeDirection() {
       if ($this->RangeDirection==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RangeDirection));
       }
   }
   public function setRangeDirection($RangeDirection) {
       if (strlen($RangeDirection) > huh_localitydetail::RANGEDIRECTION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->RangeDirection = $this->l_addslashes($RangeDirection);
       $this->dirty = true;
   }
/*Section*/
   public function getSection() {
       if ($this->Section==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Section));
       }
   }
   public function setSection($Section) {
       if (strlen($Section) > huh_localitydetail::SECTION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Section = $this->l_addslashes($Section);
       $this->dirty = true;
   }
/*SectionPart*/
   public function getSectionPart() {
       if ($this->SectionPart==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SectionPart));
       }
   }
   public function setSectionPart($SectionPart) {
       if (strlen($SectionPart) > huh_localitydetail::SECTIONPART_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->SectionPart = $this->l_addslashes($SectionPart);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_localitydetail::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_localitydetail::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*Township*/
   public function getTownship() {
       if ($this->Township==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Township));
       }
   }
   public function setTownship($Township) {
       if (strlen($Township) > huh_localitydetail::TOWNSHIP_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Township = $this->l_addslashes($Township);
       $this->dirty = true;
   }
/*TownshipDirection*/
   public function getTownshipDirection() {
       if ($this->TownshipDirection==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TownshipDirection));
       }
   }
   public function setTownshipDirection($TownshipDirection) {
       if (strlen($TownshipDirection) > huh_localitydetail::TOWNSHIPDIRECTION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TownshipDirection = $this->l_addslashes($TownshipDirection);
       $this->dirty = true;
   }
/*UtmDatum*/
   public function getUtmDatum() {
       if ($this->UtmDatum==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UtmDatum));
       }
   }
   public function setUtmDatum($UtmDatum) {
       if (strlen($UtmDatum) > huh_localitydetail::UTMDATUM_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UtmDatum = $this->l_addslashes($UtmDatum);
       $this->dirty = true;
   }
/*UtmEasting*/
   public function getUtmEasting() {
       if ($this->UtmEasting==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UtmEasting));
       }
   }
   public function setUtmEasting($UtmEasting) {
       if (strlen($UtmEasting) > huh_localitydetail::UTMEASTING_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UtmEasting = $this->l_addslashes($UtmEasting);
       $this->dirty = true;
   }
/*UtmFalseEasting*/
   public function getUtmFalseEasting() {
       if ($this->UtmFalseEasting==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UtmFalseEasting));
       }
   }
   public function setUtmFalseEasting($UtmFalseEasting) {
       if (strlen(preg_replace('/[^0-9]/','',$UtmFalseEasting)) > huh_localitydetail::UTMFALSEEASTING_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $UtmFalseEasting = trim($UtmFalseEasting);
       if (!ctype_digit(strval($UtmFalseEasting)) && trim(strval($UtmFalseEasting))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->UtmFalseEasting = $this->l_addslashes($UtmFalseEasting);
       $this->dirty = true;
   }
/*UtmFalseNorthing*/
   public function getUtmFalseNorthing() {
       if ($this->UtmFalseNorthing==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UtmFalseNorthing));
       }
   }
   public function setUtmFalseNorthing($UtmFalseNorthing) {
       if (strlen(preg_replace('/[^0-9]/','',$UtmFalseNorthing)) > huh_localitydetail::UTMFALSENORTHING_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $UtmFalseNorthing = trim($UtmFalseNorthing);
       if (!ctype_digit(strval($UtmFalseNorthing)) && trim(strval($UtmFalseNorthing))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->UtmFalseNorthing = $this->l_addslashes($UtmFalseNorthing);
       $this->dirty = true;
   }
/*UtmNorthing*/
   public function getUtmNorthing() {
       if ($this->UtmNorthing==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UtmNorthing));
       }
   }
   public function setUtmNorthing($UtmNorthing) {
       if (strlen($UtmNorthing) > huh_localitydetail::UTMNORTHING_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UtmNorthing = $this->l_addslashes($UtmNorthing);
       $this->dirty = true;
   }
/*UtmOrigLatitude*/
   public function getUtmOrigLatitude() {
       if ($this->UtmOrigLatitude==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UtmOrigLatitude));
       }
   }
   public function setUtmOrigLatitude($UtmOrigLatitude) {
       if (strlen(preg_replace('/[^0-9]/','',$UtmOrigLatitude)) > huh_localitydetail::UTMORIGLATITUDE_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $UtmOrigLatitude = trim($UtmOrigLatitude);
       if (!is_numeric($UtmOrigLatitude) && trim(strval($UtmOrigLatitude))!='' ) {
             throw new Exception("Value must be a number");
       }
       $this->UtmOrigLatitude = $this->l_addslashes($UtmOrigLatitude);
       $this->dirty = true;
   }
/*UtmOrigLongitude*/
   public function getUtmOrigLongitude() {
       if ($this->UtmOrigLongitude==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UtmOrigLongitude));
       }
   }
   public function setUtmOrigLongitude($UtmOrigLongitude) {
       if (strlen(preg_replace('/[^0-9]/','',$UtmOrigLongitude)) > huh_localitydetail::UTMORIGLONGITUDE_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $UtmOrigLongitude = trim($UtmOrigLongitude);
       if (!is_numeric($UtmOrigLongitude) && trim(strval($UtmOrigLongitude))!='' ) {
             throw new Exception("Value must be a number");
       }
       $this->UtmOrigLongitude = $this->l_addslashes($UtmOrigLongitude);
       $this->dirty = true;
   }
/*UtmScale*/
   public function getUtmScale() {
       if ($this->UtmScale==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UtmScale));
       }
   }
   public function setUtmScale($UtmScale) {
       if (strlen($UtmScale) > huh_localitydetail::UTMSCALE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UtmScale = $this->l_addslashes($UtmScale);
       $this->dirty = true;
   }
/*UtmZone*/
   public function getUtmZone() {
       if ($this->UtmZone==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UtmZone));
       }
   }
   public function setUtmZone($UtmZone) {
       if (strlen($UtmZone) > huh_localitydetail::UTMZONE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->UtmZone = $this->l_addslashes($UtmZone);
       $this->dirty = true;
   }
/*WaterBody*/
   public function getWaterBody() {
       if ($this->WaterBody==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->WaterBody));
       }
   }
   public function setWaterBody($WaterBody) {
       if (strlen($WaterBody) > huh_localitydetail::WATERBODY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->WaterBody = $this->l_addslashes($WaterBody);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_localitydetail::YESNO1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_localitydetail::YESNO2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_localitydetail::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*LocalityID*/
   public function getLocalityID() {
       if ($this->LocalityID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LocalityID));
       }
   }
   public function setLocalityID($LocalityID) {
       if (strlen(preg_replace('/[^0-9]/','',$LocalityID)) > huh_localitydetail::LOCALITYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $LocalityID = trim($LocalityID);
       if (!ctype_digit(strval($LocalityID)) && trim(strval($LocalityID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->LocalityID = $this->l_addslashes($LocalityID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_localitydetail::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getLocalityDetailID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['LocalityDetailID'] = $this->getLocalityDetailID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_LocalityDetailIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_BaseMeridianMYSQLI_TYPE = 's';
  const C_DrainageMYSQLI_TYPE = 's';
  const C_GMLMYSQLI_TYPE = 's';
  const C_HucCodeMYSQLI_TYPE = 's';
  const C_IslandMYSQLI_TYPE = 's';
  const C_IslandGroupMYSQLI_TYPE = 's';
  const C_NationalParkNameMYSQLI_TYPE = 's';
  const C_Number1MYSQLI_TYPE = 'd';
  const C_Number2MYSQLI_TYPE = 'd';
  const C_RangeDescMYSQLI_TYPE = 's';
  const C_RangeDirectionMYSQLI_TYPE = 's';
  const C_SectionMYSQLI_TYPE = 's';
  const C_SectionPartMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_TownshipMYSQLI_TYPE = 's';
  const C_TownshipDirectionMYSQLI_TYPE = 's';
  const C_UtmDatumMYSQLI_TYPE = 's';
  const C_UtmEastingMYSQLI_TYPE = 's';
  const C_UtmFalseEastingMYSQLI_TYPE = 'i';
  const C_UtmFalseNorthingMYSQLI_TYPE = 'i';
  const C_UtmNorthingMYSQLI_TYPE = 's';
  const C_UtmOrigLatitudeMYSQLI_TYPE = 'd';
  const C_UtmOrigLongitudeMYSQLI_TYPE = 'd';
  const C_UtmScaleMYSQLI_TYPE = 's';
  const C_UtmZoneMYSQLI_TYPE = 'i';
  const C_WaterBodyMYSQLI_TYPE = 's';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_LocalityIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='LocalityDetailID') { $retval = self::C_LocalityDetailIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='BaseMeridian') { $retval = self::C_BaseMeridianMYSQLI_TYPE; }
      if ($aFieldname=='Drainage') { $retval = self::C_DrainageMYSQLI_TYPE; }
      if ($aFieldname=='GML') { $retval = self::C_GMLMYSQLI_TYPE; }
      if ($aFieldname=='HucCode') { $retval = self::C_HucCodeMYSQLI_TYPE; }
      if ($aFieldname=='Island') { $retval = self::C_IslandMYSQLI_TYPE; }
      if ($aFieldname=='IslandGroup') { $retval = self::C_IslandGroupMYSQLI_TYPE; }
      if ($aFieldname=='NationalParkName') { $retval = self::C_NationalParkNameMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='RangeDesc') { $retval = self::C_RangeDescMYSQLI_TYPE; }
      if ($aFieldname=='RangeDirection') { $retval = self::C_RangeDirectionMYSQLI_TYPE; }
      if ($aFieldname=='Section') { $retval = self::C_SectionMYSQLI_TYPE; }
      if ($aFieldname=='SectionPart') { $retval = self::C_SectionPartMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='Township') { $retval = self::C_TownshipMYSQLI_TYPE; }
      if ($aFieldname=='TownshipDirection') { $retval = self::C_TownshipDirectionMYSQLI_TYPE; }
      if ($aFieldname=='UtmDatum') { $retval = self::C_UtmDatumMYSQLI_TYPE; }
      if ($aFieldname=='UtmEasting') { $retval = self::C_UtmEastingMYSQLI_TYPE; }
      if ($aFieldname=='UtmFalseEasting') { $retval = self::C_UtmFalseEastingMYSQLI_TYPE; }
      if ($aFieldname=='UtmFalseNorthing') { $retval = self::C_UtmFalseNorthingMYSQLI_TYPE; }
      if ($aFieldname=='UtmNorthing') { $retval = self::C_UtmNorthingMYSQLI_TYPE; }
      if ($aFieldname=='UtmOrigLatitude') { $retval = self::C_UtmOrigLatitudeMYSQLI_TYPE; }
      if ($aFieldname=='UtmOrigLongitude') { $retval = self::C_UtmOrigLongitudeMYSQLI_TYPE; }
      if ($aFieldname=='UtmScale') { $retval = self::C_UtmScaleMYSQLI_TYPE; }
      if ($aFieldname=='UtmZone') { $retval = self::C_UtmZoneMYSQLI_TYPE; }
      if ($aFieldname=='WaterBody') { $retval = self::C_WaterBodyMYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='LocalityID') { $retval = self::C_LocalityIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setLocalityDetailID($pk[LocalityDetailID]);
             } else { ;
                 $this->setLocalityDetailID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->LocalityDetailID != NULL) {
           $sql = 'SELECT LocalityDetailID, TimestampCreated, TimestampModified, Version, BaseMeridian, Drainage, GML, HucCode, Island, IslandGroup, NationalParkName, Number1, Number2, RangeDesc, RangeDirection, Section, SectionPart, Text1, Text2, Township, TownshipDirection, UtmDatum, UtmEasting, UtmFalseEasting, UtmFalseNorthing, UtmNorthing, UtmOrigLatitude, UtmOrigLongitude, UtmScale, UtmZone, WaterBody, YesNo1, YesNo2, ModifiedByAgentID, LocalityID, CreatedByAgentID FROM localitydetail WHERE LocalityDetailID = '.$this->LocalityDetailID ;

           $preparesql = 'SELECT LocalityDetailID, TimestampCreated, TimestampModified, Version, BaseMeridian, Drainage, GML, HucCode, Island, IslandGroup, NationalParkName, Number1, Number2, RangeDesc, RangeDirection, Section, SectionPart, Text1, Text2, Township, TownshipDirection, UtmDatum, UtmEasting, UtmFalseEasting, UtmFalseNorthing, UtmNorthing, UtmOrigLatitude, UtmOrigLongitude, UtmScale, UtmZone, WaterBody, YesNo1, YesNo2, ModifiedByAgentID, LocalityID, CreatedByAgentID FROM localitydetail WHERE LocalityDetailID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->LocalityDetailID);
              $statement->execute();
              $statement->bind_result($this->LocalityDetailID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->BaseMeridian, $this->Drainage, $this->GML, $this->HucCode, $this->Island, $this->IslandGroup, $this->NationalParkName, $this->Number1, $this->Number2, $this->RangeDesc, $this->RangeDirection, $this->Section, $this->SectionPart, $this->Text1, $this->Text2, $this->Township, $this->TownshipDirection, $this->UtmDatum, $this->UtmEasting, $this->UtmFalseEasting, $this->UtmFalseNorthing, $this->UtmNorthing, $this->UtmOrigLatitude, $this->UtmOrigLongitude, $this->UtmScale, $this->UtmZone, $this->WaterBody, $this->YesNo1, $this->YesNo2, $this->ModifiedByAgentID, $this->LocalityID, $this->CreatedByAgentID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->LocalityDetailID!= NULL) {
            $sql  = 'UPDATE  localitydetail SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", BaseMeridian = ? ";
            $sql .=  ", Drainage = ? ";
            $sql .=  ", GML = ? ";
            $sql .=  ", HucCode = ? ";
            $sql .=  ", Island = ? ";
            $sql .=  ", IslandGroup = ? ";
            $sql .=  ", NationalParkName = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", RangeDesc = ? ";
            $sql .=  ", RangeDirection = ? ";
            $sql .=  ", Section = ? ";
            $sql .=  ", SectionPart = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", Township = ? ";
            $sql .=  ", TownshipDirection = ? ";
            $sql .=  ", UtmDatum = ? ";
            $sql .=  ", UtmEasting = ? ";
            $sql .=  ", UtmFalseEasting = ? ";
            $sql .=  ", UtmFalseNorthing = ? ";
            $sql .=  ", UtmNorthing = ? ";
            $sql .=  ", UtmOrigLatitude = ? ";
            $sql .=  ", UtmOrigLongitude = ? ";
            $sql .=  ", UtmScale = ? ";
            $sql .=  ", UtmZone = ? ";
            $sql .=  ", WaterBody = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", LocalityID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";

            $sql .= "  WHERE LocalityDetailID = ? ";
        } else {
            $sql  = 'INSERT INTO localitydetail ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( LocalityDetailID ,  TimestampCreated ,  TimestampModified ,  Version ,  BaseMeridian ,  Drainage ,  GML ,  HucCode ,  Island ,  IslandGroup ,  NationalParkName ,  Number1 ,  Number2 ,  RangeDesc ,  RangeDirection ,  Section ,  SectionPart ,  Text1 ,  Text2 ,  Township ,  TownshipDirection ,  UtmDatum ,  UtmEasting ,  UtmFalseEasting ,  UtmFalseNorthing ,  UtmNorthing ,  UtmOrigLatitude ,  UtmOrigLongitude ,  UtmScale ,  UtmZone ,  WaterBody ,  YesNo1 ,  YesNo2 ,  ModifiedByAgentID ,  LocalityID ,  CreatedByAgentID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->LocalityDetailID!= NULL ) {
              $statement->bind_param("ississsssssddssssssssssiisddsisiiiiii", $this->LocalityDetailID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->BaseMeridian , $this->Drainage , $this->GML , $this->HucCode , $this->Island , $this->IslandGroup , $this->NationalParkName , $this->Number1 , $this->Number2 , $this->RangeDesc , $this->RangeDirection , $this->Section , $this->SectionPart , $this->Text1 , $this->Text2 , $this->Township , $this->TownshipDirection , $this->UtmDatum , $this->UtmEasting , $this->UtmFalseEasting , $this->UtmFalseNorthing , $this->UtmNorthing , $this->UtmOrigLatitude , $this->UtmOrigLongitude , $this->UtmScale , $this->UtmZone , $this->WaterBody , $this->YesNo1 , $this->YesNo2 , $this->ModifiedByAgentID , $this->LocalityID , $this->CreatedByAgentID , $this->LocalityDetailID );
           } else { 
              $statement->bind_param("ississsssssddssssssssssiisddsisiiiii", $this->LocalityDetailID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->BaseMeridian , $this->Drainage , $this->GML , $this->HucCode , $this->Island , $this->IslandGroup , $this->NationalParkName , $this->Number1 , $this->Number2 , $this->RangeDesc , $this->RangeDirection , $this->Section , $this->SectionPart , $this->Text1 , $this->Text2 , $this->Township , $this->TownshipDirection , $this->UtmDatum , $this->UtmEasting , $this->UtmFalseEasting , $this->UtmFalseNorthing , $this->UtmNorthing , $this->UtmOrigLatitude , $this->UtmOrigLongitude , $this->UtmScale , $this->UtmZone , $this->WaterBody , $this->YesNo1 , $this->YesNo2 , $this->ModifiedByAgentID , $this->LocalityID , $this->CreatedByAgentID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->LocalityDetailID != NULL) {
           $sql = 'SELECT LocalityDetailID, TimestampCreated, TimestampModified, Version, BaseMeridian, Drainage, GML, HucCode, Island, IslandGroup, NationalParkName, Number1, Number2, RangeDesc, RangeDirection, Section, SectionPart, Text1, Text2, Township, TownshipDirection, UtmDatum, UtmEasting, UtmFalseEasting, UtmFalseNorthing, UtmNorthing, UtmOrigLatitude, UtmOrigLongitude, UtmScale, UtmZone, WaterBody, YesNo1, YesNo2, ModifiedByAgentID, LocalityID, CreatedByAgentID FROM localitydetail WHERE LocalityDetailID = "'.$this->LocalityDetailID.'"  ' ;

           $preparedsql = 'SELECT  FROM localitydetail WHERE  and LocalityDetailID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississsssssddssssssssssiisddsisiiiii", $this->LocalityDetailID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->BaseMeridian, $this->Drainage, $this->GML, $this->HucCode, $this->Island, $this->IslandGroup, $this->NationalParkName, $this->Number1, $this->Number2, $this->RangeDesc, $this->RangeDirection, $this->Section, $this->SectionPart, $this->Text1, $this->Text2, $this->Township, $this->TownshipDirection, $this->UtmDatum, $this->UtmEasting, $this->UtmFalseEasting, $this->UtmFalseNorthing, $this->UtmNorthing, $this->UtmOrigLatitude, $this->UtmOrigLongitude, $this->UtmScale, $this->UtmZone, $this->WaterBody, $this->YesNo1, $this->YesNo2, $this->ModifiedByAgentID, $this->LocalityID, $this->CreatedByAgentID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM localitydetail WHERE  and LocalityDetailID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississsssssddssssssssssiisddsisiiiii", $this->LocalityDetailID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->BaseMeridian, $this->Drainage, $this->GML, $this->HucCode, $this->Island, $this->IslandGroup, $this->NationalParkName, $this->Number1, $this->Number2, $this->RangeDesc, $this->RangeDirection, $this->Section, $this->SectionPart, $this->Text1, $this->Text2, $this->Township, $this->TownshipDirection, $this->UtmDatum, $this->UtmEasting, $this->UtmFalseEasting, $this->UtmFalseNorthing, $this->UtmNorthing, $this->UtmOrigLatitude, $this->UtmOrigLongitude, $this->UtmScale, $this->UtmZone, $this->WaterBody, $this->YesNo1, $this->YesNo2, $this->ModifiedByAgentID, $this->LocalityID, $this->CreatedByAgentID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->LocalityDetailID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM localitydetail';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT LocalityDetailID FROM localitydetail $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_localitydetail();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: LocalityID
      $t = new locality();
      $t->load(getLocalityID());
      $returnvalue[LocalityID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT LocalityDetailID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(BaseMeridian,'') || ' ' || IFNULL(Drainage,'') || ' ' || IFNULL(GML,'') || ' ' || IFNULL(HucCode,'') || ' ' || IFNULL(Island,'') || ' ' || IFNULL(IslandGroup,'') || ' ' || IFNULL(NationalParkName,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(RangeDesc,'') || ' ' || IFNULL(RangeDirection,'') || ' ' || IFNULL(Section,'') || ' ' || IFNULL(SectionPart,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(Township,'') || ' ' || IFNULL(TownshipDirection,'') || ' ' || IFNULL(UtmDatum,'') || ' ' || IFNULL(UtmEasting,'') || ' ' || IFNULL(UtmFalseEasting,'') || ' ' || IFNULL(UtmFalseNorthing,'') || ' ' || IFNULL(UtmNorthing,'') || ' ' || IFNULL(UtmOrigLatitude,'') || ' ' || IFNULL(UtmOrigLongitude,'') || ' ' || IFNULL(UtmScale,'') || ' ' || IFNULL(UtmZone,'') || ' ' || IFNULL(WaterBody,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(LocalityID,'') || ' ' || IFNULL(CreatedByAgentID,'')) FROM localitydetail order by ModifiedByAgentID, LocalityID, CreatedByAgentID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM localitydetail order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LocalityDetailID FROM localitydetail WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT LocalityDetailID FROM localitydetail WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_localitydetail();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByLocalityID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LocalityDetailID FROM localitydetail WHERE LocalityID $operator '$searchTerm'";
        $preparedsql = "SELECT LocalityDetailID FROM localitydetail WHERE LocalityID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_localitydetail();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT LocalityDetailID FROM localitydetail WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT LocalityDetailID FROM localitydetail WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_localitydetail();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM localitydetail group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctLocalityID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' LocalityID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, LocalityID FROM localitydetail group by LocalityID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&LocalityID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM localitydetail group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'LocalityID':
             $returnvalue = $this->selectDistinctLocalityID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the localitydetail.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_localitydetailView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_localitydetail <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_localitydetail::LOCALITYDETAILID.": ".$model->getLocalityDetailID()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::BASEMERIDIAN.": ".$model->getBaseMeridian()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::DRAINAGE.": ".$model->getDrainage()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::GML.": ".$model->getGML()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::HUCCODE.": ".$model->getHucCode()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::ISLAND.": ".$model->getIsland()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::ISLANDGROUP.": ".$model->getIslandGroup()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::NATIONALPARKNAME.": ".$model->getNationalParkName()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::RANGEDESC.": ".$model->getRangeDesc()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::RANGEDIRECTION.": ".$model->getRangeDirection()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::SECTION.": ".$model->getSection()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::SECTIONPART.": ".$model->getSectionPart()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::TOWNSHIP.": ".$model->getTownship()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::TOWNSHIPDIRECTION.": ".$model->getTownshipDirection()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::UTMDATUM.": ".$model->getUtmDatum()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::UTMEASTING.": ".$model->getUtmEasting()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::UTMFALSEEASTING.": ".$model->getUtmFalseEasting()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::UTMFALSENORTHING.": ".$model->getUtmFalseNorthing()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::UTMNORTHING.": ".$model->getUtmNorthing()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::UTMORIGLATITUDE.": ".$model->getUtmOrigLatitude()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::UTMORIGLONGITUDE.": ".$model->getUtmOrigLongitude()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::UTMSCALE.": ".$model->getUtmScale()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::UTMZONE.": ".$model->getUtmZone()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::WATERBODY.": ".$model->getWaterBody()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::LOCALITYID.": ".$model->getLocalityID()."</li>\n";
       $returnvalue .= "<li>".huh_localitydetail::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>locality</li>";
           $t_locality = new huh_locality();
           $t_localityView = new huh_localityView();
           $t_localityView->setModel($t_locality);
           if ($model->getLocalityID() != '') { 
               $t_locality->load($model->getLocalityID());
               $returnvalue .= $t_localityView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_localitydetail::LOCALITYDETAILID.': "'.$model->getLocalityDetailID().'",';
       $returnvalue .= '"'.huh_localitydetail::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_localitydetail::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_localitydetail::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_localitydetail::BASEMERIDIAN.': "'.$model->getBaseMeridian().'",';
       $returnvalue .= '"'.huh_localitydetail::DRAINAGE.': "'.$model->getDrainage().'",';
       $returnvalue .= '"'.huh_localitydetail::GML.': "'.$model->getGML().'",';
       $returnvalue .= '"'.huh_localitydetail::HUCCODE.': "'.$model->getHucCode().'",';
       $returnvalue .= '"'.huh_localitydetail::ISLAND.': "'.$model->getIsland().'",';
       $returnvalue .= '"'.huh_localitydetail::ISLANDGROUP.': "'.$model->getIslandGroup().'",';
       $returnvalue .= '"'.huh_localitydetail::NATIONALPARKNAME.': "'.$model->getNationalParkName().'",';
       $returnvalue .= '"'.huh_localitydetail::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_localitydetail::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_localitydetail::RANGEDESC.': "'.$model->getRangeDesc().'",';
       $returnvalue .= '"'.huh_localitydetail::RANGEDIRECTION.': "'.$model->getRangeDirection().'",';
       $returnvalue .= '"'.huh_localitydetail::SECTION.': "'.$model->getSection().'",';
       $returnvalue .= '"'.huh_localitydetail::SECTIONPART.': "'.$model->getSectionPart().'",';
       $returnvalue .= '"'.huh_localitydetail::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_localitydetail::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_localitydetail::TOWNSHIP.': "'.$model->getTownship().'",';
       $returnvalue .= '"'.huh_localitydetail::TOWNSHIPDIRECTION.': "'.$model->getTownshipDirection().'",';
       $returnvalue .= '"'.huh_localitydetail::UTMDATUM.': "'.$model->getUtmDatum().'",';
       $returnvalue .= '"'.huh_localitydetail::UTMEASTING.': "'.$model->getUtmEasting().'",';
       $returnvalue .= '"'.huh_localitydetail::UTMFALSEEASTING.': "'.$model->getUtmFalseEasting().'",';
       $returnvalue .= '"'.huh_localitydetail::UTMFALSENORTHING.': "'.$model->getUtmFalseNorthing().'",';
       $returnvalue .= '"'.huh_localitydetail::UTMNORTHING.': "'.$model->getUtmNorthing().'",';
       $returnvalue .= '"'.huh_localitydetail::UTMORIGLATITUDE.': "'.$model->getUtmOrigLatitude().'",';
       $returnvalue .= '"'.huh_localitydetail::UTMORIGLONGITUDE.': "'.$model->getUtmOrigLongitude().'",';
       $returnvalue .= '"'.huh_localitydetail::UTMSCALE.': "'.$model->getUtmScale().'",';
       $returnvalue .= '"'.huh_localitydetail::UTMZONE.': "'.$model->getUtmZone().'",';
       $returnvalue .= '"'.huh_localitydetail::WATERBODY.': "'.$model->getWaterBody().'",';
       $returnvalue .= '"'.huh_localitydetail::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_localitydetail::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_localitydetail::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_localitydetail::LOCALITYID.': "'.$model->getLocalityID().'",';
       $returnvalue .= '"'.huh_localitydetail::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getLocalityDetailID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getBaseMeridian()."</td>\n";
       $returnvalue .= "<td>".$model->getDrainage()."</td>\n";
       $returnvalue .= "<td>".$model->getGML()."</td>\n";
       $returnvalue .= "<td>".$model->getHucCode()."</td>\n";
       $returnvalue .= "<td>".$model->getIsland()."</td>\n";
       $returnvalue .= "<td>".$model->getIslandGroup()."</td>\n";
       $returnvalue .= "<td>".$model->getNationalParkName()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getRangeDesc()."</td>\n";
       $returnvalue .= "<td>".$model->getRangeDirection()."</td>\n";
       $returnvalue .= "<td>".$model->getSection()."</td>\n";
       $returnvalue .= "<td>".$model->getSectionPart()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getTownship()."</td>\n";
       $returnvalue .= "<td>".$model->getTownshipDirection()."</td>\n";
       $returnvalue .= "<td>".$model->getUtmDatum()."</td>\n";
       $returnvalue .= "<td>".$model->getUtmEasting()."</td>\n";
       $returnvalue .= "<td>".$model->getUtmFalseEasting()."</td>\n";
       $returnvalue .= "<td>".$model->getUtmFalseNorthing()."</td>\n";
       $returnvalue .= "<td>".$model->getUtmNorthing()."</td>\n";
       $returnvalue .= "<td>".$model->getUtmOrigLatitude()."</td>\n";
       $returnvalue .= "<td>".$model->getUtmOrigLongitude()."</td>\n";
       $returnvalue .= "<td>".$model->getUtmScale()."</td>\n";
       $returnvalue .= "<td>".$model->getUtmZone()."</td>\n";
       $returnvalue .= "<td>".$model->getWaterBody()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getLocalityID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_localitydetail::LOCALITYDETAILID."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::BASEMERIDIAN."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::DRAINAGE."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::GML."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::HUCCODE."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::ISLAND."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::ISLANDGROUP."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::NATIONALPARKNAME."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::RANGEDESC."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::RANGEDIRECTION."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::SECTION."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::SECTIONPART."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::TOWNSHIP."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::TOWNSHIPDIRECTION."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::UTMDATUM."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::UTMEASTING."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::UTMFALSEEASTING."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::UTMFALSENORTHING."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::UTMNORTHING."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::UTMORIGLATITUDE."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::UTMORIGLONGITUDE."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::UTMSCALE."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::UTMZONE."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::WATERBODY."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::LOCALITYID."</th>\n";
       $returnvalue .= "<th>".huh_localitydetail::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_localitydetail">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new LocalityDetailID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_localitydetail::LOCALITYDETAILID.">LOCALITYDETAILID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_localitydetail::LOCALITYDETAILID." id=".huh_localitydetail::LOCALITYDETAILID." value='".$model->getLocalityDetailID()."'  style=' width:".huh_localitydetail::LOCALITYDETAILID_SIZE ."em;  '  maxlength='".huh_localitydetail::LOCALITYDETAILID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_localitydetail::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::TIMESTAMPCREATED." id=".huh_localitydetail::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_localitydetail::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_localitydetail::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::TIMESTAMPMODIFIED." id=".huh_localitydetail::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_localitydetail::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_localitydetail::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_localitydetail::VERSION." id=".huh_localitydetail::VERSION." value='".$model->getVersion()."'  style=' width:".huh_localitydetail::VERSION_SIZE ."em;  '  maxlength='".huh_localitydetail::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::BASEMERIDIAN.">BASEMERIDIAN</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::BASEMERIDIAN." id=".huh_localitydetail::BASEMERIDIAN." value='".$model->getBaseMeridian()."'  style=' width:".huh_localitydetail::BASEMERIDIAN_SIZE ."em;  '  maxlength='".huh_localitydetail::BASEMERIDIAN_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::DRAINAGE.">DRAINAGE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_localitydetail::DRAINAGE." id=".huh_localitydetail::DRAINAGE." >".$model->getDrainage()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::GML.">GML</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_localitydetail::GML." id=".huh_localitydetail::GML." >".$model->getGML()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::HUCCODE.">HUCCODE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::HUCCODE." id=".huh_localitydetail::HUCCODE." value='".$model->getHucCode()."'  style=' width:".huh_localitydetail::HUCCODE_SIZE ."em;  '  maxlength='".huh_localitydetail::HUCCODE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::ISLAND.">ISLAND</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_localitydetail::ISLAND." id=".huh_localitydetail::ISLAND." >".$model->getIsland()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::ISLANDGROUP.">ISLANDGROUP</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_localitydetail::ISLANDGROUP." id=".huh_localitydetail::ISLANDGROUP." >".$model->getIslandGroup()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::NATIONALPARKNAME.">NATIONALPARKNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_localitydetail::NATIONALPARKNAME." id=".huh_localitydetail::NATIONALPARKNAME." >".$model->getNationalParkName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::NUMBER1." id=".huh_localitydetail::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_localitydetail::NUMBER1_SIZE ."em;  '  maxlength='".huh_localitydetail::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::NUMBER2." id=".huh_localitydetail::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_localitydetail::NUMBER2_SIZE ."em;  '  maxlength='".huh_localitydetail::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::RANGEDESC.">RANGEDESC</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::RANGEDESC." id=".huh_localitydetail::RANGEDESC." value='".$model->getRangeDesc()."'  style=' width:".huh_localitydetail::RANGEDESC_SIZE ."em;  '  maxlength='".huh_localitydetail::RANGEDESC_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::RANGEDIRECTION.">RANGEDIRECTION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::RANGEDIRECTION." id=".huh_localitydetail::RANGEDIRECTION." value='".$model->getRangeDirection()."'  style=' width:".huh_localitydetail::RANGEDIRECTION_SIZE ."em;  '  maxlength='".huh_localitydetail::RANGEDIRECTION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::SECTION.">SECTION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::SECTION." id=".huh_localitydetail::SECTION." value='".$model->getSection()."'  style=' width:".huh_localitydetail::SECTION_SIZE ."em;  '  maxlength='".huh_localitydetail::SECTION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::SECTIONPART.">SECTIONPART</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::SECTIONPART." id=".huh_localitydetail::SECTIONPART." value='".$model->getSectionPart()."'  style=' width:".huh_localitydetail::SECTIONPART_SIZE ."em;  '  maxlength='".huh_localitydetail::SECTIONPART_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::TEXT1.">TEXT1</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_localitydetail::TEXT1." id=".huh_localitydetail::TEXT1." >".$model->getText1()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_localitydetail::TEXT2." id=".huh_localitydetail::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::TOWNSHIP.">TOWNSHIP</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::TOWNSHIP." id=".huh_localitydetail::TOWNSHIP." value='".$model->getTownship()."'  style=' width:".huh_localitydetail::TOWNSHIP_SIZE ."em;  '  maxlength='".huh_localitydetail::TOWNSHIP_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::TOWNSHIPDIRECTION.">TOWNSHIPDIRECTION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::TOWNSHIPDIRECTION." id=".huh_localitydetail::TOWNSHIPDIRECTION." value='".$model->getTownshipDirection()."'  style=' width:".huh_localitydetail::TOWNSHIPDIRECTION_SIZE ."em;  '  maxlength='".huh_localitydetail::TOWNSHIPDIRECTION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::UTMDATUM.">UTMDATUM</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::UTMDATUM." id=".huh_localitydetail::UTMDATUM." value='".$model->getUtmDatum()."'  style=' width:".huh_localitydetail::UTMDATUM_SIZE ."em;  '  maxlength='".huh_localitydetail::UTMDATUM_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::UTMEASTING.">UTMEASTING</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::UTMEASTING." id=".huh_localitydetail::UTMEASTING." value='".$model->getUtmEasting()."'  style=' width:".huh_localitydetail::UTMEASTING_SIZE ."em;  '  maxlength='".huh_localitydetail::UTMEASTING_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::UTMFALSEEASTING.">UTMFALSEEASTING</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_localitydetail::UTMFALSEEASTING." id=".huh_localitydetail::UTMFALSEEASTING." value='".$model->getUtmFalseEasting()."'  style=' width:".huh_localitydetail::UTMFALSEEASTING_SIZE ."em;  '  maxlength='".huh_localitydetail::UTMFALSEEASTING_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::UTMFALSENORTHING.">UTMFALSENORTHING</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_localitydetail::UTMFALSENORTHING." id=".huh_localitydetail::UTMFALSENORTHING." value='".$model->getUtmFalseNorthing()."'  style=' width:".huh_localitydetail::UTMFALSENORTHING_SIZE ."em;  '  maxlength='".huh_localitydetail::UTMFALSENORTHING_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::UTMNORTHING.">UTMNORTHING</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::UTMNORTHING." id=".huh_localitydetail::UTMNORTHING." value='".$model->getUtmNorthing()."'  style=' width:".huh_localitydetail::UTMNORTHING_SIZE ."em;  '  maxlength='".huh_localitydetail::UTMNORTHING_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::UTMORIGLATITUDE.">UTMORIGLATITUDE</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9\.-]*'  invalidMessage='The value entered is not valid.  It must be a number.'  name=".huh_localitydetail::UTMORIGLATITUDE." id=".huh_localitydetail::UTMORIGLATITUDE." value='".$model->getUtmOrigLatitude()."'  style=' width:".huh_localitydetail::UTMORIGLATITUDE_SIZE ."em;  '  maxlength='".huh_localitydetail::UTMORIGLATITUDE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::UTMORIGLONGITUDE.">UTMORIGLONGITUDE</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9\.-]*'  invalidMessage='The value entered is not valid.  It must be a number.'  name=".huh_localitydetail::UTMORIGLONGITUDE." id=".huh_localitydetail::UTMORIGLONGITUDE." value='".$model->getUtmOrigLongitude()."'  style=' width:".huh_localitydetail::UTMORIGLONGITUDE_SIZE ."em;  '  maxlength='".huh_localitydetail::UTMORIGLONGITUDE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::UTMSCALE.">UTMSCALE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::UTMSCALE." id=".huh_localitydetail::UTMSCALE." value='".$model->getUtmScale()."'  style=' width:".huh_localitydetail::UTMSCALE_SIZE ."em;  '  maxlength='".huh_localitydetail::UTMSCALE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::UTMZONE.">UTMZONE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::UTMZONE." id=".huh_localitydetail::UTMZONE." value='".$model->getUtmZone()."'  style=' width:".huh_localitydetail::UTMZONE_SIZE ."em;  '  maxlength='".huh_localitydetail::UTMZONE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::WATERBODY.">WATERBODY</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_localitydetail::WATERBODY." id=".huh_localitydetail::WATERBODY." >".$model->getWaterBody()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::YESNO1." id=".huh_localitydetail::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_localitydetail::YESNO1_SIZE ."em;  '  maxlength='".huh_localitydetail::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_localitydetail::YESNO2." id=".huh_localitydetail::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_localitydetail::YESNO2_SIZE ."em;  '  maxlength='".huh_localitydetail::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_localitydetail::MODIFIEDBYAGENTID." id=".huh_localitydetail::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_localitydetail::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_localitydetail::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::LOCALITYID.">LOCALITYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_localitydetail::LOCALITYID." id=".huh_localitydetail::LOCALITYID." value='".$model->getLocalityID()."'  style=' width:".huh_localitydetail::LOCALITYID_SIZE ."em;  '  maxlength='".huh_localitydetail::LOCALITYID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_localitydetail::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_localitydetail::CREATEDBYAGENTID." id=".huh_localitydetail::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_localitydetail::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_localitydetail::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_localitydetail">';
       $returnvalue .= '<input type=hidden name=LocalityDetailID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_localitydetail">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>LOCALITYDETAILID<input type=text name=".huh_localitydetail::LOCALITYDETAILID." id=".huh_localitydetail::LOCALITYDETAILID." value='".$model->getLocalityDetailID()."'  size='".huh_localitydetail::LOCALITYDETAILID_SIZE ."'  maxlength='".huh_localitydetail::LOCALITYDETAILID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_localitydetail::TIMESTAMPCREATED." id=".huh_localitydetail::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_localitydetail::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_localitydetail::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_localitydetail::TIMESTAMPMODIFIED." id=".huh_localitydetail::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_localitydetail::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_localitydetail::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_localitydetail::VERSION." id=".huh_localitydetail::VERSION." value='".$model->getVersion()."'  size='".huh_localitydetail::VERSION_SIZE ."'  maxlength='".huh_localitydetail::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>BASEMERIDIAN<input type=text name=".huh_localitydetail::BASEMERIDIAN." id=".huh_localitydetail::BASEMERIDIAN." value='".$model->getBaseMeridian()."'  size='".huh_localitydetail::BASEMERIDIAN_SIZE ."'  maxlength='".huh_localitydetail::BASEMERIDIAN_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DRAINAGE<input type=text name=".huh_localitydetail::DRAINAGE." id=".huh_localitydetail::DRAINAGE." value='".$model->getDrainage()."'  size='51'  maxlength='".huh_localitydetail::DRAINAGE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GML<input type=text name=".huh_localitydetail::GML." id=".huh_localitydetail::GML." value='".$model->getGML()."'  size='51'  maxlength='".huh_localitydetail::GML_SIZE ."' ></li>\n";
       $returnvalue .= "<li>HUCCODE<input type=text name=".huh_localitydetail::HUCCODE." id=".huh_localitydetail::HUCCODE." value='".$model->getHucCode()."'  size='".huh_localitydetail::HUCCODE_SIZE ."'  maxlength='".huh_localitydetail::HUCCODE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISLAND<input type=text name=".huh_localitydetail::ISLAND." id=".huh_localitydetail::ISLAND." value='".$model->getIsland()."'  size='51'  maxlength='".huh_localitydetail::ISLAND_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISLANDGROUP<input type=text name=".huh_localitydetail::ISLANDGROUP." id=".huh_localitydetail::ISLANDGROUP." value='".$model->getIslandGroup()."'  size='51'  maxlength='".huh_localitydetail::ISLANDGROUP_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NATIONALPARKNAME<input type=text name=".huh_localitydetail::NATIONALPARKNAME." id=".huh_localitydetail::NATIONALPARKNAME." value='".$model->getNationalParkName()."'  size='51'  maxlength='".huh_localitydetail::NATIONALPARKNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_localitydetail::NUMBER1." id=".huh_localitydetail::NUMBER1." value='".$model->getNumber1()."'  size='".huh_localitydetail::NUMBER1_SIZE ."'  maxlength='".huh_localitydetail::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_localitydetail::NUMBER2." id=".huh_localitydetail::NUMBER2." value='".$model->getNumber2()."'  size='".huh_localitydetail::NUMBER2_SIZE ."'  maxlength='".huh_localitydetail::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RANGEDESC<input type=text name=".huh_localitydetail::RANGEDESC." id=".huh_localitydetail::RANGEDESC." value='".$model->getRangeDesc()."'  size='".huh_localitydetail::RANGEDESC_SIZE ."'  maxlength='".huh_localitydetail::RANGEDESC_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RANGEDIRECTION<input type=text name=".huh_localitydetail::RANGEDIRECTION." id=".huh_localitydetail::RANGEDIRECTION." value='".$model->getRangeDirection()."'  size='".huh_localitydetail::RANGEDIRECTION_SIZE ."'  maxlength='".huh_localitydetail::RANGEDIRECTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SECTION<input type=text name=".huh_localitydetail::SECTION." id=".huh_localitydetail::SECTION." value='".$model->getSection()."'  size='".huh_localitydetail::SECTION_SIZE ."'  maxlength='".huh_localitydetail::SECTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SECTIONPART<input type=text name=".huh_localitydetail::SECTIONPART." id=".huh_localitydetail::SECTIONPART." value='".$model->getSectionPart()."'  size='".huh_localitydetail::SECTIONPART_SIZE ."'  maxlength='".huh_localitydetail::SECTIONPART_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_localitydetail::TEXT1." id=".huh_localitydetail::TEXT1." value='".$model->getText1()."'  size='51'  maxlength='".huh_localitydetail::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_localitydetail::TEXT2." id=".huh_localitydetail::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_localitydetail::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TOWNSHIP<input type=text name=".huh_localitydetail::TOWNSHIP." id=".huh_localitydetail::TOWNSHIP." value='".$model->getTownship()."'  size='".huh_localitydetail::TOWNSHIP_SIZE ."'  maxlength='".huh_localitydetail::TOWNSHIP_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TOWNSHIPDIRECTION<input type=text name=".huh_localitydetail::TOWNSHIPDIRECTION." id=".huh_localitydetail::TOWNSHIPDIRECTION." value='".$model->getTownshipDirection()."'  size='".huh_localitydetail::TOWNSHIPDIRECTION_SIZE ."'  maxlength='".huh_localitydetail::TOWNSHIPDIRECTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UTMDATUM<input type=text name=".huh_localitydetail::UTMDATUM." id=".huh_localitydetail::UTMDATUM." value='".$model->getUtmDatum()."'  size='".huh_localitydetail::UTMDATUM_SIZE ."'  maxlength='".huh_localitydetail::UTMDATUM_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UTMEASTING<input type=text name=".huh_localitydetail::UTMEASTING." id=".huh_localitydetail::UTMEASTING." value='".$model->getUtmEasting()."'  size='".huh_localitydetail::UTMEASTING_SIZE ."'  maxlength='".huh_localitydetail::UTMEASTING_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UTMFALSEEASTING<input type=text name=".huh_localitydetail::UTMFALSEEASTING." id=".huh_localitydetail::UTMFALSEEASTING." value='".$model->getUtmFalseEasting()."'  size='".huh_localitydetail::UTMFALSEEASTING_SIZE ."'  maxlength='".huh_localitydetail::UTMFALSEEASTING_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UTMFALSENORTHING<input type=text name=".huh_localitydetail::UTMFALSENORTHING." id=".huh_localitydetail::UTMFALSENORTHING." value='".$model->getUtmFalseNorthing()."'  size='".huh_localitydetail::UTMFALSENORTHING_SIZE ."'  maxlength='".huh_localitydetail::UTMFALSENORTHING_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UTMNORTHING<input type=text name=".huh_localitydetail::UTMNORTHING." id=".huh_localitydetail::UTMNORTHING." value='".$model->getUtmNorthing()."'  size='".huh_localitydetail::UTMNORTHING_SIZE ."'  maxlength='".huh_localitydetail::UTMNORTHING_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UTMORIGLATITUDE<input type=text name=".huh_localitydetail::UTMORIGLATITUDE." id=".huh_localitydetail::UTMORIGLATITUDE." value='".$model->getUtmOrigLatitude()."'  size='".huh_localitydetail::UTMORIGLATITUDE_SIZE ."'  maxlength='".huh_localitydetail::UTMORIGLATITUDE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UTMORIGLONGITUDE<input type=text name=".huh_localitydetail::UTMORIGLONGITUDE." id=".huh_localitydetail::UTMORIGLONGITUDE." value='".$model->getUtmOrigLongitude()."'  size='".huh_localitydetail::UTMORIGLONGITUDE_SIZE ."'  maxlength='".huh_localitydetail::UTMORIGLONGITUDE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UTMSCALE<input type=text name=".huh_localitydetail::UTMSCALE." id=".huh_localitydetail::UTMSCALE." value='".$model->getUtmScale()."'  size='".huh_localitydetail::UTMSCALE_SIZE ."'  maxlength='".huh_localitydetail::UTMSCALE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UTMZONE<input type=text name=".huh_localitydetail::UTMZONE." id=".huh_localitydetail::UTMZONE." value='".$model->getUtmZone()."'  size='".huh_localitydetail::UTMZONE_SIZE ."'  maxlength='".huh_localitydetail::UTMZONE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>WATERBODY<input type=text name=".huh_localitydetail::WATERBODY." id=".huh_localitydetail::WATERBODY." value='".$model->getWaterBody()."'  size='51'  maxlength='".huh_localitydetail::WATERBODY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_localitydetail::YESNO1." id=".huh_localitydetail::YESNO1." value='".$model->getYesNo1()."'  size='".huh_localitydetail::YESNO1_SIZE ."'  maxlength='".huh_localitydetail::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_localitydetail::YESNO2." id=".huh_localitydetail::YESNO2." value='".$model->getYesNo2()."'  size='".huh_localitydetail::YESNO2_SIZE ."'  maxlength='".huh_localitydetail::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_localitydetail::MODIFIEDBYAGENTID." id=".huh_localitydetail::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_localitydetail::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_localitydetail::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LOCALITYID<input type=text name=".huh_localitydetail::LOCALITYID." id=".huh_localitydetail::LOCALITYID." value='".$model->getLocalityID()."'  size='".huh_localitydetail::LOCALITYID_SIZE ."'  maxlength='".huh_localitydetail::LOCALITYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_localitydetail::CREATEDBYAGENTID." id=".huh_localitydetail::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_localitydetail::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_localitydetail::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
