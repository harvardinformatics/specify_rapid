<?php 
// *******  Warning: This file will be overwritten by druid if PHP code is regenerated. *******
?>
<?php 
// druid_interfaces.php
// Autogenerated by Druid from MySQL db Build:6
//


interface model {
   public function keyValueSet($fieldname,$value); // set the value of a field to specified value for the current instance of model.
   public function keyGet($fieldname); // gets the value of the specified field in the current instance of model.
}

interface loadableModel {
   public function load($pk);  // load data for the record specified by the primary key value $pk into the current instance of model.
   public function isLoaded(); // returns true if model instance contains data loaded from record in table. 
   public function isDirty();  // returns true if model data has changed since instantiation or load. 
   public function loadArrayKeyValueSearch($searchTermArray); // returns an array of models matching the fieldname=value criteria in the searchTermArray
   public function NumberOfPrimaryKeyFields(); // returns the number of fields in the primary key of this table
   public function PKArray(); // return primary key(s) for current record as fieldname=>value array
}
interface saveableModel {
   public function save();    // save changes to current record or add new record to underlying database.
   public function delete();  // delete current record from underlying database.
}
interface summaryModel { 
   public function count();  // returns total number of records in table
   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false);  // 
                           // return distinct values for $fieldname, if it has an index (if it is in schemaHaveDistinct()).
                           // generic wrapper for selectDistinct{fieldname}() methods.
}
interface tableSchema { 
   public function hasField($fieldname);  // returns true if the model includes a field with a name exactly matching $fieldname.
   public function schemaPK();  // returns array of primary key field names
   public function schemaHaveDistinct();  // returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaFields();  // returns array of all field names

}


interface viewer {
   public function setModel($aModel);  // specify which instance of model provides the data to be shown in this view.
   public function getDetailsView($includeRelated=true, $editLinkURL=''); // display the fields and values of the instance of the model (as a html list in default implementation).
}


?>
