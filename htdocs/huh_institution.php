<?php
//==============================================================================
//===   institution.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_institution implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const USERGROUPSCOPEID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const ALTNAME_SIZE         = 128; //128
   const CODE_SIZE            = 64; //64
   const COPYRIGHT_SIZE       = 255; //LONGVARCHAR
   const DESCRIPTION_SIZE     = 255; //LONGVARCHAR
   const DISCLAIMER_SIZE      = 255; //LONGVARCHAR
   const HASBEENASKED_SIZE    = 1; //1
   const ICONURI_SIZE         = 255; //255
   const INSTITUTIONID_SIZE   = 11; //INTEGER
   const IPR_SIZE             = 255; //LONGVARCHAR
   const ISACCESSIONSGLOBAL_SIZE = 1; //1
   const ISANONYMOUS_SIZE     = 1; //1
   const ISSECURITYON_SIZE    = 1; //1
   const ISSERVERBASED_SIZE   = 1; //1
   const LICENSE_SIZE         = 255; //LONGVARCHAR
   const LSIDAUTHORITY_SIZE   = 64; //64
   const NAME_SIZE            = 255; //255
   const REGNUMBER_SIZE       = 24; //24
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const TERMSOFUSE_SIZE      = 255; //LONGVARCHAR
   const URI_SIZE             = 255; //255
   const ADDRESSID_SIZE       = 11; //INTEGER
   const STORAGETREEDEFID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const USERGROUPSCOPEID  = 'UserGroupScopeId';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const ALTNAME           = 'AltName';
   const CODE              = 'Code';
   const COPYRIGHT         = 'Copyright';
   const DESCRIPTION       = 'Description';
   const DISCLAIMER        = 'Disclaimer';
   const HASBEENASKED      = 'HasBeenAsked';
   const ICONURI           = 'IconURI';
   const INSTITUTIONID     = 'institutionId';
   const IPR               = 'Ipr';
   const ISACCESSIONSGLOBAL = 'IsAccessionsGlobal';
   const ISANONYMOUS       = 'IsAnonymous';
   const ISSECURITYON      = 'IsSecurityOn';
   const ISSERVERBASED     = 'IsServerBased';
   const LICENSE           = 'License';
   const LSIDAUTHORITY     = 'LsidAuthority';
   const NAME              = 'Name';
   const REGNUMBER         = 'RegNumber';
   const REMARKS           = 'Remarks';
   const TERMSOFUSE        = 'TermsOfUse';
   const URI               = 'Uri';
   const ADDRESSID         = 'AddressID';
   const STORAGETREEDEFID  = 'StorageTreeDefID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $UserGroupScopeId = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['UserGroupScopeId']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $AltName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['AltName']), 0, 128);
  $Code = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Code']), 0, 64);
  $Copyright = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Copyright']), 0, 255);
  $Description = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Description']), 0, 255);
  $Disclaimer = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Disclaimer']), 0, 255);
  $HasBeenAsked = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['HasBeenAsked']), 0, 1);
  $IconURI = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IconURI']), 0, 255);
  $institutionId = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['institutionId']), 0, 11);
  $Ipr = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Ipr']), 0, 255);
  $IsAccessionsGlobal = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsAccessionsGlobal']), 0, 1);
  $IsAnonymous = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsAnonymous']), 0, 1);
  $IsSecurityOn = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsSecurityOn']), 0, 1);
  $IsServerBased = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsServerBased']), 0, 1);
  $License = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['License']), 0, 255);
  $LsidAuthority = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['LsidAuthority']), 0, 64);
  $Name = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Name']), 0, 255);
  $RegNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['RegNumber']), 0, 24);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $TermsOfUse = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TermsOfUse']), 0, 255);
  $Uri = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Uri']), 0, 255);
  $AddressID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AddressID']), 0, 11);
  $StorageTreeDefID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['StorageTreeDefID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $UserGroupScopeId; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $AltName; // VARCHAR(128) 
   private $Code; // VARCHAR(64) 
   private $Copyright; // LONGVARCHAR 
   private $Description; // LONGVARCHAR 
   private $Disclaimer; // LONGVARCHAR 
   private $HasBeenAsked; // BIT(1) 
   private $IconURI; // VARCHAR(255) 
   private $institutionId; // INTEGER 
   private $Ipr; // LONGVARCHAR 
   private $IsAccessionsGlobal; // BIT(1) 
   private $IsAnonymous; // BIT(1) 
   private $IsSecurityOn; // BIT(1) 
   private $IsServerBased; // BIT(1) 
   private $License; // LONGVARCHAR 
   private $LsidAuthority; // VARCHAR(64) 
   private $Name; // VARCHAR(255) 
   private $RegNumber; // VARCHAR(24) 
   private $Remarks; // LONGVARCHAR 
   private $TermsOfUse; // LONGVARCHAR 
   private $Uri; // VARCHAR(255) 
   private $AddressID; // INTEGER 
   private $StorageTreeDefID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' UserGroupScopeId, TimestampCreated, TimestampModified, Version, CreatedByAgentID, ModifiedByAgentID, AltName, Code, Copyright, Description, Disclaimer, HasBeenAsked, IconURI, institutionId, Ipr, IsAccessionsGlobal, IsAnonymous, IsSecurityOn, IsServerBased, License, LsidAuthority, Name, RegNumber, Remarks, TermsOfUse, Uri, AddressID, StorageTreeDefID, ';
   const PKFIELDLIST = ' UserGroupScopeId, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'UserGroupScopeId'  ) ;
   private $allFieldsArray = array( 0 => 'UserGroupScopeId' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'CreatedByAgentID' , 5 => 'ModifiedByAgentID' , 6 => 'AltName' , 7 => 'Code' , 8 => 'Copyright' , 9 => 'Description' , 10 => 'Disclaimer' , 11 => 'HasBeenAsked' , 12 => 'IconURI' , 13 => 'institutionId' , 14 => 'Ipr' , 15 => 'IsAccessionsGlobal' , 16 => 'IsAnonymous' , 17 => 'IsSecurityOn' , 18 => 'IsServerBased' , 19 => 'License' , 20 => 'LsidAuthority' , 21 => 'Name' , 22 => 'RegNumber' , 23 => 'Remarks' , 24 => 'TermsOfUse' , 25 => 'Uri' , 26 => 'AddressID' , 27 => 'StorageTreeDefID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'CreatedByAgentID' , 5 => 'ModifiedByAgentID' , 21 => 'Name' , 26 => 'AddressID' , 27 => 'StorageTreeDefID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_institution(){
       $this->UserGroupScopeId = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->CreatedByAgentID = '';
       $this->ModifiedByAgentID = '';
       $this->AltName = '';
       $this->Code = '';
       $this->Copyright = '';
       $this->Description = '';
       $this->Disclaimer = '';
       $this->HasBeenAsked = '';
       $this->IconURI = '';
       $this->institutionId = '';
       $this->Ipr = '';
       $this->IsAccessionsGlobal = '';
       $this->IsAnonymous = '';
       $this->IsSecurityOn = '';
       $this->IsServerBased = '';
       $this->License = '';
       $this->LsidAuthority = '';
       $this->Name = '';
       $this->RegNumber = '';
       $this->Remarks = '';
       $this->TermsOfUse = '';
       $this->Uri = '';
       $this->AddressID = '';
       $this->StorageTreeDefID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='UserGroupScopeId') { $returnvalue = $this->setUserGroupScopeId($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='AltName') { $returnvalue = $this->setAltName($value); } 
             if ($fieldname=='Code') { $returnvalue = $this->setCode($value); } 
             if ($fieldname=='Copyright') { $returnvalue = $this->setCopyright($value); } 
             if ($fieldname=='Description') { $returnvalue = $this->setDescription($value); } 
             if ($fieldname=='Disclaimer') { $returnvalue = $this->setDisclaimer($value); } 
             if ($fieldname=='HasBeenAsked') { $returnvalue = $this->setHasBeenAsked($value); } 
             if ($fieldname=='IconURI') { $returnvalue = $this->setIconURI($value); } 
             if ($fieldname=='institutionId') { $returnvalue = $this->setinstitutionId($value); } 
             if ($fieldname=='Ipr') { $returnvalue = $this->setIpr($value); } 
             if ($fieldname=='IsAccessionsGlobal') { $returnvalue = $this->setIsAccessionsGlobal($value); } 
             if ($fieldname=='IsAnonymous') { $returnvalue = $this->setIsAnonymous($value); } 
             if ($fieldname=='IsSecurityOn') { $returnvalue = $this->setIsSecurityOn($value); } 
             if ($fieldname=='IsServerBased') { $returnvalue = $this->setIsServerBased($value); } 
             if ($fieldname=='License') { $returnvalue = $this->setLicense($value); } 
             if ($fieldname=='LsidAuthority') { $returnvalue = $this->setLsidAuthority($value); } 
             if ($fieldname=='Name') { $returnvalue = $this->setName($value); } 
             if ($fieldname=='RegNumber') { $returnvalue = $this->setRegNumber($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='TermsOfUse') { $returnvalue = $this->setTermsOfUse($value); } 
             if ($fieldname=='Uri') { $returnvalue = $this->setUri($value); } 
             if ($fieldname=='AddressID') { $returnvalue = $this->setAddressID($value); } 
             if ($fieldname=='StorageTreeDefID') { $returnvalue = $this->setStorageTreeDefID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='UserGroupScopeId') { $returnvalue = $this->getUserGroupScopeId(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='AltName') { $returnvalue = $this->getAltName(); } 
             if ($fieldname=='Code') { $returnvalue = $this->getCode(); } 
             if ($fieldname=='Copyright') { $returnvalue = $this->getCopyright(); } 
             if ($fieldname=='Description') { $returnvalue = $this->getDescription(); } 
             if ($fieldname=='Disclaimer') { $returnvalue = $this->getDisclaimer(); } 
             if ($fieldname=='HasBeenAsked') { $returnvalue = $this->getHasBeenAsked(); } 
             if ($fieldname=='IconURI') { $returnvalue = $this->getIconURI(); } 
             if ($fieldname=='institutionId') { $returnvalue = $this->getinstitutionId(); } 
             if ($fieldname=='Ipr') { $returnvalue = $this->getIpr(); } 
             if ($fieldname=='IsAccessionsGlobal') { $returnvalue = $this->getIsAccessionsGlobal(); } 
             if ($fieldname=='IsAnonymous') { $returnvalue = $this->getIsAnonymous(); } 
             if ($fieldname=='IsSecurityOn') { $returnvalue = $this->getIsSecurityOn(); } 
             if ($fieldname=='IsServerBased') { $returnvalue = $this->getIsServerBased(); } 
             if ($fieldname=='License') { $returnvalue = $this->getLicense(); } 
             if ($fieldname=='LsidAuthority') { $returnvalue = $this->getLsidAuthority(); } 
             if ($fieldname=='Name') { $returnvalue = $this->getName(); } 
             if ($fieldname=='RegNumber') { $returnvalue = $this->getRegNumber(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='TermsOfUse') { $returnvalue = $this->getTermsOfUse(); } 
             if ($fieldname=='Uri') { $returnvalue = $this->getUri(); } 
             if ($fieldname=='AddressID') { $returnvalue = $this->getAddressID(); } 
             if ($fieldname=='StorageTreeDefID') { $returnvalue = $this->getStorageTreeDefID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*UserGroupScopeId*/
   public function getUserGroupScopeId() {
       if ($this->UserGroupScopeId==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UserGroupScopeId));
       }
   }
   public function setUserGroupScopeId($UserGroupScopeId) {
       if (strlen(preg_replace('/[^0-9]/','',$UserGroupScopeId)) > huh_institution::USERGROUPSCOPEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $UserGroupScopeId = trim($UserGroupScopeId);
       if (!ctype_digit(strval($UserGroupScopeId)) && trim(strval($UserGroupScopeId))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->UserGroupScopeId = $this->l_addslashes($UserGroupScopeId);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_institution::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_institution::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_institution::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_institution::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_institution::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*AltName*/
   public function getAltName() {
       if ($this->AltName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AltName));
       }
   }
   public function setAltName($AltName) {
       if (strlen($AltName) > huh_institution::ALTNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->AltName = $this->l_addslashes($AltName);
       $this->dirty = true;
   }
/*Code*/
   public function getCode() {
       if ($this->Code==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Code));
       }
   }
   public function setCode($Code) {
       if (strlen($Code) > huh_institution::CODE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Code = $this->l_addslashes($Code);
       $this->dirty = true;
   }
/*Copyright*/
   public function getCopyright() {
       if ($this->Copyright==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Copyright));
       }
   }
   public function setCopyright($Copyright) {
       if (strlen($Copyright) > huh_institution::COPYRIGHT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Copyright = $this->l_addslashes($Copyright);
       $this->dirty = true;
   }
/*Description*/
   public function getDescription() {
       if ($this->Description==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Description));
       }
   }
   public function setDescription($Description) {
       if (strlen($Description) > huh_institution::DESCRIPTION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Description = $this->l_addslashes($Description);
       $this->dirty = true;
   }
/*Disclaimer*/
   public function getDisclaimer() {
       if ($this->Disclaimer==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Disclaimer));
       }
   }
   public function setDisclaimer($Disclaimer) {
       if (strlen($Disclaimer) > huh_institution::DISCLAIMER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Disclaimer = $this->l_addslashes($Disclaimer);
       $this->dirty = true;
   }
/*HasBeenAsked*/
   public function getHasBeenAsked() {
       if ($this->HasBeenAsked==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->HasBeenAsked));
       }
   }
   public function setHasBeenAsked($HasBeenAsked) {
       if (strlen($HasBeenAsked) > huh_institution::HASBEENASKED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->HasBeenAsked = $this->l_addslashes($HasBeenAsked);
       $this->dirty = true;
   }
/*IconURI*/
   public function getIconURI() {
       if ($this->IconURI==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IconURI));
       }
   }
   public function setIconURI($IconURI) {
       if (strlen($IconURI) > huh_institution::ICONURI_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IconURI = $this->l_addslashes($IconURI);
       $this->dirty = true;
   }
/*institutionId*/
   public function getinstitutionId() {
       if ($this->institutionId==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->institutionId));
       }
   }
   public function setinstitutionId($institutionId) {
       if (strlen(preg_replace('/[^0-9]/','',$institutionId)) > huh_institution::INSTITUTIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $institutionId = trim($institutionId);
       if (!ctype_digit(strval($institutionId)) && trim(strval($institutionId))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->institutionId = $this->l_addslashes($institutionId);
       $this->dirty = true;
   }
/*Ipr*/
   public function getIpr() {
       if ($this->Ipr==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Ipr));
       }
   }
   public function setIpr($Ipr) {
       if (strlen($Ipr) > huh_institution::IPR_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Ipr = $this->l_addslashes($Ipr);
       $this->dirty = true;
   }
/*IsAccessionsGlobal*/
   public function getIsAccessionsGlobal() {
       if ($this->IsAccessionsGlobal==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsAccessionsGlobal));
       }
   }
   public function setIsAccessionsGlobal($IsAccessionsGlobal) {
       if (strlen($IsAccessionsGlobal) > huh_institution::ISACCESSIONSGLOBAL_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsAccessionsGlobal = $this->l_addslashes($IsAccessionsGlobal);
       $this->dirty = true;
   }
/*IsAnonymous*/
   public function getIsAnonymous() {
       if ($this->IsAnonymous==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsAnonymous));
       }
   }
   public function setIsAnonymous($IsAnonymous) {
       if (strlen($IsAnonymous) > huh_institution::ISANONYMOUS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsAnonymous = $this->l_addslashes($IsAnonymous);
       $this->dirty = true;
   }
/*IsSecurityOn*/
   public function getIsSecurityOn() {
       if ($this->IsSecurityOn==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsSecurityOn));
       }
   }
   public function setIsSecurityOn($IsSecurityOn) {
       if (strlen($IsSecurityOn) > huh_institution::ISSECURITYON_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsSecurityOn = $this->l_addslashes($IsSecurityOn);
       $this->dirty = true;
   }
/*IsServerBased*/
   public function getIsServerBased() {
       if ($this->IsServerBased==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsServerBased));
       }
   }
   public function setIsServerBased($IsServerBased) {
       if (strlen($IsServerBased) > huh_institution::ISSERVERBASED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsServerBased = $this->l_addslashes($IsServerBased);
       $this->dirty = true;
   }
/*License*/
   public function getLicense() {
       if ($this->License==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->License));
       }
   }
   public function setLicense($License) {
       if (strlen($License) > huh_institution::LICENSE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->License = $this->l_addslashes($License);
       $this->dirty = true;
   }
/*LsidAuthority*/
   public function getLsidAuthority() {
       if ($this->LsidAuthority==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LsidAuthority));
       }
   }
   public function setLsidAuthority($LsidAuthority) {
       if (strlen($LsidAuthority) > huh_institution::LSIDAUTHORITY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->LsidAuthority = $this->l_addslashes($LsidAuthority);
       $this->dirty = true;
   }
/*Name*/
   public function getName() {
       if ($this->Name==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Name));
       }
   }
   public function setName($Name) {
       if (strlen($Name) > huh_institution::NAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Name = $this->l_addslashes($Name);
       $this->dirty = true;
   }
/*RegNumber*/
   public function getRegNumber() {
       if ($this->RegNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RegNumber));
       }
   }
   public function setRegNumber($RegNumber) {
       if (strlen($RegNumber) > huh_institution::REGNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->RegNumber = $this->l_addslashes($RegNumber);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_institution::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*TermsOfUse*/
   public function getTermsOfUse() {
       if ($this->TermsOfUse==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TermsOfUse));
       }
   }
   public function setTermsOfUse($TermsOfUse) {
       if (strlen($TermsOfUse) > huh_institution::TERMSOFUSE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TermsOfUse = $this->l_addslashes($TermsOfUse);
       $this->dirty = true;
   }
/*Uri*/
   public function getUri() {
       if ($this->Uri==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Uri));
       }
   }
   public function setUri($Uri) {
       if (strlen($Uri) > huh_institution::URI_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Uri = $this->l_addslashes($Uri);
       $this->dirty = true;
   }
/*AddressID*/
   public function getAddressID() {
       if ($this->AddressID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AddressID));
       }
   }
   public function setAddressID($AddressID) {
       if (strlen(preg_replace('/[^0-9]/','',$AddressID)) > huh_institution::ADDRESSID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AddressID = trim($AddressID);
       if (!ctype_digit(strval($AddressID)) && trim(strval($AddressID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AddressID = $this->l_addslashes($AddressID);
       $this->dirty = true;
   }
/*StorageTreeDefID*/
   public function getStorageTreeDefID() {
       if ($this->StorageTreeDefID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StorageTreeDefID));
       }
   }
   public function setStorageTreeDefID($StorageTreeDefID) {
       if (strlen(preg_replace('/[^0-9]/','',$StorageTreeDefID)) > huh_institution::STORAGETREEDEFID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $StorageTreeDefID = trim($StorageTreeDefID);
       if (!ctype_digit(strval($StorageTreeDefID)) && trim(strval($StorageTreeDefID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->StorageTreeDefID = $this->l_addslashes($StorageTreeDefID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getUserGroupScopeId();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['UserGroupScopeId'] = $this->getUserGroupScopeId();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_UserGroupScopeIdMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_AltNameMYSQLI_TYPE = 's';
  const C_CodeMYSQLI_TYPE = 's';
  const C_CopyrightMYSQLI_TYPE = 's';
  const C_DescriptionMYSQLI_TYPE = 's';
  const C_DisclaimerMYSQLI_TYPE = 's';
  const C_HasBeenAskedMYSQLI_TYPE = 'i';
  const C_IconURIMYSQLI_TYPE = 's';
  const C_institutionIdMYSQLI_TYPE = 'i';
  const C_IprMYSQLI_TYPE = 's';
  const C_IsAccessionsGlobalMYSQLI_TYPE = 'i';
  const C_IsAnonymousMYSQLI_TYPE = 'i';
  const C_IsSecurityOnMYSQLI_TYPE = 'i';
  const C_IsServerBasedMYSQLI_TYPE = 'i';
  const C_LicenseMYSQLI_TYPE = 's';
  const C_LsidAuthorityMYSQLI_TYPE = 's';
  const C_NameMYSQLI_TYPE = 's';
  const C_RegNumberMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_TermsOfUseMYSQLI_TYPE = 's';
  const C_UriMYSQLI_TYPE = 's';
  const C_AddressIDMYSQLI_TYPE = 'i';
  const C_StorageTreeDefIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='UserGroupScopeId') { $retval = self::C_UserGroupScopeIdMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='AltName') { $retval = self::C_AltNameMYSQLI_TYPE; }
      if ($aFieldname=='Code') { $retval = self::C_CodeMYSQLI_TYPE; }
      if ($aFieldname=='Copyright') { $retval = self::C_CopyrightMYSQLI_TYPE; }
      if ($aFieldname=='Description') { $retval = self::C_DescriptionMYSQLI_TYPE; }
      if ($aFieldname=='Disclaimer') { $retval = self::C_DisclaimerMYSQLI_TYPE; }
      if ($aFieldname=='HasBeenAsked') { $retval = self::C_HasBeenAskedMYSQLI_TYPE; }
      if ($aFieldname=='IconURI') { $retval = self::C_IconURIMYSQLI_TYPE; }
      if ($aFieldname=='institutionId') { $retval = self::C_institutionIdMYSQLI_TYPE; }
      if ($aFieldname=='Ipr') { $retval = self::C_IprMYSQLI_TYPE; }
      if ($aFieldname=='IsAccessionsGlobal') { $retval = self::C_IsAccessionsGlobalMYSQLI_TYPE; }
      if ($aFieldname=='IsAnonymous') { $retval = self::C_IsAnonymousMYSQLI_TYPE; }
      if ($aFieldname=='IsSecurityOn') { $retval = self::C_IsSecurityOnMYSQLI_TYPE; }
      if ($aFieldname=='IsServerBased') { $retval = self::C_IsServerBasedMYSQLI_TYPE; }
      if ($aFieldname=='License') { $retval = self::C_LicenseMYSQLI_TYPE; }
      if ($aFieldname=='LsidAuthority') { $retval = self::C_LsidAuthorityMYSQLI_TYPE; }
      if ($aFieldname=='Name') { $retval = self::C_NameMYSQLI_TYPE; }
      if ($aFieldname=='RegNumber') { $retval = self::C_RegNumberMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='TermsOfUse') { $retval = self::C_TermsOfUseMYSQLI_TYPE; }
      if ($aFieldname=='Uri') { $retval = self::C_UriMYSQLI_TYPE; }
      if ($aFieldname=='AddressID') { $retval = self::C_AddressIDMYSQLI_TYPE; }
      if ($aFieldname=='StorageTreeDefID') { $retval = self::C_StorageTreeDefIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setUserGroupScopeId($pk[UserGroupScopeId]);
             } else { ;
                 $this->setUserGroupScopeId($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->UserGroupScopeId != NULL) {
           $sql = 'SELECT UserGroupScopeId, TimestampCreated, TimestampModified, Version, CreatedByAgentID, ModifiedByAgentID, AltName, Code, Copyright, Description, Disclaimer, HasBeenAsked, IconURI, institutionId, Ipr, IsAccessionsGlobal, IsAnonymous, IsSecurityOn, IsServerBased, License, LsidAuthority, Name, RegNumber, Remarks, TermsOfUse, Uri, AddressID, StorageTreeDefID FROM institution WHERE UserGroupScopeId = '.$this->UserGroupScopeId ;

           $preparesql = 'SELECT UserGroupScopeId, TimestampCreated, TimestampModified, Version, CreatedByAgentID, ModifiedByAgentID, AltName, Code, Copyright, Description, Disclaimer, HasBeenAsked, IconURI, institutionId, Ipr, IsAccessionsGlobal, IsAnonymous, IsSecurityOn, IsServerBased, License, LsidAuthority, Name, RegNumber, Remarks, TermsOfUse, Uri, AddressID, StorageTreeDefID FROM institution WHERE UserGroupScopeId = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->UserGroupScopeId);
              $statement->execute();
              $statement->bind_result($this->UserGroupScopeId, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->AltName, $this->Code, $this->Copyright, $this->Description, $this->Disclaimer, $this->HasBeenAsked, $this->IconURI, $this->institutionId, $this->Ipr, $this->IsAccessionsGlobal, $this->IsAnonymous, $this->IsSecurityOn, $this->IsServerBased, $this->License, $this->LsidAuthority, $this->Name, $this->RegNumber, $this->Remarks, $this->TermsOfUse, $this->Uri, $this->AddressID, $this->StorageTreeDefID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->UserGroupScopeId!= NULL) {
            $sql  = 'UPDATE  institution SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", AltName = ? ";
            $sql .=  ", Code = ? ";
            $sql .=  ", Copyright = ? ";
            $sql .=  ", Description = ? ";
            $sql .=  ", Disclaimer = ? ";
            $sql .=  ", HasBeenAsked = ? ";
            $sql .=  ", IconURI = ? ";
            $sql .=  ", institutionId = ? ";
            $sql .=  ", Ipr = ? ";
            $sql .=  ", IsAccessionsGlobal = ? ";
            $sql .=  ", IsAnonymous = ? ";
            $sql .=  ", IsSecurityOn = ? ";
            $sql .=  ", IsServerBased = ? ";
            $sql .=  ", License = ? ";
            $sql .=  ", LsidAuthority = ? ";
            $sql .=  ", Name = ? ";
            $sql .=  ", RegNumber = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", TermsOfUse = ? ";
            $sql .=  ", Uri = ? ";
            $sql .=  ", AddressID = ? ";
            $sql .=  ", StorageTreeDefID = ? ";

            $sql .= "  WHERE UserGroupScopeId = ? ";
        } else {
            $sql  = 'INSERT INTO institution ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( UserGroupScopeId ,  TimestampCreated ,  TimestampModified ,  Version ,  CreatedByAgentID ,  ModifiedByAgentID ,  AltName ,  Code ,  Copyright ,  Description ,  Disclaimer ,  HasBeenAsked ,  IconURI ,  institutionId ,  Ipr ,  IsAccessionsGlobal ,  IsAnonymous ,  IsSecurityOn ,  IsServerBased ,  License ,  LsidAuthority ,  Name ,  RegNumber ,  Remarks ,  TermsOfUse ,  Uri ,  AddressID ,  StorageTreeDefID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->UserGroupScopeId!= NULL ) {
              $statement->bind_param("issiiisssssisisiiiisssssssiii", $this->UserGroupScopeId , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->AltName , $this->Code , $this->Copyright , $this->Description , $this->Disclaimer , $this->HasBeenAsked , $this->IconURI , $this->institutionId , $this->Ipr , $this->IsAccessionsGlobal , $this->IsAnonymous , $this->IsSecurityOn , $this->IsServerBased , $this->License , $this->LsidAuthority , $this->Name , $this->RegNumber , $this->Remarks , $this->TermsOfUse , $this->Uri , $this->AddressID , $this->StorageTreeDefID , $this->UserGroupScopeId );
           } else { 
              $statement->bind_param("issiiisssssisisiiiisssssssii", $this->UserGroupScopeId , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->AltName , $this->Code , $this->Copyright , $this->Description , $this->Disclaimer , $this->HasBeenAsked , $this->IconURI , $this->institutionId , $this->Ipr , $this->IsAccessionsGlobal , $this->IsAnonymous , $this->IsSecurityOn , $this->IsServerBased , $this->License , $this->LsidAuthority , $this->Name , $this->RegNumber , $this->Remarks , $this->TermsOfUse , $this->Uri , $this->AddressID , $this->StorageTreeDefID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->UserGroupScopeId != NULL) {
           $sql = 'SELECT UserGroupScopeId, TimestampCreated, TimestampModified, Version, CreatedByAgentID, ModifiedByAgentID, AltName, Code, Copyright, Description, Disclaimer, HasBeenAsked, IconURI, institutionId, Ipr, IsAccessionsGlobal, IsAnonymous, IsSecurityOn, IsServerBased, License, LsidAuthority, Name, RegNumber, Remarks, TermsOfUse, Uri, AddressID, StorageTreeDefID FROM institution WHERE UserGroupScopeId = "'.$this->UserGroupScopeId.'"  ' ;

           $preparedsql = 'SELECT  FROM institution WHERE  and UserGroupScopeId = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issiiisssssisisiiiisssssssii", $this->UserGroupScopeId, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->AltName, $this->Code, $this->Copyright, $this->Description, $this->Disclaimer, $this->HasBeenAsked, $this->IconURI, $this->institutionId, $this->Ipr, $this->IsAccessionsGlobal, $this->IsAnonymous, $this->IsSecurityOn, $this->IsServerBased, $this->License, $this->LsidAuthority, $this->Name, $this->RegNumber, $this->Remarks, $this->TermsOfUse, $this->Uri, $this->AddressID, $this->StorageTreeDefID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM institution WHERE  and UserGroupScopeId = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issiiisssssisisiiiisssssssii", $this->UserGroupScopeId, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->AltName, $this->Code, $this->Copyright, $this->Description, $this->Disclaimer, $this->HasBeenAsked, $this->IconURI, $this->institutionId, $this->Ipr, $this->IsAccessionsGlobal, $this->IsAnonymous, $this->IsSecurityOn, $this->IsServerBased, $this->License, $this->LsidAuthority, $this->Name, $this->RegNumber, $this->Remarks, $this->TermsOfUse, $this->Uri, $this->AddressID, $this->StorageTreeDefID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->UserGroupScopeId = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM institution';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT UserGroupScopeId FROM institution $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_institution();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromagent() { 
      // ForeignKey in: agent
      $t = new agent();
  } 
  public function loadLinkedFromdivision() { 
      // ForeignKey in: division
      $t = new division();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: AddressID
      $t = new address();
      $t->load(getAddressID());
      $returnvalue[AddressID] = $t;
       // fk: StorageTreeDefID
      $t = new storagetreedef();
      $t->load(getStorageTreeDefID());
      $returnvalue[StorageTreeDefID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT UserGroupScopeId, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(AltName,'') || ' ' || IFNULL(Code,'') || ' ' || IFNULL(Copyright,'') || ' ' || IFNULL(Description,'') || ' ' || IFNULL(Disclaimer,'') || ' ' || IFNULL(HasBeenAsked,'') || ' ' || IFNULL(IconURI,'') || ' ' || IFNULL(institutionId,'') || ' ' || IFNULL(Ipr,'') || ' ' || IFNULL(IsAccessionsGlobal,'') || ' ' || IFNULL(IsAnonymous,'') || ' ' || IFNULL(IsSecurityOn,'') || ' ' || IFNULL(IsServerBased,'') || ' ' || IFNULL(License,'') || ' ' || IFNULL(LsidAuthority,'') || ' ' || IFNULL(Name,'') || ' ' || IFNULL(RegNumber,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(TermsOfUse,'') || ' ' || IFNULL(Uri,'') || ' ' || IFNULL(AddressID,'') || ' ' || IFNULL(StorageTreeDefID,'')) FROM institution order by CreatedByAgentID, ModifiedByAgentID, Name, AddressID, StorageTreeDefID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM institution order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM institution WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM institution WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_institution();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM institution WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM institution WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_institution();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM institution WHERE Name $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM institution WHERE Name $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_institution();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAddressID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM institution WHERE AddressID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM institution WHERE AddressID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_institution();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByStorageTreeDefID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM institution WHERE StorageTreeDefID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM institution WHERE StorageTreeDefID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_institution();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM institution group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM institution group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Name ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Name FROM institution group by Name order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Name=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAddressID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AddressID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AddressID FROM institution group by AddressID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AddressID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctStorageTreeDefID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' StorageTreeDefID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, StorageTreeDefID FROM institution group by StorageTreeDefID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&StorageTreeDefID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'Name':
             $returnvalue = $this->selectDistinctName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AddressID':
             $returnvalue = $this->selectDistinctAddressID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'StorageTreeDefID':
             $returnvalue = $this->selectDistinctStorageTreeDefID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the institution.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_institutionView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_institution <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_institution::USERGROUPSCOPEID.": ".$model->getUserGroupScopeId()."</li>\n";
       $returnvalue .= "<li>".huh_institution::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_institution::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_institution::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_institution::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_institution::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_institution::ALTNAME.": ".$model->getAltName()."</li>\n";
       $returnvalue .= "<li>".huh_institution::CODE.": ".$model->getCode()."</li>\n";
       $returnvalue .= "<li>".huh_institution::COPYRIGHT.": ".$model->getCopyright()."</li>\n";
       $returnvalue .= "<li>".huh_institution::DESCRIPTION.": ".$model->getDescription()."</li>\n";
       $returnvalue .= "<li>".huh_institution::DISCLAIMER.": ".$model->getDisclaimer()."</li>\n";
       $returnvalue .= "<li>".huh_institution::HASBEENASKED.": ".$model->getHasBeenAsked()."</li>\n";
       $returnvalue .= "<li>".huh_institution::ICONURI.": ".$model->getIconURI()."</li>\n";
       $returnvalue .= "<li>".huh_institution::INSTITUTIONID.": ".$model->getinstitutionId()."</li>\n";
       $returnvalue .= "<li>".huh_institution::IPR.": ".$model->getIpr()."</li>\n";
       $returnvalue .= "<li>".huh_institution::ISACCESSIONSGLOBAL.": ".$model->getIsAccessionsGlobal()."</li>\n";
       $returnvalue .= "<li>".huh_institution::ISANONYMOUS.": ".$model->getIsAnonymous()."</li>\n";
       $returnvalue .= "<li>".huh_institution::ISSECURITYON.": ".$model->getIsSecurityOn()."</li>\n";
       $returnvalue .= "<li>".huh_institution::ISSERVERBASED.": ".$model->getIsServerBased()."</li>\n";
       $returnvalue .= "<li>".huh_institution::LICENSE.": ".$model->getLicense()."</li>\n";
       $returnvalue .= "<li>".huh_institution::LSIDAUTHORITY.": ".$model->getLsidAuthority()."</li>\n";
       $returnvalue .= "<li>".huh_institution::NAME.": ".$model->getName()."</li>\n";
       $returnvalue .= "<li>".huh_institution::REGNUMBER.": ".$model->getRegNumber()."</li>\n";
       $returnvalue .= "<li>".huh_institution::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_institution::TERMSOFUSE.": ".$model->getTermsOfUse()."</li>\n";
       $returnvalue .= "<li>".huh_institution::URI.": ".$model->getUri()."</li>\n";
       $returnvalue .= "<li>".huh_institution::ADDRESSID.": ".$model->getAddressID()."</li>\n";
       $returnvalue .= "<li>".huh_institution::STORAGETREEDEFID.": ".$model->getStorageTreeDefID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>address</li>";
           $t_address = new huh_address();
           $t_addressView = new huh_addressView();
           $t_addressView->setModel($t_address);
           if ($model->getAddressID() != '') { 
               $t_address->load($model->getAddressID());
               $returnvalue .= $t_addressView->getDetailsView(false);
           }
           $returnvalue .= "<li>storagetreedef</li>";
           $t_storagetreedef = new huh_storagetreedef();
           $t_storagetreedefView = new huh_storagetreedefView();
           $t_storagetreedefView->setModel($t_storagetreedef);
           if ($model->getStorageTreeDefID() != '') { 
               $t_storagetreedef->load($model->getStorageTreeDefID());
               $returnvalue .= $t_storagetreedefView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_institution::USERGROUPSCOPEID.': "'.$model->getUserGroupScopeId().'",';
       $returnvalue .= '"'.huh_institution::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_institution::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_institution::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_institution::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_institution::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_institution::ALTNAME.': "'.$model->getAltName().'",';
       $returnvalue .= '"'.huh_institution::CODE.': "'.$model->getCode().'",';
       $returnvalue .= '"'.huh_institution::COPYRIGHT.': "'.$model->getCopyright().'",';
       $returnvalue .= '"'.huh_institution::DESCRIPTION.': "'.$model->getDescription().'",';
       $returnvalue .= '"'.huh_institution::DISCLAIMER.': "'.$model->getDisclaimer().'",';
       $returnvalue .= '"'.huh_institution::HASBEENASKED.': "'.$model->getHasBeenAsked().'",';
       $returnvalue .= '"'.huh_institution::ICONURI.': "'.$model->getIconURI().'",';
       $returnvalue .= '"'.huh_institution::INSTITUTIONID.': "'.$model->getinstitutionId().'",';
       $returnvalue .= '"'.huh_institution::IPR.': "'.$model->getIpr().'",';
       $returnvalue .= '"'.huh_institution::ISACCESSIONSGLOBAL.': "'.$model->getIsAccessionsGlobal().'",';
       $returnvalue .= '"'.huh_institution::ISANONYMOUS.': "'.$model->getIsAnonymous().'",';
       $returnvalue .= '"'.huh_institution::ISSECURITYON.': "'.$model->getIsSecurityOn().'",';
       $returnvalue .= '"'.huh_institution::ISSERVERBASED.': "'.$model->getIsServerBased().'",';
       $returnvalue .= '"'.huh_institution::LICENSE.': "'.$model->getLicense().'",';
       $returnvalue .= '"'.huh_institution::LSIDAUTHORITY.': "'.$model->getLsidAuthority().'",';
       $returnvalue .= '"'.huh_institution::NAME.': "'.$model->getName().'",';
       $returnvalue .= '"'.huh_institution::REGNUMBER.': "'.$model->getRegNumber().'",';
       $returnvalue .= '"'.huh_institution::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_institution::TERMSOFUSE.': "'.$model->getTermsOfUse().'",';
       $returnvalue .= '"'.huh_institution::URI.': "'.$model->getUri().'",';
       $returnvalue .= '"'.huh_institution::ADDRESSID.': "'.$model->getAddressID().'",';
       $returnvalue .= '"'.huh_institution::STORAGETREEDEFID.': "'.$model->getStorageTreeDefID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getUserGroupScopeId()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getAltName()."</td>\n";
       $returnvalue .= "<td>".$model->getCode()."</td>\n";
       $returnvalue .= "<td>".$model->getCopyright()."</td>\n";
       $returnvalue .= "<td>".$model->getDescription()."</td>\n";
       $returnvalue .= "<td>".$model->getDisclaimer()."</td>\n";
       $returnvalue .= "<td>".$model->getHasBeenAsked()."</td>\n";
       $returnvalue .= "<td>".$model->getIconURI()."</td>\n";
       $returnvalue .= "<td>".$model->getinstitutionId()."</td>\n";
       $returnvalue .= "<td>".$model->getIpr()."</td>\n";
       $returnvalue .= "<td>".$model->getIsAccessionsGlobal()."</td>\n";
       $returnvalue .= "<td>".$model->getIsAnonymous()."</td>\n";
       $returnvalue .= "<td>".$model->getIsSecurityOn()."</td>\n";
       $returnvalue .= "<td>".$model->getIsServerBased()."</td>\n";
       $returnvalue .= "<td>".$model->getLicense()."</td>\n";
       $returnvalue .= "<td>".$model->getLsidAuthority()."</td>\n";
       $returnvalue .= "<td>".$model->getName()."</td>\n";
       $returnvalue .= "<td>".$model->getRegNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getTermsOfUse()."</td>\n";
       $returnvalue .= "<td>".$model->getUri()."</td>\n";
       $returnvalue .= "<td>".$model->getAddressID()."</td>\n";
       $returnvalue .= "<td>".$model->getStorageTreeDefID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_institution::USERGROUPSCOPEID."</th>\n";
       $returnvalue .= "<th>".huh_institution::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_institution::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_institution::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_institution::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_institution::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_institution::ALTNAME."</th>\n";
       $returnvalue .= "<th>".huh_institution::CODE."</th>\n";
       $returnvalue .= "<th>".huh_institution::COPYRIGHT."</th>\n";
       $returnvalue .= "<th>".huh_institution::DESCRIPTION."</th>\n";
       $returnvalue .= "<th>".huh_institution::DISCLAIMER."</th>\n";
       $returnvalue .= "<th>".huh_institution::HASBEENASKED."</th>\n";
       $returnvalue .= "<th>".huh_institution::ICONURI."</th>\n";
       $returnvalue .= "<th>".huh_institution::INSTITUTIONID."</th>\n";
       $returnvalue .= "<th>".huh_institution::IPR."</th>\n";
       $returnvalue .= "<th>".huh_institution::ISACCESSIONSGLOBAL."</th>\n";
       $returnvalue .= "<th>".huh_institution::ISANONYMOUS."</th>\n";
       $returnvalue .= "<th>".huh_institution::ISSECURITYON."</th>\n";
       $returnvalue .= "<th>".huh_institution::ISSERVERBASED."</th>\n";
       $returnvalue .= "<th>".huh_institution::LICENSE."</th>\n";
       $returnvalue .= "<th>".huh_institution::LSIDAUTHORITY."</th>\n";
       $returnvalue .= "<th>".huh_institution::NAME."</th>\n";
       $returnvalue .= "<th>".huh_institution::REGNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_institution::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_institution::TERMSOFUSE."</th>\n";
       $returnvalue .= "<th>".huh_institution::URI."</th>\n";
       $returnvalue .= "<th>".huh_institution::ADDRESSID."</th>\n";
       $returnvalue .= "<th>".huh_institution::STORAGETREEDEFID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_institution">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new UserGroupScopeId"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_institution::USERGROUPSCOPEID.">USERGROUPSCOPEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_institution::USERGROUPSCOPEID." id=".huh_institution::USERGROUPSCOPEID." value='".$model->getUserGroupScopeId()."'  style=' width:".huh_institution::USERGROUPSCOPEID_SIZE ."em;  '  maxlength='".huh_institution::USERGROUPSCOPEID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_institution::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_institution::TIMESTAMPCREATED." id=".huh_institution::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_institution::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_institution::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_institution::TIMESTAMPMODIFIED." id=".huh_institution::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_institution::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_institution::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_institution::VERSION." id=".huh_institution::VERSION." value='".$model->getVersion()."'  style=' width:".huh_institution::VERSION_SIZE ."em;  '  maxlength='".huh_institution::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_institution::CREATEDBYAGENTID." id=".huh_institution::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_institution::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_institution::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_institution::MODIFIEDBYAGENTID." id=".huh_institution::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_institution::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_institution::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::ALTNAME.">ALTNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::ALTNAME." id=".huh_institution::ALTNAME." >".$model->getAltName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::CODE.">CODE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::CODE." id=".huh_institution::CODE." >".$model->getCode()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::COPYRIGHT.">COPYRIGHT</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::COPYRIGHT." id=".huh_institution::COPYRIGHT." >".$model->getCopyright()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::DESCRIPTION.">DESCRIPTION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::DESCRIPTION." id=".huh_institution::DESCRIPTION." >".$model->getDescription()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::DISCLAIMER.">DISCLAIMER</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::DISCLAIMER." id=".huh_institution::DISCLAIMER." >".$model->getDisclaimer()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::HASBEENASKED.">HASBEENASKED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_institution::HASBEENASKED." id=".huh_institution::HASBEENASKED." value='".$model->getHasBeenAsked()."'  style=' width:".huh_institution::HASBEENASKED_SIZE ."em;  '  maxlength='".huh_institution::HASBEENASKED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::ICONURI.">ICONURI</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::ICONURI." id=".huh_institution::ICONURI." >".$model->getIconURI()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::INSTITUTIONID.">INSTITUTIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_institution::INSTITUTIONID." id=".huh_institution::INSTITUTIONID." value='".$model->getinstitutionId()."'  style=' width:".huh_institution::INSTITUTIONID_SIZE ."em;  '  maxlength='".huh_institution::INSTITUTIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::IPR.">IPR</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::IPR." id=".huh_institution::IPR." >".$model->getIpr()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::ISACCESSIONSGLOBAL.">ISACCESSIONSGLOBAL</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_institution::ISACCESSIONSGLOBAL." id=".huh_institution::ISACCESSIONSGLOBAL." value='".$model->getIsAccessionsGlobal()."'  style=' width:".huh_institution::ISACCESSIONSGLOBAL_SIZE ."em;  '  maxlength='".huh_institution::ISACCESSIONSGLOBAL_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::ISANONYMOUS.">ISANONYMOUS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_institution::ISANONYMOUS." id=".huh_institution::ISANONYMOUS." value='".$model->getIsAnonymous()."'  style=' width:".huh_institution::ISANONYMOUS_SIZE ."em;  '  maxlength='".huh_institution::ISANONYMOUS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::ISSECURITYON.">ISSECURITYON</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_institution::ISSECURITYON." id=".huh_institution::ISSECURITYON." value='".$model->getIsSecurityOn()."'  style=' width:".huh_institution::ISSECURITYON_SIZE ."em;  '  maxlength='".huh_institution::ISSECURITYON_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::ISSERVERBASED.">ISSERVERBASED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_institution::ISSERVERBASED." id=".huh_institution::ISSERVERBASED." value='".$model->getIsServerBased()."'  style=' width:".huh_institution::ISSERVERBASED_SIZE ."em;  '  maxlength='".huh_institution::ISSERVERBASED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::LICENSE.">LICENSE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::LICENSE." id=".huh_institution::LICENSE." >".$model->getLicense()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::LSIDAUTHORITY.">LSIDAUTHORITY</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::LSIDAUTHORITY." id=".huh_institution::LSIDAUTHORITY." >".$model->getLsidAuthority()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::NAME.">NAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::NAME." id=".huh_institution::NAME." >".$model->getName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::REGNUMBER.">REGNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_institution::REGNUMBER." id=".huh_institution::REGNUMBER." value='".$model->getRegNumber()."'  style=' width:".huh_institution::REGNUMBER_SIZE ."em;  '  maxlength='".huh_institution::REGNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::REMARKS." id=".huh_institution::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::TERMSOFUSE.">TERMSOFUSE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::TERMSOFUSE." id=".huh_institution::TERMSOFUSE." >".$model->getTermsOfUse()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::URI.">URI</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_institution::URI." id=".huh_institution::URI." >".$model->getUri()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::ADDRESSID.">ADDRESSID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_institution::ADDRESSID." id=".huh_institution::ADDRESSID." value='".$model->getAddressID()."'  style=' width:".huh_institution::ADDRESSID_SIZE ."em;  '  maxlength='".huh_institution::ADDRESSID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_institution::STORAGETREEDEFID.">STORAGETREEDEFID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_institution::STORAGETREEDEFID." id=".huh_institution::STORAGETREEDEFID." value='".$model->getStorageTreeDefID()."'  style=' width:".huh_institution::STORAGETREEDEFID_SIZE ."em;  '  maxlength='".huh_institution::STORAGETREEDEFID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_institution">';
       $returnvalue .= '<input type=hidden name=UserGroupScopeId id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_institution">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>USERGROUPSCOPEID<input type=text name=".huh_institution::USERGROUPSCOPEID." id=".huh_institution::USERGROUPSCOPEID." value='".$model->getUserGroupScopeId()."'  size='".huh_institution::USERGROUPSCOPEID_SIZE ."'  maxlength='".huh_institution::USERGROUPSCOPEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_institution::TIMESTAMPCREATED." id=".huh_institution::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_institution::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_institution::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_institution::TIMESTAMPMODIFIED." id=".huh_institution::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_institution::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_institution::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_institution::VERSION." id=".huh_institution::VERSION." value='".$model->getVersion()."'  size='".huh_institution::VERSION_SIZE ."'  maxlength='".huh_institution::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_institution::CREATEDBYAGENTID." id=".huh_institution::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_institution::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_institution::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_institution::MODIFIEDBYAGENTID." id=".huh_institution::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_institution::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_institution::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ALTNAME<input type=text name=".huh_institution::ALTNAME." id=".huh_institution::ALTNAME." value='".$model->getAltName()."'  size='51'  maxlength='".huh_institution::ALTNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CODE<input type=text name=".huh_institution::CODE." id=".huh_institution::CODE." value='".$model->getCode()."'  size='51'  maxlength='".huh_institution::CODE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COPYRIGHT<input type=text name=".huh_institution::COPYRIGHT." id=".huh_institution::COPYRIGHT." value='".$model->getCopyright()."'  size='51'  maxlength='".huh_institution::COPYRIGHT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DESCRIPTION<input type=text name=".huh_institution::DESCRIPTION." id=".huh_institution::DESCRIPTION." value='".$model->getDescription()."'  size='51'  maxlength='".huh_institution::DESCRIPTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISCLAIMER<input type=text name=".huh_institution::DISCLAIMER." id=".huh_institution::DISCLAIMER." value='".$model->getDisclaimer()."'  size='51'  maxlength='".huh_institution::DISCLAIMER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>HASBEENASKED<input type=text name=".huh_institution::HASBEENASKED." id=".huh_institution::HASBEENASKED." value='".$model->getHasBeenAsked()."'  size='".huh_institution::HASBEENASKED_SIZE ."'  maxlength='".huh_institution::HASBEENASKED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ICONURI<input type=text name=".huh_institution::ICONURI." id=".huh_institution::ICONURI." value='".$model->getIconURI()."'  size='51'  maxlength='".huh_institution::ICONURI_SIZE ."' ></li>\n";
       $returnvalue .= "<li>INSTITUTIONID<input type=text name=".huh_institution::INSTITUTIONID." id=".huh_institution::INSTITUTIONID." value='".$model->getinstitutionId()."'  size='".huh_institution::INSTITUTIONID_SIZE ."'  maxlength='".huh_institution::INSTITUTIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>IPR<input type=text name=".huh_institution::IPR." id=".huh_institution::IPR." value='".$model->getIpr()."'  size='51'  maxlength='".huh_institution::IPR_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISACCESSIONSGLOBAL<input type=text name=".huh_institution::ISACCESSIONSGLOBAL." id=".huh_institution::ISACCESSIONSGLOBAL." value='".$model->getIsAccessionsGlobal()."'  size='".huh_institution::ISACCESSIONSGLOBAL_SIZE ."'  maxlength='".huh_institution::ISACCESSIONSGLOBAL_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISANONYMOUS<input type=text name=".huh_institution::ISANONYMOUS." id=".huh_institution::ISANONYMOUS." value='".$model->getIsAnonymous()."'  size='".huh_institution::ISANONYMOUS_SIZE ."'  maxlength='".huh_institution::ISANONYMOUS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISSECURITYON<input type=text name=".huh_institution::ISSECURITYON." id=".huh_institution::ISSECURITYON." value='".$model->getIsSecurityOn()."'  size='".huh_institution::ISSECURITYON_SIZE ."'  maxlength='".huh_institution::ISSECURITYON_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISSERVERBASED<input type=text name=".huh_institution::ISSERVERBASED." id=".huh_institution::ISSERVERBASED." value='".$model->getIsServerBased()."'  size='".huh_institution::ISSERVERBASED_SIZE ."'  maxlength='".huh_institution::ISSERVERBASED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LICENSE<input type=text name=".huh_institution::LICENSE." id=".huh_institution::LICENSE." value='".$model->getLicense()."'  size='51'  maxlength='".huh_institution::LICENSE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LSIDAUTHORITY<input type=text name=".huh_institution::LSIDAUTHORITY." id=".huh_institution::LSIDAUTHORITY." value='".$model->getLsidAuthority()."'  size='51'  maxlength='".huh_institution::LSIDAUTHORITY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NAME<input type=text name=".huh_institution::NAME." id=".huh_institution::NAME." value='".$model->getName()."'  size='51'  maxlength='".huh_institution::NAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REGNUMBER<input type=text name=".huh_institution::REGNUMBER." id=".huh_institution::REGNUMBER." value='".$model->getRegNumber()."'  size='".huh_institution::REGNUMBER_SIZE ."'  maxlength='".huh_institution::REGNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_institution::REMARKS." id=".huh_institution::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_institution::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TERMSOFUSE<input type=text name=".huh_institution::TERMSOFUSE." id=".huh_institution::TERMSOFUSE." value='".$model->getTermsOfUse()."'  size='51'  maxlength='".huh_institution::TERMSOFUSE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>URI<input type=text name=".huh_institution::URI." id=".huh_institution::URI." value='".$model->getUri()."'  size='51'  maxlength='".huh_institution::URI_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ADDRESSID<input type=text name=".huh_institution::ADDRESSID." id=".huh_institution::ADDRESSID." value='".$model->getAddressID()."'  size='".huh_institution::ADDRESSID_SIZE ."'  maxlength='".huh_institution::ADDRESSID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STORAGETREEDEFID<input type=text name=".huh_institution::STORAGETREEDEFID." id=".huh_institution::STORAGETREEDEFID." value='".$model->getStorageTreeDefID()."'  size='".huh_institution::STORAGETREEDEFID_SIZE ."'  maxlength='".huh_institution::STORAGETREEDEFID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
