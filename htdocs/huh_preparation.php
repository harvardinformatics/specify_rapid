<?php
//==============================================================================
//===   preparation.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_preparation implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const PREPARATIONID_SIZE   = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const COLLECTIONMEMBERID_SIZE = 11; //INTEGER
   const COUNTAMT_SIZE        = 11; //INTEGER
   const DESCRIPTION_SIZE     = 255; //255
   const IDENTIFIER_SIZE      = 32; //32
   const INVENTORYDATE_SIZE   = 12; //DATE
   const NUMBER1_SIZE         = 20; //REAL
   const NUMBER2_SIZE         = 20; //REAL
   const OBJECTCONDITION_SIZE = 64; //64
   const PREPAREDDATE_SIZE    = 12; //DATE
   const PREPAREDDATEPRECISION_SIZE = 4; //TINYINT
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const SAMPLENUMBER_SIZE    = 32; //32
   const STATUS_SIZE          = 32; //32
   const STORAGELOCATION_SIZE = 100; //100
   const TEXT1_SIZE           = 255; //LONGVARCHAR
   const TEXT2_SIZE           = 255; //LONGVARCHAR
   const YESNO1_SIZE          = 1; //1
   const YESNO2_SIZE          = 1; //1
   const YESNO3_SIZE          = 1; //1
   const PREPARATIONATTRIBUTEID_SIZE = 11; //INTEGER
   const GEOGRAPHYID_SIZE     = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const PREPAREDBYID_SIZE    = 11; //INTEGER
   const PREPTYPEID_SIZE      = 11; //INTEGER
   const PARENTID_SIZE        = 11; //INTEGER
   const TAXONID_SIZE         = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const APPRAISALID_SIZE     = 11; //INTEGER
   const STORAGEID_SIZE       = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const PREPARATIONID     = 'PreparationID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const COLLECTIONMEMBERID = 'CollectionMemberID';
   const COUNTAMT          = 'CountAmt';
   const DESCRIPTION       = 'Description';
   const IDENTIFIER        = 'Identifier';
   const INVENTORYDATE     = 'InventoryDate';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const OBJECTCONDITION   = 'ObjectCondition';
   const PREPAREDDATE      = 'PreparedDate';
   const PREPAREDDATEPRECISION = 'PreparedDatePrecision';
   const REMARKS           = 'Remarks';
   const SAMPLENUMBER      = 'SampleNumber';
   const STATUS            = 'Status';
   const STORAGELOCATION   = 'StorageLocation';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const YESNO1            = 'YesNo1';
   const YESNO2            = 'YesNo2';
   const YESNO3            = 'YesNo3';
   const PREPARATIONATTRIBUTEID = 'PreparationAttributeID';
   const GEOGRAPHYID       = 'GeographyID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const PREPAREDBYID      = 'PreparedByID';
   const PREPTYPEID        = 'PrepTypeID';
   const PARENTID          = 'ParentID';
   const TAXONID           = 'TaxonID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const APPRAISALID       = 'AppraisalID';
   const STORAGEID         = 'StorageID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $PreparationID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PreparationID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $CollectionMemberID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionMemberID']), 0, 11);
  $CountAmt = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CountAmt']), 0, 11);
  $Description = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Description']), 0, 255);
  $Identifier = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Identifier']), 0, 32);
  $InventoryDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['InventoryDate']), 0, 12);
  $Number1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number1']), 0, 20);
  $Number2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Number2']), 0, 20);
  $ObjectCondition = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ObjectCondition']), 0, 64);
  $PreparedDate = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PreparedDate']), 0, 12);
  $PreparedDatePrecision = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PreparedDatePrecision']), 0, 4);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $SampleNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['SampleNumber']), 0, 32);
  $Status = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Status']), 0, 32);
  $StorageLocation = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['StorageLocation']), 0, 100);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 255);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 255);
  $YesNo1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo1']), 0, 1);
  $YesNo2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo2']), 0, 1);
  $YesNo3 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['YesNo3']), 0, 1);
  $PreparationAttributeID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PreparationAttributeID']), 0, 11);
  $GeographyID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['GeographyID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $PreparedByID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PreparedByID']), 0, 11);
  $PrepTypeID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PrepTypeID']), 0, 11);
  $ParentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ParentID']), 0, 11);
  $TaxonID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['TaxonID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $AppraisalID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AppraisalID']), 0, 11);
  $StorageID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['StorageID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $PreparationID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $CollectionMemberID; // INTEGER 
   private $CountAmt; // INTEGER 
   private $Description; // VARCHAR(255) 
   private $Identifier; // VARCHAR(32) 
   private $InventoryDate; // DATE 
   private $Number1; // REAL 
   private $Number2; // REAL 
   private $ObjectCondition; // VARCHAR(64) 
   private $PreparedDate; // DATE 
   private $PreparedDatePrecision; // TINYINT 
   private $Remarks; // LONGVARCHAR 
   private $SampleNumber; // VARCHAR(32) 
   private $Status; // VARCHAR(32) 
   private $StorageLocation; // VARCHAR(100) 
   private $Text1; // LONGVARCHAR 
   private $Text2; // LONGVARCHAR 
   private $YesNo1; // BIT(1) 
   private $YesNo2; // BIT(1) 
   private $YesNo3; // BIT(1) 
   private $PreparationAttributeID; // INTEGER 
   private $GeographyID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $PreparedByID; // INTEGER 
   private $PrepTypeID; // INTEGER 
   private $ParentID; // INTEGER 
   private $TaxonID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $AppraisalID; // INTEGER 
   private $StorageID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' PreparationID, TimestampCreated, TimestampModified, Version, CollectionMemberID, CountAmt, Description, Identifier, InventoryDate, Number1, Number2, ObjectCondition, PreparedDate, PreparedDatePrecision, Remarks, SampleNumber, Status, StorageLocation, Text1, Text2, YesNo1, YesNo2, YesNo3, PreparationAttributeID, GeographyID, ModifiedByAgentID, PreparedByID, PrepTypeID, ParentID, TaxonID, CreatedByAgentID, AppraisalID, StorageID, ';
   const PKFIELDLIST = ' PreparationID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'PreparationID'  ) ;
   private $allFieldsArray = array( 0 => 'PreparationID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'CollectionMemberID' , 5 => 'CountAmt' , 6 => 'Description' , 7 => 'Identifier' , 8 => 'InventoryDate' , 9 => 'Number1' , 10 => 'Number2' , 11 => 'ObjectCondition' , 12 => 'PreparedDate' , 13 => 'PreparedDatePrecision' , 14 => 'Remarks' , 15 => 'SampleNumber' , 16 => 'Status' , 17 => 'StorageLocation' , 18 => 'Text1' , 19 => 'Text2' , 20 => 'YesNo1' , 21 => 'YesNo2' , 22 => 'YesNo3' , 23 => 'PreparationAttributeID' , 24 => 'GeographyID' , 25 => 'ModifiedByAgentID' , 26 => 'PreparedByID' , 27 => 'PrepTypeID' , 28 => 'ParentID' , 29 => 'TaxonID' , 30 => 'CreatedByAgentID' , 31 => 'AppraisalID' , 32 => 'StorageID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'CollectionMemberID' , 7 => 'Identifier' , 12 => 'PreparedDate' , 23 => 'PreparationAttributeID' , 24 => 'GeographyID' , 25 => 'ModifiedByAgentID' , 26 => 'PreparedByID' , 27 => 'PrepTypeID' , 28 => 'ParentID' , 29 => 'TaxonID' , 30 => 'CreatedByAgentID' , 31 => 'AppraisalID' , 32 => 'StorageID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_preparation(){
       $this->PreparationID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->CollectionMemberID = '';
       $this->CountAmt = '';
       $this->Description = '';
       $this->Identifier = '';
       $this->InventoryDate = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->ObjectCondition = '';
       $this->PreparedDate = '';
       $this->PreparedDatePrecision = '';
       $this->Remarks = '';
       $this->SampleNumber = '';
       $this->Status = '';
       $this->StorageLocation = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->YesNo1 = '';
       $this->YesNo2 = '';
       $this->YesNo3 = '';
       $this->PreparationAttributeID = '';
       $this->GeographyID = '';
       $this->ModifiedByAgentID = '';
       $this->PreparedByID = '';
       $this->PrepTypeID = '';
       $this->ParentID = '';
       $this->TaxonID = '';
       $this->CreatedByAgentID = '';
       $this->AppraisalID = '';
       $this->StorageID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='PreparationID') { $returnvalue = $this->setPreparationID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->setCollectionMemberID($value); } 
             if ($fieldname=='CountAmt') { $returnvalue = $this->setCountAmt($value); } 
             if ($fieldname=='Description') { $returnvalue = $this->setDescription($value); } 
             if ($fieldname=='Identifier') { $returnvalue = $this->setIdentifier($value); } 
             if ($fieldname=='InventoryDate') { $returnvalue = $this->setInventoryDate($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='ObjectCondition') { $returnvalue = $this->setObjectCondition($value); } 
             if ($fieldname=='PreparedDate') { $returnvalue = $this->setPreparedDate($value); } 
             if ($fieldname=='PreparedDatePrecision') { $returnvalue = $this->setPreparedDatePrecision($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='SampleNumber') { $returnvalue = $this->setSampleNumber($value); } 
             if ($fieldname=='Status') { $returnvalue = $this->setStatus($value); } 
             if ($fieldname=='StorageLocation') { $returnvalue = $this->setStorageLocation($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->setYesNo1($value); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->setYesNo2($value); } 
             if ($fieldname=='YesNo3') { $returnvalue = $this->setYesNo3($value); } 
             if ($fieldname=='PreparationAttributeID') { $returnvalue = $this->setPreparationAttributeID($value); } 
             if ($fieldname=='GeographyID') { $returnvalue = $this->setGeographyID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='PreparedByID') { $returnvalue = $this->setPreparedByID($value); } 
             if ($fieldname=='PrepTypeID') { $returnvalue = $this->setPrepTypeID($value); } 
             if ($fieldname=='ParentID') { $returnvalue = $this->setParentID($value); } 
             if ($fieldname=='TaxonID') { $returnvalue = $this->setTaxonID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='AppraisalID') { $returnvalue = $this->setAppraisalID($value); } 
             if ($fieldname=='StorageID') { $returnvalue = $this->setStorageID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='PreparationID') { $returnvalue = $this->getPreparationID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='CollectionMemberID') { $returnvalue = $this->getCollectionMemberID(); } 
             if ($fieldname=='CountAmt') { $returnvalue = $this->getCountAmt(); } 
             if ($fieldname=='Description') { $returnvalue = $this->getDescription(); } 
             if ($fieldname=='Identifier') { $returnvalue = $this->getIdentifier(); } 
             if ($fieldname=='InventoryDate') { $returnvalue = $this->getInventoryDate(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='ObjectCondition') { $returnvalue = $this->getObjectCondition(); } 
             if ($fieldname=='PreparedDate') { $returnvalue = $this->getPreparedDate(); } 
             if ($fieldname=='PreparedDatePrecision') { $returnvalue = $this->getPreparedDatePrecision(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='SampleNumber') { $returnvalue = $this->getSampleNumber(); } 
             if ($fieldname=='Status') { $returnvalue = $this->getStatus(); } 
             if ($fieldname=='StorageLocation') { $returnvalue = $this->getStorageLocation(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='YesNo1') { $returnvalue = $this->getYesNo1(); } 
             if ($fieldname=='YesNo2') { $returnvalue = $this->getYesNo2(); } 
             if ($fieldname=='YesNo3') { $returnvalue = $this->getYesNo3(); } 
             if ($fieldname=='PreparationAttributeID') { $returnvalue = $this->getPreparationAttributeID(); } 
             if ($fieldname=='GeographyID') { $returnvalue = $this->getGeographyID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='PreparedByID') { $returnvalue = $this->getPreparedByID(); } 
             if ($fieldname=='PrepTypeID') { $returnvalue = $this->getPrepTypeID(); } 
             if ($fieldname=='ParentID') { $returnvalue = $this->getParentID(); } 
             if ($fieldname=='TaxonID') { $returnvalue = $this->getTaxonID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='AppraisalID') { $returnvalue = $this->getAppraisalID(); } 
             if ($fieldname=='StorageID') { $returnvalue = $this->getStorageID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*PreparationID*/
   public function getPreparationID() {
       if ($this->PreparationID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PreparationID));
       }
   }
   public function setPreparationID($PreparationID) {
       if (strlen(preg_replace('/[^0-9]/','',$PreparationID)) > huh_preparation::PREPARATIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PreparationID = trim($PreparationID);
       if (!ctype_digit(strval($PreparationID)) && trim(strval($PreparationID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PreparationID = $this->l_addslashes($PreparationID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_preparation::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_preparation::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_preparation::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*CollectionMemberID*/
   public function getCollectionMemberID() {
       if ($this->CollectionMemberID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionMemberID));
       }
   }
   public function setCollectionMemberID($CollectionMemberID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionMemberID)) > huh_preparation::COLLECTIONMEMBERID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectionMemberID = trim($CollectionMemberID);
       if (!ctype_digit(strval($CollectionMemberID))) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionMemberID = $this->l_addslashes($CollectionMemberID);
       $this->dirty = true;
   }
/*CountAmt*/
   public function getCountAmt() {
       if ($this->CountAmt==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CountAmt));
       }
   }
   public function setCountAmt($CountAmt) {
       if (strlen(preg_replace('/[^0-9]/','',$CountAmt)) > huh_preparation::COUNTAMT_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CountAmt = trim($CountAmt);
       if (!ctype_digit(strval($CountAmt)) && trim(strval($CountAmt))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CountAmt = $this->l_addslashes($CountAmt);
       $this->dirty = true;
   }
/*Description*/
   public function getDescription() {
       if ($this->Description==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Description));
       }
   }
   public function setDescription($Description) {
       if (strlen($Description) > huh_preparation::DESCRIPTION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Description = $this->l_addslashes($Description);
       $this->dirty = true;
   }
/*Identifier*/
   public function getIdentifier() {
       if ($this->Identifier==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Identifier));
       }
   }
   public function setIdentifier($Identifier) {
       if (strlen($Identifier) > huh_preparation::IDENTIFIER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Identifier = $this->l_addslashes($Identifier);
       $this->dirty = true;
   }
/*InventoryDate*/
   public function getInventoryDate() {
       if ($this->InventoryDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->InventoryDate));
       }
   }
   public function setInventoryDate($InventoryDate) {
       if (strlen($InventoryDate) > huh_preparation::INVENTORYDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->InventoryDate = $this->l_addslashes($InventoryDate);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen($Number1) > huh_preparation::NUMBER1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen($Number2) > huh_preparation::NUMBER2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*ObjectCondition*/
   public function getObjectCondition() {
       if ($this->ObjectCondition==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ObjectCondition));
       }
   }
   public function setObjectCondition($ObjectCondition) {
       if (strlen($ObjectCondition) > huh_preparation::OBJECTCONDITION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ObjectCondition = $this->l_addslashes($ObjectCondition);
       $this->dirty = true;
   }
/*PreparedDate*/
   public function getPreparedDate() {
       if ($this->PreparedDate==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PreparedDate));
       }
   }
   public function setPreparedDate($PreparedDate) {
       if (strlen($PreparedDate) > huh_preparation::PREPAREDDATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PreparedDate = $this->l_addslashes($PreparedDate);
       $this->dirty = true;
   }
/*PreparedDatePrecision*/
   public function getPreparedDatePrecision() {
       if ($this->PreparedDatePrecision==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PreparedDatePrecision));
       }
   }
   public function setPreparedDatePrecision($PreparedDatePrecision) {
       if (strlen($PreparedDatePrecision) > huh_preparation::PREPAREDDATEPRECISION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PreparedDatePrecision = $this->l_addslashes($PreparedDatePrecision);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_preparation::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*SampleNumber*/
   public function getSampleNumber() {
       if ($this->SampleNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SampleNumber));
       }
   }
   public function setSampleNumber($SampleNumber) {
       if (strlen($SampleNumber) > huh_preparation::SAMPLENUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->SampleNumber = $this->l_addslashes($SampleNumber);
       $this->dirty = true;
   }
/*Status*/
   public function getStatus() {
       if ($this->Status==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Status));
       }
   }
   public function setStatus($Status) {
       if (strlen($Status) > huh_preparation::STATUS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Status = $this->l_addslashes($Status);
       $this->dirty = true;
   }
/*StorageLocation*/
   public function getStorageLocation() {
       if ($this->StorageLocation==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StorageLocation));
       }
   }
   public function setStorageLocation($StorageLocation) {
       if (strlen($StorageLocation) > huh_preparation::STORAGELOCATION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->StorageLocation = $this->l_addslashes($StorageLocation);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_preparation::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_preparation::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*YesNo1*/
   public function getYesNo1() {
       if ($this->YesNo1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo1));
       }
   }
   public function setYesNo1($YesNo1) {
       if (strlen($YesNo1) > huh_preparation::YESNO1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo1 = $this->l_addslashes($YesNo1);
       $this->dirty = true;
   }
/*YesNo2*/
   public function getYesNo2() {
       if ($this->YesNo2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo2));
       }
   }
   public function setYesNo2($YesNo2) {
       if (strlen($YesNo2) > huh_preparation::YESNO2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo2 = $this->l_addslashes($YesNo2);
       $this->dirty = true;
   }
/*YesNo3*/
   public function getYesNo3() {
       if ($this->YesNo3==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->YesNo3));
       }
   }
   public function setYesNo3($YesNo3) {
       if (strlen($YesNo3) > huh_preparation::YESNO3_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->YesNo3 = $this->l_addslashes($YesNo3);
       $this->dirty = true;
   }
/*PreparationAttributeID*/
   public function getPreparationAttributeID() {
       if ($this->PreparationAttributeID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PreparationAttributeID));
       }
   }
   public function setPreparationAttributeID($PreparationAttributeID) {
       if (strlen(preg_replace('/[^0-9]/','',$PreparationAttributeID)) > huh_preparation::PREPARATIONATTRIBUTEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PreparationAttributeID = trim($PreparationAttributeID);
       if (!ctype_digit(strval($PreparationAttributeID)) && trim(strval($PreparationAttributeID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PreparationAttributeID = $this->l_addslashes($PreparationAttributeID);
       $this->dirty = true;
   }
/*GeographyID*/
   public function getGeographyID() {
       if ($this->GeographyID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeographyID));
       }
   }
   public function setGeographyID($GeographyID) {
       if (strlen(preg_replace('/[^0-9]/','',$GeographyID)) > huh_preparation::GEOGRAPHYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $GeographyID = trim($GeographyID);
       if (!ctype_digit(strval($GeographyID)) && trim(strval($GeographyID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->GeographyID = $this->l_addslashes($GeographyID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_preparation::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*PreparedByID*/
   public function getPreparedByID() {
       if ($this->PreparedByID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PreparedByID));
       }
   }
   public function setPreparedByID($PreparedByID) {
       if (strlen(preg_replace('/[^0-9]/','',$PreparedByID)) > huh_preparation::PREPAREDBYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PreparedByID = trim($PreparedByID);
       if (!ctype_digit(strval($PreparedByID)) && trim(strval($PreparedByID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PreparedByID = $this->l_addslashes($PreparedByID);
       $this->dirty = true;
   }
/*PrepTypeID*/
   public function getPrepTypeID() {
       if ($this->PrepTypeID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PrepTypeID));
       }
   }
   public function setPrepTypeID($PrepTypeID) {
       if (strlen(preg_replace('/[^0-9]/','',$PrepTypeID)) > huh_preparation::PREPTYPEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PrepTypeID = trim($PrepTypeID);
       if (!ctype_digit(strval($PrepTypeID))) {
             throw new Exception("Value must be an integer");
       }
       $this->PrepTypeID = $this->l_addslashes($PrepTypeID);
       $this->dirty = true;
   }
/*ParentID*/
   public function getParentID() {
       if ($this->ParentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ParentID));
       }
   }
   public function setParentID($ParentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ParentID)) > huh_preparation::PARENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ParentID = trim($ParentID);
       if (!ctype_digit(strval($ParentID)) && trim(strval($ParentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ParentID = $this->l_addslashes($ParentID);
       $this->dirty = true;
   }
/*TaxonID*/
   public function getTaxonID() {
       if ($this->TaxonID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TaxonID));
       }
   }
   public function setTaxonID($TaxonID) {
       if (strlen(preg_replace('/[^0-9]/','',$TaxonID)) > huh_preparation::TAXONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $TaxonID = trim($TaxonID);
       if (!ctype_digit(strval($TaxonID)) && trim(strval($TaxonID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->TaxonID = $this->l_addslashes($TaxonID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_preparation::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*AppraisalID*/
   public function getAppraisalID() {
       if ($this->AppraisalID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AppraisalID));
       }
   }
   public function setAppraisalID($AppraisalID) {
       if (strlen(preg_replace('/[^0-9]/','',$AppraisalID)) > huh_preparation::APPRAISALID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AppraisalID = trim($AppraisalID);
       if (!ctype_digit(strval($AppraisalID)) && trim(strval($AppraisalID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AppraisalID = $this->l_addslashes($AppraisalID);
       $this->dirty = true;
   }
/*StorageID*/
   public function getStorageID() {
       if ($this->StorageID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->StorageID));
       }
   }
   public function setStorageID($StorageID) {
       if (strlen(preg_replace('/[^0-9]/','',$StorageID)) > huh_preparation::STORAGEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $StorageID = trim($StorageID);
       if (!ctype_digit(strval($StorageID)) && trim(strval($StorageID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->StorageID = $this->l_addslashes($StorageID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getPreparationID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['PreparationID'] = $this->getPreparationID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_PreparationIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_CollectionMemberIDMYSQLI_TYPE = 'i';
  const C_CountAmtMYSQLI_TYPE = 'i';
  const C_DescriptionMYSQLI_TYPE = 's';
  const C_IdentifierMYSQLI_TYPE = 's';
  const C_InventoryDateMYSQLI_TYPE = 's';
  const C_Number1MYSQLI_TYPE = 's';
  const C_Number2MYSQLI_TYPE = 's';
  const C_ObjectConditionMYSQLI_TYPE = 's';
  const C_PreparedDateMYSQLI_TYPE = 's';
  const C_PreparedDatePrecisionMYSQLI_TYPE = 'i';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_SampleNumberMYSQLI_TYPE = 's';
  const C_StatusMYSQLI_TYPE = 's';
  const C_StorageLocationMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_YesNo1MYSQLI_TYPE = 'i';
  const C_YesNo2MYSQLI_TYPE = 'i';
  const C_YesNo3MYSQLI_TYPE = 'i';
  const C_PreparationAttributeIDMYSQLI_TYPE = 'i';
  const C_GeographyIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_PreparedByIDMYSQLI_TYPE = 'i';
  const C_PrepTypeIDMYSQLI_TYPE = 'i';
  const C_ParentIDMYSQLI_TYPE = 'i';
  const C_TaxonIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_AppraisalIDMYSQLI_TYPE = 'i';
  const C_StorageIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='PreparationID') { $retval = self::C_PreparationIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='CollectionMemberID') { $retval = self::C_CollectionMemberIDMYSQLI_TYPE; }
      if ($aFieldname=='CountAmt') { $retval = self::C_CountAmtMYSQLI_TYPE; }
      if ($aFieldname=='Description') { $retval = self::C_DescriptionMYSQLI_TYPE; }
      if ($aFieldname=='Identifier') { $retval = self::C_IdentifierMYSQLI_TYPE; }
      if ($aFieldname=='InventoryDate') { $retval = self::C_InventoryDateMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='ObjectCondition') { $retval = self::C_ObjectConditionMYSQLI_TYPE; }
      if ($aFieldname=='PreparedDate') { $retval = self::C_PreparedDateMYSQLI_TYPE; }
      if ($aFieldname=='PreparedDatePrecision') { $retval = self::C_PreparedDatePrecisionMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='SampleNumber') { $retval = self::C_SampleNumberMYSQLI_TYPE; }
      if ($aFieldname=='Status') { $retval = self::C_StatusMYSQLI_TYPE; }
      if ($aFieldname=='StorageLocation') { $retval = self::C_StorageLocationMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='YesNo1') { $retval = self::C_YesNo1MYSQLI_TYPE; }
      if ($aFieldname=='YesNo2') { $retval = self::C_YesNo2MYSQLI_TYPE; }
      if ($aFieldname=='YesNo3') { $retval = self::C_YesNo3MYSQLI_TYPE; }
      if ($aFieldname=='PreparationAttributeID') { $retval = self::C_PreparationAttributeIDMYSQLI_TYPE; }
      if ($aFieldname=='GeographyID') { $retval = self::C_GeographyIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='PreparedByID') { $retval = self::C_PreparedByIDMYSQLI_TYPE; }
      if ($aFieldname=='PrepTypeID') { $retval = self::C_PrepTypeIDMYSQLI_TYPE; }
      if ($aFieldname=='ParentID') { $retval = self::C_ParentIDMYSQLI_TYPE; }
      if ($aFieldname=='TaxonID') { $retval = self::C_TaxonIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='AppraisalID') { $retval = self::C_AppraisalIDMYSQLI_TYPE; }
      if ($aFieldname=='StorageID') { $retval = self::C_StorageIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setPreparationID($pk[PreparationID]);
             } else { ;
                 $this->setPreparationID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->PreparationID != NULL) {
           $sql = 'SELECT PreparationID, TimestampCreated, TimestampModified, Version, CollectionMemberID, CountAmt, Description, Identifier, InventoryDate, Number1, Number2, ObjectCondition, PreparedDate, PreparedDatePrecision, Remarks, SampleNumber, Status, StorageLocation, Text1, Text2, YesNo1, YesNo2, YesNo3, PreparationAttributeID, GeographyID, ModifiedByAgentID, PreparedByID, PrepTypeID, ParentID, TaxonID, CreatedByAgentID, AppraisalID, StorageID FROM preparation WHERE PreparationID = '.$this->PreparationID ;

           $preparesql = 'SELECT PreparationID, TimestampCreated, TimestampModified, Version, CollectionMemberID, CountAmt, Description, Identifier, InventoryDate, Number1, Number2, ObjectCondition, PreparedDate, PreparedDatePrecision, Remarks, SampleNumber, Status, StorageLocation, Text1, Text2, YesNo1, YesNo2, YesNo3, PreparationAttributeID, GeographyID, ModifiedByAgentID, PreparedByID, PrepTypeID, ParentID, TaxonID, CreatedByAgentID, AppraisalID, StorageID FROM preparation WHERE PreparationID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->PreparationID);
              $statement->execute();
              $statement->bind_result($this->PreparationID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->CountAmt, $this->Description, $this->Identifier, $this->InventoryDate, $this->Number1, $this->Number2, $this->ObjectCondition, $this->PreparedDate, $this->PreparedDatePrecision, $this->Remarks, $this->SampleNumber, $this->Status, $this->StorageLocation, $this->Text1, $this->Text2, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->PreparationAttributeID, $this->GeographyID, $this->ModifiedByAgentID, $this->PreparedByID, $this->PrepTypeID, $this->ParentID, $this->TaxonID, $this->CreatedByAgentID, $this->AppraisalID, $this->StorageID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->PreparationID!= NULL) {
            $sql  = 'UPDATE  preparation SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", CollectionMemberID = ? ";
            $sql .=  ", CountAmt = ? ";
            $sql .=  ", Description = ? ";
            $sql .=  ", Identifier = ? ";
            $sql .=  ", InventoryDate = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", ObjectCondition = ? ";
            $sql .=  ", PreparedDate = ? ";
            $sql .=  ", PreparedDatePrecision = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", SampleNumber = ? ";
            $sql .=  ", Status = ? ";
            $sql .=  ", StorageLocation = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", YesNo1 = ? ";
            $sql .=  ", YesNo2 = ? ";
            $sql .=  ", YesNo3 = ? ";
            $sql .=  ", PreparationAttributeID = ? ";
            $sql .=  ", GeographyID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", PreparedByID = ? ";
            $sql .=  ", PrepTypeID = ? ";
            $sql .=  ", ParentID = ? ";
            $sql .=  ", TaxonID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", AppraisalID = ? ";
            $sql .=  ", StorageID = ? ";

            $sql .= "  WHERE PreparationID = ? ";
        } else {
            $sql  = 'INSERT INTO preparation ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( PreparationID ,  TimestampCreated ,  TimestampModified ,  Version ,  CollectionMemberID ,  CountAmt ,  Description ,  Identifier ,  InventoryDate ,  Number1 ,  Number2 ,  ObjectCondition ,  PreparedDate ,  PreparedDatePrecision ,  Remarks ,  SampleNumber ,  Status ,  StorageLocation ,  Text1 ,  Text2 ,  YesNo1 ,  YesNo2 ,  YesNo3 ,  PreparationAttributeID ,  GeographyID ,  ModifiedByAgentID ,  PreparedByID ,  PrepTypeID ,  ParentID ,  TaxonID ,  CreatedByAgentID ,  AppraisalID ,  StorageID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->PreparationID!= NULL ) {
              $statement->bind_param("issiiisssssssissssssiiiiiiiiiiiiii", $this->PreparationID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->CountAmt , $this->Description , $this->Identifier , $this->InventoryDate , $this->Number1 , $this->Number2 , $this->ObjectCondition , $this->PreparedDate , $this->PreparedDatePrecision , $this->Remarks , $this->SampleNumber , $this->Status , $this->StorageLocation , $this->Text1 , $this->Text2 , $this->YesNo1 , $this->YesNo2 , $this->YesNo3 , $this->PreparationAttributeID , $this->GeographyID , $this->ModifiedByAgentID , $this->PreparedByID , $this->PrepTypeID , $this->ParentID , $this->TaxonID , $this->CreatedByAgentID , $this->AppraisalID , $this->StorageID , $this->PreparationID );
           } else { 
              $statement->bind_param("issiiisssssssissssssiiiiiiiiiiiii", $this->PreparationID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CollectionMemberID , $this->CountAmt , $this->Description , $this->Identifier , $this->InventoryDate , $this->Number1 , $this->Number2 , $this->ObjectCondition , $this->PreparedDate , $this->PreparedDatePrecision , $this->Remarks , $this->SampleNumber , $this->Status , $this->StorageLocation , $this->Text1 , $this->Text2 , $this->YesNo1 , $this->YesNo2 , $this->YesNo3 , $this->PreparationAttributeID , $this->GeographyID , $this->ModifiedByAgentID , $this->PreparedByID , $this->PrepTypeID , $this->ParentID , $this->TaxonID , $this->CreatedByAgentID , $this->AppraisalID , $this->StorageID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->PreparationID != NULL) {
           $sql = 'SELECT PreparationID, TimestampCreated, TimestampModified, Version, CollectionMemberID, CountAmt, Description, Identifier, InventoryDate, Number1, Number2, ObjectCondition, PreparedDate, PreparedDatePrecision, Remarks, SampleNumber, Status, StorageLocation, Text1, Text2, YesNo1, YesNo2, YesNo3, PreparationAttributeID, GeographyID, ModifiedByAgentID, PreparedByID, PrepTypeID, ParentID, TaxonID, CreatedByAgentID, AppraisalID, StorageID FROM preparation WHERE PreparationID = "'.$this->PreparationID.'"  ' ;

           $preparedsql = 'SELECT  FROM preparation WHERE  and PreparationID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issiiisssssssissssssiiiiiiiiiiiii", $this->PreparationID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->CountAmt, $this->Description, $this->Identifier, $this->InventoryDate, $this->Number1, $this->Number2, $this->ObjectCondition, $this->PreparedDate, $this->PreparedDatePrecision, $this->Remarks, $this->SampleNumber, $this->Status, $this->StorageLocation, $this->Text1, $this->Text2, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->PreparationAttributeID, $this->GeographyID, $this->ModifiedByAgentID, $this->PreparedByID, $this->PrepTypeID, $this->ParentID, $this->TaxonID, $this->CreatedByAgentID, $this->AppraisalID, $this->StorageID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM preparation WHERE  and PreparationID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issiiisssssssissssssiiiiiiiiiiiii", $this->PreparationID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CollectionMemberID, $this->CountAmt, $this->Description, $this->Identifier, $this->InventoryDate, $this->Number1, $this->Number2, $this->ObjectCondition, $this->PreparedDate, $this->PreparedDatePrecision, $this->Remarks, $this->SampleNumber, $this->Status, $this->StorageLocation, $this->Text1, $this->Text2, $this->YesNo1, $this->YesNo2, $this->YesNo3, $this->PreparationAttributeID, $this->GeographyID, $this->ModifiedByAgentID, $this->PreparedByID, $this->PrepTypeID, $this->ParentID, $this->TaxonID, $this->CreatedByAgentID, $this->AppraisalID, $this->StorageID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->PreparationID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM preparation';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT PreparationID FROM preparation $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_preparation();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromaccessionpreparation() { 
      // ForeignKey in: accessionpreparation
      $t = new accessionpreparation();
  } 
  public function loadLinkedFromconservdescription() { 
      // ForeignKey in: conservdescription
      $t = new conservdescription();
  } 
  public function loadLinkedFromdeaccessionpreparation() { 
      // ForeignKey in: deaccessionpreparation
      $t = new deaccessionpreparation();
  } 
  public function loadLinkedFromexchangeoutpreparation() { 
      // ForeignKey in: exchangeoutpreparation
      $t = new exchangeoutpreparation();
  } 
  public function loadLinkedFromfragment() { 
      // ForeignKey in: fragment
      $t = new fragment();
  } 
  public function loadLinkedFromgiftpreparation() { 
      // ForeignKey in: giftpreparation
      $t = new giftpreparation();
  } 
  public function loadLinkedFromloanpreparation() { 
      // ForeignKey in: loanpreparation
      $t = new loanpreparation();
  } 
  public function loadLinkedFrompreparationattachment() { 
      // ForeignKey in: preparationattachment
      $t = new preparationattachment();
  } 
  public function loadLinkedFrompreparationattr() { 
      // ForeignKey in: preparationattr
      $t = new preparationattr();
  } 
  public function loadLinkedFromtreatmentevent() { 
      // ForeignKey in: treatmentevent
      $t = new treatmentevent();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: PreparationAttributeID
      $t = new huh_preparationattribute();
      $t->load($this->getPreparationAttributeID());
      $returnvalue[PreparationAttributeID] = $t;
       // fk: GeographyID
      $t = new huh_geography();
      $t->load($this->getGeographyID());
      $returnvalue[GeographyID] = $t;
       // fk: ModifiedByAgentID
      $t = new huh_agent();
      $t->load($this->getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: PreparedByID
      $t = new huh_agent();
      $t->load($this->getPreparedByID());
      $returnvalue[PreparedByID] = $t;
       // fk: PrepTypeID
      $t = new huh_preptype();
      $t->load($this->getPrepTypeID());
      $returnvalue[PrepTypeID] = $t;
       // fk: ParentID
      $t = new huh_preparation();
      $t->load($this->getParentID());
      $returnvalue[ParentID] = $t;
       // fk: TaxonID
      $t = new huh_taxon();
      $t->load($this->getTaxonID());
      $returnvalue[TaxonID] = $t;
       // fk: CreatedByAgentID
      $t = new huh_agent();
      $t->load($this->getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: AppraisalID
      $t = new huh_appraisal();
      $t->load($this->getAppraisalID());
      $returnvalue[AppraisalID] = $t;
       // fk: StorageID
      $t = new huh_storage();
      $t->load($this->getStorageID());
      $returnvalue[StorageID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT PreparationID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(CollectionMemberID,'') || ' ' || IFNULL(CountAmt,'') || ' ' || IFNULL(Description,'') || ' ' || IFNULL(Identifier,'') || ' ' || IFNULL(InventoryDate,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(ObjectCondition,'') || ' ' || IFNULL(PreparedDate,'') || ' ' || IFNULL(PreparedDatePrecision,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(SampleNumber,'') || ' ' || IFNULL(Status,'') || ' ' || IFNULL(StorageLocation,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(YesNo1,'') || ' ' || IFNULL(YesNo2,'') || ' ' || IFNULL(YesNo3,'') || ' ' || IFNULL(PreparationAttributeID,'') || ' ' || IFNULL(GeographyID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(PreparedByID,'') || ' ' || IFNULL(PrepTypeID,'') || ' ' || IFNULL(ParentID,'') || ' ' || IFNULL(TaxonID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(AppraisalID,'') || ' ' || IFNULL(StorageID,'')) FROM preparation order by CollectionMemberID, Identifier, PreparedDate, PreparationAttributeID, GeographyID, ModifiedByAgentID, PreparedByID, PrepTypeID, ParentID, TaxonID, CreatedByAgentID, AppraisalID, StorageID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM preparation order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCollectionMemberID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE CollectionMemberID $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE CollectionMemberID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByIdentifier($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE Identifier $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE Identifier $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPreparedDate($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE PreparedDate $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE PreparedDate $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPreparationAttributeID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE PreparationAttributeID $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE PreparationAttributeID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGeographyID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE GeographyID $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE GeographyID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPreparedByID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE PreparedByID $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE PreparedByID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPrepTypeID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE PrepTypeID $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE PrepTypeID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByParentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE ParentID $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE ParentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByTaxonID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE TaxonID $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE TaxonID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAppraisalID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE AppraisalID $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE AppraisalID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByStorageID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PreparationID FROM preparation WHERE StorageID $operator '$searchTerm'";
        $preparedsql = "SELECT PreparationID FROM preparation WHERE StorageID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_preparation();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCollectionMemberID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionMemberID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectionMemberID FROM preparation group by CollectionMemberID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectionMemberID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctIdentifier($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Identifier ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Identifier FROM preparation group by Identifier order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Identifier=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPreparedDate($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' PreparedDate ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, PreparedDate FROM preparation group by PreparedDate order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&PreparedDate=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPreparationAttributeID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' PreparationAttributeID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, PreparationAttributeID FROM preparation group by PreparationAttributeID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&PreparationAttributeID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGeographyID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GeographyID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GeographyID FROM preparation group by GeographyID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GeographyID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM preparation group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPreparedByID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' PreparedByID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, PreparedByID FROM preparation group by PreparedByID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&PreparedByID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPrepTypeID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' PrepTypeID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, PrepTypeID FROM preparation group by PrepTypeID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&PrepTypeID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctParentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ParentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ParentID FROM preparation group by ParentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ParentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctTaxonID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' TaxonID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, TaxonID FROM preparation group by TaxonID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&TaxonID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM preparation group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAppraisalID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AppraisalID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AppraisalID FROM preparation group by AppraisalID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AppraisalID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctStorageID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' StorageID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, StorageID FROM preparation group by StorageID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&StorageID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'CollectionMemberID':
             $returnvalue = $this->selectDistinctCollectionMemberID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'Identifier':
             $returnvalue = $this->selectDistinctIdentifier($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'PreparedDate':
             $returnvalue = $this->selectDistinctPreparedDate($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'PreparationAttributeID':
             $returnvalue = $this->selectDistinctPreparationAttributeID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GeographyID':
             $returnvalue = $this->selectDistinctGeographyID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'PreparedByID':
             $returnvalue = $this->selectDistinctPreparedByID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'PrepTypeID':
             $returnvalue = $this->selectDistinctPrepTypeID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ParentID':
             $returnvalue = $this->selectDistinctParentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'TaxonID':
             $returnvalue = $this->selectDistinctTaxonID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AppraisalID':
             $returnvalue = $this->selectDistinctAppraisalID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'StorageID':
             $returnvalue = $this->selectDistinctStorageID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the preparation.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_preparationView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_preparation <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_preparation::PREPARATIONID.": ".$model->getPreparationID()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::COLLECTIONMEMBERID.": ".$model->getCollectionMemberID()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::COUNTAMT.": ".$model->getCountAmt()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::DESCRIPTION.": ".$model->getDescription()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::IDENTIFIER.": ".$model->getIdentifier()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::INVENTORYDATE.": ".$model->getInventoryDate()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::OBJECTCONDITION.": ".$model->getObjectCondition()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::PREPAREDDATE.": ".$model->getPreparedDate()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::PREPAREDDATEPRECISION.": ".$model->getPreparedDatePrecision()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::SAMPLENUMBER.": ".$model->getSampleNumber()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::STATUS.": ".$model->getStatus()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::STORAGELOCATION.": ".$model->getStorageLocation()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::YESNO1.": ".$model->getYesNo1()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::YESNO2.": ".$model->getYesNo2()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::YESNO3.": ".$model->getYesNo3()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::PREPARATIONATTRIBUTEID.": ".$model->getPreparationAttributeID()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::GEOGRAPHYID.": ".$model->getGeographyID()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::PREPAREDBYID.": ".$model->getPreparedByID()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::PREPTYPEID.": ".$model->getPrepTypeID()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::PARENTID.": ".$model->getParentID()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::TAXONID.": ".$model->getTaxonID()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::APPRAISALID.": ".$model->getAppraisalID()."</li>\n";
       $returnvalue .= "<li>".huh_preparation::STORAGEID.": ".$model->getStorageID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>preparationattribute</li>";
           $t_preparationattribute = new huh_preparationattribute();
           $t_preparationattributeView = new huh_preparationattributeView();
           $t_preparationattributeView->setModel($t_preparationattribute);
           if ($model->getPreparationAttributeID() != '') { 
               $t_preparationattribute->load($model->getPreparationAttributeID());
               $returnvalue .= $t_preparationattributeView->getDetailsView(false);
           }
           $returnvalue .= "<li>geography</li>";
           $t_geography = new huh_geography();
           $t_geographyView = new huh_geographyView();
           $t_geographyView->setModel($t_geography);
           if ($model->getGeographyID() != '') { 
               $t_geography->load($model->getGeographyID());
               $returnvalue .= $t_geographyView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getPreparedByID() != '') { 
               $t_agent->load($model->getPreparedByID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>preptype</li>";
           $t_preptype = new huh_preptype();
           $t_preptypeView = new huh_preptypeView();
           $t_preptypeView->setModel($t_preptype);
           if ($model->getPrepTypeID() != '') { 
               $t_preptype->load($model->getPrepTypeID());
               $returnvalue .= $t_preptypeView->getDetailsView(false);
           }
           $returnvalue .= "<li>preparation</li>";
           $t_preparation = new huh_preparation();
           $t_preparationView = new huh_preparationView();
           $t_preparationView->setModel($t_preparation);
           if ($model->getParentID() != '') { 
               $t_preparation->load($model->getParentID());
               $returnvalue .= $t_preparationView->getDetailsView(false);
           }
           $returnvalue .= "<li>taxon</li>";
           $t_taxon = new huh_taxon();
           $t_taxonView = new huh_taxonView();
           $t_taxonView->setModel($t_taxon);
           if ($model->getTaxonID() != '') { 
               $t_taxon->load($model->getTaxonID());
               $returnvalue .= $t_taxonView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>appraisal</li>";
           $t_appraisal = new huh_appraisal();
           $t_appraisalView = new huh_appraisalView();
           $t_appraisalView->setModel($t_appraisal);
           if ($model->getAppraisalID() != '') { 
               $t_appraisal->load($model->getAppraisalID());
               $returnvalue .= $t_appraisalView->getDetailsView(false);
           }
           $returnvalue .= "<li>storage</li>";
           $t_storage = new huh_storage();
           $t_storageView = new huh_storageView();
           $t_storageView->setModel($t_storage);
           if ($model->getStorageID() != '') { 
               $t_storage->load($model->getStorageID());
               $returnvalue .= $t_storageView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_preparation::PREPARATIONID.': "'.$model->getPreparationID().'",';
       $returnvalue .= '"'.huh_preparation::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_preparation::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_preparation::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_preparation::COLLECTIONMEMBERID.': "'.$model->getCollectionMemberID().'",';
       $returnvalue .= '"'.huh_preparation::COUNTAMT.': "'.$model->getCountAmt().'",';
       $returnvalue .= '"'.huh_preparation::DESCRIPTION.': "'.$model->getDescription().'",';
       $returnvalue .= '"'.huh_preparation::IDENTIFIER.': "'.$model->getIdentifier().'",';
       $returnvalue .= '"'.huh_preparation::INVENTORYDATE.': "'.$model->getInventoryDate().'",';
       $returnvalue .= '"'.huh_preparation::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_preparation::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_preparation::OBJECTCONDITION.': "'.$model->getObjectCondition().'",';
       $returnvalue .= '"'.huh_preparation::PREPAREDDATE.': "'.$model->getPreparedDate().'",';
       $returnvalue .= '"'.huh_preparation::PREPAREDDATEPRECISION.': "'.$model->getPreparedDatePrecision().'",';
       $returnvalue .= '"'.huh_preparation::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_preparation::SAMPLENUMBER.': "'.$model->getSampleNumber().'",';
       $returnvalue .= '"'.huh_preparation::STATUS.': "'.$model->getStatus().'",';
       $returnvalue .= '"'.huh_preparation::STORAGELOCATION.': "'.$model->getStorageLocation().'",';
       $returnvalue .= '"'.huh_preparation::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_preparation::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_preparation::YESNO1.': "'.$model->getYesNo1().'",';
       $returnvalue .= '"'.huh_preparation::YESNO2.': "'.$model->getYesNo2().'",';
       $returnvalue .= '"'.huh_preparation::YESNO3.': "'.$model->getYesNo3().'",';
       $returnvalue .= '"'.huh_preparation::PREPARATIONATTRIBUTEID.': "'.$model->getPreparationAttributeID().'",';
       $returnvalue .= '"'.huh_preparation::GEOGRAPHYID.': "'.$model->getGeographyID().'",';
       $returnvalue .= '"'.huh_preparation::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_preparation::PREPAREDBYID.': "'.$model->getPreparedByID().'",';
       $returnvalue .= '"'.huh_preparation::PREPTYPEID.': "'.$model->getPrepTypeID().'",';
       $returnvalue .= '"'.huh_preparation::PARENTID.': "'.$model->getParentID().'",';
       $returnvalue .= '"'.huh_preparation::TAXONID.': "'.$model->getTaxonID().'",';
       $returnvalue .= '"'.huh_preparation::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_preparation::APPRAISALID.': "'.$model->getAppraisalID().'",';
       $returnvalue .= '"'.huh_preparation::STORAGEID.': "'.$model->getStorageID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getPreparationID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionMemberID()."</td>\n";
       $returnvalue .= "<td>".$model->getCountAmt()."</td>\n";
       $returnvalue .= "<td>".$model->getDescription()."</td>\n";
       $returnvalue .= "<td>".$model->getIdentifier()."</td>\n";
       $returnvalue .= "<td>".$model->getInventoryDate()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getObjectCondition()."</td>\n";
       $returnvalue .= "<td>".$model->getPreparedDate()."</td>\n";
       $returnvalue .= "<td>".$model->getPreparedDatePrecision()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getSampleNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getStatus()."</td>\n";
       $returnvalue .= "<td>".$model->getStorageLocation()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo1()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo2()."</td>\n";
       $returnvalue .= "<td>".$model->getYesNo3()."</td>\n";
       $returnvalue .= "<td>".$model->getPreparationAttributeID()."</td>\n";
       $returnvalue .= "<td>".$model->getGeographyID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getPreparedByID()."</td>\n";
       $returnvalue .= "<td>".$model->getPrepTypeID()."</td>\n";
       $returnvalue .= "<td>".$model->getParentID()."</td>\n";
       $returnvalue .= "<td>".$model->getTaxonID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getAppraisalID()."</td>\n";
       $returnvalue .= "<td>".$model->getStorageID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_preparation::PREPARATIONID."</th>\n";
       $returnvalue .= "<th>".huh_preparation::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_preparation::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_preparation::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_preparation::COLLECTIONMEMBERID."</th>\n";
       $returnvalue .= "<th>".huh_preparation::COUNTAMT."</th>\n";
       $returnvalue .= "<th>".huh_preparation::DESCRIPTION."</th>\n";
       $returnvalue .= "<th>".huh_preparation::IDENTIFIER."</th>\n";
       $returnvalue .= "<th>".huh_preparation::INVENTORYDATE."</th>\n";
       $returnvalue .= "<th>".huh_preparation::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_preparation::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_preparation::OBJECTCONDITION."</th>\n";
       $returnvalue .= "<th>".huh_preparation::PREPAREDDATE."</th>\n";
       $returnvalue .= "<th>".huh_preparation::PREPAREDDATEPRECISION."</th>\n";
       $returnvalue .= "<th>".huh_preparation::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_preparation::SAMPLENUMBER."</th>\n";
       $returnvalue .= "<th>".huh_preparation::STATUS."</th>\n";
       $returnvalue .= "<th>".huh_preparation::STORAGELOCATION."</th>\n";
       $returnvalue .= "<th>".huh_preparation::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_preparation::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_preparation::YESNO1."</th>\n";
       $returnvalue .= "<th>".huh_preparation::YESNO2."</th>\n";
       $returnvalue .= "<th>".huh_preparation::YESNO3."</th>\n";
       $returnvalue .= "<th>".huh_preparation::PREPARATIONATTRIBUTEID."</th>\n";
       $returnvalue .= "<th>".huh_preparation::GEOGRAPHYID."</th>\n";
       $returnvalue .= "<th>".huh_preparation::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_preparation::PREPAREDBYID."</th>\n";
       $returnvalue .= "<th>".huh_preparation::PREPTYPEID."</th>\n";
       $returnvalue .= "<th>".huh_preparation::PARENTID."</th>\n";
       $returnvalue .= "<th>".huh_preparation::TAXONID."</th>\n";
       $returnvalue .= "<th>".huh_preparation::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_preparation::APPRAISALID."</th>\n";
       $returnvalue .= "<th>".huh_preparation::STORAGEID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_preparation">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new PreparationID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_preparation::PREPARATIONID.">PREPARATIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::PREPARATIONID." id=".huh_preparation::PREPARATIONID." value='".$model->getPreparationID()."'  style=' width:".huh_preparation::PREPARATIONID_SIZE ."em;  '  maxlength='".huh_preparation::PREPARATIONID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_preparation::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::TIMESTAMPCREATED." id=".huh_preparation::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_preparation::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_preparation::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::TIMESTAMPMODIFIED." id=".huh_preparation::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_preparation::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_preparation::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::VERSION." id=".huh_preparation::VERSION." value='".$model->getVersion()."'  style=' width:".huh_preparation::VERSION_SIZE ."em;  '  maxlength='".huh_preparation::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::COLLECTIONMEMBERID.">COLLECTIONMEMBERID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::COLLECTIONMEMBERID." id=".huh_preparation::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  style=' width:".huh_preparation::COLLECTIONMEMBERID_SIZE ."em;  '  maxlength='".huh_preparation::COLLECTIONMEMBERID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::COUNTAMT.">COUNTAMT</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::COUNTAMT." id=".huh_preparation::COUNTAMT." value='".$model->getCountAmt()."'  style=' width:".huh_preparation::COUNTAMT_SIZE ."em;  '  maxlength='".huh_preparation::COUNTAMT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::DESCRIPTION.">DESCRIPTION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_preparation::DESCRIPTION." id=".huh_preparation::DESCRIPTION." >".$model->getDescription()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::IDENTIFIER.">IDENTIFIER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::IDENTIFIER." id=".huh_preparation::IDENTIFIER." value='".$model->getIdentifier()."'  style=' width:".huh_preparation::IDENTIFIER_SIZE ."em;  '  maxlength='".huh_preparation::IDENTIFIER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::INVENTORYDATE.">INVENTORYDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::INVENTORYDATE." id=".huh_preparation::INVENTORYDATE." value='".$model->getInventoryDate()."'  style=' width:".huh_preparation::INVENTORYDATE_SIZE ."em;  '  maxlength='".huh_preparation::INVENTORYDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::NUMBER1." id=".huh_preparation::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_preparation::NUMBER1_SIZE ."em;  '  maxlength='".huh_preparation::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::NUMBER2." id=".huh_preparation::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_preparation::NUMBER2_SIZE ."em;  '  maxlength='".huh_preparation::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::OBJECTCONDITION.">OBJECTCONDITION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_preparation::OBJECTCONDITION." id=".huh_preparation::OBJECTCONDITION." >".$model->getObjectCondition()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::PREPAREDDATE.">PREPAREDDATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::PREPAREDDATE." id=".huh_preparation::PREPAREDDATE." value='".$model->getPreparedDate()."'  style=' width:".huh_preparation::PREPAREDDATE_SIZE ."em;  '  maxlength='".huh_preparation::PREPAREDDATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::PREPAREDDATEPRECISION.">PREPAREDDATEPRECISION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::PREPAREDDATEPRECISION." id=".huh_preparation::PREPAREDDATEPRECISION." value='".$model->getPreparedDatePrecision()."'  style=' width:".huh_preparation::PREPAREDDATEPRECISION_SIZE ."em;  '  maxlength='".huh_preparation::PREPAREDDATEPRECISION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_preparation::REMARKS." id=".huh_preparation::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::SAMPLENUMBER.">SAMPLENUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::SAMPLENUMBER." id=".huh_preparation::SAMPLENUMBER." value='".$model->getSampleNumber()."'  style=' width:".huh_preparation::SAMPLENUMBER_SIZE ."em;  '  maxlength='".huh_preparation::SAMPLENUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::STATUS.">STATUS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::STATUS." id=".huh_preparation::STATUS." value='".$model->getStatus()."'  style=' width:".huh_preparation::STATUS_SIZE ."em;  '  maxlength='".huh_preparation::STATUS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::STORAGELOCATION.">STORAGELOCATION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_preparation::STORAGELOCATION." id=".huh_preparation::STORAGELOCATION." >".$model->getStorageLocation()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::TEXT1.">TEXT1</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_preparation::TEXT1." id=".huh_preparation::TEXT1." >".$model->getText1()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_preparation::TEXT2." id=".huh_preparation::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::YESNO1.">YESNO1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::YESNO1." id=".huh_preparation::YESNO1." value='".$model->getYesNo1()."'  style=' width:".huh_preparation::YESNO1_SIZE ."em;  '  maxlength='".huh_preparation::YESNO1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::YESNO2.">YESNO2</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::YESNO2." id=".huh_preparation::YESNO2." value='".$model->getYesNo2()."'  style=' width:".huh_preparation::YESNO2_SIZE ."em;  '  maxlength='".huh_preparation::YESNO2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::YESNO3.">YESNO3</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_preparation::YESNO3." id=".huh_preparation::YESNO3." value='".$model->getYesNo3()."'  style=' width:".huh_preparation::YESNO3_SIZE ."em;  '  maxlength='".huh_preparation::YESNO3_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::PREPARATIONATTRIBUTEID.">PREPARATIONATTRIBUTEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::PREPARATIONATTRIBUTEID." id=".huh_preparation::PREPARATIONATTRIBUTEID." value='".$model->getPreparationAttributeID()."'  style=' width:".huh_preparation::PREPARATIONATTRIBUTEID_SIZE ."em;  '  maxlength='".huh_preparation::PREPARATIONATTRIBUTEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::GEOGRAPHYID.">GEOGRAPHYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::GEOGRAPHYID." id=".huh_preparation::GEOGRAPHYID." value='".$model->getGeographyID()."'  style=' width:".huh_preparation::GEOGRAPHYID_SIZE ."em;  '  maxlength='".huh_preparation::GEOGRAPHYID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::MODIFIEDBYAGENTID." id=".huh_preparation::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_preparation::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_preparation::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::PREPAREDBYID.">PREPAREDBYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::PREPAREDBYID." id=".huh_preparation::PREPAREDBYID." value='".$model->getPreparedByID()."'  style=' width:".huh_preparation::PREPAREDBYID_SIZE ."em;  '  maxlength='".huh_preparation::PREPAREDBYID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::PREPTYPEID.">PREPTYPEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::PREPTYPEID." id=".huh_preparation::PREPTYPEID." value='".$model->getPrepTypeID()."'  style=' width:".huh_preparation::PREPTYPEID_SIZE ."em;  '  maxlength='".huh_preparation::PREPTYPEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::PARENTID.">PARENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::PARENTID." id=".huh_preparation::PARENTID." value='".$model->getParentID()."'  style=' width:".huh_preparation::PARENTID_SIZE ."em;  '  maxlength='".huh_preparation::PARENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::TAXONID.">TAXONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::TAXONID." id=".huh_preparation::TAXONID." value='".$model->getTaxonID()."'  style=' width:".huh_preparation::TAXONID_SIZE ."em;  '  maxlength='".huh_preparation::TAXONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::CREATEDBYAGENTID." id=".huh_preparation::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_preparation::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_preparation::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::APPRAISALID.">APPRAISALID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::APPRAISALID." id=".huh_preparation::APPRAISALID." value='".$model->getAppraisalID()."'  style=' width:".huh_preparation::APPRAISALID_SIZE ."em;  '  maxlength='".huh_preparation::APPRAISALID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_preparation::STORAGEID.">STORAGEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_preparation::STORAGEID." id=".huh_preparation::STORAGEID." value='".$model->getStorageID()."'  style=' width:".huh_preparation::STORAGEID_SIZE ."em;  '  maxlength='".huh_preparation::STORAGEID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_preparation">';
       $returnvalue .= '<input type=hidden name=PreparationID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_preparation">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>PREPARATIONID<input type=text name=".huh_preparation::PREPARATIONID." id=".huh_preparation::PREPARATIONID." value='".$model->getPreparationID()."'  size='".huh_preparation::PREPARATIONID_SIZE ."'  maxlength='".huh_preparation::PREPARATIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_preparation::TIMESTAMPCREATED." id=".huh_preparation::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_preparation::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_preparation::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_preparation::TIMESTAMPMODIFIED." id=".huh_preparation::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_preparation::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_preparation::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_preparation::VERSION." id=".huh_preparation::VERSION." value='".$model->getVersion()."'  size='".huh_preparation::VERSION_SIZE ."'  maxlength='".huh_preparation::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONMEMBERID<input type=text name=".huh_preparation::COLLECTIONMEMBERID." id=".huh_preparation::COLLECTIONMEMBERID." value='".$model->getCollectionMemberID()."'  size='".huh_preparation::COLLECTIONMEMBERID_SIZE ."'  maxlength='".huh_preparation::COLLECTIONMEMBERID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COUNTAMT<input type=text name=".huh_preparation::COUNTAMT." id=".huh_preparation::COUNTAMT." value='".$model->getCountAmt()."'  size='".huh_preparation::COUNTAMT_SIZE ."'  maxlength='".huh_preparation::COUNTAMT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DESCRIPTION<input type=text name=".huh_preparation::DESCRIPTION." id=".huh_preparation::DESCRIPTION." value='".$model->getDescription()."'  size='51'  maxlength='".huh_preparation::DESCRIPTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>IDENTIFIER<input type=text name=".huh_preparation::IDENTIFIER." id=".huh_preparation::IDENTIFIER." value='".$model->getIdentifier()."'  size='".huh_preparation::IDENTIFIER_SIZE ."'  maxlength='".huh_preparation::IDENTIFIER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>INVENTORYDATE<input type=text name=".huh_preparation::INVENTORYDATE." id=".huh_preparation::INVENTORYDATE." value='".$model->getInventoryDate()."'  size='".huh_preparation::INVENTORYDATE_SIZE ."'  maxlength='".huh_preparation::INVENTORYDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_preparation::NUMBER1." id=".huh_preparation::NUMBER1." value='".$model->getNumber1()."'  size='".huh_preparation::NUMBER1_SIZE ."'  maxlength='".huh_preparation::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_preparation::NUMBER2." id=".huh_preparation::NUMBER2." value='".$model->getNumber2()."'  size='".huh_preparation::NUMBER2_SIZE ."'  maxlength='".huh_preparation::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>OBJECTCONDITION<input type=text name=".huh_preparation::OBJECTCONDITION." id=".huh_preparation::OBJECTCONDITION." value='".$model->getObjectCondition()."'  size='51'  maxlength='".huh_preparation::OBJECTCONDITION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PREPAREDDATE<input type=text name=".huh_preparation::PREPAREDDATE." id=".huh_preparation::PREPAREDDATE." value='".$model->getPreparedDate()."'  size='".huh_preparation::PREPAREDDATE_SIZE ."'  maxlength='".huh_preparation::PREPAREDDATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PREPAREDDATEPRECISION<input type=text name=".huh_preparation::PREPAREDDATEPRECISION." id=".huh_preparation::PREPAREDDATEPRECISION." value='".$model->getPreparedDatePrecision()."'  size='".huh_preparation::PREPAREDDATEPRECISION_SIZE ."'  maxlength='".huh_preparation::PREPAREDDATEPRECISION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_preparation::REMARKS." id=".huh_preparation::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_preparation::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SAMPLENUMBER<input type=text name=".huh_preparation::SAMPLENUMBER." id=".huh_preparation::SAMPLENUMBER." value='".$model->getSampleNumber()."'  size='".huh_preparation::SAMPLENUMBER_SIZE ."'  maxlength='".huh_preparation::SAMPLENUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STATUS<input type=text name=".huh_preparation::STATUS." id=".huh_preparation::STATUS." value='".$model->getStatus()."'  size='".huh_preparation::STATUS_SIZE ."'  maxlength='".huh_preparation::STATUS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STORAGELOCATION<input type=text name=".huh_preparation::STORAGELOCATION." id=".huh_preparation::STORAGELOCATION." value='".$model->getStorageLocation()."'  size='51'  maxlength='".huh_preparation::STORAGELOCATION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_preparation::TEXT1." id=".huh_preparation::TEXT1." value='".$model->getText1()."'  size='51'  maxlength='".huh_preparation::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_preparation::TEXT2." id=".huh_preparation::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_preparation::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO1<input type=text name=".huh_preparation::YESNO1." id=".huh_preparation::YESNO1." value='".$model->getYesNo1()."'  size='".huh_preparation::YESNO1_SIZE ."'  maxlength='".huh_preparation::YESNO1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO2<input type=text name=".huh_preparation::YESNO2." id=".huh_preparation::YESNO2." value='".$model->getYesNo2()."'  size='".huh_preparation::YESNO2_SIZE ."'  maxlength='".huh_preparation::YESNO2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>YESNO3<input type=text name=".huh_preparation::YESNO3." id=".huh_preparation::YESNO3." value='".$model->getYesNo3()."'  size='".huh_preparation::YESNO3_SIZE ."'  maxlength='".huh_preparation::YESNO3_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PREPARATIONATTRIBUTEID<input type=text name=".huh_preparation::PREPARATIONATTRIBUTEID." id=".huh_preparation::PREPARATIONATTRIBUTEID." value='".$model->getPreparationAttributeID()."'  size='".huh_preparation::PREPARATIONATTRIBUTEID_SIZE ."'  maxlength='".huh_preparation::PREPARATIONATTRIBUTEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOGRAPHYID<input type=text name=".huh_preparation::GEOGRAPHYID." id=".huh_preparation::GEOGRAPHYID." value='".$model->getGeographyID()."'  size='".huh_preparation::GEOGRAPHYID_SIZE ."'  maxlength='".huh_preparation::GEOGRAPHYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_preparation::MODIFIEDBYAGENTID." id=".huh_preparation::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_preparation::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_preparation::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PREPAREDBYID<input type=text name=".huh_preparation::PREPAREDBYID." id=".huh_preparation::PREPAREDBYID." value='".$model->getPreparedByID()."'  size='".huh_preparation::PREPAREDBYID_SIZE ."'  maxlength='".huh_preparation::PREPAREDBYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PREPTYPEID<input type=text name=".huh_preparation::PREPTYPEID." id=".huh_preparation::PREPTYPEID." value='".$model->getPrepTypeID()."'  size='".huh_preparation::PREPTYPEID_SIZE ."'  maxlength='".huh_preparation::PREPTYPEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PARENTID<input type=text name=".huh_preparation::PARENTID." id=".huh_preparation::PARENTID." value='".$model->getParentID()."'  size='".huh_preparation::PARENTID_SIZE ."'  maxlength='".huh_preparation::PARENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TAXONID<input type=text name=".huh_preparation::TAXONID." id=".huh_preparation::TAXONID." value='".$model->getTaxonID()."'  size='".huh_preparation::TAXONID_SIZE ."'  maxlength='".huh_preparation::TAXONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_preparation::CREATEDBYAGENTID." id=".huh_preparation::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_preparation::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_preparation::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>APPRAISALID<input type=text name=".huh_preparation::APPRAISALID." id=".huh_preparation::APPRAISALID." value='".$model->getAppraisalID()."'  size='".huh_preparation::APPRAISALID_SIZE ."'  maxlength='".huh_preparation::APPRAISALID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>STORAGEID<input type=text name=".huh_preparation::STORAGEID." id=".huh_preparation::STORAGEID." value='".$model->getStorageID()."'  size='".huh_preparation::STORAGEID_SIZE ."'  maxlength='".huh_preparation::STORAGEID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>