<?php
//==============================================================================
//===   geography.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_geography implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const GEOGRAPHYID_SIZE     = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const ABBREV_SIZE          = 16; //16
   const CENTROIDLAT_SIZE     = 19; //19,2
   const CENTROIDLON_SIZE     = 19; //19,2
   const COMMONNAME_SIZE      = 128; //128
   const FULLNAME_SIZE        = 255; //255
   const GEOGRAPHYCODE_SIZE   = 8; //8
   const GML_SIZE             = 255; //LONGVARCHAR
   const GUID_SIZE            = 128; //128
   const HIGHESTCHILDNODENUMBER_SIZE = 11; //INTEGER
   const ISACCEPTED_SIZE      = 1; //1
   const ISCURRENT_SIZE       = 1; //1
   const NAME_SIZE            = 64; //64
   const NODENUMBER_SIZE      = 11; //INTEGER
   const NUMBER1_SIZE         = 11; //INTEGER
   const NUMBER2_SIZE         = 11; //INTEGER
   const RANKID_SIZE          = 11; //INTEGER
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const TEXT1_SIZE           = 32; //32
   const TEXT2_SIZE           = 255; //255
   const TIMESTAMPVERSION_SIZE = 21; //TIMESTAMP
   const GEOGRAPHYTREEDEFITEMID_SIZE = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const PARENTID_SIZE        = 11; //INTEGER
   const ACCEPTEDID_SIZE      = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const GEOGRAPHYTREEDEFID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const GEOGRAPHYID       = 'GeographyID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const ABBREV            = 'Abbrev';
   const CENTROIDLAT       = 'CentroidLat';
   const CENTROIDLON       = 'CentroidLon';
   const COMMONNAME        = 'CommonName';
   const FULLNAME          = 'FullName';
   const GEOGRAPHYCODE     = 'GeographyCode';
   const GML               = 'GML';
   const GUID              = 'GUID';
   const HIGHESTCHILDNODENUMBER = 'HighestChildNodeNumber';
   const ISACCEPTED        = 'IsAccepted';
   const ISCURRENT         = 'IsCurrent';
   const NAME              = 'Name';
   const NODENUMBER        = 'NodeNumber';
   const NUMBER1           = 'Number1';
   const NUMBER2           = 'Number2';
   const RANKID            = 'RankID';
   const REMARKS           = 'Remarks';
   const TEXT1             = 'Text1';
   const TEXT2             = 'Text2';
   const TIMESTAMPVERSION  = 'TimestampVersion';
   const GEOGRAPHYTREEDEFITEMID = 'GeographyTreeDefItemID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const PARENTID          = 'ParentID';
   const ACCEPTEDID        = 'AcceptedID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const GEOGRAPHYTREEDEFID = 'GeographyTreeDefID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $GeographyID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['GeographyID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $Abbrev = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Abbrev']), 0, 16);
  $CentroidLat = substr(preg_replace('/[^0-9\-\.\[NULL\]]/','',$_GET['CentroidLat']), 0, 19);
  $CentroidLon = substr(preg_replace('/[^0-9\-\.\[NULL\]]/','',$_GET['CentroidLon']), 0, 19);
  $CommonName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CommonName']), 0, 128);
  $FullName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FullName']), 0, 255);
  $GeographyCode = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GeographyCode']), 0, 8);
  $GML = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GML']), 0, 255);
  $GUID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['GUID']), 0, 128);
  $HighestChildNodeNumber = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['HighestChildNodeNumber']), 0, 11);
  $IsAccepted = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsAccepted']), 0, 1);
  $IsCurrent = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsCurrent']), 0, 1);
  $Name = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Name']), 0, 64);
  $NodeNumber = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['NodeNumber']), 0, 11);
  $Number1 = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Number1']), 0, 11);
  $Number2 = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Number2']), 0, 11);
  $RankID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['RankID']), 0, 11);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $Text1 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text1']), 0, 32);
  $Text2 = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text2']), 0, 255);
  $TimestampVersion = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampVersion']), 0, 21);
  $GeographyTreeDefItemID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['GeographyTreeDefItemID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ParentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ParentID']), 0, 11);
  $AcceptedID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AcceptedID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $GeographyTreeDefID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['GeographyTreeDefID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $GeographyID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $Abbrev; // VARCHAR(16) 
   private $CentroidLat; // DECIMAL(19,2) 
   private $CentroidLon; // DECIMAL(19,2) 
   private $CommonName; // VARCHAR(128) 
   private $FullName; // VARCHAR(255) 
   private $GeographyCode; // VARCHAR(8) 
   private $GML; // LONGVARCHAR 
   private $GUID; // VARCHAR(128) 
   private $HighestChildNodeNumber; // INTEGER 
   private $IsAccepted; // BIT(1) 
   private $IsCurrent; // BIT(1) 
   private $Name; // VARCHAR(64) 
   private $NodeNumber; // INTEGER 
   private $Number1; // INTEGER 
   private $Number2; // INTEGER 
   private $RankID; // INTEGER 
   private $Remarks; // LONGVARCHAR 
   private $Text1; // VARCHAR(32) 
   private $Text2; // VARCHAR(255) 
   private $TimestampVersion; // TIMESTAMP 
   private $GeographyTreeDefItemID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $ParentID; // INTEGER 
   private $AcceptedID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $GeographyTreeDefID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' GeographyID, TimestampCreated, TimestampModified, Version, Abbrev, CentroidLat, CentroidLon, CommonName, FullName, GeographyCode, GML, GUID, HighestChildNodeNumber, IsAccepted, IsCurrent, Name, NodeNumber, Number1, Number2, RankID, Remarks, Text1, Text2, TimestampVersion, GeographyTreeDefItemID, CreatedByAgentID, ParentID, AcceptedID, ModifiedByAgentID, GeographyTreeDefID, ';
   const PKFIELDLIST = ' GeographyID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'GeographyID'  ) ;
   private $allFieldsArray = array( 0 => 'GeographyID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'Abbrev' , 5 => 'CentroidLat' , 6 => 'CentroidLon' , 7 => 'CommonName' , 8 => 'FullName' , 9 => 'GeographyCode' , 10 => 'GML' , 11 => 'GUID' , 12 => 'HighestChildNodeNumber' , 13 => 'IsAccepted' , 14 => 'IsCurrent' , 15 => 'Name' , 16 => 'NodeNumber' , 17 => 'Number1' , 18 => 'Number2' , 19 => 'RankID' , 20 => 'Remarks' , 21 => 'Text1' , 22 => 'Text2' , 23 => 'TimestampVersion' , 24 => 'GeographyTreeDefItemID' , 25 => 'CreatedByAgentID' , 26 => 'ParentID' , 27 => 'AcceptedID' , 28 => 'ModifiedByAgentID' , 29 => 'GeographyTreeDefID'  ) ;
   private $selectDistinctFieldsArray = array( 8 => 'FullName' , 11 => 'GUID' , 12 => 'HighestChildNodeNumber' , 15 => 'Name' , 16 => 'NodeNumber' , 24 => 'GeographyTreeDefItemID' , 25 => 'CreatedByAgentID' , 26 => 'ParentID' , 27 => 'AcceptedID' , 28 => 'ModifiedByAgentID' , 29 => 'GeographyTreeDefID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_geography(){
       $this->GeographyID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->Abbrev = '';
       $this->CentroidLat = '';
       $this->CentroidLon = '';
       $this->CommonName = '';
       $this->FullName = '';
       $this->GeographyCode = '';
       $this->GML = '';
       $this->GUID = '';
       $this->HighestChildNodeNumber = '';
       $this->IsAccepted = '';
       $this->IsCurrent = '';
       $this->Name = '';
       $this->NodeNumber = '';
       $this->Number1 = '';
       $this->Number2 = '';
       $this->RankID = '';
       $this->Remarks = '';
       $this->Text1 = '';
       $this->Text2 = '';
       $this->TimestampVersion = '';
       $this->GeographyTreeDefItemID = '';
       $this->CreatedByAgentID = '';
       $this->ParentID = '';
       $this->AcceptedID = '';
       $this->ModifiedByAgentID = '';
       $this->GeographyTreeDefID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='GeographyID') { $returnvalue = $this->setGeographyID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='Abbrev') { $returnvalue = $this->setAbbrev($value); } 
             if ($fieldname=='CentroidLat') { $returnvalue = $this->setCentroidLat($value); } 
             if ($fieldname=='CentroidLon') { $returnvalue = $this->setCentroidLon($value); } 
             if ($fieldname=='CommonName') { $returnvalue = $this->setCommonName($value); } 
             if ($fieldname=='FullName') { $returnvalue = $this->setFullName($value); } 
             if ($fieldname=='GeographyCode') { $returnvalue = $this->setGeographyCode($value); } 
             if ($fieldname=='GML') { $returnvalue = $this->setGML($value); } 
             if ($fieldname=='GUID') { $returnvalue = $this->setGUID($value); } 
             if ($fieldname=='HighestChildNodeNumber') { $returnvalue = $this->setHighestChildNodeNumber($value); } 
             if ($fieldname=='IsAccepted') { $returnvalue = $this->setIsAccepted($value); } 
             if ($fieldname=='IsCurrent') { $returnvalue = $this->setIsCurrent($value); } 
             if ($fieldname=='Name') { $returnvalue = $this->setName($value); } 
             if ($fieldname=='NodeNumber') { $returnvalue = $this->setNodeNumber($value); } 
             if ($fieldname=='Number1') { $returnvalue = $this->setNumber1($value); } 
             if ($fieldname=='Number2') { $returnvalue = $this->setNumber2($value); } 
             if ($fieldname=='RankID') { $returnvalue = $this->setRankID($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='Text1') { $returnvalue = $this->setText1($value); } 
             if ($fieldname=='Text2') { $returnvalue = $this->setText2($value); } 
             if ($fieldname=='TimestampVersion') { $returnvalue = $this->setTimestampVersion($value); } 
             if ($fieldname=='GeographyTreeDefItemID') { $returnvalue = $this->setGeographyTreeDefItemID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ParentID') { $returnvalue = $this->setParentID($value); } 
             if ($fieldname=='AcceptedID') { $returnvalue = $this->setAcceptedID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='GeographyTreeDefID') { $returnvalue = $this->setGeographyTreeDefID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='GeographyID') { $returnvalue = $this->getGeographyID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='Abbrev') { $returnvalue = $this->getAbbrev(); } 
             if ($fieldname=='CentroidLat') { $returnvalue = $this->getCentroidLat(); } 
             if ($fieldname=='CentroidLon') { $returnvalue = $this->getCentroidLon(); } 
             if ($fieldname=='CommonName') { $returnvalue = $this->getCommonName(); } 
             if ($fieldname=='FullName') { $returnvalue = $this->getFullName(); } 
             if ($fieldname=='GeographyCode') { $returnvalue = $this->getGeographyCode(); } 
             if ($fieldname=='GML') { $returnvalue = $this->getGML(); } 
             if ($fieldname=='GUID') { $returnvalue = $this->getGUID(); } 
             if ($fieldname=='HighestChildNodeNumber') { $returnvalue = $this->getHighestChildNodeNumber(); } 
             if ($fieldname=='IsAccepted') { $returnvalue = $this->getIsAccepted(); } 
             if ($fieldname=='IsCurrent') { $returnvalue = $this->getIsCurrent(); } 
             if ($fieldname=='Name') { $returnvalue = $this->getName(); } 
             if ($fieldname=='NodeNumber') { $returnvalue = $this->getNodeNumber(); } 
             if ($fieldname=='Number1') { $returnvalue = $this->getNumber1(); } 
             if ($fieldname=='Number2') { $returnvalue = $this->getNumber2(); } 
             if ($fieldname=='RankID') { $returnvalue = $this->getRankID(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='Text1') { $returnvalue = $this->getText1(); } 
             if ($fieldname=='Text2') { $returnvalue = $this->getText2(); } 
             if ($fieldname=='TimestampVersion') { $returnvalue = $this->getTimestampVersion(); } 
             if ($fieldname=='GeographyTreeDefItemID') { $returnvalue = $this->getGeographyTreeDefItemID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ParentID') { $returnvalue = $this->getParentID(); } 
             if ($fieldname=='AcceptedID') { $returnvalue = $this->getAcceptedID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='GeographyTreeDefID') { $returnvalue = $this->getGeographyTreeDefID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*GeographyID*/
   public function getGeographyID() {
       if ($this->GeographyID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeographyID));
       }
   }
   public function setGeographyID($GeographyID) {
       if (strlen(preg_replace('/[^0-9]/','',$GeographyID)) > huh_geography::GEOGRAPHYID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $GeographyID = trim($GeographyID);
       if (!ctype_digit(strval($GeographyID)) && trim(strval($GeographyID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->GeographyID = $this->l_addslashes($GeographyID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_geography::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_geography::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_geography::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*Abbrev*/
   public function getAbbrev() {
       if ($this->Abbrev==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Abbrev));
       }
   }
   public function setAbbrev($Abbrev) {
       if (strlen($Abbrev) > huh_geography::ABBREV_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Abbrev = $this->l_addslashes($Abbrev);
       $this->dirty = true;
   }
/*CentroidLat*/
   public function getCentroidLat() {
       if ($this->CentroidLat==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CentroidLat));
       }
   }
   public function setCentroidLat($CentroidLat) {
       if (strlen(preg_replace('/[^0-9]/','',$CentroidLat)) > huh_geography::CENTROIDLAT_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CentroidLat = trim($CentroidLat);
       if (!is_numeric($CentroidLat) && trim(strval($CentroidLat))!='' ) {
             throw new Exception("Value must be a number");
       }
       $this->CentroidLat = $this->l_addslashes($CentroidLat);
       $this->dirty = true;
   }
/*CentroidLon*/
   public function getCentroidLon() {
       if ($this->CentroidLon==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CentroidLon));
       }
   }
   public function setCentroidLon($CentroidLon) {
       if (strlen(preg_replace('/[^0-9]/','',$CentroidLon)) > huh_geography::CENTROIDLON_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CentroidLon = trim($CentroidLon);
       if (!is_numeric($CentroidLon) && trim(strval($CentroidLon))!='' ) {
             throw new Exception("Value must be a number");
       }
       $this->CentroidLon = $this->l_addslashes($CentroidLon);
       $this->dirty = true;
   }
/*CommonName*/
   public function getCommonName() {
       if ($this->CommonName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CommonName));
       }
   }
   public function setCommonName($CommonName) {
       if (strlen($CommonName) > huh_geography::COMMONNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CommonName = $this->l_addslashes($CommonName);
       $this->dirty = true;
   }
/*FullName*/
   public function getFullName() {
       if ($this->FullName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FullName));
       }
   }
   public function setFullName($FullName) {
       if (strlen($FullName) > huh_geography::FULLNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FullName = $this->l_addslashes($FullName);
       $this->dirty = true;
   }
/*GeographyCode*/
   public function getGeographyCode() {
       if ($this->GeographyCode==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeographyCode));
       }
   }
   public function setGeographyCode($GeographyCode) {
       if (strlen($GeographyCode) > huh_geography::GEOGRAPHYCODE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GeographyCode = $this->l_addslashes($GeographyCode);
       $this->dirty = true;
   }
/*GML*/
   public function getGML() {
       if ($this->GML==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GML));
       }
   }
   public function setGML($GML) {
       if (strlen($GML) > huh_geography::GML_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GML = $this->l_addslashes($GML);
       $this->dirty = true;
   }
/*GUID*/
   public function getGUID() {
       if ($this->GUID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GUID));
       }
   }
   public function setGUID($GUID) {
       if (strlen($GUID) > huh_geography::GUID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->GUID = $this->l_addslashes($GUID);
       $this->dirty = true;
   }
/*HighestChildNodeNumber*/
   public function getHighestChildNodeNumber() {
       if ($this->HighestChildNodeNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->HighestChildNodeNumber));
       }
   }
   public function setHighestChildNodeNumber($HighestChildNodeNumber) {
       if (strlen(preg_replace('/[^0-9]/','',$HighestChildNodeNumber)) > huh_geography::HIGHESTCHILDNODENUMBER_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $HighestChildNodeNumber = trim($HighestChildNodeNumber);
       if (!ctype_digit(strval($HighestChildNodeNumber)) && trim(strval($HighestChildNodeNumber))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->HighestChildNodeNumber = $this->l_addslashes($HighestChildNodeNumber);
       $this->dirty = true;
   }
/*IsAccepted*/
   public function getIsAccepted() {
       if ($this->IsAccepted==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsAccepted));
       }
   }
   public function setIsAccepted($IsAccepted) {
       if (strlen($IsAccepted) > huh_geography::ISACCEPTED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsAccepted = $this->l_addslashes($IsAccepted);
       $this->dirty = true;
   }
/*IsCurrent*/
   public function getIsCurrent() {
       if ($this->IsCurrent==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsCurrent));
       }
   }
   public function setIsCurrent($IsCurrent) {
       if (strlen($IsCurrent) > huh_geography::ISCURRENT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsCurrent = $this->l_addslashes($IsCurrent);
       $this->dirty = true;
   }
/*Name*/
   public function getName() {
       if ($this->Name==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Name));
       }
   }
   public function setName($Name) {
       if (strlen($Name) > huh_geography::NAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Name = $this->l_addslashes($Name);
       $this->dirty = true;
   }
/*NodeNumber*/
   public function getNodeNumber() {
       if ($this->NodeNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->NodeNumber));
       }
   }
   public function setNodeNumber($NodeNumber) {
       if (strlen(preg_replace('/[^0-9]/','',$NodeNumber)) > huh_geography::NODENUMBER_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $NodeNumber = trim($NodeNumber);
       if (!ctype_digit(strval($NodeNumber)) && trim(strval($NodeNumber))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->NodeNumber = $this->l_addslashes($NodeNumber);
       $this->dirty = true;
   }
/*Number1*/
   public function getNumber1() {
       if ($this->Number1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number1));
       }
   }
   public function setNumber1($Number1) {
       if (strlen(preg_replace('/[^0-9]/','',$Number1)) > huh_geography::NUMBER1_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Number1 = trim($Number1);
       if (!ctype_digit(strval($Number1)) && trim(strval($Number1))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Number1 = $this->l_addslashes($Number1);
       $this->dirty = true;
   }
/*Number2*/
   public function getNumber2() {
       if ($this->Number2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Number2));
       }
   }
   public function setNumber2($Number2) {
       if (strlen(preg_replace('/[^0-9]/','',$Number2)) > huh_geography::NUMBER2_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Number2 = trim($Number2);
       if (!ctype_digit(strval($Number2)) && trim(strval($Number2))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Number2 = $this->l_addslashes($Number2);
       $this->dirty = true;
   }
/*RankID*/
   public function getRankID() {
       if ($this->RankID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RankID));
       }
   }
   public function setRankID($RankID) {
       if (strlen(preg_replace('/[^0-9]/','',$RankID)) > huh_geography::RANKID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $RankID = trim($RankID);
       if (!ctype_digit(strval($RankID))) {
             throw new Exception("Value must be an integer");
       }
       $this->RankID = $this->l_addslashes($RankID);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_geography::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*Text1*/
   public function getText1() {
       if ($this->Text1==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text1));
       }
   }
   public function setText1($Text1) {
       if (strlen($Text1) > huh_geography::TEXT1_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text1 = $this->l_addslashes($Text1);
       $this->dirty = true;
   }
/*Text2*/
   public function getText2() {
       if ($this->Text2==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text2));
       }
   }
   public function setText2($Text2) {
       if (strlen($Text2) > huh_geography::TEXT2_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text2 = $this->l_addslashes($Text2);
       $this->dirty = true;
   }
/*TimestampVersion*/
   public function getTimestampVersion() {
       if ($this->TimestampVersion==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampVersion));
       }
   }
   public function setTimestampVersion($TimestampVersion) {
       if (strlen($TimestampVersion) > huh_geography::TIMESTAMPVERSION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampVersion = $this->l_addslashes($TimestampVersion);
       $this->dirty = true;
   }
/*GeographyTreeDefItemID*/
   public function getGeographyTreeDefItemID() {
       if ($this->GeographyTreeDefItemID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeographyTreeDefItemID));
       }
   }
   public function setGeographyTreeDefItemID($GeographyTreeDefItemID) {
       if (strlen(preg_replace('/[^0-9]/','',$GeographyTreeDefItemID)) > huh_geography::GEOGRAPHYTREEDEFITEMID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $GeographyTreeDefItemID = trim($GeographyTreeDefItemID);
       if (!ctype_digit(strval($GeographyTreeDefItemID))) {
             throw new Exception("Value must be an integer");
       }
       $this->GeographyTreeDefItemID = $this->l_addslashes($GeographyTreeDefItemID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_geography::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ParentID*/
   public function getParentID() {
       if ($this->ParentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ParentID));
       }
   }
   public function setParentID($ParentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ParentID)) > huh_geography::PARENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ParentID = trim($ParentID);
       if (!ctype_digit(strval($ParentID)) && trim(strval($ParentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ParentID = $this->l_addslashes($ParentID);
       $this->dirty = true;
   }
/*AcceptedID*/
   public function getAcceptedID() {
       if ($this->AcceptedID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AcceptedID));
       }
   }
   public function setAcceptedID($AcceptedID) {
       if (strlen(preg_replace('/[^0-9]/','',$AcceptedID)) > huh_geography::ACCEPTEDID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AcceptedID = trim($AcceptedID);
       if (!ctype_digit(strval($AcceptedID)) && trim(strval($AcceptedID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AcceptedID = $this->l_addslashes($AcceptedID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_geography::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*GeographyTreeDefID*/
   public function getGeographyTreeDefID() {
       if ($this->GeographyTreeDefID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeographyTreeDefID));
       }
   }
   public function setGeographyTreeDefID($GeographyTreeDefID) {
       if (strlen(preg_replace('/[^0-9]/','',$GeographyTreeDefID)) > huh_geography::GEOGRAPHYTREEDEFID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $GeographyTreeDefID = trim($GeographyTreeDefID);
       if (!ctype_digit(strval($GeographyTreeDefID))) {
             throw new Exception("Value must be an integer");
       }
       $this->GeographyTreeDefID = $this->l_addslashes($GeographyTreeDefID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getGeographyID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['GeographyID'] = $this->getGeographyID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_GeographyIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_AbbrevMYSQLI_TYPE = 's';
  const C_CentroidLatMYSQLI_TYPE = 'd';
  const C_CentroidLonMYSQLI_TYPE = 'd';
  const C_CommonNameMYSQLI_TYPE = 's';
  const C_FullNameMYSQLI_TYPE = 's';
  const C_GeographyCodeMYSQLI_TYPE = 's';
  const C_GMLMYSQLI_TYPE = 's';
  const C_GUIDMYSQLI_TYPE = 's';
  const C_HighestChildNodeNumberMYSQLI_TYPE = 'i';
  const C_IsAcceptedMYSQLI_TYPE = 'i';
  const C_IsCurrentMYSQLI_TYPE = 'i';
  const C_NameMYSQLI_TYPE = 's';
  const C_NodeNumberMYSQLI_TYPE = 'i';
  const C_Number1MYSQLI_TYPE = 'i';
  const C_Number2MYSQLI_TYPE = 'i';
  const C_RankIDMYSQLI_TYPE = 'i';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_Text1MYSQLI_TYPE = 's';
  const C_Text2MYSQLI_TYPE = 's';
  const C_TimestampVersionMYSQLI_TYPE = 's';
  const C_GeographyTreeDefItemIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ParentIDMYSQLI_TYPE = 'i';
  const C_AcceptedIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_GeographyTreeDefIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='GeographyID') { $retval = self::C_GeographyIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='Abbrev') { $retval = self::C_AbbrevMYSQLI_TYPE; }
      if ($aFieldname=='CentroidLat') { $retval = self::C_CentroidLatMYSQLI_TYPE; }
      if ($aFieldname=='CentroidLon') { $retval = self::C_CentroidLonMYSQLI_TYPE; }
      if ($aFieldname=='CommonName') { $retval = self::C_CommonNameMYSQLI_TYPE; }
      if ($aFieldname=='FullName') { $retval = self::C_FullNameMYSQLI_TYPE; }
      if ($aFieldname=='GeographyCode') { $retval = self::C_GeographyCodeMYSQLI_TYPE; }
      if ($aFieldname=='GML') { $retval = self::C_GMLMYSQLI_TYPE; }
      if ($aFieldname=='GUID') { $retval = self::C_GUIDMYSQLI_TYPE; }
      if ($aFieldname=='HighestChildNodeNumber') { $retval = self::C_HighestChildNodeNumberMYSQLI_TYPE; }
      if ($aFieldname=='IsAccepted') { $retval = self::C_IsAcceptedMYSQLI_TYPE; }
      if ($aFieldname=='IsCurrent') { $retval = self::C_IsCurrentMYSQLI_TYPE; }
      if ($aFieldname=='Name') { $retval = self::C_NameMYSQLI_TYPE; }
      if ($aFieldname=='NodeNumber') { $retval = self::C_NodeNumberMYSQLI_TYPE; }
      if ($aFieldname=='Number1') { $retval = self::C_Number1MYSQLI_TYPE; }
      if ($aFieldname=='Number2') { $retval = self::C_Number2MYSQLI_TYPE; }
      if ($aFieldname=='RankID') { $retval = self::C_RankIDMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='Text1') { $retval = self::C_Text1MYSQLI_TYPE; }
      if ($aFieldname=='Text2') { $retval = self::C_Text2MYSQLI_TYPE; }
      if ($aFieldname=='TimestampVersion') { $retval = self::C_TimestampVersionMYSQLI_TYPE; }
      if ($aFieldname=='GeographyTreeDefItemID') { $retval = self::C_GeographyTreeDefItemIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ParentID') { $retval = self::C_ParentIDMYSQLI_TYPE; }
      if ($aFieldname=='AcceptedID') { $retval = self::C_AcceptedIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='GeographyTreeDefID') { $retval = self::C_GeographyTreeDefIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setGeographyID($pk[GeographyID]);
             } else { ;
                 $this->setGeographyID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->GeographyID != NULL) {
           $sql = 'SELECT GeographyID, TimestampCreated, TimestampModified, Version, Abbrev, CentroidLat, CentroidLon, CommonName, FullName, GeographyCode, GML, GUID, HighestChildNodeNumber, IsAccepted, IsCurrent, Name, NodeNumber, Number1, Number2, RankID, Remarks, Text1, Text2, TimestampVersion, GeographyTreeDefItemID, CreatedByAgentID, ParentID, AcceptedID, ModifiedByAgentID, GeographyTreeDefID FROM geography WHERE GeographyID = '.$this->GeographyID ;

           $preparesql = 'SELECT GeographyID, TimestampCreated, TimestampModified, Version, Abbrev, CentroidLat, CentroidLon, CommonName, FullName, GeographyCode, GML, GUID, HighestChildNodeNumber, IsAccepted, IsCurrent, Name, NodeNumber, Number1, Number2, RankID, Remarks, Text1, Text2, TimestampVersion, GeographyTreeDefItemID, CreatedByAgentID, ParentID, AcceptedID, ModifiedByAgentID, GeographyTreeDefID FROM geography WHERE GeographyID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->GeographyID);
              $statement->execute();
              $statement->bind_result($this->GeographyID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Abbrev, $this->CentroidLat, $this->CentroidLon, $this->CommonName, $this->FullName, $this->GeographyCode, $this->GML, $this->GUID, $this->HighestChildNodeNumber, $this->IsAccepted, $this->IsCurrent, $this->Name, $this->NodeNumber, $this->Number1, $this->Number2, $this->RankID, $this->Remarks, $this->Text1, $this->Text2, $this->TimestampVersion, $this->GeographyTreeDefItemID, $this->CreatedByAgentID, $this->ParentID, $this->AcceptedID, $this->ModifiedByAgentID, $this->GeographyTreeDefID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->GeographyID!= NULL) {
            $sql  = 'UPDATE  geography SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", Abbrev = ? ";
            $sql .=  ", CentroidLat = ? ";
            $sql .=  ", CentroidLon = ? ";
            $sql .=  ", CommonName = ? ";
            $sql .=  ", FullName = ? ";
            $sql .=  ", GeographyCode = ? ";
            $sql .=  ", GML = ? ";
            $sql .=  ", GUID = ? ";
            $sql .=  ", HighestChildNodeNumber = ? ";
            $sql .=  ", IsAccepted = ? ";
            $sql .=  ", IsCurrent = ? ";
            $sql .=  ", Name = ? ";
            $sql .=  ", NodeNumber = ? ";
            $sql .=  ", Number1 = ? ";
            $sql .=  ", Number2 = ? ";
            $sql .=  ", RankID = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", Text1 = ? ";
            $sql .=  ", Text2 = ? ";
            $sql .=  ", TimestampVersion = ? ";
            $sql .=  ", GeographyTreeDefItemID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ParentID = ? ";
            $sql .=  ", AcceptedID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", GeographyTreeDefID = ? ";

            $sql .= "  WHERE GeographyID = ? ";
        } else {
            $sql  = 'INSERT INTO geography ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( GeographyID ,  TimestampCreated ,  TimestampModified ,  Version ,  Abbrev ,  CentroidLat ,  CentroidLon ,  CommonName ,  FullName ,  GeographyCode ,  GML ,  GUID ,  HighestChildNodeNumber ,  IsAccepted ,  IsCurrent ,  Name ,  NodeNumber ,  Number1 ,  Number2 ,  RankID ,  Remarks ,  Text1 ,  Text2 ,  TimestampVersion ,  GeographyTreeDefItemID ,  CreatedByAgentID ,  ParentID ,  AcceptedID ,  ModifiedByAgentID ,  GeographyTreeDefID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->GeographyID!= NULL ) {
              $statement->bind_param("issisddsssssiiisiiiissssiiiiiii", $this->GeographyID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Abbrev , $this->CentroidLat , $this->CentroidLon , $this->CommonName , $this->FullName , $this->GeographyCode , $this->GML , $this->GUID , $this->HighestChildNodeNumber , $this->IsAccepted , $this->IsCurrent , $this->Name , $this->NodeNumber , $this->Number1 , $this->Number2 , $this->RankID , $this->Remarks , $this->Text1 , $this->Text2 , $this->TimestampVersion , $this->GeographyTreeDefItemID , $this->CreatedByAgentID , $this->ParentID , $this->AcceptedID , $this->ModifiedByAgentID , $this->GeographyTreeDefID , $this->GeographyID );
           } else { 
              $statement->bind_param("issisddsssssiiisiiiissssiiiiii", $this->GeographyID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Abbrev , $this->CentroidLat , $this->CentroidLon , $this->CommonName , $this->FullName , $this->GeographyCode , $this->GML , $this->GUID , $this->HighestChildNodeNumber , $this->IsAccepted , $this->IsCurrent , $this->Name , $this->NodeNumber , $this->Number1 , $this->Number2 , $this->RankID , $this->Remarks , $this->Text1 , $this->Text2 , $this->TimestampVersion , $this->GeographyTreeDefItemID , $this->CreatedByAgentID , $this->ParentID , $this->AcceptedID , $this->ModifiedByAgentID , $this->GeographyTreeDefID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->GeographyID != NULL) {
           $sql = 'SELECT GeographyID, TimestampCreated, TimestampModified, Version, Abbrev, CentroidLat, CentroidLon, CommonName, FullName, GeographyCode, GML, GUID, HighestChildNodeNumber, IsAccepted, IsCurrent, Name, NodeNumber, Number1, Number2, RankID, Remarks, Text1, Text2, TimestampVersion, GeographyTreeDefItemID, CreatedByAgentID, ParentID, AcceptedID, ModifiedByAgentID, GeographyTreeDefID FROM geography WHERE GeographyID = "'.$this->GeographyID.'"  ' ;

           $preparedsql = 'SELECT  FROM geography WHERE  and GeographyID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issisddsssssiiisiiiissssiiiiii", $this->GeographyID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Abbrev, $this->CentroidLat, $this->CentroidLon, $this->CommonName, $this->FullName, $this->GeographyCode, $this->GML, $this->GUID, $this->HighestChildNodeNumber, $this->IsAccepted, $this->IsCurrent, $this->Name, $this->NodeNumber, $this->Number1, $this->Number2, $this->RankID, $this->Remarks, $this->Text1, $this->Text2, $this->TimestampVersion, $this->GeographyTreeDefItemID, $this->CreatedByAgentID, $this->ParentID, $this->AcceptedID, $this->ModifiedByAgentID, $this->GeographyTreeDefID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM geography WHERE  and GeographyID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issisddsssssiiisiiiissssiiiiii", $this->GeographyID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Abbrev, $this->CentroidLat, $this->CentroidLon, $this->CommonName, $this->FullName, $this->GeographyCode, $this->GML, $this->GUID, $this->HighestChildNodeNumber, $this->IsAccepted, $this->IsCurrent, $this->Name, $this->NodeNumber, $this->Number1, $this->Number2, $this->RankID, $this->Remarks, $this->Text1, $this->Text2, $this->TimestampVersion, $this->GeographyTreeDefItemID, $this->CreatedByAgentID, $this->ParentID, $this->AcceptedID, $this->ModifiedByAgentID, $this->GeographyTreeDefID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->GeographyID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM geography';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT GeographyID FROM geography $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_geography();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromagentgeography() { 
      // ForeignKey in: agentgeography
      $t = new agentgeography();
  } 
  public function loadLinkedFromlocality() { 
      // ForeignKey in: locality
      $t = new locality();
  } 
  public function loadLinkedFrompreparation() { 
      // ForeignKey in: preparation
      $t = new preparation();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: GeographyTreeDefItemID
      $t = new geographytreedefitem();
      $t->load(getGeographyTreeDefItemID());
      $returnvalue[GeographyTreeDefItemID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ParentID
      $t = new geography();
      $t->load(getParentID());
      $returnvalue[ParentID] = $t;
       // fk: AcceptedID
      $t = new geography();
      $t->load(getAcceptedID());
      $returnvalue[AcceptedID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: GeographyTreeDefID
      $t = new geographytreedef();
      $t->load(getGeographyTreeDefID());
      $returnvalue[GeographyTreeDefID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT GeographyID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(Abbrev,'') || ' ' || IFNULL(CentroidLat,'') || ' ' || IFNULL(CentroidLon,'') || ' ' || IFNULL(CommonName,'') || ' ' || IFNULL(FullName,'') || ' ' || IFNULL(GeographyCode,'') || ' ' || IFNULL(GML,'') || ' ' || IFNULL(GUID,'') || ' ' || IFNULL(HighestChildNodeNumber,'') || ' ' || IFNULL(IsAccepted,'') || ' ' || IFNULL(IsCurrent,'') || ' ' || IFNULL(Name,'') || ' ' || IFNULL(NodeNumber,'') || ' ' || IFNULL(Number1,'') || ' ' || IFNULL(Number2,'') || ' ' || IFNULL(RankID,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(Text1,'') || ' ' || IFNULL(Text2,'') || ' ' || IFNULL(TimestampVersion,'') || ' ' || IFNULL(GeographyTreeDefItemID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ParentID,'') || ' ' || IFNULL(AcceptedID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(GeographyTreeDefID,'')) FROM geography order by FullName, GUID, HighestChildNodeNumber, Name, NodeNumber, GeographyTreeDefItemID, CreatedByAgentID, ParentID, AcceptedID, ModifiedByAgentID, GeographyTreeDefID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM geography order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByFullName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeographyID FROM geography WHERE FullName $operator '$searchTerm'";
        $preparedsql = "SELECT GeographyID FROM geography WHERE FullName $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geography();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGUID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeographyID FROM geography WHERE GUID $operator '$searchTerm'";
        $preparedsql = "SELECT GeographyID FROM geography WHERE GUID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geography();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByHighestChildNodeNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeographyID FROM geography WHERE HighestChildNodeNumber $operator '$searchTerm'";
        $preparedsql = "SELECT GeographyID FROM geography WHERE HighestChildNodeNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geography();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeographyID FROM geography WHERE Name $operator '$searchTerm'";
        $preparedsql = "SELECT GeographyID FROM geography WHERE Name $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geography();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByNodeNumber($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeographyID FROM geography WHERE NodeNumber $operator '$searchTerm'";
        $preparedsql = "SELECT GeographyID FROM geography WHERE NodeNumber $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geography();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGeographyTreeDefItemID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeographyID FROM geography WHERE GeographyTreeDefItemID $operator '$searchTerm'";
        $preparedsql = "SELECT GeographyID FROM geography WHERE GeographyTreeDefItemID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geography();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeographyID FROM geography WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT GeographyID FROM geography WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geography();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByParentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeographyID FROM geography WHERE ParentID $operator '$searchTerm'";
        $preparedsql = "SELECT GeographyID FROM geography WHERE ParentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geography();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByAcceptedID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeographyID FROM geography WHERE AcceptedID $operator '$searchTerm'";
        $preparedsql = "SELECT GeographyID FROM geography WHERE AcceptedID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geography();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeographyID FROM geography WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT GeographyID FROM geography WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geography();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGeographyTreeDefID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT GeographyID FROM geography WHERE GeographyTreeDefID $operator '$searchTerm'";
        $preparedsql = "SELECT GeographyID FROM geography WHERE GeographyTreeDefID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_geography();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctFullName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' FullName ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, FullName FROM geography group by FullName order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&FullName=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGUID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GUID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GUID FROM geography group by GUID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GUID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctHighestChildNodeNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' HighestChildNodeNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, HighestChildNodeNumber FROM geography group by HighestChildNodeNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&HighestChildNodeNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Name ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Name FROM geography group by Name order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Name=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctNodeNumber($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' NodeNumber ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, NodeNumber FROM geography group by NodeNumber order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&NodeNumber=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGeographyTreeDefItemID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GeographyTreeDefItemID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GeographyTreeDefItemID FROM geography group by GeographyTreeDefItemID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GeographyTreeDefItemID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM geography group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctParentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ParentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ParentID FROM geography group by ParentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ParentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctAcceptedID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' AcceptedID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, AcceptedID FROM geography group by AcceptedID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&AcceptedID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM geography group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGeographyTreeDefID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GeographyTreeDefID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GeographyTreeDefID FROM geography group by GeographyTreeDefID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GeographyTreeDefID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'FullName':
             $returnvalue = $this->selectDistinctFullName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GUID':
             $returnvalue = $this->selectDistinctGUID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'HighestChildNodeNumber':
             $returnvalue = $this->selectDistinctHighestChildNodeNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'Name':
             $returnvalue = $this->selectDistinctName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'NodeNumber':
             $returnvalue = $this->selectDistinctNodeNumber($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GeographyTreeDefItemID':
             $returnvalue = $this->selectDistinctGeographyTreeDefItemID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ParentID':
             $returnvalue = $this->selectDistinctParentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'AcceptedID':
             $returnvalue = $this->selectDistinctAcceptedID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GeographyTreeDefID':
             $returnvalue = $this->selectDistinctGeographyTreeDefID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the geography.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_geographyView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_geography <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_geography::GEOGRAPHYID.": ".$model->getGeographyID()."</li>\n";
       $returnvalue .= "<li>".huh_geography::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_geography::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_geography::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_geography::ABBREV.": ".$model->getAbbrev()."</li>\n";
       $returnvalue .= "<li>".huh_geography::CENTROIDLAT.": ".$model->getCentroidLat()."</li>\n";
       $returnvalue .= "<li>".huh_geography::CENTROIDLON.": ".$model->getCentroidLon()."</li>\n";
       $returnvalue .= "<li>".huh_geography::COMMONNAME.": ".$model->getCommonName()."</li>\n";
       $returnvalue .= "<li>".huh_geography::FULLNAME.": ".$model->getFullName()."</li>\n";
       $returnvalue .= "<li>".huh_geography::GEOGRAPHYCODE.": ".$model->getGeographyCode()."</li>\n";
       $returnvalue .= "<li>".huh_geography::GML.": ".$model->getGML()."</li>\n";
       $returnvalue .= "<li>".huh_geography::GUID.": ".$model->getGUID()."</li>\n";
       $returnvalue .= "<li>".huh_geography::HIGHESTCHILDNODENUMBER.": ".$model->getHighestChildNodeNumber()."</li>\n";
       $returnvalue .= "<li>".huh_geography::ISACCEPTED.": ".$model->getIsAccepted()."</li>\n";
       $returnvalue .= "<li>".huh_geography::ISCURRENT.": ".$model->getIsCurrent()."</li>\n";
       $returnvalue .= "<li>".huh_geography::NAME.": ".$model->getName()."</li>\n";
       $returnvalue .= "<li>".huh_geography::NODENUMBER.": ".$model->getNodeNumber()."</li>\n";
       $returnvalue .= "<li>".huh_geography::NUMBER1.": ".$model->getNumber1()."</li>\n";
       $returnvalue .= "<li>".huh_geography::NUMBER2.": ".$model->getNumber2()."</li>\n";
       $returnvalue .= "<li>".huh_geography::RANKID.": ".$model->getRankID()."</li>\n";
       $returnvalue .= "<li>".huh_geography::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_geography::TEXT1.": ".$model->getText1()."</li>\n";
       $returnvalue .= "<li>".huh_geography::TEXT2.": ".$model->getText2()."</li>\n";
       $returnvalue .= "<li>".huh_geography::TIMESTAMPVERSION.": ".$model->getTimestampVersion()."</li>\n";
       $returnvalue .= "<li>".huh_geography::GEOGRAPHYTREEDEFITEMID.": ".$model->getGeographyTreeDefItemID()."</li>\n";
       $returnvalue .= "<li>".huh_geography::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_geography::PARENTID.": ".$model->getParentID()."</li>\n";
       $returnvalue .= "<li>".huh_geography::ACCEPTEDID.": ".$model->getAcceptedID()."</li>\n";
       $returnvalue .= "<li>".huh_geography::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_geography::GEOGRAPHYTREEDEFID.": ".$model->getGeographyTreeDefID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>geographytreedefitem</li>";
           $t_geographytreedefitem = new huh_geographytreedefitem();
           $t_geographytreedefitemView = new huh_geographytreedefitemView();
           $t_geographytreedefitemView->setModel($t_geographytreedefitem);
           if ($model->getGeographyTreeDefItemID() != '') { 
               $t_geographytreedefitem->load($model->getGeographyTreeDefItemID());
               $returnvalue .= $t_geographytreedefitemView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>geography</li>";
           $t_geography = new huh_geography();
           $t_geographyView = new huh_geographyView();
           $t_geographyView->setModel($t_geography);
           if ($model->getParentID() != '') { 
               $t_geography->load($model->getParentID());
               $returnvalue .= $t_geographyView->getDetailsView(false);
           }
           $returnvalue .= "<li>geography</li>";
           $t_geography = new huh_geography();
           $t_geographyView = new huh_geographyView();
           $t_geographyView->setModel($t_geography);
           if ($model->getAcceptedID() != '') { 
               $t_geography->load($model->getAcceptedID());
               $returnvalue .= $t_geographyView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>geographytreedef</li>";
           $t_geographytreedef = new huh_geographytreedef();
           $t_geographytreedefView = new huh_geographytreedefView();
           $t_geographytreedefView->setModel($t_geographytreedef);
           if ($model->getGeographyTreeDefID() != '') { 
               $t_geographytreedef->load($model->getGeographyTreeDefID());
               $returnvalue .= $t_geographytreedefView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_geography::GEOGRAPHYID.': "'.$model->getGeographyID().'",';
       $returnvalue .= '"'.huh_geography::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_geography::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_geography::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_geography::ABBREV.': "'.$model->getAbbrev().'",';
       $returnvalue .= '"'.huh_geography::CENTROIDLAT.': "'.$model->getCentroidLat().'",';
       $returnvalue .= '"'.huh_geography::CENTROIDLON.': "'.$model->getCentroidLon().'",';
       $returnvalue .= '"'.huh_geography::COMMONNAME.': "'.$model->getCommonName().'",';
       $returnvalue .= '"'.huh_geography::FULLNAME.': "'.$model->getFullName().'",';
       $returnvalue .= '"'.huh_geography::GEOGRAPHYCODE.': "'.$model->getGeographyCode().'",';
       $returnvalue .= '"'.huh_geography::GML.': "'.$model->getGML().'",';
       $returnvalue .= '"'.huh_geography::GUID.': "'.$model->getGUID().'",';
       $returnvalue .= '"'.huh_geography::HIGHESTCHILDNODENUMBER.': "'.$model->getHighestChildNodeNumber().'",';
       $returnvalue .= '"'.huh_geography::ISACCEPTED.': "'.$model->getIsAccepted().'",';
       $returnvalue .= '"'.huh_geography::ISCURRENT.': "'.$model->getIsCurrent().'",';
       $returnvalue .= '"'.huh_geography::NAME.': "'.$model->getName().'",';
       $returnvalue .= '"'.huh_geography::NODENUMBER.': "'.$model->getNodeNumber().'",';
       $returnvalue .= '"'.huh_geography::NUMBER1.': "'.$model->getNumber1().'",';
       $returnvalue .= '"'.huh_geography::NUMBER2.': "'.$model->getNumber2().'",';
       $returnvalue .= '"'.huh_geography::RANKID.': "'.$model->getRankID().'",';
       $returnvalue .= '"'.huh_geography::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_geography::TEXT1.': "'.$model->getText1().'",';
       $returnvalue .= '"'.huh_geography::TEXT2.': "'.$model->getText2().'",';
       $returnvalue .= '"'.huh_geography::TIMESTAMPVERSION.': "'.$model->getTimestampVersion().'",';
       $returnvalue .= '"'.huh_geography::GEOGRAPHYTREEDEFITEMID.': "'.$model->getGeographyTreeDefItemID().'",';
       $returnvalue .= '"'.huh_geography::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_geography::PARENTID.': "'.$model->getParentID().'",';
       $returnvalue .= '"'.huh_geography::ACCEPTEDID.': "'.$model->getAcceptedID().'",';
       $returnvalue .= '"'.huh_geography::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_geography::GEOGRAPHYTREEDEFID.': "'.$model->getGeographyTreeDefID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getGeographyID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getAbbrev()."</td>\n";
       $returnvalue .= "<td>".$model->getCentroidLat()."</td>\n";
       $returnvalue .= "<td>".$model->getCentroidLon()."</td>\n";
       $returnvalue .= "<td>".$model->getCommonName()."</td>\n";
       $returnvalue .= "<td>".$model->getFullName()."</td>\n";
       $returnvalue .= "<td>".$model->getGeographyCode()."</td>\n";
       $returnvalue .= "<td>".$model->getGML()."</td>\n";
       $returnvalue .= "<td>".$model->getGUID()."</td>\n";
       $returnvalue .= "<td>".$model->getHighestChildNodeNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getIsAccepted()."</td>\n";
       $returnvalue .= "<td>".$model->getIsCurrent()."</td>\n";
       $returnvalue .= "<td>".$model->getName()."</td>\n";
       $returnvalue .= "<td>".$model->getNodeNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber1()."</td>\n";
       $returnvalue .= "<td>".$model->getNumber2()."</td>\n";
       $returnvalue .= "<td>".$model->getRankID()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getText1()."</td>\n";
       $returnvalue .= "<td>".$model->getText2()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getGeographyTreeDefItemID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getParentID()."</td>\n";
       $returnvalue .= "<td>".$model->getAcceptedID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getGeographyTreeDefID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_geography::GEOGRAPHYID."</th>\n";
       $returnvalue .= "<th>".huh_geography::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_geography::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_geography::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_geography::ABBREV."</th>\n";
       $returnvalue .= "<th>".huh_geography::CENTROIDLAT."</th>\n";
       $returnvalue .= "<th>".huh_geography::CENTROIDLON."</th>\n";
       $returnvalue .= "<th>".huh_geography::COMMONNAME."</th>\n";
       $returnvalue .= "<th>".huh_geography::FULLNAME."</th>\n";
       $returnvalue .= "<th>".huh_geography::GEOGRAPHYCODE."</th>\n";
       $returnvalue .= "<th>".huh_geography::GML."</th>\n";
       $returnvalue .= "<th>".huh_geography::GUID."</th>\n";
       $returnvalue .= "<th>".huh_geography::HIGHESTCHILDNODENUMBER."</th>\n";
       $returnvalue .= "<th>".huh_geography::ISACCEPTED."</th>\n";
       $returnvalue .= "<th>".huh_geography::ISCURRENT."</th>\n";
       $returnvalue .= "<th>".huh_geography::NAME."</th>\n";
       $returnvalue .= "<th>".huh_geography::NODENUMBER."</th>\n";
       $returnvalue .= "<th>".huh_geography::NUMBER1."</th>\n";
       $returnvalue .= "<th>".huh_geography::NUMBER2."</th>\n";
       $returnvalue .= "<th>".huh_geography::RANKID."</th>\n";
       $returnvalue .= "<th>".huh_geography::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_geography::TEXT1."</th>\n";
       $returnvalue .= "<th>".huh_geography::TEXT2."</th>\n";
       $returnvalue .= "<th>".huh_geography::TIMESTAMPVERSION."</th>\n";
       $returnvalue .= "<th>".huh_geography::GEOGRAPHYTREEDEFITEMID."</th>\n";
       $returnvalue .= "<th>".huh_geography::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_geography::PARENTID."</th>\n";
       $returnvalue .= "<th>".huh_geography::ACCEPTEDID."</th>\n";
       $returnvalue .= "<th>".huh_geography::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_geography::GEOGRAPHYTREEDEFID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_geography">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new GeographyID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_geography::GEOGRAPHYID.">GEOGRAPHYID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::GEOGRAPHYID." id=".huh_geography::GEOGRAPHYID." value='".$model->getGeographyID()."'  style=' width:".huh_geography::GEOGRAPHYID_SIZE ."em;  '  maxlength='".huh_geography::GEOGRAPHYID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_geography::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geography::TIMESTAMPCREATED." id=".huh_geography::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_geography::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_geography::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geography::TIMESTAMPMODIFIED." id=".huh_geography::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_geography::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_geography::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::VERSION." id=".huh_geography::VERSION." value='".$model->getVersion()."'  style=' width:".huh_geography::VERSION_SIZE ."em;  '  maxlength='".huh_geography::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::ABBREV.">ABBREV</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geography::ABBREV." id=".huh_geography::ABBREV." value='".$model->getAbbrev()."'  style=' width:".huh_geography::ABBREV_SIZE ."em;  '  maxlength='".huh_geography::ABBREV_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::CENTROIDLAT.">CENTROIDLAT</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9\.-]*'  invalidMessage='The value entered is not valid.  It must be a number.'  name=".huh_geography::CENTROIDLAT." id=".huh_geography::CENTROIDLAT." value='".$model->getCentroidLat()."'  style=' width:".huh_geography::CENTROIDLAT_SIZE ."em;  '  maxlength='".huh_geography::CENTROIDLAT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::CENTROIDLON.">CENTROIDLON</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9\.-]*'  invalidMessage='The value entered is not valid.  It must be a number.'  name=".huh_geography::CENTROIDLON." id=".huh_geography::CENTROIDLON." value='".$model->getCentroidLon()."'  style=' width:".huh_geography::CENTROIDLON_SIZE ."em;  '  maxlength='".huh_geography::CENTROIDLON_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::COMMONNAME.">COMMONNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geography::COMMONNAME." id=".huh_geography::COMMONNAME." >".$model->getCommonName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::FULLNAME.">FULLNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geography::FULLNAME." id=".huh_geography::FULLNAME." >".$model->getFullName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::GEOGRAPHYCODE.">GEOGRAPHYCODE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geography::GEOGRAPHYCODE." id=".huh_geography::GEOGRAPHYCODE." value='".$model->getGeographyCode()."'  style=' width:".huh_geography::GEOGRAPHYCODE_SIZE ."em;  '  maxlength='".huh_geography::GEOGRAPHYCODE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::GML.">GML</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geography::GML." id=".huh_geography::GML." >".$model->getGML()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::GUID.">GUID</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geography::GUID." id=".huh_geography::GUID." >".$model->getGUID()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::HIGHESTCHILDNODENUMBER.">HIGHESTCHILDNODENUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::HIGHESTCHILDNODENUMBER." id=".huh_geography::HIGHESTCHILDNODENUMBER." value='".$model->getHighestChildNodeNumber()."'  style=' width:".huh_geography::HIGHESTCHILDNODENUMBER_SIZE ."em;  '  maxlength='".huh_geography::HIGHESTCHILDNODENUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::ISACCEPTED.">ISACCEPTED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geography::ISACCEPTED." id=".huh_geography::ISACCEPTED." value='".$model->getIsAccepted()."'  style=' width:".huh_geography::ISACCEPTED_SIZE ."em;  '  maxlength='".huh_geography::ISACCEPTED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::ISCURRENT.">ISCURRENT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geography::ISCURRENT." id=".huh_geography::ISCURRENT." value='".$model->getIsCurrent()."'  style=' width:".huh_geography::ISCURRENT_SIZE ."em;  '  maxlength='".huh_geography::ISCURRENT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::NAME.">NAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geography::NAME." id=".huh_geography::NAME." >".$model->getName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::NODENUMBER.">NODENUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::NODENUMBER." id=".huh_geography::NODENUMBER." value='".$model->getNodeNumber()."'  style=' width:".huh_geography::NODENUMBER_SIZE ."em;  '  maxlength='".huh_geography::NODENUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::NUMBER1.">NUMBER1</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::NUMBER1." id=".huh_geography::NUMBER1." value='".$model->getNumber1()."'  style=' width:".huh_geography::NUMBER1_SIZE ."em;  '  maxlength='".huh_geography::NUMBER1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::NUMBER2.">NUMBER2</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::NUMBER2." id=".huh_geography::NUMBER2." value='".$model->getNumber2()."'  style=' width:".huh_geography::NUMBER2_SIZE ."em;  '  maxlength='".huh_geography::NUMBER2_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::RANKID.">RANKID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::RANKID." id=".huh_geography::RANKID." value='".$model->getRankID()."'  style=' width:".huh_geography::RANKID_SIZE ."em;  '  maxlength='".huh_geography::RANKID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geography::REMARKS." id=".huh_geography::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::TEXT1.">TEXT1</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geography::TEXT1." id=".huh_geography::TEXT1." value='".$model->getText1()."'  style=' width:".huh_geography::TEXT1_SIZE ."em;  '  maxlength='".huh_geography::TEXT1_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::TEXT2.">TEXT2</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_geography::TEXT2." id=".huh_geography::TEXT2." >".$model->getText2()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::TIMESTAMPVERSION.">TIMESTAMPVERSION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_geography::TIMESTAMPVERSION." id=".huh_geography::TIMESTAMPVERSION." value='".$model->getTimestampVersion()."'  style=' width:".huh_geography::TIMESTAMPVERSION_SIZE ."em;  '  maxlength='".huh_geography::TIMESTAMPVERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::GEOGRAPHYTREEDEFITEMID.">GEOGRAPHYTREEDEFITEMID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::GEOGRAPHYTREEDEFITEMID." id=".huh_geography::GEOGRAPHYTREEDEFITEMID." value='".$model->getGeographyTreeDefItemID()."'  style=' width:".huh_geography::GEOGRAPHYTREEDEFITEMID_SIZE ."em;  '  maxlength='".huh_geography::GEOGRAPHYTREEDEFITEMID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::CREATEDBYAGENTID." id=".huh_geography::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_geography::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_geography::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::PARENTID.">PARENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::PARENTID." id=".huh_geography::PARENTID." value='".$model->getParentID()."'  style=' width:".huh_geography::PARENTID_SIZE ."em;  '  maxlength='".huh_geography::PARENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::ACCEPTEDID.">ACCEPTEDID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::ACCEPTEDID." id=".huh_geography::ACCEPTEDID." value='".$model->getAcceptedID()."'  style=' width:".huh_geography::ACCEPTEDID_SIZE ."em;  '  maxlength='".huh_geography::ACCEPTEDID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::MODIFIEDBYAGENTID." id=".huh_geography::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_geography::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_geography::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_geography::GEOGRAPHYTREEDEFID.">GEOGRAPHYTREEDEFID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_geography::GEOGRAPHYTREEDEFID." id=".huh_geography::GEOGRAPHYTREEDEFID." value='".$model->getGeographyTreeDefID()."'  style=' width:".huh_geography::GEOGRAPHYTREEDEFID_SIZE ."em;  '  maxlength='".huh_geography::GEOGRAPHYTREEDEFID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_geography">';
       $returnvalue .= '<input type=hidden name=GeographyID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_geography">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>GEOGRAPHYID<input type=text name=".huh_geography::GEOGRAPHYID." id=".huh_geography::GEOGRAPHYID." value='".$model->getGeographyID()."'  size='".huh_geography::GEOGRAPHYID_SIZE ."'  maxlength='".huh_geography::GEOGRAPHYID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_geography::TIMESTAMPCREATED." id=".huh_geography::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_geography::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_geography::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_geography::TIMESTAMPMODIFIED." id=".huh_geography::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_geography::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_geography::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_geography::VERSION." id=".huh_geography::VERSION." value='".$model->getVersion()."'  size='".huh_geography::VERSION_SIZE ."'  maxlength='".huh_geography::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ABBREV<input type=text name=".huh_geography::ABBREV." id=".huh_geography::ABBREV." value='".$model->getAbbrev()."'  size='".huh_geography::ABBREV_SIZE ."'  maxlength='".huh_geography::ABBREV_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CENTROIDLAT<input type=text name=".huh_geography::CENTROIDLAT." id=".huh_geography::CENTROIDLAT." value='".$model->getCentroidLat()."'  size='".huh_geography::CENTROIDLAT_SIZE ."'  maxlength='".huh_geography::CENTROIDLAT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CENTROIDLON<input type=text name=".huh_geography::CENTROIDLON." id=".huh_geography::CENTROIDLON." value='".$model->getCentroidLon()."'  size='".huh_geography::CENTROIDLON_SIZE ."'  maxlength='".huh_geography::CENTROIDLON_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COMMONNAME<input type=text name=".huh_geography::COMMONNAME." id=".huh_geography::COMMONNAME." value='".$model->getCommonName()."'  size='51'  maxlength='".huh_geography::COMMONNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FULLNAME<input type=text name=".huh_geography::FULLNAME." id=".huh_geography::FULLNAME." value='".$model->getFullName()."'  size='51'  maxlength='".huh_geography::FULLNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOGRAPHYCODE<input type=text name=".huh_geography::GEOGRAPHYCODE." id=".huh_geography::GEOGRAPHYCODE." value='".$model->getGeographyCode()."'  size='".huh_geography::GEOGRAPHYCODE_SIZE ."'  maxlength='".huh_geography::GEOGRAPHYCODE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GML<input type=text name=".huh_geography::GML." id=".huh_geography::GML." value='".$model->getGML()."'  size='51'  maxlength='".huh_geography::GML_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GUID<input type=text name=".huh_geography::GUID." id=".huh_geography::GUID." value='".$model->getGUID()."'  size='51'  maxlength='".huh_geography::GUID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>HIGHESTCHILDNODENUMBER<input type=text name=".huh_geography::HIGHESTCHILDNODENUMBER." id=".huh_geography::HIGHESTCHILDNODENUMBER." value='".$model->getHighestChildNodeNumber()."'  size='".huh_geography::HIGHESTCHILDNODENUMBER_SIZE ."'  maxlength='".huh_geography::HIGHESTCHILDNODENUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISACCEPTED<input type=text name=".huh_geography::ISACCEPTED." id=".huh_geography::ISACCEPTED." value='".$model->getIsAccepted()."'  size='".huh_geography::ISACCEPTED_SIZE ."'  maxlength='".huh_geography::ISACCEPTED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISCURRENT<input type=text name=".huh_geography::ISCURRENT." id=".huh_geography::ISCURRENT." value='".$model->getIsCurrent()."'  size='".huh_geography::ISCURRENT_SIZE ."'  maxlength='".huh_geography::ISCURRENT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NAME<input type=text name=".huh_geography::NAME." id=".huh_geography::NAME." value='".$model->getName()."'  size='51'  maxlength='".huh_geography::NAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NODENUMBER<input type=text name=".huh_geography::NODENUMBER." id=".huh_geography::NODENUMBER." value='".$model->getNodeNumber()."'  size='".huh_geography::NODENUMBER_SIZE ."'  maxlength='".huh_geography::NODENUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER1<input type=text name=".huh_geography::NUMBER1." id=".huh_geography::NUMBER1." value='".$model->getNumber1()."'  size='".huh_geography::NUMBER1_SIZE ."'  maxlength='".huh_geography::NUMBER1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NUMBER2<input type=text name=".huh_geography::NUMBER2." id=".huh_geography::NUMBER2." value='".$model->getNumber2()."'  size='".huh_geography::NUMBER2_SIZE ."'  maxlength='".huh_geography::NUMBER2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RANKID<input type=text name=".huh_geography::RANKID." id=".huh_geography::RANKID." value='".$model->getRankID()."'  size='".huh_geography::RANKID_SIZE ."'  maxlength='".huh_geography::RANKID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_geography::REMARKS." id=".huh_geography::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_geography::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT1<input type=text name=".huh_geography::TEXT1." id=".huh_geography::TEXT1." value='".$model->getText1()."'  size='".huh_geography::TEXT1_SIZE ."'  maxlength='".huh_geography::TEXT1_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT2<input type=text name=".huh_geography::TEXT2." id=".huh_geography::TEXT2." value='".$model->getText2()."'  size='51'  maxlength='".huh_geography::TEXT2_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPVERSION<input type=text name=".huh_geography::TIMESTAMPVERSION." id=".huh_geography::TIMESTAMPVERSION." value='".$model->getTimestampVersion()."'  size='".huh_geography::TIMESTAMPVERSION_SIZE ."'  maxlength='".huh_geography::TIMESTAMPVERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOGRAPHYTREEDEFITEMID<input type=text name=".huh_geography::GEOGRAPHYTREEDEFITEMID." id=".huh_geography::GEOGRAPHYTREEDEFITEMID." value='".$model->getGeographyTreeDefItemID()."'  size='".huh_geography::GEOGRAPHYTREEDEFITEMID_SIZE ."'  maxlength='".huh_geography::GEOGRAPHYTREEDEFITEMID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_geography::CREATEDBYAGENTID." id=".huh_geography::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_geography::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_geography::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PARENTID<input type=text name=".huh_geography::PARENTID." id=".huh_geography::PARENTID." value='".$model->getParentID()."'  size='".huh_geography::PARENTID_SIZE ."'  maxlength='".huh_geography::PARENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ACCEPTEDID<input type=text name=".huh_geography::ACCEPTEDID." id=".huh_geography::ACCEPTEDID." value='".$model->getAcceptedID()."'  size='".huh_geography::ACCEPTEDID_SIZE ."'  maxlength='".huh_geography::ACCEPTEDID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_geography::MODIFIEDBYAGENTID." id=".huh_geography::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_geography::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_geography::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOGRAPHYTREEDEFID<input type=text name=".huh_geography::GEOGRAPHYTREEDEFID." id=".huh_geography::GEOGRAPHYTREEDEFID." value='".$model->getGeographyTreeDefID()."'  size='".huh_geography::GEOGRAPHYTREEDEFID_SIZE ."'  maxlength='".huh_geography::GEOGRAPHYTREEDEFID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
