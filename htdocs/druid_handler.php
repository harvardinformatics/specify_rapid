<?php 
// *******  Warning: This file will be overwritten by druid if PHP code is regenerated. *******
?>
<?php
// druid_handler.php
// Autogenerated by Druid from MySQL db Build:6
//
 
include_once('druid_classes.php');
 
$response = '';
 
$debug = false;
$action = '';
$table = '';
@$action = substr(preg_replace('/[^a-z]/','',$_GET['druid_action']),0,20);
@$table = substr(preg_replace('/[^a-z0-9A-Z\_]/','',$_GET['druid_table']),0,50);

switch ($action) {
   case 'save':
      $failed = false;
      $errors = '';
      $schema = new database_schema();
      if ($schema->hasTable($table)) { 
          $t = $schema->getClass($table);
          foreach ($_GET as $key => $value ) { 
              if ($t->hasField($key)) { 
                 try {
                     $ok = $t->keyValueSet($key,$value);
                 } catch (Exception $e) { 
                     $failed = true;
                     $errors .= " Field:$key [". $e->getMessage(). '] ';
                 }
              }
           }
           $ok = $t->save();
           if (!$ok || $failed===true) { 
               $response .= '<strong class=error>Error:</strong> '.$errors.' ';
               $response .= $t->errorMessage();
           } else { 
               $response .= '<strong class=ok>Saved</strong>';
           }  
      }
 
      break;
   case 'delete':
      $schema = new database_schema();
      if ($schema->hasTable($table)) { 
          $t = $schema->getClass($table);
          $error = '';
          foreach ($_GET as $key => $value ) { 
              if ($t->hasField($key)) { 
                 try { 
                     $ok = $t->keyValueSet($key,$value);
                 } catch (Exception $e) { 
                     $error .= $key . ': '. $e->getMessage() . ' ';
                 }
              }
           }
           $ok = $t->delete();
           if (!$ok) { 
               $response .= '<strong class=error>Error: Delete Failed</strong> '.$error.' ';
               $response .= $t->errorMessage();
           } else { 
               $response .= '<strong class=ok>Deleted</strong>';
           }  
      } else { 
          $response .= '<strong class=error>Error: No Such Table</strong>';
      }  
 
      break;
   case 'savesingle':
      // test call: druid_handler.php?action=savesingle&table=COLLECTION_LOCALITIES&field=COUNTRY&key=29856&value=Uganda
      $ok = false;
      $table = ''; 
      $key = '';
      $field = '';
      $value = '';
      $uniqueid = '';
      $controltype = '';
      @$table = substr(preg_replace('/[^A-Za-z0-9_\.]/','',$_GET['table']),0,40); // name of the table to update
      @$key = substr(preg_replace('/[^0-9\,A-Za-z0-9\.\;]/','',$_GET['key']),0,15);      // value of the  primary key in the table indicating the row to update
      // or a semicolon separated list of fieldname comma value pairs in cases of multiple field primary keys. 
      // Note: this will fail in cases where either semicolon or comma is a valid character in a primary key field.
      // Note: the list of allowed values for the content of a primary key may be too restricted. 
      @$field= substr(preg_replace('/[^A-Za-z0-9_]/','',$_GET['field']),0,40);  // field to update in table
      @$value = substr(preg_replace('/[^A-Z0-9a-zèéöòóàáùúü&\>\<\.\,\?\ \_\(\)\[\]\-\/\:\'\+\=]/','',$_GET['value$uniqueid']),0,4000);  // new value for field in row with primary key = value
      @$controltype = substr(preg_replace('/[^A-Za-z]/','',$_GET['controltype']),0,15);  // control type - to identify checkbox data that doesn't match values to send to db.

      if ($debug) { echo '[$table][$key][$field][$value][$uniqueid]'; } 
      // check that table is on allowed list
      $schema = new database_schema(); 
      $error = '';
      if ($schema->hasTable($table)) { 
         // we know table is an allowed target
         if ($key!='') { 
            $t = $schema->getClass($table);
            if (strpos($key,';')>0) { 
                // multiple fieldname,value pairs 
                $kv = explode($key,';');
                $kvpairs = array();
                for ($x=0;$x<length($kv); $x++) { 
                    $kvparts = explode($kv[$x]); 
                    $kvpairs[$kvparts[0]] = $kvparts[1];
                }
                $t->loadPKArray($kvparts);
            } else if (strpos($key,'.')>0) { 
                // single fieldname,value pair 
                $kv = explode($key,',',1);
                $t->load($kv[1]);
            } else { 
                // we know that key is a single field
                $t->load($key);
            }
            $hasfield = false;
            $keyfield = '';
            try { 
               $t->keyValueSet($field,$value);
               $t->save();
               $ok = true;
            } catch (Exception $e) { 
               $ok = false;
               $error = $e->getMessage();
            }
         }
      }
      if ($ok) { 
         $response = '<strong class=ok>Saved</strong>';   
      } else {
         $response = '<strong class=error>Failed</strong> '.$error;   
      }
      break;
   case 'returnfkjson': 
      // test call: druid_handler.php?action=returnfkjson&table=COLLECTION_LOCALITIES
      // use with dojo FilteringSelect
      //<div dojoType='dojo.data.ItemFileReadStore' jsId='LocalityStore' url='ajax_handler.php?druid_action=returnfkjson&table=Locality'></div>
      //Change Locality<input type=text name=tempLocality id=tempLocality dojoType='dijit.form.FilteringSelect' store='LocalityStore' onChange=" dojo.byId('Locality').value=arguments[0]; " searchAttr='fields' >
      //<input type=hidden name=Locality id=Locality >;
      $ok = false;
      $table = ''; 
      $key = '';
      $value = '';
      @$table = substr(preg_replace('/[^A-Za-z0-9_\.]/','',$_GET['table']),0,40); // name of the table to update
      if ($debug) { echo "[$table]"; }
      // check that table is on allowed list
      $schema = new database_schema(); 
      $error = '';
      if ($schema->hasTable($table)) {
         // we know table is an allowed target
         $t = $schema->getClass($table);
         try { 
             $values = $t->keySelectAllConcatJSON('ASC');
             $ok = true;
         } catch (Exception $e) { 
             $ok = false;
         }
      }
      //header("Content-type application/json");
      header("Content-type text/json-comment-filtered");
      if ($ok) {
         // identifier (id) needs to be provided in values, will be used as the selected value
         // specified searchAttr als needs to be provided in values, will be used as the displayed value
         $response = '{ "identifier":"id", "items": [ '.$values.' ] }';
      } else {
         $response = '{ }';
      }
      break;	
   case 'returndistinctjson': 
      // test call: druid_handler.php?action=returndistinctjson&table=COLLECTION_LOCALITIES&field=COUNTRY
      // use with dojo dijit.form.ComboBox to generate a pick list
      $ok = false;
      $table = ''; 
      $key = '';
      $field = '';
      $value = '';
      $uniqueid = '';
      $controltype = '';
      @$table = substr(preg_replace('/[^A-Za-z0-9_\.]/','',$_GET['table']),0,40); // name of the table to update
      @$field= substr(preg_replace('/[^A-Za-z0-9_]/','',$_GET['field']),0,40);  // field to update in table
      
      if ($debug) { echo "[$table][$field]"; }
      // check that table is on allowed list
      $schema = new database_schema(); 
      $error = '';
      if ($schema->hasTable($table)) {
         // we know table is an allowed target
            $t = $schema->getClass($table);
            if ($t->hasField($field)) { 
            try { 
               $values = $t->keySelectDistinctJSON($field);
               $ok = true;
            } catch (Exception $e) { 
               $ok = false;
            }
         }
      }
      //header("Content-type application/json");
      header("Content-type text/json-comment-filtered");
      if ($ok) {
         $response = '{ "identifier":"'.$field.'", "items": [ '.$values.' ] }';
      } else {
         $response = '{ }';
      }
      break;	
   case 'returndistinctjsonlimited': 
      // test call: druid_handler.php?action=returndistinctjsonlimited&table=COLLECTION_LOCALITIES&field=COUNTRY
      // use with dojo dijit.form.ComboBox to generate a pick list
      $ok = false;
      $table = ''; 
      $key = '';
      $field = '';
      $value = '';
      $uniqueid = '';
      $controltype = '';
      @$table = substr(preg_replace('/[^A-Za-z0-9_\.]/','',$_GET['table']),0,40); // name of the table to update
      @$field= substr(preg_replace('/[^A-Za-z0-9_]/','',$_GET['field']),0,40);  // field to update in table
      @$limit= substr(preg_replace('/[^A-Za-z0-9_]/','',$_GET['name']),0,40);  // query limit condition
      
      if ($debug) { echo "[$table][$field][$name]"; }
      // check that table is on allowed list
      $schema = new database_schema(); 
      $error = '';
      if ($schema->hasTable($table)) {
         // we know table is an allowed target
            $t = $schema->getClass($table);
            if ($t->hasField($field)) { 
            try { 
               $values = $t->keySelectDistinctJSONLimit($field,$limit);
               $ok = true;
            } catch (Exception $e) { 
               $ok = false;
            }
         }
      }
      //header("Content-type application/json");
      header("Content-type text/json-comment-filtered");
      if ($ok) {
         $response = '{ "identifier":"name", "label":"name" "items": [ '.$values.' ] }';
      } else {
         $response = '{ }';
      }
      break;	
}

echo $response;
 
?>
