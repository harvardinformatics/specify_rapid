<?php
//==============================================================================
//===   splocaleitemstr.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_splocaleitemstr implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const SPLOCALEITEMSTRID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const COUNTRY_SIZE         = 2; //2
   const LANGUAGE_SIZE        = 2; //2
   const TEXT_SIZE            = 255; //255
   const VARIANT_SIZE         = 2; //2
   const SPLOCALECONTAINERITEMDESCID_SIZE = 11; //INTEGER
   const SPLOCALECONTAINERDESCID_SIZE = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const SPLOCALECONTAINERITEMNAMEID_SIZE = 11; //INTEGER
   const SPLOCALECONTAINERNAMEID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const SPLOCALEITEMSTRID = 'SpLocaleItemStrID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const COUNTRY           = 'Country';
   const LANGUAGE          = 'Language';
   const TEXT              = 'Text';
   const VARIANT           = 'Variant';
   const SPLOCALECONTAINERITEMDESCID = 'SpLocaleContainerItemDescID';
   const SPLOCALECONTAINERDESCID = 'SpLocaleContainerDescID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const SPLOCALECONTAINERITEMNAMEID = 'SpLocaleContainerItemNameID';
   const SPLOCALECONTAINERNAMEID = 'SpLocaleContainerNameID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $SpLocaleItemStrID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['SpLocaleItemStrID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $Country = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Country']), 0, 2);
  $Language = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Language']), 0, 2);
  $Text = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Text']), 0, 255);
  $Variant = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Variant']), 0, 2);
  $SpLocaleContainerItemDescID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['SpLocaleContainerItemDescID']), 0, 11);
  $SpLocaleContainerDescID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['SpLocaleContainerDescID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $SpLocaleContainerItemNameID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['SpLocaleContainerItemNameID']), 0, 11);
  $SpLocaleContainerNameID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['SpLocaleContainerNameID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $SpLocaleItemStrID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $Country; // VARCHAR(2) 
   private $Language; // VARCHAR(2) 
   private $Text; // VARCHAR(255) 
   private $Variant; // VARCHAR(2) 
   private $SpLocaleContainerItemDescID; // INTEGER 
   private $SpLocaleContainerDescID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $SpLocaleContainerItemNameID; // INTEGER 
   private $SpLocaleContainerNameID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' SpLocaleItemStrID, TimestampCreated, TimestampModified, Version, Country, Language, Text, Variant, SpLocaleContainerItemDescID, SpLocaleContainerDescID, CreatedByAgentID, ModifiedByAgentID, SpLocaleContainerItemNameID, SpLocaleContainerNameID, ';
   const PKFIELDLIST = ' SpLocaleItemStrID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'SpLocaleItemStrID'  ) ;
   private $allFieldsArray = array( 0 => 'SpLocaleItemStrID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'Country' , 5 => 'Language' , 6 => 'Text' , 7 => 'Variant' , 8 => 'SpLocaleContainerItemDescID' , 9 => 'SpLocaleContainerDescID' , 10 => 'CreatedByAgentID' , 11 => 'ModifiedByAgentID' , 12 => 'SpLocaleContainerItemNameID' , 13 => 'SpLocaleContainerNameID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'Country' , 5 => 'Language' , 8 => 'SpLocaleContainerItemDescID' , 9 => 'SpLocaleContainerDescID' , 10 => 'CreatedByAgentID' , 11 => 'ModifiedByAgentID' , 12 => 'SpLocaleContainerItemNameID' , 13 => 'SpLocaleContainerNameID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_splocaleitemstr(){
       $this->SpLocaleItemStrID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->Country = '';
       $this->Language = '';
       $this->Text = '';
       $this->Variant = '';
       $this->SpLocaleContainerItemDescID = '';
       $this->SpLocaleContainerDescID = '';
       $this->CreatedByAgentID = '';
       $this->ModifiedByAgentID = '';
       $this->SpLocaleContainerItemNameID = '';
       $this->SpLocaleContainerNameID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='SpLocaleItemStrID') { $returnvalue = $this->setSpLocaleItemStrID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='Country') { $returnvalue = $this->setCountry($value); } 
             if ($fieldname=='Language') { $returnvalue = $this->setLanguage($value); } 
             if ($fieldname=='Text') { $returnvalue = $this->setText($value); } 
             if ($fieldname=='Variant') { $returnvalue = $this->setVariant($value); } 
             if ($fieldname=='SpLocaleContainerItemDescID') { $returnvalue = $this->setSpLocaleContainerItemDescID($value); } 
             if ($fieldname=='SpLocaleContainerDescID') { $returnvalue = $this->setSpLocaleContainerDescID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='SpLocaleContainerItemNameID') { $returnvalue = $this->setSpLocaleContainerItemNameID($value); } 
             if ($fieldname=='SpLocaleContainerNameID') { $returnvalue = $this->setSpLocaleContainerNameID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='SpLocaleItemStrID') { $returnvalue = $this->getSpLocaleItemStrID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='Country') { $returnvalue = $this->getCountry(); } 
             if ($fieldname=='Language') { $returnvalue = $this->getLanguage(); } 
             if ($fieldname=='Text') { $returnvalue = $this->getText(); } 
             if ($fieldname=='Variant') { $returnvalue = $this->getVariant(); } 
             if ($fieldname=='SpLocaleContainerItemDescID') { $returnvalue = $this->getSpLocaleContainerItemDescID(); } 
             if ($fieldname=='SpLocaleContainerDescID') { $returnvalue = $this->getSpLocaleContainerDescID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='SpLocaleContainerItemNameID') { $returnvalue = $this->getSpLocaleContainerItemNameID(); } 
             if ($fieldname=='SpLocaleContainerNameID') { $returnvalue = $this->getSpLocaleContainerNameID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*SpLocaleItemStrID*/
   public function getSpLocaleItemStrID() {
       if ($this->SpLocaleItemStrID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SpLocaleItemStrID));
       }
   }
   public function setSpLocaleItemStrID($SpLocaleItemStrID) {
       if (strlen(preg_replace('/[^0-9]/','',$SpLocaleItemStrID)) > huh_splocaleitemstr::SPLOCALEITEMSTRID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $SpLocaleItemStrID = trim($SpLocaleItemStrID);
       if (!ctype_digit(strval($SpLocaleItemStrID)) && trim(strval($SpLocaleItemStrID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->SpLocaleItemStrID = $this->l_addslashes($SpLocaleItemStrID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_splocaleitemstr::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_splocaleitemstr::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_splocaleitemstr::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*Country*/
   public function getCountry() {
       if ($this->Country==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Country));
       }
   }
   public function setCountry($Country) {
       if (strlen($Country) > huh_splocaleitemstr::COUNTRY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Country = $this->l_addslashes($Country);
       $this->dirty = true;
   }
/*Language*/
   public function getLanguage() {
       if ($this->Language==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Language));
       }
   }
   public function setLanguage($Language) {
       if (strlen($Language) > huh_splocaleitemstr::LANGUAGE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Language = $this->l_addslashes($Language);
       $this->dirty = true;
   }
/*Text*/
   public function getText() {
       if ($this->Text==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Text));
       }
   }
   public function setText($Text) {
       if (strlen($Text) > huh_splocaleitemstr::TEXT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Text = $this->l_addslashes($Text);
       $this->dirty = true;
   }
/*Variant*/
   public function getVariant() {
       if ($this->Variant==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Variant));
       }
   }
   public function setVariant($Variant) {
       if (strlen($Variant) > huh_splocaleitemstr::VARIANT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Variant = $this->l_addslashes($Variant);
       $this->dirty = true;
   }
/*SpLocaleContainerItemDescID*/
   public function getSpLocaleContainerItemDescID() {
       if ($this->SpLocaleContainerItemDescID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SpLocaleContainerItemDescID));
       }
   }
   public function setSpLocaleContainerItemDescID($SpLocaleContainerItemDescID) {
       if (strlen(preg_replace('/[^0-9]/','',$SpLocaleContainerItemDescID)) > huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $SpLocaleContainerItemDescID = trim($SpLocaleContainerItemDescID);
       if (!ctype_digit(strval($SpLocaleContainerItemDescID)) && trim(strval($SpLocaleContainerItemDescID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->SpLocaleContainerItemDescID = $this->l_addslashes($SpLocaleContainerItemDescID);
       $this->dirty = true;
   }
/*SpLocaleContainerDescID*/
   public function getSpLocaleContainerDescID() {
       if ($this->SpLocaleContainerDescID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SpLocaleContainerDescID));
       }
   }
   public function setSpLocaleContainerDescID($SpLocaleContainerDescID) {
       if (strlen(preg_replace('/[^0-9]/','',$SpLocaleContainerDescID)) > huh_splocaleitemstr::SPLOCALECONTAINERDESCID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $SpLocaleContainerDescID = trim($SpLocaleContainerDescID);
       if (!ctype_digit(strval($SpLocaleContainerDescID)) && trim(strval($SpLocaleContainerDescID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->SpLocaleContainerDescID = $this->l_addslashes($SpLocaleContainerDescID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_splocaleitemstr::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_splocaleitemstr::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*SpLocaleContainerItemNameID*/
   public function getSpLocaleContainerItemNameID() {
       if ($this->SpLocaleContainerItemNameID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SpLocaleContainerItemNameID));
       }
   }
   public function setSpLocaleContainerItemNameID($SpLocaleContainerItemNameID) {
       if (strlen(preg_replace('/[^0-9]/','',$SpLocaleContainerItemNameID)) > huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $SpLocaleContainerItemNameID = trim($SpLocaleContainerItemNameID);
       if (!ctype_digit(strval($SpLocaleContainerItemNameID)) && trim(strval($SpLocaleContainerItemNameID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->SpLocaleContainerItemNameID = $this->l_addslashes($SpLocaleContainerItemNameID);
       $this->dirty = true;
   }
/*SpLocaleContainerNameID*/
   public function getSpLocaleContainerNameID() {
       if ($this->SpLocaleContainerNameID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SpLocaleContainerNameID));
       }
   }
   public function setSpLocaleContainerNameID($SpLocaleContainerNameID) {
       if (strlen(preg_replace('/[^0-9]/','',$SpLocaleContainerNameID)) > huh_splocaleitemstr::SPLOCALECONTAINERNAMEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $SpLocaleContainerNameID = trim($SpLocaleContainerNameID);
       if (!ctype_digit(strval($SpLocaleContainerNameID)) && trim(strval($SpLocaleContainerNameID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->SpLocaleContainerNameID = $this->l_addslashes($SpLocaleContainerNameID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getSpLocaleItemStrID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['SpLocaleItemStrID'] = $this->getSpLocaleItemStrID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_SpLocaleItemStrIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_CountryMYSQLI_TYPE = 's';
  const C_LanguageMYSQLI_TYPE = 's';
  const C_TextMYSQLI_TYPE = 's';
  const C_VariantMYSQLI_TYPE = 's';
  const C_SpLocaleContainerItemDescIDMYSQLI_TYPE = 'i';
  const C_SpLocaleContainerDescIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_SpLocaleContainerItemNameIDMYSQLI_TYPE = 'i';
  const C_SpLocaleContainerNameIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='SpLocaleItemStrID') { $retval = self::C_SpLocaleItemStrIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='Country') { $retval = self::C_CountryMYSQLI_TYPE; }
      if ($aFieldname=='Language') { $retval = self::C_LanguageMYSQLI_TYPE; }
      if ($aFieldname=='Text') { $retval = self::C_TextMYSQLI_TYPE; }
      if ($aFieldname=='Variant') { $retval = self::C_VariantMYSQLI_TYPE; }
      if ($aFieldname=='SpLocaleContainerItemDescID') { $retval = self::C_SpLocaleContainerItemDescIDMYSQLI_TYPE; }
      if ($aFieldname=='SpLocaleContainerDescID') { $retval = self::C_SpLocaleContainerDescIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='SpLocaleContainerItemNameID') { $retval = self::C_SpLocaleContainerItemNameIDMYSQLI_TYPE; }
      if ($aFieldname=='SpLocaleContainerNameID') { $retval = self::C_SpLocaleContainerNameIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setSpLocaleItemStrID($pk[SpLocaleItemStrID]);
             } else { ;
                 $this->setSpLocaleItemStrID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->SpLocaleItemStrID != NULL) {
           $sql = 'SELECT SpLocaleItemStrID, TimestampCreated, TimestampModified, Version, Country, Language, Text, Variant, SpLocaleContainerItemDescID, SpLocaleContainerDescID, CreatedByAgentID, ModifiedByAgentID, SpLocaleContainerItemNameID, SpLocaleContainerNameID FROM splocaleitemstr WHERE SpLocaleItemStrID = '.$this->SpLocaleItemStrID ;

           $preparesql = 'SELECT SpLocaleItemStrID, TimestampCreated, TimestampModified, Version, Country, Language, Text, Variant, SpLocaleContainerItemDescID, SpLocaleContainerDescID, CreatedByAgentID, ModifiedByAgentID, SpLocaleContainerItemNameID, SpLocaleContainerNameID FROM splocaleitemstr WHERE SpLocaleItemStrID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->SpLocaleItemStrID);
              $statement->execute();
              $statement->bind_result($this->SpLocaleItemStrID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Country, $this->Language, $this->Text, $this->Variant, $this->SpLocaleContainerItemDescID, $this->SpLocaleContainerDescID, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->SpLocaleContainerItemNameID, $this->SpLocaleContainerNameID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->SpLocaleItemStrID!= NULL) {
            $sql  = 'UPDATE  splocaleitemstr SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", Country = ? ";
            $sql .=  ", Language = ? ";
            $sql .=  ", Text = ? ";
            $sql .=  ", Variant = ? ";
            $sql .=  ", SpLocaleContainerItemDescID = ? ";
            $sql .=  ", SpLocaleContainerDescID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", SpLocaleContainerItemNameID = ? ";
            $sql .=  ", SpLocaleContainerNameID = ? ";

            $sql .= "  WHERE SpLocaleItemStrID = ? ";
        } else {
            $sql  = 'INSERT INTO splocaleitemstr ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( SpLocaleItemStrID ,  TimestampCreated ,  TimestampModified ,  Version ,  Country ,  Language ,  Text ,  Variant ,  SpLocaleContainerItemDescID ,  SpLocaleContainerDescID ,  CreatedByAgentID ,  ModifiedByAgentID ,  SpLocaleContainerItemNameID ,  SpLocaleContainerNameID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->SpLocaleItemStrID!= NULL ) {
              $statement->bind_param("ississssiiiiiii", $this->SpLocaleItemStrID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Country , $this->Language , $this->Text , $this->Variant , $this->SpLocaleContainerItemDescID , $this->SpLocaleContainerDescID , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->SpLocaleContainerItemNameID , $this->SpLocaleContainerNameID , $this->SpLocaleItemStrID );
           } else { 
              $statement->bind_param("ississssiiiiii", $this->SpLocaleItemStrID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->Country , $this->Language , $this->Text , $this->Variant , $this->SpLocaleContainerItemDescID , $this->SpLocaleContainerDescID , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->SpLocaleContainerItemNameID , $this->SpLocaleContainerNameID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->SpLocaleItemStrID != NULL) {
           $sql = 'SELECT SpLocaleItemStrID, TimestampCreated, TimestampModified, Version, Country, Language, Text, Variant, SpLocaleContainerItemDescID, SpLocaleContainerDescID, CreatedByAgentID, ModifiedByAgentID, SpLocaleContainerItemNameID, SpLocaleContainerNameID FROM splocaleitemstr WHERE SpLocaleItemStrID = "'.$this->SpLocaleItemStrID.'"  ' ;

           $preparedsql = 'SELECT  FROM splocaleitemstr WHERE  and SpLocaleItemStrID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississssiiiiii", $this->SpLocaleItemStrID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Country, $this->Language, $this->Text, $this->Variant, $this->SpLocaleContainerItemDescID, $this->SpLocaleContainerDescID, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->SpLocaleContainerItemNameID, $this->SpLocaleContainerNameID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM splocaleitemstr WHERE  and SpLocaleItemStrID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississssiiiiii", $this->SpLocaleItemStrID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->Country, $this->Language, $this->Text, $this->Variant, $this->SpLocaleContainerItemDescID, $this->SpLocaleContainerDescID, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->SpLocaleContainerItemNameID, $this->SpLocaleContainerNameID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->SpLocaleItemStrID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM splocaleitemstr';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT SpLocaleItemStrID FROM splocaleitemstr $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_splocaleitemstr();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: SpLocaleContainerItemDescID
      $t = new splocalecontaineritem();
      $t->load(getSpLocaleContainerItemDescID());
      $returnvalue[SpLocaleContainerItemDescID] = $t;
       // fk: SpLocaleContainerDescID
      $t = new splocalecontainer();
      $t->load(getSpLocaleContainerDescID());
      $returnvalue[SpLocaleContainerDescID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: SpLocaleContainerItemNameID
      $t = new splocalecontaineritem();
      $t->load(getSpLocaleContainerItemNameID());
      $returnvalue[SpLocaleContainerItemNameID] = $t;
       // fk: SpLocaleContainerNameID
      $t = new splocalecontainer();
      $t->load(getSpLocaleContainerNameID());
      $returnvalue[SpLocaleContainerNameID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT SpLocaleItemStrID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(Country,'') || ' ' || IFNULL(Language,'') || ' ' || IFNULL(Text,'') || ' ' || IFNULL(Variant,'') || ' ' || IFNULL(SpLocaleContainerItemDescID,'') || ' ' || IFNULL(SpLocaleContainerDescID,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(SpLocaleContainerItemNameID,'') || ' ' || IFNULL(SpLocaleContainerNameID,'')) FROM splocaleitemstr order by Country, Language, SpLocaleContainerItemDescID, SpLocaleContainerDescID, CreatedByAgentID, ModifiedByAgentID, SpLocaleContainerItemNameID, SpLocaleContainerNameID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM splocaleitemstr order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCountry($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE Country $operator '$searchTerm'";
        $preparedsql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE Country $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_splocaleitemstr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByLanguage($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE Language $operator '$searchTerm'";
        $preparedsql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE Language $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_splocaleitemstr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayBySpLocaleContainerItemDescID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE SpLocaleContainerItemDescID $operator '$searchTerm'";
        $preparedsql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE SpLocaleContainerItemDescID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_splocaleitemstr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayBySpLocaleContainerDescID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE SpLocaleContainerDescID $operator '$searchTerm'";
        $preparedsql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE SpLocaleContainerDescID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_splocaleitemstr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_splocaleitemstr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_splocaleitemstr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayBySpLocaleContainerItemNameID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE SpLocaleContainerItemNameID $operator '$searchTerm'";
        $preparedsql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE SpLocaleContainerItemNameID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_splocaleitemstr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayBySpLocaleContainerNameID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE SpLocaleContainerNameID $operator '$searchTerm'";
        $preparedsql = "SELECT SpLocaleItemStrID FROM splocaleitemstr WHERE SpLocaleContainerNameID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_splocaleitemstr();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCountry($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Country ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Country FROM splocaleitemstr group by Country order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Country=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctLanguage($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Language ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Language FROM splocaleitemstr group by Language order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Language=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctSpLocaleContainerItemDescID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' SpLocaleContainerItemDescID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, SpLocaleContainerItemDescID FROM splocaleitemstr group by SpLocaleContainerItemDescID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&SpLocaleContainerItemDescID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctSpLocaleContainerDescID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' SpLocaleContainerDescID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, SpLocaleContainerDescID FROM splocaleitemstr group by SpLocaleContainerDescID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&SpLocaleContainerDescID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM splocaleitemstr group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM splocaleitemstr group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctSpLocaleContainerItemNameID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' SpLocaleContainerItemNameID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, SpLocaleContainerItemNameID FROM splocaleitemstr group by SpLocaleContainerItemNameID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&SpLocaleContainerItemNameID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctSpLocaleContainerNameID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' SpLocaleContainerNameID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, SpLocaleContainerNameID FROM splocaleitemstr group by SpLocaleContainerNameID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&SpLocaleContainerNameID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'Country':
             $returnvalue = $this->selectDistinctCountry($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'Language':
             $returnvalue = $this->selectDistinctLanguage($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'SpLocaleContainerItemDescID':
             $returnvalue = $this->selectDistinctSpLocaleContainerItemDescID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'SpLocaleContainerDescID':
             $returnvalue = $this->selectDistinctSpLocaleContainerDescID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'SpLocaleContainerItemNameID':
             $returnvalue = $this->selectDistinctSpLocaleContainerItemNameID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'SpLocaleContainerNameID':
             $returnvalue = $this->selectDistinctSpLocaleContainerNameID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the splocaleitemstr.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_splocaleitemstrView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_splocaleitemstr <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_splocaleitemstr::SPLOCALEITEMSTRID.": ".$model->getSpLocaleItemStrID()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::COUNTRY.": ".$model->getCountry()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::LANGUAGE.": ".$model->getLanguage()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::TEXT.": ".$model->getText()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::VARIANT.": ".$model->getVariant()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID.": ".$model->getSpLocaleContainerItemDescID()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::SPLOCALECONTAINERDESCID.": ".$model->getSpLocaleContainerDescID()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID.": ".$model->getSpLocaleContainerItemNameID()."</li>\n";
       $returnvalue .= "<li>".huh_splocaleitemstr::SPLOCALECONTAINERNAMEID.": ".$model->getSpLocaleContainerNameID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>splocalecontaineritem</li>";
           $t_splocalecontaineritem = new huh_splocalecontaineritem();
           $t_splocalecontaineritemView = new huh_splocalecontaineritemView();
           $t_splocalecontaineritemView->setModel($t_splocalecontaineritem);
           if ($model->getSpLocaleContainerItemDescID() != '') { 
               $t_splocalecontaineritem->load($model->getSpLocaleContainerItemDescID());
               $returnvalue .= $t_splocalecontaineritemView->getDetailsView(false);
           }
           $returnvalue .= "<li>splocalecontainer</li>";
           $t_splocalecontainer = new huh_splocalecontainer();
           $t_splocalecontainerView = new huh_splocalecontainerView();
           $t_splocalecontainerView->setModel($t_splocalecontainer);
           if ($model->getSpLocaleContainerDescID() != '') { 
               $t_splocalecontainer->load($model->getSpLocaleContainerDescID());
               $returnvalue .= $t_splocalecontainerView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>splocalecontaineritem</li>";
           $t_splocalecontaineritem = new huh_splocalecontaineritem();
           $t_splocalecontaineritemView = new huh_splocalecontaineritemView();
           $t_splocalecontaineritemView->setModel($t_splocalecontaineritem);
           if ($model->getSpLocaleContainerItemNameID() != '') { 
               $t_splocalecontaineritem->load($model->getSpLocaleContainerItemNameID());
               $returnvalue .= $t_splocalecontaineritemView->getDetailsView(false);
           }
           $returnvalue .= "<li>splocalecontainer</li>";
           $t_splocalecontainer = new huh_splocalecontainer();
           $t_splocalecontainerView = new huh_splocalecontainerView();
           $t_splocalecontainerView->setModel($t_splocalecontainer);
           if ($model->getSpLocaleContainerNameID() != '') { 
               $t_splocalecontainer->load($model->getSpLocaleContainerNameID());
               $returnvalue .= $t_splocalecontainerView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_splocaleitemstr::SPLOCALEITEMSTRID.': "'.$model->getSpLocaleItemStrID().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::COUNTRY.': "'.$model->getCountry().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::LANGUAGE.': "'.$model->getLanguage().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::TEXT.': "'.$model->getText().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::VARIANT.': "'.$model->getVariant().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID.': "'.$model->getSpLocaleContainerItemDescID().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::SPLOCALECONTAINERDESCID.': "'.$model->getSpLocaleContainerDescID().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID.': "'.$model->getSpLocaleContainerItemNameID().'",';
       $returnvalue .= '"'.huh_splocaleitemstr::SPLOCALECONTAINERNAMEID.': "'.$model->getSpLocaleContainerNameID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getSpLocaleItemStrID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getCountry()."</td>\n";
       $returnvalue .= "<td>".$model->getLanguage()."</td>\n";
       $returnvalue .= "<td>".$model->getText()."</td>\n";
       $returnvalue .= "<td>".$model->getVariant()."</td>\n";
       $returnvalue .= "<td>".$model->getSpLocaleContainerItemDescID()."</td>\n";
       $returnvalue .= "<td>".$model->getSpLocaleContainerDescID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getSpLocaleContainerItemNameID()."</td>\n";
       $returnvalue .= "<td>".$model->getSpLocaleContainerNameID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_splocaleitemstr::SPLOCALEITEMSTRID."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::COUNTRY."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::LANGUAGE."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::TEXT."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::VARIANT."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::SPLOCALECONTAINERDESCID."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID."</th>\n";
       $returnvalue .= "<th>".huh_splocaleitemstr::SPLOCALECONTAINERNAMEID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_splocaleitemstr">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new SpLocaleItemStrID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_splocaleitemstr::SPLOCALEITEMSTRID.">SPLOCALEITEMSTRID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_splocaleitemstr::SPLOCALEITEMSTRID." id=".huh_splocaleitemstr::SPLOCALEITEMSTRID." value='".$model->getSpLocaleItemStrID()."'  style=' width:".huh_splocaleitemstr::SPLOCALEITEMSTRID_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::SPLOCALEITEMSTRID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_splocaleitemstr::TIMESTAMPCREATED." id=".huh_splocaleitemstr::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_splocaleitemstr::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_splocaleitemstr::TIMESTAMPMODIFIED." id=".huh_splocaleitemstr::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_splocaleitemstr::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_splocaleitemstr::VERSION." id=".huh_splocaleitemstr::VERSION." value='".$model->getVersion()."'  style=' width:".huh_splocaleitemstr::VERSION_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::COUNTRY.">COUNTRY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_splocaleitemstr::COUNTRY." id=".huh_splocaleitemstr::COUNTRY." value='".$model->getCountry()."'  style=' width:".huh_splocaleitemstr::COUNTRY_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::COUNTRY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::LANGUAGE.">LANGUAGE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_splocaleitemstr::LANGUAGE." id=".huh_splocaleitemstr::LANGUAGE." value='".$model->getLanguage()."'  style=' width:".huh_splocaleitemstr::LANGUAGE_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::LANGUAGE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::TEXT.">TEXT</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_splocaleitemstr::TEXT." id=".huh_splocaleitemstr::TEXT." >".$model->getText()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::VARIANT.">VARIANT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_splocaleitemstr::VARIANT." id=".huh_splocaleitemstr::VARIANT." value='".$model->getVariant()."'  style=' width:".huh_splocaleitemstr::VARIANT_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::VARIANT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID.">SPLOCALECONTAINERITEMDESCID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID." id=".huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID." value='".$model->getSpLocaleContainerItemDescID()."'  style=' width:".huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::SPLOCALECONTAINERDESCID.">SPLOCALECONTAINERDESCID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_splocaleitemstr::SPLOCALECONTAINERDESCID." id=".huh_splocaleitemstr::SPLOCALECONTAINERDESCID." value='".$model->getSpLocaleContainerDescID()."'  style=' width:".huh_splocaleitemstr::SPLOCALECONTAINERDESCID_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::SPLOCALECONTAINERDESCID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_splocaleitemstr::CREATEDBYAGENTID." id=".huh_splocaleitemstr::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_splocaleitemstr::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_splocaleitemstr::MODIFIEDBYAGENTID." id=".huh_splocaleitemstr::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_splocaleitemstr::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID.">SPLOCALECONTAINERITEMNAMEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID." id=".huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID." value='".$model->getSpLocaleContainerItemNameID()."'  style=' width:".huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_splocaleitemstr::SPLOCALECONTAINERNAMEID.">SPLOCALECONTAINERNAMEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_splocaleitemstr::SPLOCALECONTAINERNAMEID." id=".huh_splocaleitemstr::SPLOCALECONTAINERNAMEID." value='".$model->getSpLocaleContainerNameID()."'  style=' width:".huh_splocaleitemstr::SPLOCALECONTAINERNAMEID_SIZE ."em;  '  maxlength='".huh_splocaleitemstr::SPLOCALECONTAINERNAMEID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_splocaleitemstr">';
       $returnvalue .= '<input type=hidden name=SpLocaleItemStrID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_splocaleitemstr">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>SPLOCALEITEMSTRID<input type=text name=".huh_splocaleitemstr::SPLOCALEITEMSTRID." id=".huh_splocaleitemstr::SPLOCALEITEMSTRID." value='".$model->getSpLocaleItemStrID()."'  size='".huh_splocaleitemstr::SPLOCALEITEMSTRID_SIZE ."'  maxlength='".huh_splocaleitemstr::SPLOCALEITEMSTRID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_splocaleitemstr::TIMESTAMPCREATED." id=".huh_splocaleitemstr::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_splocaleitemstr::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_splocaleitemstr::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_splocaleitemstr::TIMESTAMPMODIFIED." id=".huh_splocaleitemstr::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_splocaleitemstr::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_splocaleitemstr::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_splocaleitemstr::VERSION." id=".huh_splocaleitemstr::VERSION." value='".$model->getVersion()."'  size='".huh_splocaleitemstr::VERSION_SIZE ."'  maxlength='".huh_splocaleitemstr::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COUNTRY<input type=text name=".huh_splocaleitemstr::COUNTRY." id=".huh_splocaleitemstr::COUNTRY." value='".$model->getCountry()."'  size='".huh_splocaleitemstr::COUNTRY_SIZE ."'  maxlength='".huh_splocaleitemstr::COUNTRY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LANGUAGE<input type=text name=".huh_splocaleitemstr::LANGUAGE." id=".huh_splocaleitemstr::LANGUAGE." value='".$model->getLanguage()."'  size='".huh_splocaleitemstr::LANGUAGE_SIZE ."'  maxlength='".huh_splocaleitemstr::LANGUAGE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEXT<input type=text name=".huh_splocaleitemstr::TEXT." id=".huh_splocaleitemstr::TEXT." value='".$model->getText()."'  size='51'  maxlength='".huh_splocaleitemstr::TEXT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VARIANT<input type=text name=".huh_splocaleitemstr::VARIANT." id=".huh_splocaleitemstr::VARIANT." value='".$model->getVariant()."'  size='".huh_splocaleitemstr::VARIANT_SIZE ."'  maxlength='".huh_splocaleitemstr::VARIANT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SPLOCALECONTAINERITEMDESCID<input type=text name=".huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID." id=".huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID." value='".$model->getSpLocaleContainerItemDescID()."'  size='".huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID_SIZE ."'  maxlength='".huh_splocaleitemstr::SPLOCALECONTAINERITEMDESCID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SPLOCALECONTAINERDESCID<input type=text name=".huh_splocaleitemstr::SPLOCALECONTAINERDESCID." id=".huh_splocaleitemstr::SPLOCALECONTAINERDESCID." value='".$model->getSpLocaleContainerDescID()."'  size='".huh_splocaleitemstr::SPLOCALECONTAINERDESCID_SIZE ."'  maxlength='".huh_splocaleitemstr::SPLOCALECONTAINERDESCID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_splocaleitemstr::CREATEDBYAGENTID." id=".huh_splocaleitemstr::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_splocaleitemstr::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_splocaleitemstr::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_splocaleitemstr::MODIFIEDBYAGENTID." id=".huh_splocaleitemstr::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_splocaleitemstr::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_splocaleitemstr::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SPLOCALECONTAINERITEMNAMEID<input type=text name=".huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID." id=".huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID." value='".$model->getSpLocaleContainerItemNameID()."'  size='".huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID_SIZE ."'  maxlength='".huh_splocaleitemstr::SPLOCALECONTAINERITEMNAMEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SPLOCALECONTAINERNAMEID<input type=text name=".huh_splocaleitemstr::SPLOCALECONTAINERNAMEID." id=".huh_splocaleitemstr::SPLOCALECONTAINERNAMEID." value='".$model->getSpLocaleContainerNameID()."'  size='".huh_splocaleitemstr::SPLOCALECONTAINERNAMEID_SIZE ."'  maxlength='".huh_splocaleitemstr::SPLOCALECONTAINERNAMEID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
