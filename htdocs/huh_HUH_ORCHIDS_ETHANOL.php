<?php
//==============================================================================
//===   HUH_ORCHIDS_ETHANOL.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_HUH_ORCHIDS_ETHANOL implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const ID_SIZE              = 11; //INTEGER
   const GENUS_SIZE           = 30; //30
   const EPITHET_SIZE         = 20; //YEAR
   const AUTHORSHIP_SIZE      = 20; //YEAR
   const COLLECTOR_SIZE       = 255; //255
   const COLLECTOR_NUMBER_SIZE = 30; //30
   const JAR_NUMBER_SIZE      = 30; //30
   const NOTES_SIZE           = 25; //25
   const TEMP_SIZE            = 1; //1
    // These constants hold the field names of the table in the database. 
   const ID                = 'id';
   const GENUS             = 'genus';
   const EPITHET           = 'epithet';
   const AUTHORSHIP        = 'authorship';
   const COLLECTOR         = 'collector';
   const COLLECTOR_NUMBER  = 'collector_number';
   const JAR_NUMBER        = 'jar_number';
   const NOTES             = 'notes';
   const TEMP              = 'temp';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $id = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['id']), 0, 11);
  $genus = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['genus']), 0, 30);
  $epithet = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['epithet']), 0, 20);
  $authorship = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['authorship']), 0, 20);
  $collector = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['collector']), 0, 255);
  $collector_number = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['collector_number']), 0, 30);
  $jar_number = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['jar_number']), 0, 30);
  $notes = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['notes']), 0, 25);
  $temp = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['temp']), 0, 1);
*/

   //---------------------------------------------------------------------------

   private $id; // PK INTEGER 
   private $genus; // VARCHAR(30) 
   private $epithet; // YEAR 
   private $authorship; // YEAR 
   private $collector; // VARCHAR(255) 
   private $collector_number; // VARCHAR(30) 
   private $jar_number; // VARCHAR(30) 
   private $notes; // VARCHAR(25) 
   private $temp; // VARCHAR(1) 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' id, genus, epithet, authorship, collector, collector_number, jar_number, notes, temp, ';
   const PKFIELDLIST = ' id, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'id'  ) ;
   private $allFieldsArray = array( 0 => 'id' , 1 => 'genus' , 2 => 'epithet' , 3 => 'authorship' , 4 => 'collector' , 5 => 'collector_number' , 6 => 'jar_number' , 7 => 'notes' , 8 => 'temp'  ) ;
   private $selectDistinctFieldsArray = array(  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_HUH_ORCHIDS_ETHANOL(){
       $this->id = NULL;
       $this->genus = '';
       $this->epithet = '';
       $this->authorship = '';
       $this->collector = '';
       $this->collector_number = '';
       $this->jar_number = '';
       $this->notes = '';
       $this->temp = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='id') { $returnvalue = $this->setid($value); } 
             if ($fieldname=='genus') { $returnvalue = $this->setgenus($value); } 
             if ($fieldname=='epithet') { $returnvalue = $this->setepithet($value); } 
             if ($fieldname=='authorship') { $returnvalue = $this->setauthorship($value); } 
             if ($fieldname=='collector') { $returnvalue = $this->setcollector($value); } 
             if ($fieldname=='collector_number') { $returnvalue = $this->setcollector_number($value); } 
             if ($fieldname=='jar_number') { $returnvalue = $this->setjar_number($value); } 
             if ($fieldname=='notes') { $returnvalue = $this->setnotes($value); } 
             if ($fieldname=='temp') { $returnvalue = $this->settemp($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='id') { $returnvalue = $this->getid(); } 
             if ($fieldname=='genus') { $returnvalue = $this->getgenus(); } 
             if ($fieldname=='epithet') { $returnvalue = $this->getepithet(); } 
             if ($fieldname=='authorship') { $returnvalue = $this->getauthorship(); } 
             if ($fieldname=='collector') { $returnvalue = $this->getcollector(); } 
             if ($fieldname=='collector_number') { $returnvalue = $this->getcollector_number(); } 
             if ($fieldname=='jar_number') { $returnvalue = $this->getjar_number(); } 
             if ($fieldname=='notes') { $returnvalue = $this->getnotes(); } 
             if ($fieldname=='temp') { $returnvalue = $this->gettemp(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*id*/
   public function getid() {
       if ($this->id==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->id));
       }
   }
   public function setid($id) {
       if (strlen(preg_replace('/[^0-9]/','',$id)) > huh_HUH_ORCHIDS_ETHANOL::ID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $id = trim($id);
       if (!ctype_digit(strval($id)) && trim(strval($id))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->id = $this->l_addslashes($id);
       $this->dirty = true;
   }
/*genus*/
   public function getgenus() {
       if ($this->genus==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->genus));
       }
   }
   public function setgenus($genus) {
       if (strlen($genus) > huh_HUH_ORCHIDS_ETHANOL::GENUS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->genus = $this->l_addslashes($genus);
       $this->dirty = true;
   }
/*epithet*/
   public function getepithet() {
       if ($this->epithet==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->epithet));
       }
   }
   public function setepithet($epithet) {
       if (strlen($epithet) > huh_HUH_ORCHIDS_ETHANOL::EPITHET_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->epithet = $this->l_addslashes($epithet);
       $this->dirty = true;
   }
/*authorship*/
   public function getauthorship() {
       if ($this->authorship==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->authorship));
       }
   }
   public function setauthorship($authorship) {
       if (strlen($authorship) > huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->authorship = $this->l_addslashes($authorship);
       $this->dirty = true;
   }
/*collector*/
   public function getcollector() {
       if ($this->collector==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->collector));
       }
   }
   public function setcollector($collector) {
       if (strlen($collector) > huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->collector = $this->l_addslashes($collector);
       $this->dirty = true;
   }
/*collector_number*/
   public function getcollector_number() {
       if ($this->collector_number==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->collector_number));
       }
   }
   public function setcollector_number($collector_number) {
       if (strlen($collector_number) > huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->collector_number = $this->l_addslashes($collector_number);
       $this->dirty = true;
   }
/*jar_number*/
   public function getjar_number() {
       if ($this->jar_number==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->jar_number));
       }
   }
   public function setjar_number($jar_number) {
       if (strlen($jar_number) > huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->jar_number = $this->l_addslashes($jar_number);
       $this->dirty = true;
   }
/*notes*/
   public function getnotes() {
       if ($this->notes==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->notes));
       }
   }
   public function setnotes($notes) {
       if (strlen($notes) > huh_HUH_ORCHIDS_ETHANOL::NOTES_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->notes = $this->l_addslashes($notes);
       $this->dirty = true;
   }
/*temp*/
   public function gettemp() {
       if ($this->temp==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->temp));
       }
   }
   public function settemp($temp) {
       if (strlen($temp) > huh_HUH_ORCHIDS_ETHANOL::TEMP_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->temp = $this->l_addslashes($temp);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getid();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['id'] = $this->getid();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_idMYSQLI_TYPE = 'i';
  const C_genusMYSQLI_TYPE = 's';
  const C_epithetMYSQLI_TYPE = 's';
  const C_authorshipMYSQLI_TYPE = 's';
  const C_collectorMYSQLI_TYPE = 's';
  const C_collector_numberMYSQLI_TYPE = 's';
  const C_jar_numberMYSQLI_TYPE = 's';
  const C_notesMYSQLI_TYPE = 's';
  const C_tempMYSQLI_TYPE = 's';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='id') { $retval = self::C_idMYSQLI_TYPE; }
      if ($aFieldname=='genus') { $retval = self::C_genusMYSQLI_TYPE; }
      if ($aFieldname=='epithet') { $retval = self::C_epithetMYSQLI_TYPE; }
      if ($aFieldname=='authorship') { $retval = self::C_authorshipMYSQLI_TYPE; }
      if ($aFieldname=='collector') { $retval = self::C_collectorMYSQLI_TYPE; }
      if ($aFieldname=='collector_number') { $retval = self::C_collector_numberMYSQLI_TYPE; }
      if ($aFieldname=='jar_number') { $retval = self::C_jar_numberMYSQLI_TYPE; }
      if ($aFieldname=='notes') { $retval = self::C_notesMYSQLI_TYPE; }
      if ($aFieldname=='temp') { $retval = self::C_tempMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setid($pk[id]);
             } else { ;
                 $this->setid($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->id != NULL) {
           $sql = 'SELECT id, genus, epithet, authorship, collector, collector_number, jar_number, notes, temp FROM HUH_ORCHIDS_ETHANOL WHERE id = '.$this->id ;

           $preparesql = 'SELECT id, genus, epithet, authorship, collector, collector_number, jar_number, notes, temp FROM HUH_ORCHIDS_ETHANOL WHERE id = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->id);
              $statement->execute();
              $statement->bind_result($this->id, $this->genus, $this->epithet, $this->authorship, $this->collector, $this->collector_number, $this->jar_number, $this->notes, $this->temp);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->id!= NULL) {
            $sql  = 'UPDATE  HUH_ORCHIDS_ETHANOL SET ';
            $isInsert = false;
            $sql .=  "genus = ? ";
            $sql .=  ", epithet = ? ";
            $sql .=  ", authorship = ? ";
            $sql .=  ", collector = ? ";
            $sql .=  ", collector_number = ? ";
            $sql .=  ", jar_number = ? ";
            $sql .=  ", notes = ? ";
            $sql .=  ", temp = ? ";

            $sql .= "  WHERE id = ? ";
        } else {
            $sql  = 'INSERT INTO HUH_ORCHIDS_ETHANOL ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( id ,  genus ,  epithet ,  authorship ,  collector ,  collector_number ,  jar_number ,  notes ,  temp ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->id!= NULL ) {
              $statement->bind_param("issssssssi", $this->id , $this->genus , $this->epithet , $this->authorship , $this->collector , $this->collector_number , $this->jar_number , $this->notes , $this->temp , $this->id );
           } else { 
              $statement->bind_param("issssssss", $this->id , $this->genus , $this->epithet , $this->authorship , $this->collector , $this->collector_number , $this->jar_number , $this->notes , $this->temp );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->id != NULL) {
           $sql = 'SELECT id, genus, epithet, authorship, collector, collector_number, jar_number, notes, temp FROM HUH_ORCHIDS_ETHANOL WHERE id = "'.$this->id.'"  ' ;

           $preparedsql = 'SELECT  FROM HUH_ORCHIDS_ETHANOL WHERE  and id = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issssssss", $this->id, $this->genus, $this->epithet, $this->authorship, $this->collector, $this->collector_number, $this->jar_number, $this->notes, $this->temp);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM HUH_ORCHIDS_ETHANOL WHERE  and id = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issssssss", $this->id, $this->genus, $this->epithet, $this->authorship, $this->collector, $this->collector_number, $this->jar_number, $this->notes, $this->temp);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->id = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM HUH_ORCHIDS_ETHANOL';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT id FROM HUH_ORCHIDS_ETHANOL $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_HUH_ORCHIDS_ETHANOL();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 

   //---------------------------------------------------------------------------

   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT id, concat(IFNULL(genus,'') || ' ' || IFNULL(epithet,'') || ' ' || IFNULL(authorship,'') || ' ' || IFNULL(collector,'') || ' ' || IFNULL(collector_number,'') || ' ' || IFNULL(jar_number,'') || ' ' || IFNULL(notes,'') || ' ' || IFNULL(temp,'')) FROM HUH_ORCHIDS_ETHANOL order by id $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM HUH_ORCHIDS_ETHANOL order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the HUH_ORCHIDS_ETHANOL.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_HUH_ORCHIDS_ETHANOLView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_HUH_ORCHIDS_ETHANOL <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_HUH_ORCHIDS_ETHANOL::ID.": ".$model->getid()."</li>\n";
       $returnvalue .= "<li>".huh_HUH_ORCHIDS_ETHANOL::GENUS.": ".$model->getgenus()."</li>\n";
       $returnvalue .= "<li>".huh_HUH_ORCHIDS_ETHANOL::EPITHET.": ".$model->getepithet()."</li>\n";
       $returnvalue .= "<li>".huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP.": ".$model->getauthorship()."</li>\n";
       $returnvalue .= "<li>".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR.": ".$model->getcollector()."</li>\n";
       $returnvalue .= "<li>".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER.": ".$model->getcollector_number()."</li>\n";
       $returnvalue .= "<li>".huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER.": ".$model->getjar_number()."</li>\n";
       $returnvalue .= "<li>".huh_HUH_ORCHIDS_ETHANOL::NOTES.": ".$model->getnotes()."</li>\n";
       $returnvalue .= "<li>".huh_HUH_ORCHIDS_ETHANOL::TEMP.": ".$model->gettemp()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_HUH_ORCHIDS_ETHANOL::ID.': "'.$model->getid().'",';
       $returnvalue .= '"'.huh_HUH_ORCHIDS_ETHANOL::GENUS.': "'.$model->getgenus().'",';
       $returnvalue .= '"'.huh_HUH_ORCHIDS_ETHANOL::EPITHET.': "'.$model->getepithet().'",';
       $returnvalue .= '"'.huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP.': "'.$model->getauthorship().'",';
       $returnvalue .= '"'.huh_HUH_ORCHIDS_ETHANOL::COLLECTOR.': "'.$model->getcollector().'",';
       $returnvalue .= '"'.huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER.': "'.$model->getcollector_number().'",';
       $returnvalue .= '"'.huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER.': "'.$model->getjar_number().'",';
       $returnvalue .= '"'.huh_HUH_ORCHIDS_ETHANOL::NOTES.': "'.$model->getnotes().'",';
       $returnvalue .= '"'.huh_HUH_ORCHIDS_ETHANOL::TEMP.': "'.$model->gettemp().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getid()."</td>\n";
       $returnvalue .= "<td>".$model->getgenus()."</td>\n";
       $returnvalue .= "<td>".$model->getepithet()."</td>\n";
       $returnvalue .= "<td>".$model->getauthorship()."</td>\n";
       $returnvalue .= "<td>".$model->getcollector()."</td>\n";
       $returnvalue .= "<td>".$model->getcollector_number()."</td>\n";
       $returnvalue .= "<td>".$model->getjar_number()."</td>\n";
       $returnvalue .= "<td>".$model->getnotes()."</td>\n";
       $returnvalue .= "<td>".$model->gettemp()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_HUH_ORCHIDS_ETHANOL::ID."</th>\n";
       $returnvalue .= "<th>".huh_HUH_ORCHIDS_ETHANOL::GENUS."</th>\n";
       $returnvalue .= "<th>".huh_HUH_ORCHIDS_ETHANOL::EPITHET."</th>\n";
       $returnvalue .= "<th>".huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP."</th>\n";
       $returnvalue .= "<th>".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR."</th>\n";
       $returnvalue .= "<th>".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER."</th>\n";
       $returnvalue .= "<th>".huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER."</th>\n";
       $returnvalue .= "<th>".huh_HUH_ORCHIDS_ETHANOL::NOTES."</th>\n";
       $returnvalue .= "<th>".huh_HUH_ORCHIDS_ETHANOL::TEMP."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_HUH_ORCHIDS_ETHANOL">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new id"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_HUH_ORCHIDS_ETHANOL::ID.">ID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_HUH_ORCHIDS_ETHANOL::ID." id=".huh_HUH_ORCHIDS_ETHANOL::ID." value='".$model->getid()."'  style=' width:".huh_HUH_ORCHIDS_ETHANOL::ID_SIZE ."em;  '  maxlength='".huh_HUH_ORCHIDS_ETHANOL::ID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_HUH_ORCHIDS_ETHANOL::GENUS.">GENUS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_HUH_ORCHIDS_ETHANOL::GENUS." id=".huh_HUH_ORCHIDS_ETHANOL::GENUS." value='".$model->getgenus()."'  style=' width:".huh_HUH_ORCHIDS_ETHANOL::GENUS_SIZE ."em;  '  maxlength='".huh_HUH_ORCHIDS_ETHANOL::GENUS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_HUH_ORCHIDS_ETHANOL::EPITHET.">EPITHET</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_HUH_ORCHIDS_ETHANOL::EPITHET." id=".huh_HUH_ORCHIDS_ETHANOL::EPITHET." value='".$model->getepithet()."'  style=' width:".huh_HUH_ORCHIDS_ETHANOL::EPITHET_SIZE ."em;  '  maxlength='".huh_HUH_ORCHIDS_ETHANOL::EPITHET_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP.">AUTHORSHIP</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP." id=".huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP." value='".$model->getauthorship()."'  style=' width:".huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP_SIZE ."em;  '  maxlength='".huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR.">COLLECTOR</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR." id=".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR." >".$model->getcollector()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER.">COLLECTOR_NUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER." id=".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER." value='".$model->getcollector_number()."'  style=' width:".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER_SIZE ."em;  '  maxlength='".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER.">JAR_NUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER." id=".huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER." value='".$model->getjar_number()."'  style=' width:".huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER_SIZE ."em;  '  maxlength='".huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_HUH_ORCHIDS_ETHANOL::NOTES.">NOTES</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_HUH_ORCHIDS_ETHANOL::NOTES." id=".huh_HUH_ORCHIDS_ETHANOL::NOTES." value='".$model->getnotes()."'  style=' width:".huh_HUH_ORCHIDS_ETHANOL::NOTES_SIZE ."em;  '  maxlength='".huh_HUH_ORCHIDS_ETHANOL::NOTES_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_HUH_ORCHIDS_ETHANOL::TEMP.">TEMP</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_HUH_ORCHIDS_ETHANOL::TEMP." id=".huh_HUH_ORCHIDS_ETHANOL::TEMP." value='".$model->gettemp()."'  style=' width:".huh_HUH_ORCHIDS_ETHANOL::TEMP_SIZE ."em;  '  maxlength='".huh_HUH_ORCHIDS_ETHANOL::TEMP_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_HUH_ORCHIDS_ETHANOL">';
       $returnvalue .= '<input type=hidden name=id id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_HUH_ORCHIDS_ETHANOL">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>ID<input type=text name=".huh_HUH_ORCHIDS_ETHANOL::ID." id=".huh_HUH_ORCHIDS_ETHANOL::ID." value='".$model->getid()."'  size='".huh_HUH_ORCHIDS_ETHANOL::ID_SIZE ."'  maxlength='".huh_HUH_ORCHIDS_ETHANOL::ID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GENUS<input type=text name=".huh_HUH_ORCHIDS_ETHANOL::GENUS." id=".huh_HUH_ORCHIDS_ETHANOL::GENUS." value='".$model->getgenus()."'  size='".huh_HUH_ORCHIDS_ETHANOL::GENUS_SIZE ."'  maxlength='".huh_HUH_ORCHIDS_ETHANOL::GENUS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>EPITHET<input type=text name=".huh_HUH_ORCHIDS_ETHANOL::EPITHET." id=".huh_HUH_ORCHIDS_ETHANOL::EPITHET." value='".$model->getepithet()."'  size='".huh_HUH_ORCHIDS_ETHANOL::EPITHET_SIZE ."'  maxlength='".huh_HUH_ORCHIDS_ETHANOL::EPITHET_SIZE ."' ></li>\n";
       $returnvalue .= "<li>AUTHORSHIP<input type=text name=".huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP." id=".huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP." value='".$model->getauthorship()."'  size='".huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP_SIZE ."'  maxlength='".huh_HUH_ORCHIDS_ETHANOL::AUTHORSHIP_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTOR<input type=text name=".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR." id=".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR." value='".$model->getcollector()."'  size='51'  maxlength='".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTOR_NUMBER<input type=text name=".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER." id=".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER." value='".$model->getcollector_number()."'  size='".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER_SIZE ."'  maxlength='".huh_HUH_ORCHIDS_ETHANOL::COLLECTOR_NUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>JAR_NUMBER<input type=text name=".huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER." id=".huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER." value='".$model->getjar_number()."'  size='".huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER_SIZE ."'  maxlength='".huh_HUH_ORCHIDS_ETHANOL::JAR_NUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NOTES<input type=text name=".huh_HUH_ORCHIDS_ETHANOL::NOTES." id=".huh_HUH_ORCHIDS_ETHANOL::NOTES." value='".$model->getnotes()."'  size='".huh_HUH_ORCHIDS_ETHANOL::NOTES_SIZE ."'  maxlength='".huh_HUH_ORCHIDS_ETHANOL::NOTES_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TEMP<input type=text name=".huh_HUH_ORCHIDS_ETHANOL::TEMP." id=".huh_HUH_ORCHIDS_ETHANOL::TEMP." value='".$model->gettemp()."'  size='".huh_HUH_ORCHIDS_ETHANOL::TEMP_SIZE ."'  maxlength='".huh_HUH_ORCHIDS_ETHANOL::TEMP_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
