<?php
//==============================================================================
//===   autonumsch_coll.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_autonumsch_coll implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const COLLECTIONID_SIZE    = 11; //INTEGER
   const AUTONUMBERINGSCHEMEID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const COLLECTIONID      = 'CollectionID';
   const AUTONUMBERINGSCHEMEID = 'AutoNumberingSchemeID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $CollectionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionID']), 0, 11);
  $AutoNumberingSchemeID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['AutoNumberingSchemeID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $CollectionID; // PK INTEGER 
   private $AutoNumberingSchemeID; // PK INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' CollectionID, AutoNumberingSchemeID, ';
   const PKFIELDLIST = ' CollectionID, AutoNumberingSchemeID, ';
   const NUMBER_OF_PRIMARY_KEYS = 2;
   private $primaryKeyArray = array( 1 => 'CollectionID' , 2 => 'AutoNumberingSchemeID'  ) ;
   private $allFieldsArray = array( 0 => 'CollectionID' , 1 => 'AutoNumberingSchemeID'  ) ;
   private $selectDistinctFieldsArray = array(  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_autonumsch_coll(){
       $this->CollectionID = NULL;
       $this->AutoNumberingSchemeID = NULL;
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='CollectionID') { $returnvalue = $this->setCollectionID($value); } 
             if ($fieldname=='AutoNumberingSchemeID') { $returnvalue = $this->setAutoNumberingSchemeID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='CollectionID') { $returnvalue = $this->getCollectionID(); } 
             if ($fieldname=='AutoNumberingSchemeID') { $returnvalue = $this->getAutoNumberingSchemeID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*CollectionID*/
   public function getCollectionID() {
       if ($this->CollectionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionID));
       }
   }
   public function setCollectionID($CollectionID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionID)) > huh_autonumsch_coll::COLLECTIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectionID = trim($CollectionID);
       if (!ctype_digit(strval($CollectionID)) && trim(strval($CollectionID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionID = $this->l_addslashes($CollectionID);
       $this->dirty = true;
   }
/*AutoNumberingSchemeID*/
   public function getAutoNumberingSchemeID() {
       if ($this->AutoNumberingSchemeID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->AutoNumberingSchemeID));
       }
   }
   public function setAutoNumberingSchemeID($AutoNumberingSchemeID) {
       if (strlen(preg_replace('/[^0-9]/','',$AutoNumberingSchemeID)) > huh_autonumsch_coll::AUTONUMBERINGSCHEMEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $AutoNumberingSchemeID = trim($AutoNumberingSchemeID);
       if (!ctype_digit(strval($AutoNumberingSchemeID)) && trim(strval($AutoNumberingSchemeID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->AutoNumberingSchemeID = $this->l_addslashes($AutoNumberingSchemeID);
       $this->dirty = true;
   }
   // call PK() to get displayable values of PK fields, call PKArray to get fieldnames and values for manipulation. 
   public function PK() { // get value of primary keys as comma separated list of values 
        $returnvalue = '';
        $comma = '';
        $returnvalue .= $comma . $this->getCollectionID();
        $comma = ', ';
        $returnvalue .= $comma . $this->getAutoNumberingSchemeID();
        $comma = ', ';
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['CollectionID'] = $this->getCollectionID();
        $returnvalue['AutoNumberingSchemeID'] = $this->getAutoNumberingSchemeID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        // Warning: PHP code generated by druid doesn't yet full support cases like this where other than one primary key is defined.
        return 2;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_CollectionIDMYSQLI_TYPE = 'i';
  const C_AutoNumberingSchemeIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='CollectionID') { $retval = self::C_CollectionIDMYSQLI_TYPE; }
      if ($aFieldname=='AutoNumberingSchemeID') { $retval = self::C_AutoNumberingSchemeIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   // This table has a multiple field primary key, so load() must be given an array.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
             $this->setCollectionID($pk[CollectionID]);
             $this->setAutoNumberingSchemeID($pk[AutoNumberingSchemeID]);
             } else { ;
                 throw new Exception('Load given a single value, not an array, for a multiple field primary key.');
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if(CollectionID != NULL  && AutoNumberingSchemeID != NULL ) {
           $sql = 'SELECT CollectionID, AutoNumberingSchemeID FROM autonumsch_coll WHERE CollectionID = "'. $this->CollectionID.'"  and AutoNumberingSchemeID = "'. $this->AutoNumberingSchemeID.'" ' ;

           $preparesql = 'SELECT CollectionID, AutoNumberingSchemeID FROM autonumsch_coll WHERE CollectionID = ? AutoNumberingSchemeID = ?  ';
           $values = array('pk0' => $this->CollectionID);           $values = array('pk1' => $this->AutoNumberingSchemeID);
           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("ii", $this->CollectionID, $this->AutoNumberingSchemeID);
              $statement->execute();
              $statement->bind_result($this->CollectionID, $this->AutoNumberingSchemeID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the value of $doinsert is set to true.
   // Otherwise updates the record identified by the primary key values in this instance.
   public function save($doinsert=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if ($doinsert) {            $sql  = 'UPDATE  autonumsch_coll SET ';
            $isInsert = false;
            $sql .=  "CollectionID = ? ";
            $sql .=  "AutoNumberingSchemeID = ? ";

            $sql .= "  WHERE CollectionID = ? ";
            $sql .= "  and AutoNumberingSchemeID = ? ";
        } else {
            $sql  = 'INSERT INTO autonumsch_coll ';
            $isInsert = true;
            $sql .= '( CollectionID ,  AutoNumberingSchemeID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->CollectionID!= NULL & $this->AutoNumberingSchemeID!= NULL ) {
              $statement->bind_param("iiii", $this->CollectionID , $this->AutoNumberingSchemeID , $this->CollectionID , $this->AutoNumberingSchemeID );
           } else { 
              $statement->bind_param("ii", $this->CollectionID , $this->AutoNumberingSchemeID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if(CollectionID != NULL  && AutoNumberingSchemeID != NULL ) {
           $sql = 'SELECT CollectionID, AutoNumberingSchemeID FROM autonumsch_coll WHERE CollectionID = "'.$this->CollectionID.'"  and AutoNumberingSchemeID = "'.$this->AutoNumberingSchemeID.'"  ' ;

           $preparedsql = 'SELECT  FROM autonumsch_coll WHERE  and CollectionID = ?  and AutoNumberingSchemeID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ii", $this->CollectionID, $this->AutoNumberingSchemeID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM autonumsch_coll WHERE  and CollectionID = ?  and AutoNumberingSchemeID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ii", $this->CollectionID, $this->AutoNumberingSchemeID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->CollectionID = NULL; 
            $this->AutoNumberingSchemeID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM autonumsch_coll';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT CollectionID, AutoNumberingSchemeID FROM autonumsch_coll $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result( $id0 , $id1 );
          while ($statement->fetch()) {
              $obj = new huh_autonumsch_coll();
              $obj->load(array( 0 => $id0, 1 => $id1));
              $returnvalue[] = $obj;
              $result=true;
          }
          $statement->close();
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: CollectionID
      $t = new collection();
      $t->load(getCollectionID());
      $returnvalue[CollectionID] = $t;
       // fk: AutoNumberingSchemeID
      $t = new autonumberingscheme();
      $t->load(getAutoNumberingSchemeID());
      $returnvalue[AutoNumberingSchemeID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT CollectionID, AutoNumberingSchemeID, concat() FROM autonumsch_coll order by CollectionID, AutoNumberingSchemeID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM autonumsch_coll order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the autonumsch_coll.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_autonumsch_collView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_autonumsch_coll <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_autonumsch_coll::COLLECTIONID.": ".$model->getCollectionID()."</li>\n";
       $returnvalue .= "<li>".huh_autonumsch_coll::AUTONUMBERINGSCHEMEID.": ".$model->getAutoNumberingSchemeID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>collection</li>";
           $t_collection = new huh_collection();
           $t_collectionView = new huh_collectionView();
           $t_collectionView->setModel($t_collection);
           if ($model->getCollectionID() != '') { 
               $t_collection->load($model->getCollectionID());
               $returnvalue .= $t_collectionView->getDetailsView(false);
           }
           $returnvalue .= "<li>autonumberingscheme</li>";
           $t_autonumberingscheme = new huh_autonumberingscheme();
           $t_autonumberingschemeView = new huh_autonumberingschemeView();
           $t_autonumberingschemeView->setModel($t_autonumberingscheme);
           if ($model->getAutoNumberingSchemeID() != '') { 
               $t_autonumberingscheme->load($model->getAutoNumberingSchemeID());
               $returnvalue .= $t_autonumberingschemeView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_autonumsch_coll::COLLECTIONID.': "'.$model->getCollectionID().'",';
       $returnvalue .= '"'.huh_autonumsch_coll::AUTONUMBERINGSCHEMEID.': "'.$model->getAutoNumberingSchemeID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getCollectionID()."</td>\n";
       $returnvalue .= "<td>".$model->getAutoNumberingSchemeID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_autonumsch_coll::COLLECTIONID."</th>\n";
       $returnvalue .= "<th>".huh_autonumsch_coll::AUTONUMBERINGSCHEMEID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_autonumsch_coll">';
       $returnvalue .= "<div id='div_$formnane' >";
       $returnvalue .= "<div><label for=".huh_autonumsch_coll::COLLECTIONID.">COLLECTIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_autonumsch_coll::COLLECTIONID." id=".huh_autonumsch_coll::COLLECTIONID." value='".$model->getCollectionID()."'  style=' width:".huh_autonumsch_coll::COLLECTIONID_SIZE ."em;  '  maxlength='".huh_autonumsch_coll::COLLECTIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_autonumsch_coll::AUTONUMBERINGSCHEMEID.">AUTONUMBERINGSCHEMEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_autonumsch_coll::AUTONUMBERINGSCHEMEID." id=".huh_autonumsch_coll::AUTONUMBERINGSCHEMEID." value='".$model->getAutoNumberingSchemeID()."'  style=' width:".huh_autonumsch_coll::AUTONUMBERINGSCHEMEID_SIZE ."em;  '  maxlength='".huh_autonumsch_coll::AUTONUMBERINGSCHEMEID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_autonumsch_coll">';
       $returnvalue .= '<input type=hidden name=CollectionID, AutoNumberingSchemeID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_autonumsch_coll">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>COLLECTIONID<input type=text name=".huh_autonumsch_coll::COLLECTIONID." id=".huh_autonumsch_coll::COLLECTIONID." value='".$model->getCollectionID()."'  size='".huh_autonumsch_coll::COLLECTIONID_SIZE ."'  maxlength='".huh_autonumsch_coll::COLLECTIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>AUTONUMBERINGSCHEMEID<input type=text name=".huh_autonumsch_coll::AUTONUMBERINGSCHEMEID." id=".huh_autonumsch_coll::AUTONUMBERINGSCHEMEID." value='".$model->getAutoNumberingSchemeID()."'  size='".huh_autonumsch_coll::AUTONUMBERINGSCHEMEID_SIZE ."'  maxlength='".huh_autonumsch_coll::AUTONUMBERINGSCHEMEID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
