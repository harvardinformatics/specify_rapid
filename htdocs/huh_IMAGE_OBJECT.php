<?php
//==============================================================================
//===   IMAGE_OBJECT.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_IMAGE_OBJECT implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const ID_SIZE              = 20; //BIGINT
   const IMAGE_SET_ID_SIZE    = 20; //BIGINT
   const OBJECT_TYPE_ID_SIZE  = 20; //BIGINT
   const REPOSITORY_ID_SIZE   = 20; //BIGINT
   const MIME_TYPE_ID_SIZE    = 20; //BIGINT
   const BITS_PER_SAMPLE_ID_SIZE = 20; //BIGINT
   const COMPRESSION_ID_SIZE  = 20; //BIGINT
   const PHOTO_INTERP_ID_SIZE = 20; //BIGINT
   const ACTIVE_FLAG_SIZE     = 11; //INTEGER
   const ALTERED_FLAG_SIZE    = 11; //INTEGER
   const IN_PROCESS_FLAG_SIZE = 11; //INTEGER
   const ORDINAL_SIZE         = 11; //INTEGER
   const PIXEL_WIDTH_SIZE     = 11; //INTEGER
   const PIXEL_HEIGHT_SIZE    = 11; //INTEGER
   const CREATE_DATE_SIZE     = 12; //DATE
   const RESOLUTION_SIZE      = 32; //32
   const FILE_SIZE_SIZE       = 32; //32
   const OBJECT_NAME_SIZE     = 100; //100
   const URI_SIZE             = 255; //255
   const SIGNATURE_SIZE       = 130; //130
   const COLOR_TARGET_ID_SIZE = 20; //BIGINT
    // These constants hold the field names of the table in the database. 
   const ID                = 'ID';
   const IMAGE_SET_ID      = 'IMAGE_SET_ID';
   const OBJECT_TYPE_ID    = 'OBJECT_TYPE_ID';
   const REPOSITORY_ID     = 'REPOSITORY_ID';
   const MIME_TYPE_ID      = 'MIME_TYPE_ID';
   const BITS_PER_SAMPLE_ID = 'BITS_PER_SAMPLE_ID';
   const COMPRESSION_ID    = 'COMPRESSION_ID';
   const PHOTO_INTERP_ID   = 'PHOTO_INTERP_ID';
   const ACTIVE_FLAG       = 'ACTIVE_FLAG';
   const ALTERED_FLAG      = 'ALTERED_FLAG';
   const IN_PROCESS_FLAG   = 'IN_PROCESS_FLAG';
   const ORDINAL           = 'ORDINAL';
   const PIXEL_WIDTH       = 'PIXEL_WIDTH';
   const PIXEL_HEIGHT      = 'PIXEL_HEIGHT';
   const CREATE_DATE       = 'CREATE_DATE';
   const RESOLUTION        = 'RESOLUTION';
   const FILE_SIZE         = 'FILE_SIZE';
   const OBJECT_NAME       = 'OBJECT_NAME';
   const URI               = 'URI';
   const SIGNATURE         = 'SIGNATURE';
   const COLOR_TARGET_ID   = 'COLOR_TARGET_ID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $ID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ID']), 0, 20);
  $IMAGE_SET_ID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IMAGE_SET_ID']), 0, 20);
  $OBJECT_TYPE_ID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['OBJECT_TYPE_ID']), 0, 20);
  $REPOSITORY_ID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['REPOSITORY_ID']), 0, 20);
  $MIME_TYPE_ID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['MIME_TYPE_ID']), 0, 20);
  $BITS_PER_SAMPLE_ID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['BITS_PER_SAMPLE_ID']), 0, 20);
  $COMPRESSION_ID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['COMPRESSION_ID']), 0, 20);
  $PHOTO_INTERP_ID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['PHOTO_INTERP_ID']), 0, 20);
  $ACTIVE_FLAG = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ACTIVE_FLAG']), 0, 11);
  $ALTERED_FLAG = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ALTERED_FLAG']), 0, 11);
  $IN_PROCESS_FLAG = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['IN_PROCESS_FLAG']), 0, 11);
  $ORDINAL = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ORDINAL']), 0, 11);
  $PIXEL_WIDTH = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PIXEL_WIDTH']), 0, 11);
  $PIXEL_HEIGHT = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PIXEL_HEIGHT']), 0, 11);
  $CREATE_DATE = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['CREATE_DATE']), 0, 12);
  $RESOLUTION = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['RESOLUTION']), 0, 32);
  $FILE_SIZE = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FILE_SIZE']), 0, 32);
  $OBJECT_NAME = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['OBJECT_NAME']), 0, 100);
  $URI = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['URI']), 0, 255);
  $SIGNATURE = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['SIGNATURE']), 0, 130);
  $COLOR_TARGET_ID = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['COLOR_TARGET_ID']), 0, 20);
*/

   //---------------------------------------------------------------------------

   private $ID; // PK BIGINT 
   private $IMAGE_SET_ID; // BIGINT 
   private $OBJECT_TYPE_ID; // BIGINT 
   private $REPOSITORY_ID; // BIGINT 
   private $MIME_TYPE_ID; // BIGINT 
   private $BITS_PER_SAMPLE_ID; // BIGINT 
   private $COMPRESSION_ID; // BIGINT 
   private $PHOTO_INTERP_ID; // BIGINT 
   private $ACTIVE_FLAG; // INTEGER 
   private $ALTERED_FLAG; // INTEGER 
   private $IN_PROCESS_FLAG; // INTEGER 
   private $ORDINAL; // INTEGER 
   private $PIXEL_WIDTH; // INTEGER 
   private $PIXEL_HEIGHT; // INTEGER 
   private $CREATE_DATE; // DATE 
   private $RESOLUTION; // VARCHAR(32) 
   private $FILE_SIZE; // VARCHAR(32) 
   private $OBJECT_NAME; // VARCHAR(100) 
   private $URI; // VARCHAR(255) 
   private $SIGNATURE; // VARCHAR(130) 
   private $COLOR_TARGET_ID; // BIGINT 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' ID, IMAGE_SET_ID, OBJECT_TYPE_ID, REPOSITORY_ID, MIME_TYPE_ID, BITS_PER_SAMPLE_ID, COMPRESSION_ID, PHOTO_INTERP_ID, ACTIVE_FLAG, ALTERED_FLAG, IN_PROCESS_FLAG, ORDINAL, PIXEL_WIDTH, PIXEL_HEIGHT, CREATE_DATE, RESOLUTION, FILE_SIZE, OBJECT_NAME, URI, SIGNATURE, COLOR_TARGET_ID, ';
   const PKFIELDLIST = ' ID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'ID'  ) ;
   private $allFieldsArray = array( 0 => 'ID' , 1 => 'IMAGE_SET_ID' , 2 => 'OBJECT_TYPE_ID' , 3 => 'REPOSITORY_ID' , 4 => 'MIME_TYPE_ID' , 5 => 'BITS_PER_SAMPLE_ID' , 6 => 'COMPRESSION_ID' , 7 => 'PHOTO_INTERP_ID' , 8 => 'ACTIVE_FLAG' , 9 => 'ALTERED_FLAG' , 10 => 'IN_PROCESS_FLAG' , 11 => 'ORDINAL' , 12 => 'PIXEL_WIDTH' , 13 => 'PIXEL_HEIGHT' , 14 => 'CREATE_DATE' , 15 => 'RESOLUTION' , 16 => 'FILE_SIZE' , 17 => 'OBJECT_NAME' , 18 => 'URI' , 19 => 'SIGNATURE' , 20 => 'COLOR_TARGET_ID'  ) ;
   private $selectDistinctFieldsArray = array( 1 => 'IMAGE_SET_ID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_IMAGE_OBJECT(){
       $this->ID = NULL;
       $this->IMAGE_SET_ID = '';
       $this->OBJECT_TYPE_ID = '';
       $this->REPOSITORY_ID = '';
       $this->MIME_TYPE_ID = '';
       $this->BITS_PER_SAMPLE_ID = '';
       $this->COMPRESSION_ID = '';
       $this->PHOTO_INTERP_ID = '';
       $this->ACTIVE_FLAG = '';
       $this->ALTERED_FLAG = '';
       $this->IN_PROCESS_FLAG = '';
       $this->ORDINAL = '';
       $this->PIXEL_WIDTH = '';
       $this->PIXEL_HEIGHT = '';
       $this->CREATE_DATE = '';
       $this->RESOLUTION = '';
       $this->FILE_SIZE = '';
       $this->OBJECT_NAME = '';
       $this->URI = '';
       $this->SIGNATURE = '';
       $this->COLOR_TARGET_ID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='ID') { $returnvalue = $this->setID($value); } 
             if ($fieldname=='IMAGE_SET_ID') { $returnvalue = $this->setIMAGE_SET_ID($value); } 
             if ($fieldname=='OBJECT_TYPE_ID') { $returnvalue = $this->setOBJECT_TYPE_ID($value); } 
             if ($fieldname=='REPOSITORY_ID') { $returnvalue = $this->setREPOSITORY_ID($value); } 
             if ($fieldname=='MIME_TYPE_ID') { $returnvalue = $this->setMIME_TYPE_ID($value); } 
             if ($fieldname=='BITS_PER_SAMPLE_ID') { $returnvalue = $this->setBITS_PER_SAMPLE_ID($value); } 
             if ($fieldname=='COMPRESSION_ID') { $returnvalue = $this->setCOMPRESSION_ID($value); } 
             if ($fieldname=='PHOTO_INTERP_ID') { $returnvalue = $this->setPHOTO_INTERP_ID($value); } 
             if ($fieldname=='ACTIVE_FLAG') { $returnvalue = $this->setACTIVE_FLAG($value); } 
             if ($fieldname=='ALTERED_FLAG') { $returnvalue = $this->setALTERED_FLAG($value); } 
             if ($fieldname=='IN_PROCESS_FLAG') { $returnvalue = $this->setIN_PROCESS_FLAG($value); } 
             if ($fieldname=='ORDINAL') { $returnvalue = $this->setORDINAL($value); } 
             if ($fieldname=='PIXEL_WIDTH') { $returnvalue = $this->setPIXEL_WIDTH($value); } 
             if ($fieldname=='PIXEL_HEIGHT') { $returnvalue = $this->setPIXEL_HEIGHT($value); } 
             if ($fieldname=='CREATE_DATE') { $returnvalue = $this->setCREATE_DATE($value); } 
             if ($fieldname=='RESOLUTION') { $returnvalue = $this->setRESOLUTION($value); } 
             if ($fieldname=='FILE_SIZE') { $returnvalue = $this->setFILE_SIZE($value); } 
             if ($fieldname=='OBJECT_NAME') { $returnvalue = $this->setOBJECT_NAME($value); } 
             if ($fieldname=='URI') { $returnvalue = $this->setURI($value); } 
             if ($fieldname=='SIGNATURE') { $returnvalue = $this->setSIGNATURE($value); } 
             if ($fieldname=='COLOR_TARGET_ID') { $returnvalue = $this->setCOLOR_TARGET_ID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='ID') { $returnvalue = $this->getID(); } 
             if ($fieldname=='IMAGE_SET_ID') { $returnvalue = $this->getIMAGE_SET_ID(); } 
             if ($fieldname=='OBJECT_TYPE_ID') { $returnvalue = $this->getOBJECT_TYPE_ID(); } 
             if ($fieldname=='REPOSITORY_ID') { $returnvalue = $this->getREPOSITORY_ID(); } 
             if ($fieldname=='MIME_TYPE_ID') { $returnvalue = $this->getMIME_TYPE_ID(); } 
             if ($fieldname=='BITS_PER_SAMPLE_ID') { $returnvalue = $this->getBITS_PER_SAMPLE_ID(); } 
             if ($fieldname=='COMPRESSION_ID') { $returnvalue = $this->getCOMPRESSION_ID(); } 
             if ($fieldname=='PHOTO_INTERP_ID') { $returnvalue = $this->getPHOTO_INTERP_ID(); } 
             if ($fieldname=='ACTIVE_FLAG') { $returnvalue = $this->getACTIVE_FLAG(); } 
             if ($fieldname=='ALTERED_FLAG') { $returnvalue = $this->getALTERED_FLAG(); } 
             if ($fieldname=='IN_PROCESS_FLAG') { $returnvalue = $this->getIN_PROCESS_FLAG(); } 
             if ($fieldname=='ORDINAL') { $returnvalue = $this->getORDINAL(); } 
             if ($fieldname=='PIXEL_WIDTH') { $returnvalue = $this->getPIXEL_WIDTH(); } 
             if ($fieldname=='PIXEL_HEIGHT') { $returnvalue = $this->getPIXEL_HEIGHT(); } 
             if ($fieldname=='CREATE_DATE') { $returnvalue = $this->getCREATE_DATE(); } 
             if ($fieldname=='RESOLUTION') { $returnvalue = $this->getRESOLUTION(); } 
             if ($fieldname=='FILE_SIZE') { $returnvalue = $this->getFILE_SIZE(); } 
             if ($fieldname=='OBJECT_NAME') { $returnvalue = $this->getOBJECT_NAME(); } 
             if ($fieldname=='URI') { $returnvalue = $this->getURI(); } 
             if ($fieldname=='SIGNATURE') { $returnvalue = $this->getSIGNATURE(); } 
             if ($fieldname=='COLOR_TARGET_ID') { $returnvalue = $this->getCOLOR_TARGET_ID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*ID*/
   public function getID() {
       if ($this->ID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ID));
       }
   }
   public function setID($ID) {
       if (strlen($ID) > huh_IMAGE_OBJECT::ID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ID = $this->l_addslashes($ID);
       $this->dirty = true;
   }
/*IMAGE_SET_ID*/
   public function getIMAGE_SET_ID() {
       if ($this->IMAGE_SET_ID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IMAGE_SET_ID));
       }
   }
   public function setIMAGE_SET_ID($IMAGE_SET_ID) {
       if (strlen($IMAGE_SET_ID) > huh_IMAGE_OBJECT::IMAGE_SET_ID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IMAGE_SET_ID = $this->l_addslashes($IMAGE_SET_ID);
       $this->dirty = true;
   }
/*OBJECT_TYPE_ID*/
   public function getOBJECT_TYPE_ID() {
       if ($this->OBJECT_TYPE_ID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->OBJECT_TYPE_ID));
       }
   }
   public function setOBJECT_TYPE_ID($OBJECT_TYPE_ID) {
       if (strlen($OBJECT_TYPE_ID) > huh_IMAGE_OBJECT::OBJECT_TYPE_ID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->OBJECT_TYPE_ID = $this->l_addslashes($OBJECT_TYPE_ID);
       $this->dirty = true;
   }
/*REPOSITORY_ID*/
   public function getREPOSITORY_ID() {
       if ($this->REPOSITORY_ID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->REPOSITORY_ID));
       }
   }
   public function setREPOSITORY_ID($REPOSITORY_ID) {
       if (strlen($REPOSITORY_ID) > huh_IMAGE_OBJECT::REPOSITORY_ID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->REPOSITORY_ID = $this->l_addslashes($REPOSITORY_ID);
       $this->dirty = true;
   }
/*MIME_TYPE_ID*/
   public function getMIME_TYPE_ID() {
       if ($this->MIME_TYPE_ID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->MIME_TYPE_ID));
       }
   }
   public function setMIME_TYPE_ID($MIME_TYPE_ID) {
       if (strlen($MIME_TYPE_ID) > huh_IMAGE_OBJECT::MIME_TYPE_ID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->MIME_TYPE_ID = $this->l_addslashes($MIME_TYPE_ID);
       $this->dirty = true;
   }
/*BITS_PER_SAMPLE_ID*/
   public function getBITS_PER_SAMPLE_ID() {
       if ($this->BITS_PER_SAMPLE_ID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->BITS_PER_SAMPLE_ID));
       }
   }
   public function setBITS_PER_SAMPLE_ID($BITS_PER_SAMPLE_ID) {
       if (strlen($BITS_PER_SAMPLE_ID) > huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->BITS_PER_SAMPLE_ID = $this->l_addslashes($BITS_PER_SAMPLE_ID);
       $this->dirty = true;
   }
/*COMPRESSION_ID*/
   public function getCOMPRESSION_ID() {
       if ($this->COMPRESSION_ID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->COMPRESSION_ID));
       }
   }
   public function setCOMPRESSION_ID($COMPRESSION_ID) {
       if (strlen($COMPRESSION_ID) > huh_IMAGE_OBJECT::COMPRESSION_ID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->COMPRESSION_ID = $this->l_addslashes($COMPRESSION_ID);
       $this->dirty = true;
   }
/*PHOTO_INTERP_ID*/
   public function getPHOTO_INTERP_ID() {
       if ($this->PHOTO_INTERP_ID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PHOTO_INTERP_ID));
       }
   }
   public function setPHOTO_INTERP_ID($PHOTO_INTERP_ID) {
       if (strlen($PHOTO_INTERP_ID) > huh_IMAGE_OBJECT::PHOTO_INTERP_ID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->PHOTO_INTERP_ID = $this->l_addslashes($PHOTO_INTERP_ID);
       $this->dirty = true;
   }
/*ACTIVE_FLAG*/
   public function getACTIVE_FLAG() {
       if ($this->ACTIVE_FLAG==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ACTIVE_FLAG));
       }
   }
   public function setACTIVE_FLAG($ACTIVE_FLAG) {
       if (strlen(preg_replace('/[^0-9]/','',$ACTIVE_FLAG)) > huh_IMAGE_OBJECT::ACTIVE_FLAG_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ACTIVE_FLAG = trim($ACTIVE_FLAG);
       if (!ctype_digit(strval($ACTIVE_FLAG))) {
             throw new Exception("Value must be an integer");
       }
       $this->ACTIVE_FLAG = $this->l_addslashes($ACTIVE_FLAG);
       $this->dirty = true;
   }
/*ALTERED_FLAG*/
   public function getALTERED_FLAG() {
       if ($this->ALTERED_FLAG==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ALTERED_FLAG));
       }
   }
   public function setALTERED_FLAG($ALTERED_FLAG) {
       if (strlen(preg_replace('/[^0-9]/','',$ALTERED_FLAG)) > huh_IMAGE_OBJECT::ALTERED_FLAG_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ALTERED_FLAG = trim($ALTERED_FLAG);
       if (!ctype_digit(strval($ALTERED_FLAG))) {
             throw new Exception("Value must be an integer");
       }
       $this->ALTERED_FLAG = $this->l_addslashes($ALTERED_FLAG);
       $this->dirty = true;
   }
/*IN_PROCESS_FLAG*/
   public function getIN_PROCESS_FLAG() {
       if ($this->IN_PROCESS_FLAG==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IN_PROCESS_FLAG));
       }
   }
   public function setIN_PROCESS_FLAG($IN_PROCESS_FLAG) {
       if (strlen(preg_replace('/[^0-9]/','',$IN_PROCESS_FLAG)) > huh_IMAGE_OBJECT::IN_PROCESS_FLAG_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $IN_PROCESS_FLAG = trim($IN_PROCESS_FLAG);
       if (!ctype_digit(strval($IN_PROCESS_FLAG))) {
             throw new Exception("Value must be an integer");
       }
       $this->IN_PROCESS_FLAG = $this->l_addslashes($IN_PROCESS_FLAG);
       $this->dirty = true;
   }
/*ORDINAL*/
   public function getORDINAL() {
       if ($this->ORDINAL==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ORDINAL));
       }
   }
   public function setORDINAL($ORDINAL) {
       if (strlen(preg_replace('/[^0-9]/','',$ORDINAL)) > huh_IMAGE_OBJECT::ORDINAL_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ORDINAL = trim($ORDINAL);
       if (!ctype_digit(strval($ORDINAL)) && trim(strval($ORDINAL))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ORDINAL = $this->l_addslashes($ORDINAL);
       $this->dirty = true;
   }
/*PIXEL_WIDTH*/
   public function getPIXEL_WIDTH() {
       if ($this->PIXEL_WIDTH==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PIXEL_WIDTH));
       }
   }
   public function setPIXEL_WIDTH($PIXEL_WIDTH) {
       if (strlen(preg_replace('/[^0-9]/','',$PIXEL_WIDTH)) > huh_IMAGE_OBJECT::PIXEL_WIDTH_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PIXEL_WIDTH = trim($PIXEL_WIDTH);
       if (!ctype_digit(strval($PIXEL_WIDTH)) && trim(strval($PIXEL_WIDTH))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PIXEL_WIDTH = $this->l_addslashes($PIXEL_WIDTH);
       $this->dirty = true;
   }
/*PIXEL_HEIGHT*/
   public function getPIXEL_HEIGHT() {
       if ($this->PIXEL_HEIGHT==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PIXEL_HEIGHT));
       }
   }
   public function setPIXEL_HEIGHT($PIXEL_HEIGHT) {
       if (strlen(preg_replace('/[^0-9]/','',$PIXEL_HEIGHT)) > huh_IMAGE_OBJECT::PIXEL_HEIGHT_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PIXEL_HEIGHT = trim($PIXEL_HEIGHT);
       if (!ctype_digit(strval($PIXEL_HEIGHT)) && trim(strval($PIXEL_HEIGHT))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PIXEL_HEIGHT = $this->l_addslashes($PIXEL_HEIGHT);
       $this->dirty = true;
   }
/*CREATE_DATE*/
   public function getCREATE_DATE() {
       if ($this->CREATE_DATE==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CREATE_DATE));
       }
   }
   public function setCREATE_DATE($CREATE_DATE) {
       if (strlen($CREATE_DATE) > huh_IMAGE_OBJECT::CREATE_DATE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->CREATE_DATE = $this->l_addslashes($CREATE_DATE);
       $this->dirty = true;
   }
/*RESOLUTION*/
   public function getRESOLUTION() {
       if ($this->RESOLUTION==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RESOLUTION));
       }
   }
   public function setRESOLUTION($RESOLUTION) {
       if (strlen($RESOLUTION) > huh_IMAGE_OBJECT::RESOLUTION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->RESOLUTION = $this->l_addslashes($RESOLUTION);
       $this->dirty = true;
   }
/*FILE_SIZE*/
   public function getFILE_SIZE() {
       if ($this->FILE_SIZE==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FILE_SIZE));
       }
   }
   public function setFILE_SIZE($FILE_SIZE) {
       if (strlen($FILE_SIZE) > huh_IMAGE_OBJECT::FILE_SIZE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FILE_SIZE = $this->l_addslashes($FILE_SIZE);
       $this->dirty = true;
   }
/*OBJECT_NAME*/
   public function getOBJECT_NAME() {
       if ($this->OBJECT_NAME==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->OBJECT_NAME));
       }
   }
   public function setOBJECT_NAME($OBJECT_NAME) {
       if (strlen($OBJECT_NAME) > huh_IMAGE_OBJECT::OBJECT_NAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->OBJECT_NAME = $this->l_addslashes($OBJECT_NAME);
       $this->dirty = true;
   }
/*URI*/
   public function getURI() {
       if ($this->URI==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->URI));
       }
   }
   public function setURI($URI) {
       if (strlen($URI) > huh_IMAGE_OBJECT::URI_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->URI = $this->l_addslashes($URI);
       $this->dirty = true;
   }
/*SIGNATURE*/
   public function getSIGNATURE() {
       if ($this->SIGNATURE==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SIGNATURE));
       }
   }
   public function setSIGNATURE($SIGNATURE) {
       if (strlen($SIGNATURE) > huh_IMAGE_OBJECT::SIGNATURE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->SIGNATURE = $this->l_addslashes($SIGNATURE);
       $this->dirty = true;
   }
/*COLOR_TARGET_ID*/
   public function getCOLOR_TARGET_ID() {
       if ($this->COLOR_TARGET_ID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->COLOR_TARGET_ID));
       }
   }
   public function setCOLOR_TARGET_ID($COLOR_TARGET_ID) {
       if (strlen($COLOR_TARGET_ID) > huh_IMAGE_OBJECT::COLOR_TARGET_ID_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->COLOR_TARGET_ID = $this->l_addslashes($COLOR_TARGET_ID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['ID'] = $this->getID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_IDMYSQLI_TYPE = 'i';
  const C_IMAGE_SET_IDMYSQLI_TYPE = 'i';
  const C_OBJECT_TYPE_IDMYSQLI_TYPE = 'i';
  const C_REPOSITORY_IDMYSQLI_TYPE = 'i';
  const C_MIME_TYPE_IDMYSQLI_TYPE = 'i';
  const C_BITS_PER_SAMPLE_IDMYSQLI_TYPE = 'i';
  const C_COMPRESSION_IDMYSQLI_TYPE = 'i';
  const C_PHOTO_INTERP_IDMYSQLI_TYPE = 'i';
  const C_ACTIVE_FLAGMYSQLI_TYPE = 'i';
  const C_ALTERED_FLAGMYSQLI_TYPE = 'i';
  const C_IN_PROCESS_FLAGMYSQLI_TYPE = 'i';
  const C_ORDINALMYSQLI_TYPE = 'i';
  const C_PIXEL_WIDTHMYSQLI_TYPE = 'i';
  const C_PIXEL_HEIGHTMYSQLI_TYPE = 'i';
  const C_CREATE_DATEMYSQLI_TYPE = 's';
  const C_RESOLUTIONMYSQLI_TYPE = 's';
  const C_FILE_SIZEMYSQLI_TYPE = 's';
  const C_OBJECT_NAMEMYSQLI_TYPE = 's';
  const C_URIMYSQLI_TYPE = 's';
  const C_SIGNATUREMYSQLI_TYPE = 's';
  const C_COLOR_TARGET_IDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='ID') { $retval = self::C_IDMYSQLI_TYPE; }
      if ($aFieldname=='IMAGE_SET_ID') { $retval = self::C_IMAGE_SET_IDMYSQLI_TYPE; }
      if ($aFieldname=='OBJECT_TYPE_ID') { $retval = self::C_OBJECT_TYPE_IDMYSQLI_TYPE; }
      if ($aFieldname=='REPOSITORY_ID') { $retval = self::C_REPOSITORY_IDMYSQLI_TYPE; }
      if ($aFieldname=='MIME_TYPE_ID') { $retval = self::C_MIME_TYPE_IDMYSQLI_TYPE; }
      if ($aFieldname=='BITS_PER_SAMPLE_ID') { $retval = self::C_BITS_PER_SAMPLE_IDMYSQLI_TYPE; }
      if ($aFieldname=='COMPRESSION_ID') { $retval = self::C_COMPRESSION_IDMYSQLI_TYPE; }
      if ($aFieldname=='PHOTO_INTERP_ID') { $retval = self::C_PHOTO_INTERP_IDMYSQLI_TYPE; }
      if ($aFieldname=='ACTIVE_FLAG') { $retval = self::C_ACTIVE_FLAGMYSQLI_TYPE; }
      if ($aFieldname=='ALTERED_FLAG') { $retval = self::C_ALTERED_FLAGMYSQLI_TYPE; }
      if ($aFieldname=='IN_PROCESS_FLAG') { $retval = self::C_IN_PROCESS_FLAGMYSQLI_TYPE; }
      if ($aFieldname=='ORDINAL') { $retval = self::C_ORDINALMYSQLI_TYPE; }
      if ($aFieldname=='PIXEL_WIDTH') { $retval = self::C_PIXEL_WIDTHMYSQLI_TYPE; }
      if ($aFieldname=='PIXEL_HEIGHT') { $retval = self::C_PIXEL_HEIGHTMYSQLI_TYPE; }
      if ($aFieldname=='CREATE_DATE') { $retval = self::C_CREATE_DATEMYSQLI_TYPE; }
      if ($aFieldname=='RESOLUTION') { $retval = self::C_RESOLUTIONMYSQLI_TYPE; }
      if ($aFieldname=='FILE_SIZE') { $retval = self::C_FILE_SIZEMYSQLI_TYPE; }
      if ($aFieldname=='OBJECT_NAME') { $retval = self::C_OBJECT_NAMEMYSQLI_TYPE; }
      if ($aFieldname=='URI') { $retval = self::C_URIMYSQLI_TYPE; }
      if ($aFieldname=='SIGNATURE') { $retval = self::C_SIGNATUREMYSQLI_TYPE; }
      if ($aFieldname=='COLOR_TARGET_ID') { $retval = self::C_COLOR_TARGET_IDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setID($pk[ID]);
             } else { ;
                 $this->setID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->ID != NULL) {
           $sql = 'SELECT ID, IMAGE_SET_ID, OBJECT_TYPE_ID, REPOSITORY_ID, MIME_TYPE_ID, BITS_PER_SAMPLE_ID, COMPRESSION_ID, PHOTO_INTERP_ID, ACTIVE_FLAG, ALTERED_FLAG, IN_PROCESS_FLAG, ORDINAL, PIXEL_WIDTH, PIXEL_HEIGHT, CREATE_DATE, RESOLUTION, FILE_SIZE, OBJECT_NAME, URI, SIGNATURE, COLOR_TARGET_ID FROM IMAGE_OBJECT WHERE ID = '.$this->ID ;

           $preparesql = 'SELECT ID, IMAGE_SET_ID, OBJECT_TYPE_ID, REPOSITORY_ID, MIME_TYPE_ID, BITS_PER_SAMPLE_ID, COMPRESSION_ID, PHOTO_INTERP_ID, ACTIVE_FLAG, ALTERED_FLAG, IN_PROCESS_FLAG, ORDINAL, PIXEL_WIDTH, PIXEL_HEIGHT, CREATE_DATE, RESOLUTION, FILE_SIZE, OBJECT_NAME, URI, SIGNATURE, COLOR_TARGET_ID FROM IMAGE_OBJECT WHERE ID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->ID);
              $statement->execute();
              $statement->bind_result($this->ID, $this->IMAGE_SET_ID, $this->OBJECT_TYPE_ID, $this->REPOSITORY_ID, $this->MIME_TYPE_ID, $this->BITS_PER_SAMPLE_ID, $this->COMPRESSION_ID, $this->PHOTO_INTERP_ID, $this->ACTIVE_FLAG, $this->ALTERED_FLAG, $this->IN_PROCESS_FLAG, $this->ORDINAL, $this->PIXEL_WIDTH, $this->PIXEL_HEIGHT, $this->CREATE_DATE, $this->RESOLUTION, $this->FILE_SIZE, $this->OBJECT_NAME, $this->URI, $this->SIGNATURE, $this->COLOR_TARGET_ID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->ID!= NULL) {
            $sql  = 'UPDATE  IMAGE_OBJECT SET ';
            $isInsert = false;
            $sql .=  "IMAGE_SET_ID = ? ";
            $sql .=  ", OBJECT_TYPE_ID = ? ";
            $sql .=  ", REPOSITORY_ID = ? ";
            $sql .=  ", MIME_TYPE_ID = ? ";
            $sql .=  ", BITS_PER_SAMPLE_ID = ? ";
            $sql .=  ", COMPRESSION_ID = ? ";
            $sql .=  ", PHOTO_INTERP_ID = ? ";
            $sql .=  ", ACTIVE_FLAG = ? ";
            $sql .=  ", ALTERED_FLAG = ? ";
            $sql .=  ", IN_PROCESS_FLAG = ? ";
            $sql .=  ", ORDINAL = ? ";
            $sql .=  ", PIXEL_WIDTH = ? ";
            $sql .=  ", PIXEL_HEIGHT = ? ";
            $sql .=  ", CREATE_DATE = ? ";
            $sql .=  ", RESOLUTION = ? ";
            $sql .=  ", FILE_SIZE = ? ";
            $sql .=  ", OBJECT_NAME = ? ";
            $sql .=  ", URI = ? ";
            $sql .=  ", SIGNATURE = ? ";
            $sql .=  ", COLOR_TARGET_ID = ? ";

            $sql .= "  WHERE ID = ? ";
        } else {
            $sql  = 'INSERT INTO IMAGE_OBJECT ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( ID ,  IMAGE_SET_ID ,  OBJECT_TYPE_ID ,  REPOSITORY_ID ,  MIME_TYPE_ID ,  BITS_PER_SAMPLE_ID ,  COMPRESSION_ID ,  PHOTO_INTERP_ID ,  ACTIVE_FLAG ,  ALTERED_FLAG ,  IN_PROCESS_FLAG ,  ORDINAL ,  PIXEL_WIDTH ,  PIXEL_HEIGHT ,  CREATE_DATE ,  RESOLUTION ,  FILE_SIZE ,  OBJECT_NAME ,  URI ,  SIGNATURE ,  COLOR_TARGET_ID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->ID!= NULL ) {
              $statement->bind_param("iiiiiiiiiiiiiissssssii", $this->ID , $this->IMAGE_SET_ID , $this->OBJECT_TYPE_ID , $this->REPOSITORY_ID , $this->MIME_TYPE_ID , $this->BITS_PER_SAMPLE_ID , $this->COMPRESSION_ID , $this->PHOTO_INTERP_ID , $this->ACTIVE_FLAG , $this->ALTERED_FLAG , $this->IN_PROCESS_FLAG , $this->ORDINAL , $this->PIXEL_WIDTH , $this->PIXEL_HEIGHT , $this->CREATE_DATE , $this->RESOLUTION , $this->FILE_SIZE , $this->OBJECT_NAME , $this->URI , $this->SIGNATURE , $this->COLOR_TARGET_ID , $this->ID );
           } else { 
              $statement->bind_param("iiiiiiiiiiiiiissssssi", $this->ID , $this->IMAGE_SET_ID , $this->OBJECT_TYPE_ID , $this->REPOSITORY_ID , $this->MIME_TYPE_ID , $this->BITS_PER_SAMPLE_ID , $this->COMPRESSION_ID , $this->PHOTO_INTERP_ID , $this->ACTIVE_FLAG , $this->ALTERED_FLAG , $this->IN_PROCESS_FLAG , $this->ORDINAL , $this->PIXEL_WIDTH , $this->PIXEL_HEIGHT , $this->CREATE_DATE , $this->RESOLUTION , $this->FILE_SIZE , $this->OBJECT_NAME , $this->URI , $this->SIGNATURE , $this->COLOR_TARGET_ID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->ID != NULL) {
           $sql = 'SELECT ID, IMAGE_SET_ID, OBJECT_TYPE_ID, REPOSITORY_ID, MIME_TYPE_ID, BITS_PER_SAMPLE_ID, COMPRESSION_ID, PHOTO_INTERP_ID, ACTIVE_FLAG, ALTERED_FLAG, IN_PROCESS_FLAG, ORDINAL, PIXEL_WIDTH, PIXEL_HEIGHT, CREATE_DATE, RESOLUTION, FILE_SIZE, OBJECT_NAME, URI, SIGNATURE, COLOR_TARGET_ID FROM IMAGE_OBJECT WHERE ID = "'.$this->ID.'"  ' ;

           $preparedsql = 'SELECT  FROM IMAGE_OBJECT WHERE  and ID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("iiiiiiiiiiiiiissssssi", $this->ID, $this->IMAGE_SET_ID, $this->OBJECT_TYPE_ID, $this->REPOSITORY_ID, $this->MIME_TYPE_ID, $this->BITS_PER_SAMPLE_ID, $this->COMPRESSION_ID, $this->PHOTO_INTERP_ID, $this->ACTIVE_FLAG, $this->ALTERED_FLAG, $this->IN_PROCESS_FLAG, $this->ORDINAL, $this->PIXEL_WIDTH, $this->PIXEL_HEIGHT, $this->CREATE_DATE, $this->RESOLUTION, $this->FILE_SIZE, $this->OBJECT_NAME, $this->URI, $this->SIGNATURE, $this->COLOR_TARGET_ID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM IMAGE_OBJECT WHERE  and ID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("iiiiiiiiiiiiiissssssi", $this->ID, $this->IMAGE_SET_ID, $this->OBJECT_TYPE_ID, $this->REPOSITORY_ID, $this->MIME_TYPE_ID, $this->BITS_PER_SAMPLE_ID, $this->COMPRESSION_ID, $this->PHOTO_INTERP_ID, $this->ACTIVE_FLAG, $this->ALTERED_FLAG, $this->IN_PROCESS_FLAG, $this->ORDINAL, $this->PIXEL_WIDTH, $this->PIXEL_HEIGHT, $this->CREATE_DATE, $this->RESOLUTION, $this->FILE_SIZE, $this->OBJECT_NAME, $this->URI, $this->SIGNATURE, $this->COLOR_TARGET_ID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->ID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM IMAGE_OBJECT';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT ID FROM IMAGE_OBJECT $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_IMAGE_OBJECT();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 

   //---------------------------------------------------------------------------

   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT ID, concat(IFNULL(IMAGE_SET_ID,'') || ' ' || IFNULL(OBJECT_TYPE_ID,'') || ' ' || IFNULL(REPOSITORY_ID,'') || ' ' || IFNULL(MIME_TYPE_ID,'') || ' ' || IFNULL(BITS_PER_SAMPLE_ID,'') || ' ' || IFNULL(COMPRESSION_ID,'') || ' ' || IFNULL(PHOTO_INTERP_ID,'') || ' ' || IFNULL(ACTIVE_FLAG,'') || ' ' || IFNULL(ALTERED_FLAG,'') || ' ' || IFNULL(IN_PROCESS_FLAG,'') || ' ' || IFNULL(ORDINAL,'') || ' ' || IFNULL(PIXEL_WIDTH,'') || ' ' || IFNULL(PIXEL_HEIGHT,'') || ' ' || IFNULL(CREATE_DATE,'') || ' ' || IFNULL(RESOLUTION,'') || ' ' || IFNULL(FILE_SIZE,'') || ' ' || IFNULL(OBJECT_NAME,'') || ' ' || IFNULL(URI,'') || ' ' || IFNULL(SIGNATURE,'') || ' ' || IFNULL(COLOR_TARGET_ID,'')) FROM IMAGE_OBJECT order by IMAGE_SET_ID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM IMAGE_OBJECT order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByIMAGE_SET_ID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ID FROM IMAGE_OBJECT WHERE IMAGE_SET_ID $operator '$searchTerm'";
        $preparedsql = "SELECT ID FROM IMAGE_OBJECT WHERE IMAGE_SET_ID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_IMAGE_OBJECT();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctIMAGE_SET_ID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' IMAGE_SET_ID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, IMAGE_SET_ID FROM IMAGE_OBJECT group by IMAGE_SET_ID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&IMAGE_SET_ID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'IMAGE_SET_ID':
             $returnvalue = $this->selectDistinctIMAGE_SET_ID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the IMAGE_OBJECT.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_IMAGE_OBJECTView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_IMAGE_OBJECT <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::ID.": ".$model->getID()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::IMAGE_SET_ID.": ".$model->getIMAGE_SET_ID()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::OBJECT_TYPE_ID.": ".$model->getOBJECT_TYPE_ID()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::REPOSITORY_ID.": ".$model->getREPOSITORY_ID()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::MIME_TYPE_ID.": ".$model->getMIME_TYPE_ID()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID.": ".$model->getBITS_PER_SAMPLE_ID()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::COMPRESSION_ID.": ".$model->getCOMPRESSION_ID()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::PHOTO_INTERP_ID.": ".$model->getPHOTO_INTERP_ID()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::ACTIVE_FLAG.": ".$model->getACTIVE_FLAG()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::ALTERED_FLAG.": ".$model->getALTERED_FLAG()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::IN_PROCESS_FLAG.": ".$model->getIN_PROCESS_FLAG()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::ORDINAL.": ".$model->getORDINAL()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::PIXEL_WIDTH.": ".$model->getPIXEL_WIDTH()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::PIXEL_HEIGHT.": ".$model->getPIXEL_HEIGHT()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::CREATE_DATE.": ".$model->getCREATE_DATE()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::RESOLUTION.": ".$model->getRESOLUTION()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::FILE_SIZE.": ".$model->getFILE_SIZE()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::OBJECT_NAME.": ".$model->getOBJECT_NAME()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::URI.": ".$model->getURI()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::SIGNATURE.": ".$model->getSIGNATURE()."</li>\n";
       $returnvalue .= "<li>".huh_IMAGE_OBJECT::COLOR_TARGET_ID.": ".$model->getCOLOR_TARGET_ID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_IMAGE_OBJECT::ID.': "'.$model->getID().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::IMAGE_SET_ID.': "'.$model->getIMAGE_SET_ID().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::OBJECT_TYPE_ID.': "'.$model->getOBJECT_TYPE_ID().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::REPOSITORY_ID.': "'.$model->getREPOSITORY_ID().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::MIME_TYPE_ID.': "'.$model->getMIME_TYPE_ID().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID.': "'.$model->getBITS_PER_SAMPLE_ID().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::COMPRESSION_ID.': "'.$model->getCOMPRESSION_ID().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::PHOTO_INTERP_ID.': "'.$model->getPHOTO_INTERP_ID().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::ACTIVE_FLAG.': "'.$model->getACTIVE_FLAG().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::ALTERED_FLAG.': "'.$model->getALTERED_FLAG().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::IN_PROCESS_FLAG.': "'.$model->getIN_PROCESS_FLAG().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::ORDINAL.': "'.$model->getORDINAL().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::PIXEL_WIDTH.': "'.$model->getPIXEL_WIDTH().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::PIXEL_HEIGHT.': "'.$model->getPIXEL_HEIGHT().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::CREATE_DATE.': "'.$model->getCREATE_DATE().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::RESOLUTION.': "'.$model->getRESOLUTION().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::FILE_SIZE.': "'.$model->getFILE_SIZE().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::OBJECT_NAME.': "'.$model->getOBJECT_NAME().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::URI.': "'.$model->getURI().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::SIGNATURE.': "'.$model->getSIGNATURE().'",';
       $returnvalue .= '"'.huh_IMAGE_OBJECT::COLOR_TARGET_ID.': "'.$model->getCOLOR_TARGET_ID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getID()."</td>\n";
       $returnvalue .= "<td>".$model->getIMAGE_SET_ID()."</td>\n";
       $returnvalue .= "<td>".$model->getOBJECT_TYPE_ID()."</td>\n";
       $returnvalue .= "<td>".$model->getREPOSITORY_ID()."</td>\n";
       $returnvalue .= "<td>".$model->getMIME_TYPE_ID()."</td>\n";
       $returnvalue .= "<td>".$model->getBITS_PER_SAMPLE_ID()."</td>\n";
       $returnvalue .= "<td>".$model->getCOMPRESSION_ID()."</td>\n";
       $returnvalue .= "<td>".$model->getPHOTO_INTERP_ID()."</td>\n";
       $returnvalue .= "<td>".$model->getACTIVE_FLAG()."</td>\n";
       $returnvalue .= "<td>".$model->getALTERED_FLAG()."</td>\n";
       $returnvalue .= "<td>".$model->getIN_PROCESS_FLAG()."</td>\n";
       $returnvalue .= "<td>".$model->getORDINAL()."</td>\n";
       $returnvalue .= "<td>".$model->getPIXEL_WIDTH()."</td>\n";
       $returnvalue .= "<td>".$model->getPIXEL_HEIGHT()."</td>\n";
       $returnvalue .= "<td>".$model->getCREATE_DATE()."</td>\n";
       $returnvalue .= "<td>".$model->getRESOLUTION()."</td>\n";
       $returnvalue .= "<td>".$model->getFILE_SIZE()."</td>\n";
       $returnvalue .= "<td>".$model->getOBJECT_NAME()."</td>\n";
       $returnvalue .= "<td>".$model->getURI()."</td>\n";
       $returnvalue .= "<td>".$model->getSIGNATURE()."</td>\n";
       $returnvalue .= "<td>".$model->getCOLOR_TARGET_ID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::ID."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::IMAGE_SET_ID."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::OBJECT_TYPE_ID."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::REPOSITORY_ID."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::MIME_TYPE_ID."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::COMPRESSION_ID."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::PHOTO_INTERP_ID."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::ACTIVE_FLAG."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::ALTERED_FLAG."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::IN_PROCESS_FLAG."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::ORDINAL."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::PIXEL_WIDTH."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::PIXEL_HEIGHT."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::CREATE_DATE."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::RESOLUTION."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::FILE_SIZE."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::OBJECT_NAME."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::URI."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::SIGNATURE."</th>\n";
       $returnvalue .= "<th>".huh_IMAGE_OBJECT::COLOR_TARGET_ID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_IMAGE_OBJECT">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new ID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::ID.">ID</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_IMAGE_OBJECT::ID." id=".huh_IMAGE_OBJECT::ID." value='".$model->getID()."'  style=' width:".huh_IMAGE_OBJECT::ID_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::ID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::IMAGE_SET_ID.">IMAGE_SET_ID</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_IMAGE_OBJECT::IMAGE_SET_ID." id=".huh_IMAGE_OBJECT::IMAGE_SET_ID." value='".$model->getIMAGE_SET_ID()."'  style=' width:".huh_IMAGE_OBJECT::IMAGE_SET_ID_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::IMAGE_SET_ID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::OBJECT_TYPE_ID.">OBJECT_TYPE_ID</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_IMAGE_OBJECT::OBJECT_TYPE_ID." id=".huh_IMAGE_OBJECT::OBJECT_TYPE_ID." value='".$model->getOBJECT_TYPE_ID()."'  style=' width:".huh_IMAGE_OBJECT::OBJECT_TYPE_ID_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::OBJECT_TYPE_ID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::REPOSITORY_ID.">REPOSITORY_ID</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_IMAGE_OBJECT::REPOSITORY_ID." id=".huh_IMAGE_OBJECT::REPOSITORY_ID." value='".$model->getREPOSITORY_ID()."'  style=' width:".huh_IMAGE_OBJECT::REPOSITORY_ID_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::REPOSITORY_ID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::MIME_TYPE_ID.">MIME_TYPE_ID</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_IMAGE_OBJECT::MIME_TYPE_ID." id=".huh_IMAGE_OBJECT::MIME_TYPE_ID." value='".$model->getMIME_TYPE_ID()."'  style=' width:".huh_IMAGE_OBJECT::MIME_TYPE_ID_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::MIME_TYPE_ID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID.">BITS_PER_SAMPLE_ID</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID." id=".huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID." value='".$model->getBITS_PER_SAMPLE_ID()."'  style=' width:".huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::COMPRESSION_ID.">COMPRESSION_ID</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_IMAGE_OBJECT::COMPRESSION_ID." id=".huh_IMAGE_OBJECT::COMPRESSION_ID." value='".$model->getCOMPRESSION_ID()."'  style=' width:".huh_IMAGE_OBJECT::COMPRESSION_ID_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::COMPRESSION_ID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::PHOTO_INTERP_ID.">PHOTO_INTERP_ID</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_IMAGE_OBJECT::PHOTO_INTERP_ID." id=".huh_IMAGE_OBJECT::PHOTO_INTERP_ID." value='".$model->getPHOTO_INTERP_ID()."'  style=' width:".huh_IMAGE_OBJECT::PHOTO_INTERP_ID_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::PHOTO_INTERP_ID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::ACTIVE_FLAG.">ACTIVE_FLAG</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_IMAGE_OBJECT::ACTIVE_FLAG." id=".huh_IMAGE_OBJECT::ACTIVE_FLAG." value='".$model->getACTIVE_FLAG()."'  style=' width:".huh_IMAGE_OBJECT::ACTIVE_FLAG_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::ACTIVE_FLAG_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::ALTERED_FLAG.">ALTERED_FLAG</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_IMAGE_OBJECT::ALTERED_FLAG." id=".huh_IMAGE_OBJECT::ALTERED_FLAG." value='".$model->getALTERED_FLAG()."'  style=' width:".huh_IMAGE_OBJECT::ALTERED_FLAG_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::ALTERED_FLAG_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::IN_PROCESS_FLAG.">IN_PROCESS_FLAG</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_IMAGE_OBJECT::IN_PROCESS_FLAG." id=".huh_IMAGE_OBJECT::IN_PROCESS_FLAG." value='".$model->getIN_PROCESS_FLAG()."'  style=' width:".huh_IMAGE_OBJECT::IN_PROCESS_FLAG_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::IN_PROCESS_FLAG_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::ORDINAL.">ORDINAL</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_IMAGE_OBJECT::ORDINAL." id=".huh_IMAGE_OBJECT::ORDINAL." value='".$model->getORDINAL()."'  style=' width:".huh_IMAGE_OBJECT::ORDINAL_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::ORDINAL_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::PIXEL_WIDTH.">PIXEL_WIDTH</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_IMAGE_OBJECT::PIXEL_WIDTH." id=".huh_IMAGE_OBJECT::PIXEL_WIDTH." value='".$model->getPIXEL_WIDTH()."'  style=' width:".huh_IMAGE_OBJECT::PIXEL_WIDTH_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::PIXEL_WIDTH_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::PIXEL_HEIGHT.">PIXEL_HEIGHT</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_IMAGE_OBJECT::PIXEL_HEIGHT." id=".huh_IMAGE_OBJECT::PIXEL_HEIGHT." value='".$model->getPIXEL_HEIGHT()."'  style=' width:".huh_IMAGE_OBJECT::PIXEL_HEIGHT_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::PIXEL_HEIGHT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::CREATE_DATE.">CREATE_DATE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_IMAGE_OBJECT::CREATE_DATE." id=".huh_IMAGE_OBJECT::CREATE_DATE." value='".$model->getCREATE_DATE()."'  style=' width:".huh_IMAGE_OBJECT::CREATE_DATE_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::CREATE_DATE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::RESOLUTION.">RESOLUTION</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_IMAGE_OBJECT::RESOLUTION." id=".huh_IMAGE_OBJECT::RESOLUTION." value='".$model->getRESOLUTION()."'  style=' width:".huh_IMAGE_OBJECT::RESOLUTION_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::RESOLUTION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::FILE_SIZE.">FILE_SIZE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_IMAGE_OBJECT::FILE_SIZE." id=".huh_IMAGE_OBJECT::FILE_SIZE." value='".$model->getFILE_SIZE()."'  style=' width:".huh_IMAGE_OBJECT::FILE_SIZE_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::FILE_SIZE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::OBJECT_NAME.">OBJECT_NAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_IMAGE_OBJECT::OBJECT_NAME." id=".huh_IMAGE_OBJECT::OBJECT_NAME." >".$model->getOBJECT_NAME()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::URI.">URI</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_IMAGE_OBJECT::URI." id=".huh_IMAGE_OBJECT::URI." >".$model->getURI()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::SIGNATURE.">SIGNATURE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_IMAGE_OBJECT::SIGNATURE." id=".huh_IMAGE_OBJECT::SIGNATURE." >".$model->getSIGNATURE()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_IMAGE_OBJECT::COLOR_TARGET_ID.">COLOR_TARGET_ID</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_IMAGE_OBJECT::COLOR_TARGET_ID." id=".huh_IMAGE_OBJECT::COLOR_TARGET_ID." value='".$model->getCOLOR_TARGET_ID()."'  style=' width:".huh_IMAGE_OBJECT::COLOR_TARGET_ID_SIZE ."em;  '  maxlength='".huh_IMAGE_OBJECT::COLOR_TARGET_ID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_IMAGE_OBJECT">';
       $returnvalue .= '<input type=hidden name=ID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_IMAGE_OBJECT">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>ID<input type=text name=".huh_IMAGE_OBJECT::ID." id=".huh_IMAGE_OBJECT::ID." value='".$model->getID()."'  size='".huh_IMAGE_OBJECT::ID_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::ID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>IMAGE_SET_ID<input type=text name=".huh_IMAGE_OBJECT::IMAGE_SET_ID." id=".huh_IMAGE_OBJECT::IMAGE_SET_ID." value='".$model->getIMAGE_SET_ID()."'  size='".huh_IMAGE_OBJECT::IMAGE_SET_ID_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::IMAGE_SET_ID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>OBJECT_TYPE_ID<input type=text name=".huh_IMAGE_OBJECT::OBJECT_TYPE_ID." id=".huh_IMAGE_OBJECT::OBJECT_TYPE_ID." value='".$model->getOBJECT_TYPE_ID()."'  size='".huh_IMAGE_OBJECT::OBJECT_TYPE_ID_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::OBJECT_TYPE_ID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REPOSITORY_ID<input type=text name=".huh_IMAGE_OBJECT::REPOSITORY_ID." id=".huh_IMAGE_OBJECT::REPOSITORY_ID." value='".$model->getREPOSITORY_ID()."'  size='".huh_IMAGE_OBJECT::REPOSITORY_ID_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::REPOSITORY_ID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MIME_TYPE_ID<input type=text name=".huh_IMAGE_OBJECT::MIME_TYPE_ID." id=".huh_IMAGE_OBJECT::MIME_TYPE_ID." value='".$model->getMIME_TYPE_ID()."'  size='".huh_IMAGE_OBJECT::MIME_TYPE_ID_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::MIME_TYPE_ID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>BITS_PER_SAMPLE_ID<input type=text name=".huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID." id=".huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID." value='".$model->getBITS_PER_SAMPLE_ID()."'  size='".huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::BITS_PER_SAMPLE_ID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COMPRESSION_ID<input type=text name=".huh_IMAGE_OBJECT::COMPRESSION_ID." id=".huh_IMAGE_OBJECT::COMPRESSION_ID." value='".$model->getCOMPRESSION_ID()."'  size='".huh_IMAGE_OBJECT::COMPRESSION_ID_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::COMPRESSION_ID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PHOTO_INTERP_ID<input type=text name=".huh_IMAGE_OBJECT::PHOTO_INTERP_ID." id=".huh_IMAGE_OBJECT::PHOTO_INTERP_ID." value='".$model->getPHOTO_INTERP_ID()."'  size='".huh_IMAGE_OBJECT::PHOTO_INTERP_ID_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::PHOTO_INTERP_ID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ACTIVE_FLAG<input type=text name=".huh_IMAGE_OBJECT::ACTIVE_FLAG." id=".huh_IMAGE_OBJECT::ACTIVE_FLAG." value='".$model->getACTIVE_FLAG()."'  size='".huh_IMAGE_OBJECT::ACTIVE_FLAG_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::ACTIVE_FLAG_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ALTERED_FLAG<input type=text name=".huh_IMAGE_OBJECT::ALTERED_FLAG." id=".huh_IMAGE_OBJECT::ALTERED_FLAG." value='".$model->getALTERED_FLAG()."'  size='".huh_IMAGE_OBJECT::ALTERED_FLAG_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::ALTERED_FLAG_SIZE ."' ></li>\n";
       $returnvalue .= "<li>IN_PROCESS_FLAG<input type=text name=".huh_IMAGE_OBJECT::IN_PROCESS_FLAG." id=".huh_IMAGE_OBJECT::IN_PROCESS_FLAG." value='".$model->getIN_PROCESS_FLAG()."'  size='".huh_IMAGE_OBJECT::IN_PROCESS_FLAG_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::IN_PROCESS_FLAG_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ORDINAL<input type=text name=".huh_IMAGE_OBJECT::ORDINAL." id=".huh_IMAGE_OBJECT::ORDINAL." value='".$model->getORDINAL()."'  size='".huh_IMAGE_OBJECT::ORDINAL_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::ORDINAL_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PIXEL_WIDTH<input type=text name=".huh_IMAGE_OBJECT::PIXEL_WIDTH." id=".huh_IMAGE_OBJECT::PIXEL_WIDTH." value='".$model->getPIXEL_WIDTH()."'  size='".huh_IMAGE_OBJECT::PIXEL_WIDTH_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::PIXEL_WIDTH_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PIXEL_HEIGHT<input type=text name=".huh_IMAGE_OBJECT::PIXEL_HEIGHT." id=".huh_IMAGE_OBJECT::PIXEL_HEIGHT." value='".$model->getPIXEL_HEIGHT()."'  size='".huh_IMAGE_OBJECT::PIXEL_HEIGHT_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::PIXEL_HEIGHT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATE_DATE<input type=text name=".huh_IMAGE_OBJECT::CREATE_DATE." id=".huh_IMAGE_OBJECT::CREATE_DATE." value='".$model->getCREATE_DATE()."'  size='".huh_IMAGE_OBJECT::CREATE_DATE_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::CREATE_DATE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>RESOLUTION<input type=text name=".huh_IMAGE_OBJECT::RESOLUTION." id=".huh_IMAGE_OBJECT::RESOLUTION." value='".$model->getRESOLUTION()."'  size='".huh_IMAGE_OBJECT::RESOLUTION_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::RESOLUTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FILE_SIZE<input type=text name=".huh_IMAGE_OBJECT::FILE_SIZE." id=".huh_IMAGE_OBJECT::FILE_SIZE." value='".$model->getFILE_SIZE()."'  size='".huh_IMAGE_OBJECT::FILE_SIZE_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::FILE_SIZE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>OBJECT_NAME<input type=text name=".huh_IMAGE_OBJECT::OBJECT_NAME." id=".huh_IMAGE_OBJECT::OBJECT_NAME." value='".$model->getOBJECT_NAME()."'  size='51'  maxlength='".huh_IMAGE_OBJECT::OBJECT_NAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>URI<input type=text name=".huh_IMAGE_OBJECT::URI." id=".huh_IMAGE_OBJECT::URI." value='".$model->getURI()."'  size='51'  maxlength='".huh_IMAGE_OBJECT::URI_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SIGNATURE<input type=text name=".huh_IMAGE_OBJECT::SIGNATURE." id=".huh_IMAGE_OBJECT::SIGNATURE." value='".$model->getSIGNATURE()."'  size='51'  maxlength='".huh_IMAGE_OBJECT::SIGNATURE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLOR_TARGET_ID<input type=text name=".huh_IMAGE_OBJECT::COLOR_TARGET_ID." id=".huh_IMAGE_OBJECT::COLOR_TARGET_ID." value='".$model->getCOLOR_TARGET_ID()."'  size='".huh_IMAGE_OBJECT::COLOR_TARGET_ID_SIZE ."'  maxlength='".huh_IMAGE_OBJECT::COLOR_TARGET_ID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
