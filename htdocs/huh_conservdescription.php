<?php
//==============================================================================
//===   conservdescription.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_conservdescription implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const CONSERVDESCRIPTIONID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const BACKGROUNDINFO_SIZE  = 255; //LONGVARCHAR
   const COMPOSITION_SIZE     = 255; //LONGVARCHAR
   const DESCRIPTION_SIZE     = 255; //LONGVARCHAR
   const DISPLAYRECOMMENDATIONS_SIZE = 255; //LONGVARCHAR
   const HEIGHT_SIZE          = 20; //REAL
   const LIGHTRECOMMENDATIONS_SIZE = 255; //LONGVARCHAR
   const OBJLENGTH_SIZE       = 20; //REAL
   const OTHERRECOMMENDATIONS_SIZE = 255; //LONGVARCHAR
   const REMARKS_SIZE         = 255; //LONGVARCHAR
   const SHORTDESC_SIZE       = 128; //128
   const SOURCE_SIZE          = 255; //LONGVARCHAR
   const UNITS_SIZE           = 16; //16
   const WIDTH_SIZE           = 20; //REAL
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const PREPARATIONID_SIZE   = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const DIVISIONID_SIZE      = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const CONSERVDESCRIPTIONID = 'ConservDescriptionID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const BACKGROUNDINFO    = 'BackgroundInfo';
   const COMPOSITION       = 'Composition';
   const DESCRIPTION       = 'Description';
   const DISPLAYRECOMMENDATIONS = 'DisplayRecommendations';
   const HEIGHT            = 'Height';
   const LIGHTRECOMMENDATIONS = 'LightRecommendations';
   const OBJLENGTH         = 'ObjLength';
   const OTHERRECOMMENDATIONS = 'OtherRecommendations';
   const REMARKS           = 'Remarks';
   const SHORTDESC         = 'ShortDesc';
   const SOURCE            = 'Source';
   const UNITS             = 'Units';
   const WIDTH             = 'Width';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const PREPARATIONID     = 'PreparationID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const DIVISIONID        = 'DivisionID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $ConservDescriptionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ConservDescriptionID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $BackgroundInfo = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['BackgroundInfo']), 0, 255);
  $Composition = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Composition']), 0, 255);
  $Description = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Description']), 0, 255);
  $DisplayRecommendations = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['DisplayRecommendations']), 0, 255);
  $Height = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Height']), 0, 20);
  $LightRecommendations = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['LightRecommendations']), 0, 255);
  $ObjLength = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ObjLength']), 0, 20);
  $OtherRecommendations = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['OtherRecommendations']), 0, 255);
  $Remarks = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Remarks']), 0, 255);
  $ShortDesc = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ShortDesc']), 0, 128);
  $Source = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Source']), 0, 255);
  $Units = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Units']), 0, 16);
  $Width = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Width']), 0, 20);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $PreparationID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PreparationID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $DivisionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DivisionID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $ConservDescriptionID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $BackgroundInfo; // LONGVARCHAR 
   private $Composition; // LONGVARCHAR 
   private $Description; // LONGVARCHAR 
   private $DisplayRecommendations; // LONGVARCHAR 
   private $Height; // REAL 
   private $LightRecommendations; // LONGVARCHAR 
   private $ObjLength; // REAL 
   private $OtherRecommendations; // LONGVARCHAR 
   private $Remarks; // LONGVARCHAR 
   private $ShortDesc; // VARCHAR(128) 
   private $Source; // LONGVARCHAR 
   private $Units; // VARCHAR(16) 
   private $Width; // REAL 
   private $CreatedByAgentID; // INTEGER 
   private $PreparationID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $DivisionID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' ConservDescriptionID, TimestampCreated, TimestampModified, Version, BackgroundInfo, Composition, Description, DisplayRecommendations, Height, LightRecommendations, ObjLength, OtherRecommendations, Remarks, ShortDesc, Source, Units, Width, CreatedByAgentID, PreparationID, ModifiedByAgentID, DivisionID, ';
   const PKFIELDLIST = ' ConservDescriptionID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'ConservDescriptionID'  ) ;
   private $allFieldsArray = array( 0 => 'ConservDescriptionID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'BackgroundInfo' , 5 => 'Composition' , 6 => 'Description' , 7 => 'DisplayRecommendations' , 8 => 'Height' , 9 => 'LightRecommendations' , 10 => 'ObjLength' , 11 => 'OtherRecommendations' , 12 => 'Remarks' , 13 => 'ShortDesc' , 14 => 'Source' , 15 => 'Units' , 16 => 'Width' , 17 => 'CreatedByAgentID' , 18 => 'PreparationID' , 19 => 'ModifiedByAgentID' , 20 => 'DivisionID'  ) ;
   private $selectDistinctFieldsArray = array( 13 => 'ShortDesc' , 17 => 'CreatedByAgentID' , 18 => 'PreparationID' , 19 => 'ModifiedByAgentID' , 20 => 'DivisionID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_conservdescription(){
       $this->ConservDescriptionID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->BackgroundInfo = '';
       $this->Composition = '';
       $this->Description = '';
       $this->DisplayRecommendations = '';
       $this->Height = '';
       $this->LightRecommendations = '';
       $this->ObjLength = '';
       $this->OtherRecommendations = '';
       $this->Remarks = '';
       $this->ShortDesc = '';
       $this->Source = '';
       $this->Units = '';
       $this->Width = '';
       $this->CreatedByAgentID = '';
       $this->PreparationID = '';
       $this->ModifiedByAgentID = '';
       $this->DivisionID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='ConservDescriptionID') { $returnvalue = $this->setConservDescriptionID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='BackgroundInfo') { $returnvalue = $this->setBackgroundInfo($value); } 
             if ($fieldname=='Composition') { $returnvalue = $this->setComposition($value); } 
             if ($fieldname=='Description') { $returnvalue = $this->setDescription($value); } 
             if ($fieldname=='DisplayRecommendations') { $returnvalue = $this->setDisplayRecommendations($value); } 
             if ($fieldname=='Height') { $returnvalue = $this->setHeight($value); } 
             if ($fieldname=='LightRecommendations') { $returnvalue = $this->setLightRecommendations($value); } 
             if ($fieldname=='ObjLength') { $returnvalue = $this->setObjLength($value); } 
             if ($fieldname=='OtherRecommendations') { $returnvalue = $this->setOtherRecommendations($value); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->setRemarks($value); } 
             if ($fieldname=='ShortDesc') { $returnvalue = $this->setShortDesc($value); } 
             if ($fieldname=='Source') { $returnvalue = $this->setSource($value); } 
             if ($fieldname=='Units') { $returnvalue = $this->setUnits($value); } 
             if ($fieldname=='Width') { $returnvalue = $this->setWidth($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='PreparationID') { $returnvalue = $this->setPreparationID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->setDivisionID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='ConservDescriptionID') { $returnvalue = $this->getConservDescriptionID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='BackgroundInfo') { $returnvalue = $this->getBackgroundInfo(); } 
             if ($fieldname=='Composition') { $returnvalue = $this->getComposition(); } 
             if ($fieldname=='Description') { $returnvalue = $this->getDescription(); } 
             if ($fieldname=='DisplayRecommendations') { $returnvalue = $this->getDisplayRecommendations(); } 
             if ($fieldname=='Height') { $returnvalue = $this->getHeight(); } 
             if ($fieldname=='LightRecommendations') { $returnvalue = $this->getLightRecommendations(); } 
             if ($fieldname=='ObjLength') { $returnvalue = $this->getObjLength(); } 
             if ($fieldname=='OtherRecommendations') { $returnvalue = $this->getOtherRecommendations(); } 
             if ($fieldname=='Remarks') { $returnvalue = $this->getRemarks(); } 
             if ($fieldname=='ShortDesc') { $returnvalue = $this->getShortDesc(); } 
             if ($fieldname=='Source') { $returnvalue = $this->getSource(); } 
             if ($fieldname=='Units') { $returnvalue = $this->getUnits(); } 
             if ($fieldname=='Width') { $returnvalue = $this->getWidth(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='PreparationID') { $returnvalue = $this->getPreparationID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->getDivisionID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*ConservDescriptionID*/
   public function getConservDescriptionID() {
       if ($this->ConservDescriptionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ConservDescriptionID));
       }
   }
   public function setConservDescriptionID($ConservDescriptionID) {
       if (strlen(preg_replace('/[^0-9]/','',$ConservDescriptionID)) > huh_conservdescription::CONSERVDESCRIPTIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ConservDescriptionID = trim($ConservDescriptionID);
       if (!ctype_digit(strval($ConservDescriptionID)) && trim(strval($ConservDescriptionID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ConservDescriptionID = $this->l_addslashes($ConservDescriptionID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_conservdescription::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_conservdescription::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_conservdescription::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*BackgroundInfo*/
   public function getBackgroundInfo() {
       if ($this->BackgroundInfo==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->BackgroundInfo));
       }
   }
   public function setBackgroundInfo($BackgroundInfo) {
       if (strlen($BackgroundInfo) > huh_conservdescription::BACKGROUNDINFO_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->BackgroundInfo = $this->l_addslashes($BackgroundInfo);
       $this->dirty = true;
   }
/*Composition*/
   public function getComposition() {
       if ($this->Composition==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Composition));
       }
   }
   public function setComposition($Composition) {
       if (strlen($Composition) > huh_conservdescription::COMPOSITION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Composition = $this->l_addslashes($Composition);
       $this->dirty = true;
   }
/*Description*/
   public function getDescription() {
       if ($this->Description==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Description));
       }
   }
   public function setDescription($Description) {
       if (strlen($Description) > huh_conservdescription::DESCRIPTION_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Description = $this->l_addslashes($Description);
       $this->dirty = true;
   }
/*DisplayRecommendations*/
   public function getDisplayRecommendations() {
       if ($this->DisplayRecommendations==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DisplayRecommendations));
       }
   }
   public function setDisplayRecommendations($DisplayRecommendations) {
       if (strlen($DisplayRecommendations) > huh_conservdescription::DISPLAYRECOMMENDATIONS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->DisplayRecommendations = $this->l_addslashes($DisplayRecommendations);
       $this->dirty = true;
   }
/*Height*/
   public function getHeight() {
       if ($this->Height==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Height));
       }
   }
   public function setHeight($Height) {
       if (strlen($Height) > huh_conservdescription::HEIGHT_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Height = $this->l_addslashes($Height);
       $this->dirty = true;
   }
/*LightRecommendations*/
   public function getLightRecommendations() {
       if ($this->LightRecommendations==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LightRecommendations));
       }
   }
   public function setLightRecommendations($LightRecommendations) {
       if (strlen($LightRecommendations) > huh_conservdescription::LIGHTRECOMMENDATIONS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->LightRecommendations = $this->l_addslashes($LightRecommendations);
       $this->dirty = true;
   }
/*ObjLength*/
   public function getObjLength() {
       if ($this->ObjLength==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ObjLength));
       }
   }
   public function setObjLength($ObjLength) {
       if (strlen($ObjLength) > huh_conservdescription::OBJLENGTH_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ObjLength = $this->l_addslashes($ObjLength);
       $this->dirty = true;
   }
/*OtherRecommendations*/
   public function getOtherRecommendations() {
       if ($this->OtherRecommendations==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->OtherRecommendations));
       }
   }
   public function setOtherRecommendations($OtherRecommendations) {
       if (strlen($OtherRecommendations) > huh_conservdescription::OTHERRECOMMENDATIONS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->OtherRecommendations = $this->l_addslashes($OtherRecommendations);
       $this->dirty = true;
   }
/*Remarks*/
   public function getRemarks() {
       if ($this->Remarks==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Remarks));
       }
   }
   public function setRemarks($Remarks) {
       if (strlen($Remarks) > huh_conservdescription::REMARKS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Remarks = $this->l_addslashes($Remarks);
       $this->dirty = true;
   }
/*ShortDesc*/
   public function getShortDesc() {
       if ($this->ShortDesc==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ShortDesc));
       }
   }
   public function setShortDesc($ShortDesc) {
       if (strlen($ShortDesc) > huh_conservdescription::SHORTDESC_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ShortDesc = $this->l_addslashes($ShortDesc);
       $this->dirty = true;
   }
/*Source*/
   public function getSource() {
       if ($this->Source==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Source));
       }
   }
   public function setSource($Source) {
       if (strlen($Source) > huh_conservdescription::SOURCE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Source = $this->l_addslashes($Source);
       $this->dirty = true;
   }
/*Units*/
   public function getUnits() {
       if ($this->Units==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Units));
       }
   }
   public function setUnits($Units) {
       if (strlen($Units) > huh_conservdescription::UNITS_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Units = $this->l_addslashes($Units);
       $this->dirty = true;
   }
/*Width*/
   public function getWidth() {
       if ($this->Width==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Width));
       }
   }
   public function setWidth($Width) {
       if (strlen($Width) > huh_conservdescription::WIDTH_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Width = $this->l_addslashes($Width);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_conservdescription::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*PreparationID*/
   public function getPreparationID() {
       if ($this->PreparationID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PreparationID));
       }
   }
   public function setPreparationID($PreparationID) {
       if (strlen(preg_replace('/[^0-9]/','',$PreparationID)) > huh_conservdescription::PREPARATIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PreparationID = trim($PreparationID);
       if (!ctype_digit(strval($PreparationID)) && trim(strval($PreparationID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PreparationID = $this->l_addslashes($PreparationID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_conservdescription::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*DivisionID*/
   public function getDivisionID() {
       if ($this->DivisionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DivisionID));
       }
   }
   public function setDivisionID($DivisionID) {
       if (strlen(preg_replace('/[^0-9]/','',$DivisionID)) > huh_conservdescription::DIVISIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DivisionID = trim($DivisionID);
       if (!ctype_digit(strval($DivisionID)) && trim(strval($DivisionID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->DivisionID = $this->l_addslashes($DivisionID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getConservDescriptionID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['ConservDescriptionID'] = $this->getConservDescriptionID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_ConservDescriptionIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_BackgroundInfoMYSQLI_TYPE = 's';
  const C_CompositionMYSQLI_TYPE = 's';
  const C_DescriptionMYSQLI_TYPE = 's';
  const C_DisplayRecommendationsMYSQLI_TYPE = 's';
  const C_HeightMYSQLI_TYPE = 's';
  const C_LightRecommendationsMYSQLI_TYPE = 's';
  const C_ObjLengthMYSQLI_TYPE = 's';
  const C_OtherRecommendationsMYSQLI_TYPE = 's';
  const C_RemarksMYSQLI_TYPE = 's';
  const C_ShortDescMYSQLI_TYPE = 's';
  const C_SourceMYSQLI_TYPE = 's';
  const C_UnitsMYSQLI_TYPE = 's';
  const C_WidthMYSQLI_TYPE = 's';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_PreparationIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_DivisionIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='ConservDescriptionID') { $retval = self::C_ConservDescriptionIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='BackgroundInfo') { $retval = self::C_BackgroundInfoMYSQLI_TYPE; }
      if ($aFieldname=='Composition') { $retval = self::C_CompositionMYSQLI_TYPE; }
      if ($aFieldname=='Description') { $retval = self::C_DescriptionMYSQLI_TYPE; }
      if ($aFieldname=='DisplayRecommendations') { $retval = self::C_DisplayRecommendationsMYSQLI_TYPE; }
      if ($aFieldname=='Height') { $retval = self::C_HeightMYSQLI_TYPE; }
      if ($aFieldname=='LightRecommendations') { $retval = self::C_LightRecommendationsMYSQLI_TYPE; }
      if ($aFieldname=='ObjLength') { $retval = self::C_ObjLengthMYSQLI_TYPE; }
      if ($aFieldname=='OtherRecommendations') { $retval = self::C_OtherRecommendationsMYSQLI_TYPE; }
      if ($aFieldname=='Remarks') { $retval = self::C_RemarksMYSQLI_TYPE; }
      if ($aFieldname=='ShortDesc') { $retval = self::C_ShortDescMYSQLI_TYPE; }
      if ($aFieldname=='Source') { $retval = self::C_SourceMYSQLI_TYPE; }
      if ($aFieldname=='Units') { $retval = self::C_UnitsMYSQLI_TYPE; }
      if ($aFieldname=='Width') { $retval = self::C_WidthMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='PreparationID') { $retval = self::C_PreparationIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='DivisionID') { $retval = self::C_DivisionIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setConservDescriptionID($pk[ConservDescriptionID]);
             } else { ;
                 $this->setConservDescriptionID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->ConservDescriptionID != NULL) {
           $sql = 'SELECT ConservDescriptionID, TimestampCreated, TimestampModified, Version, BackgroundInfo, Composition, Description, DisplayRecommendations, Height, LightRecommendations, ObjLength, OtherRecommendations, Remarks, ShortDesc, Source, Units, Width, CreatedByAgentID, PreparationID, ModifiedByAgentID, DivisionID FROM conservdescription WHERE ConservDescriptionID = '.$this->ConservDescriptionID ;

           $preparesql = 'SELECT ConservDescriptionID, TimestampCreated, TimestampModified, Version, BackgroundInfo, Composition, Description, DisplayRecommendations, Height, LightRecommendations, ObjLength, OtherRecommendations, Remarks, ShortDesc, Source, Units, Width, CreatedByAgentID, PreparationID, ModifiedByAgentID, DivisionID FROM conservdescription WHERE ConservDescriptionID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->ConservDescriptionID);
              $statement->execute();
              $statement->bind_result($this->ConservDescriptionID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->BackgroundInfo, $this->Composition, $this->Description, $this->DisplayRecommendations, $this->Height, $this->LightRecommendations, $this->ObjLength, $this->OtherRecommendations, $this->Remarks, $this->ShortDesc, $this->Source, $this->Units, $this->Width, $this->CreatedByAgentID, $this->PreparationID, $this->ModifiedByAgentID, $this->DivisionID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->ConservDescriptionID!= NULL) {
            $sql  = 'UPDATE  conservdescription SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", BackgroundInfo = ? ";
            $sql .=  ", Composition = ? ";
            $sql .=  ", Description = ? ";
            $sql .=  ", DisplayRecommendations = ? ";
            $sql .=  ", Height = ? ";
            $sql .=  ", LightRecommendations = ? ";
            $sql .=  ", ObjLength = ? ";
            $sql .=  ", OtherRecommendations = ? ";
            $sql .=  ", Remarks = ? ";
            $sql .=  ", ShortDesc = ? ";
            $sql .=  ", Source = ? ";
            $sql .=  ", Units = ? ";
            $sql .=  ", Width = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", PreparationID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", DivisionID = ? ";

            $sql .= "  WHERE ConservDescriptionID = ? ";
        } else {
            $sql  = 'INSERT INTO conservdescription ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( ConservDescriptionID ,  TimestampCreated ,  TimestampModified ,  Version ,  BackgroundInfo ,  Composition ,  Description ,  DisplayRecommendations ,  Height ,  LightRecommendations ,  ObjLength ,  OtherRecommendations ,  Remarks ,  ShortDesc ,  Source ,  Units ,  Width ,  CreatedByAgentID ,  PreparationID ,  ModifiedByAgentID ,  DivisionID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->ConservDescriptionID!= NULL ) {
              $statement->bind_param("ississsssssssssssiiiii", $this->ConservDescriptionID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->BackgroundInfo , $this->Composition , $this->Description , $this->DisplayRecommendations , $this->Height , $this->LightRecommendations , $this->ObjLength , $this->OtherRecommendations , $this->Remarks , $this->ShortDesc , $this->Source , $this->Units , $this->Width , $this->CreatedByAgentID , $this->PreparationID , $this->ModifiedByAgentID , $this->DivisionID , $this->ConservDescriptionID );
           } else { 
              $statement->bind_param("ississsssssssssssiiii", $this->ConservDescriptionID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->BackgroundInfo , $this->Composition , $this->Description , $this->DisplayRecommendations , $this->Height , $this->LightRecommendations , $this->ObjLength , $this->OtherRecommendations , $this->Remarks , $this->ShortDesc , $this->Source , $this->Units , $this->Width , $this->CreatedByAgentID , $this->PreparationID , $this->ModifiedByAgentID , $this->DivisionID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->ConservDescriptionID != NULL) {
           $sql = 'SELECT ConservDescriptionID, TimestampCreated, TimestampModified, Version, BackgroundInfo, Composition, Description, DisplayRecommendations, Height, LightRecommendations, ObjLength, OtherRecommendations, Remarks, ShortDesc, Source, Units, Width, CreatedByAgentID, PreparationID, ModifiedByAgentID, DivisionID FROM conservdescription WHERE ConservDescriptionID = "'.$this->ConservDescriptionID.'"  ' ;

           $preparedsql = 'SELECT  FROM conservdescription WHERE  and ConservDescriptionID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississsssssssssssiiii", $this->ConservDescriptionID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->BackgroundInfo, $this->Composition, $this->Description, $this->DisplayRecommendations, $this->Height, $this->LightRecommendations, $this->ObjLength, $this->OtherRecommendations, $this->Remarks, $this->ShortDesc, $this->Source, $this->Units, $this->Width, $this->CreatedByAgentID, $this->PreparationID, $this->ModifiedByAgentID, $this->DivisionID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM conservdescription WHERE  and ConservDescriptionID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississsssssssssssiiii", $this->ConservDescriptionID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->BackgroundInfo, $this->Composition, $this->Description, $this->DisplayRecommendations, $this->Height, $this->LightRecommendations, $this->ObjLength, $this->OtherRecommendations, $this->Remarks, $this->ShortDesc, $this->Source, $this->Units, $this->Width, $this->CreatedByAgentID, $this->PreparationID, $this->ModifiedByAgentID, $this->DivisionID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->ConservDescriptionID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM conservdescription';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT ConservDescriptionID FROM conservdescription $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_conservdescription();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromconservdescriptionattachment() { 
      // ForeignKey in: conservdescriptionattachment
      $t = new conservdescriptionattachment();
  } 
  public function loadLinkedFromconservevent() { 
      // ForeignKey in: conservevent
      $t = new conservevent();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: PreparationID
      $t = new preparation();
      $t->load(getPreparationID());
      $returnvalue[PreparationID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: DivisionID
      $t = new division();
      $t->load(getDivisionID());
      $returnvalue[DivisionID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT ConservDescriptionID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(BackgroundInfo,'') || ' ' || IFNULL(Composition,'') || ' ' || IFNULL(Description,'') || ' ' || IFNULL(DisplayRecommendations,'') || ' ' || IFNULL(Height,'') || ' ' || IFNULL(LightRecommendations,'') || ' ' || IFNULL(ObjLength,'') || ' ' || IFNULL(OtherRecommendations,'') || ' ' || IFNULL(Remarks,'') || ' ' || IFNULL(ShortDesc,'') || ' ' || IFNULL(Source,'') || ' ' || IFNULL(Units,'') || ' ' || IFNULL(Width,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(PreparationID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(DivisionID,'')) FROM conservdescription order by ShortDesc, CreatedByAgentID, PreparationID, ModifiedByAgentID, DivisionID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM conservdescription order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByShortDesc($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservDescriptionID FROM conservdescription WHERE ShortDesc $operator '$searchTerm'";
        $preparedsql = "SELECT ConservDescriptionID FROM conservdescription WHERE ShortDesc $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservdescription();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservDescriptionID FROM conservdescription WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT ConservDescriptionID FROM conservdescription WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservdescription();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByPreparationID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservDescriptionID FROM conservdescription WHERE PreparationID $operator '$searchTerm'";
        $preparedsql = "SELECT ConservDescriptionID FROM conservdescription WHERE PreparationID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservdescription();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservDescriptionID FROM conservdescription WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT ConservDescriptionID FROM conservdescription WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservdescription();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDivisionID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT ConservDescriptionID FROM conservdescription WHERE DivisionID $operator '$searchTerm'";
        $preparedsql = "SELECT ConservDescriptionID FROM conservdescription WHERE DivisionID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_conservdescription();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctShortDesc($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ShortDesc ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ShortDesc FROM conservdescription group by ShortDesc order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ShortDesc=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM conservdescription group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctPreparationID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' PreparationID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, PreparationID FROM conservdescription group by PreparationID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&PreparationID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM conservdescription group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDivisionID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DivisionID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DivisionID FROM conservdescription group by DivisionID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DivisionID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'ShortDesc':
             $returnvalue = $this->selectDistinctShortDesc($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'PreparationID':
             $returnvalue = $this->selectDistinctPreparationID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DivisionID':
             $returnvalue = $this->selectDistinctDivisionID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the conservdescription.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_conservdescriptionView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_conservdescription <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_conservdescription::CONSERVDESCRIPTIONID.": ".$model->getConservDescriptionID()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::BACKGROUNDINFO.": ".$model->getBackgroundInfo()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::COMPOSITION.": ".$model->getComposition()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::DESCRIPTION.": ".$model->getDescription()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::DISPLAYRECOMMENDATIONS.": ".$model->getDisplayRecommendations()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::HEIGHT.": ".$model->getHeight()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::LIGHTRECOMMENDATIONS.": ".$model->getLightRecommendations()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::OBJLENGTH.": ".$model->getObjLength()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::OTHERRECOMMENDATIONS.": ".$model->getOtherRecommendations()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::REMARKS.": ".$model->getRemarks()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::SHORTDESC.": ".$model->getShortDesc()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::SOURCE.": ".$model->getSource()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::UNITS.": ".$model->getUnits()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::WIDTH.": ".$model->getWidth()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::PREPARATIONID.": ".$model->getPreparationID()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_conservdescription::DIVISIONID.": ".$model->getDivisionID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>preparation</li>";
           $t_preparation = new huh_preparation();
           $t_preparationView = new huh_preparationView();
           $t_preparationView->setModel($t_preparation);
           if ($model->getPreparationID() != '') { 
               $t_preparation->load($model->getPreparationID());
               $returnvalue .= $t_preparationView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>division</li>";
           $t_division = new huh_division();
           $t_divisionView = new huh_divisionView();
           $t_divisionView->setModel($t_division);
           if ($model->getDivisionID() != '') { 
               $t_division->load($model->getDivisionID());
               $returnvalue .= $t_divisionView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_conservdescription::CONSERVDESCRIPTIONID.': "'.$model->getConservDescriptionID().'",';
       $returnvalue .= '"'.huh_conservdescription::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_conservdescription::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_conservdescription::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_conservdescription::BACKGROUNDINFO.': "'.$model->getBackgroundInfo().'",';
       $returnvalue .= '"'.huh_conservdescription::COMPOSITION.': "'.$model->getComposition().'",';
       $returnvalue .= '"'.huh_conservdescription::DESCRIPTION.': "'.$model->getDescription().'",';
       $returnvalue .= '"'.huh_conservdescription::DISPLAYRECOMMENDATIONS.': "'.$model->getDisplayRecommendations().'",';
       $returnvalue .= '"'.huh_conservdescription::HEIGHT.': "'.$model->getHeight().'",';
       $returnvalue .= '"'.huh_conservdescription::LIGHTRECOMMENDATIONS.': "'.$model->getLightRecommendations().'",';
       $returnvalue .= '"'.huh_conservdescription::OBJLENGTH.': "'.$model->getObjLength().'",';
       $returnvalue .= '"'.huh_conservdescription::OTHERRECOMMENDATIONS.': "'.$model->getOtherRecommendations().'",';
       $returnvalue .= '"'.huh_conservdescription::REMARKS.': "'.$model->getRemarks().'",';
       $returnvalue .= '"'.huh_conservdescription::SHORTDESC.': "'.$model->getShortDesc().'",';
       $returnvalue .= '"'.huh_conservdescription::SOURCE.': "'.$model->getSource().'",';
       $returnvalue .= '"'.huh_conservdescription::UNITS.': "'.$model->getUnits().'",';
       $returnvalue .= '"'.huh_conservdescription::WIDTH.': "'.$model->getWidth().'",';
       $returnvalue .= '"'.huh_conservdescription::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_conservdescription::PREPARATIONID.': "'.$model->getPreparationID().'",';
       $returnvalue .= '"'.huh_conservdescription::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_conservdescription::DIVISIONID.': "'.$model->getDivisionID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getConservDescriptionID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getBackgroundInfo()."</td>\n";
       $returnvalue .= "<td>".$model->getComposition()."</td>\n";
       $returnvalue .= "<td>".$model->getDescription()."</td>\n";
       $returnvalue .= "<td>".$model->getDisplayRecommendations()."</td>\n";
       $returnvalue .= "<td>".$model->getHeight()."</td>\n";
       $returnvalue .= "<td>".$model->getLightRecommendations()."</td>\n";
       $returnvalue .= "<td>".$model->getObjLength()."</td>\n";
       $returnvalue .= "<td>".$model->getOtherRecommendations()."</td>\n";
       $returnvalue .= "<td>".$model->getRemarks()."</td>\n";
       $returnvalue .= "<td>".$model->getShortDesc()."</td>\n";
       $returnvalue .= "<td>".$model->getSource()."</td>\n";
       $returnvalue .= "<td>".$model->getUnits()."</td>\n";
       $returnvalue .= "<td>".$model->getWidth()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getPreparationID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getDivisionID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_conservdescription::CONSERVDESCRIPTIONID."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::BACKGROUNDINFO."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::COMPOSITION."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::DESCRIPTION."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::DISPLAYRECOMMENDATIONS."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::HEIGHT."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::LIGHTRECOMMENDATIONS."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::OBJLENGTH."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::OTHERRECOMMENDATIONS."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::REMARKS."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::SHORTDESC."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::SOURCE."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::UNITS."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::WIDTH."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::PREPARATIONID."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_conservdescription::DIVISIONID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_conservdescription">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new ConservDescriptionID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_conservdescription::CONSERVDESCRIPTIONID.">CONSERVDESCRIPTIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservdescription::CONSERVDESCRIPTIONID." id=".huh_conservdescription::CONSERVDESCRIPTIONID." value='".$model->getConservDescriptionID()."'  style=' width:".huh_conservdescription::CONSERVDESCRIPTIONID_SIZE ."em;  '  maxlength='".huh_conservdescription::CONSERVDESCRIPTIONID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_conservdescription::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_conservdescription::TIMESTAMPCREATED." id=".huh_conservdescription::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_conservdescription::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_conservdescription::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_conservdescription::TIMESTAMPMODIFIED." id=".huh_conservdescription::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_conservdescription::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_conservdescription::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservdescription::VERSION." id=".huh_conservdescription::VERSION." value='".$model->getVersion()."'  style=' width:".huh_conservdescription::VERSION_SIZE ."em;  '  maxlength='".huh_conservdescription::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::BACKGROUNDINFO.">BACKGROUNDINFO</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservdescription::BACKGROUNDINFO." id=".huh_conservdescription::BACKGROUNDINFO." >".$model->getBackgroundInfo()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::COMPOSITION.">COMPOSITION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservdescription::COMPOSITION." id=".huh_conservdescription::COMPOSITION." >".$model->getComposition()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::DESCRIPTION.">DESCRIPTION</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservdescription::DESCRIPTION." id=".huh_conservdescription::DESCRIPTION." >".$model->getDescription()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::DISPLAYRECOMMENDATIONS.">DISPLAYRECOMMENDATIONS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservdescription::DISPLAYRECOMMENDATIONS." id=".huh_conservdescription::DISPLAYRECOMMENDATIONS." >".$model->getDisplayRecommendations()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::HEIGHT.">HEIGHT</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_conservdescription::HEIGHT." id=".huh_conservdescription::HEIGHT." value='".$model->getHeight()."'  style=' width:".huh_conservdescription::HEIGHT_SIZE ."em;  '  maxlength='".huh_conservdescription::HEIGHT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::LIGHTRECOMMENDATIONS.">LIGHTRECOMMENDATIONS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservdescription::LIGHTRECOMMENDATIONS." id=".huh_conservdescription::LIGHTRECOMMENDATIONS." >".$model->getLightRecommendations()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::OBJLENGTH.">OBJLENGTH</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_conservdescription::OBJLENGTH." id=".huh_conservdescription::OBJLENGTH." value='".$model->getObjLength()."'  style=' width:".huh_conservdescription::OBJLENGTH_SIZE ."em;  '  maxlength='".huh_conservdescription::OBJLENGTH_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::OTHERRECOMMENDATIONS.">OTHERRECOMMENDATIONS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservdescription::OTHERRECOMMENDATIONS." id=".huh_conservdescription::OTHERRECOMMENDATIONS." >".$model->getOtherRecommendations()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::REMARKS.">REMARKS</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservdescription::REMARKS." id=".huh_conservdescription::REMARKS." >".$model->getRemarks()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::SHORTDESC.">SHORTDESC</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservdescription::SHORTDESC." id=".huh_conservdescription::SHORTDESC." >".$model->getShortDesc()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::SOURCE.">SOURCE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_conservdescription::SOURCE." id=".huh_conservdescription::SOURCE." >".$model->getSource()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::UNITS.">UNITS</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_conservdescription::UNITS." id=".huh_conservdescription::UNITS." value='".$model->getUnits()."'  style=' width:".huh_conservdescription::UNITS_SIZE ."em;  '  maxlength='".huh_conservdescription::UNITS_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::WIDTH.">WIDTH</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_conservdescription::WIDTH." id=".huh_conservdescription::WIDTH." value='".$model->getWidth()."'  style=' width:".huh_conservdescription::WIDTH_SIZE ."em;  '  maxlength='".huh_conservdescription::WIDTH_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservdescription::CREATEDBYAGENTID." id=".huh_conservdescription::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_conservdescription::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_conservdescription::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::PREPARATIONID.">PREPARATIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservdescription::PREPARATIONID." id=".huh_conservdescription::PREPARATIONID." value='".$model->getPreparationID()."'  style=' width:".huh_conservdescription::PREPARATIONID_SIZE ."em;  '  maxlength='".huh_conservdescription::PREPARATIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservdescription::MODIFIEDBYAGENTID." id=".huh_conservdescription::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_conservdescription::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_conservdescription::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_conservdescription::DIVISIONID.">DIVISIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_conservdescription::DIVISIONID." id=".huh_conservdescription::DIVISIONID." value='".$model->getDivisionID()."'  style=' width:".huh_conservdescription::DIVISIONID_SIZE ."em;  '  maxlength='".huh_conservdescription::DIVISIONID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_conservdescription">';
       $returnvalue .= '<input type=hidden name=ConservDescriptionID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_conservdescription">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>CONSERVDESCRIPTIONID<input type=text name=".huh_conservdescription::CONSERVDESCRIPTIONID." id=".huh_conservdescription::CONSERVDESCRIPTIONID." value='".$model->getConservDescriptionID()."'  size='".huh_conservdescription::CONSERVDESCRIPTIONID_SIZE ."'  maxlength='".huh_conservdescription::CONSERVDESCRIPTIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_conservdescription::TIMESTAMPCREATED." id=".huh_conservdescription::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_conservdescription::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_conservdescription::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_conservdescription::TIMESTAMPMODIFIED." id=".huh_conservdescription::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_conservdescription::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_conservdescription::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_conservdescription::VERSION." id=".huh_conservdescription::VERSION." value='".$model->getVersion()."'  size='".huh_conservdescription::VERSION_SIZE ."'  maxlength='".huh_conservdescription::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>BACKGROUNDINFO<input type=text name=".huh_conservdescription::BACKGROUNDINFO." id=".huh_conservdescription::BACKGROUNDINFO." value='".$model->getBackgroundInfo()."'  size='51'  maxlength='".huh_conservdescription::BACKGROUNDINFO_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COMPOSITION<input type=text name=".huh_conservdescription::COMPOSITION." id=".huh_conservdescription::COMPOSITION." value='".$model->getComposition()."'  size='51'  maxlength='".huh_conservdescription::COMPOSITION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DESCRIPTION<input type=text name=".huh_conservdescription::DESCRIPTION." id=".huh_conservdescription::DESCRIPTION." value='".$model->getDescription()."'  size='51'  maxlength='".huh_conservdescription::DESCRIPTION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISPLAYRECOMMENDATIONS<input type=text name=".huh_conservdescription::DISPLAYRECOMMENDATIONS." id=".huh_conservdescription::DISPLAYRECOMMENDATIONS." value='".$model->getDisplayRecommendations()."'  size='51'  maxlength='".huh_conservdescription::DISPLAYRECOMMENDATIONS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>HEIGHT<input type=text name=".huh_conservdescription::HEIGHT." id=".huh_conservdescription::HEIGHT." value='".$model->getHeight()."'  size='".huh_conservdescription::HEIGHT_SIZE ."'  maxlength='".huh_conservdescription::HEIGHT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LIGHTRECOMMENDATIONS<input type=text name=".huh_conservdescription::LIGHTRECOMMENDATIONS." id=".huh_conservdescription::LIGHTRECOMMENDATIONS." value='".$model->getLightRecommendations()."'  size='51'  maxlength='".huh_conservdescription::LIGHTRECOMMENDATIONS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>OBJLENGTH<input type=text name=".huh_conservdescription::OBJLENGTH." id=".huh_conservdescription::OBJLENGTH." value='".$model->getObjLength()."'  size='".huh_conservdescription::OBJLENGTH_SIZE ."'  maxlength='".huh_conservdescription::OBJLENGTH_SIZE ."' ></li>\n";
       $returnvalue .= "<li>OTHERRECOMMENDATIONS<input type=text name=".huh_conservdescription::OTHERRECOMMENDATIONS." id=".huh_conservdescription::OTHERRECOMMENDATIONS." value='".$model->getOtherRecommendations()."'  size='51'  maxlength='".huh_conservdescription::OTHERRECOMMENDATIONS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REMARKS<input type=text name=".huh_conservdescription::REMARKS." id=".huh_conservdescription::REMARKS." value='".$model->getRemarks()."'  size='51'  maxlength='".huh_conservdescription::REMARKS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SHORTDESC<input type=text name=".huh_conservdescription::SHORTDESC." id=".huh_conservdescription::SHORTDESC." value='".$model->getShortDesc()."'  size='51'  maxlength='".huh_conservdescription::SHORTDESC_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SOURCE<input type=text name=".huh_conservdescription::SOURCE." id=".huh_conservdescription::SOURCE." value='".$model->getSource()."'  size='51'  maxlength='".huh_conservdescription::SOURCE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>UNITS<input type=text name=".huh_conservdescription::UNITS." id=".huh_conservdescription::UNITS." value='".$model->getUnits()."'  size='".huh_conservdescription::UNITS_SIZE ."'  maxlength='".huh_conservdescription::UNITS_SIZE ."' ></li>\n";
       $returnvalue .= "<li>WIDTH<input type=text name=".huh_conservdescription::WIDTH." id=".huh_conservdescription::WIDTH." value='".$model->getWidth()."'  size='".huh_conservdescription::WIDTH_SIZE ."'  maxlength='".huh_conservdescription::WIDTH_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_conservdescription::CREATEDBYAGENTID." id=".huh_conservdescription::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_conservdescription::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_conservdescription::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>PREPARATIONID<input type=text name=".huh_conservdescription::PREPARATIONID." id=".huh_conservdescription::PREPARATIONID." value='".$model->getPreparationID()."'  size='".huh_conservdescription::PREPARATIONID_SIZE ."'  maxlength='".huh_conservdescription::PREPARATIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_conservdescription::MODIFIEDBYAGENTID." id=".huh_conservdescription::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_conservdescription::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_conservdescription::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DIVISIONID<input type=text name=".huh_conservdescription::DIVISIONID." id=".huh_conservdescription::DIVISIONID." value='".$model->getDivisionID()."'  size='".huh_conservdescription::DIVISIONID_SIZE ."'  maxlength='".huh_conservdescription::DIVISIONID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
