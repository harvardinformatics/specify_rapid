<?php
//==============================================================================
//===   discipline.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_discipline implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const USERGROUPSCOPEID_SIZE = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const DISCIPLINEID_SIZE    = 11; //INTEGER
   const NAME_SIZE            = 64; //64
   const REGNUMBER_SIZE       = 24; //24
   const TYPE_SIZE            = 64; //64
   const TAXONTREEDEFID_SIZE  = 11; //INTEGER
   const GEOGRAPHYTREEDEFID_SIZE = 11; //INTEGER
   const GEOLOGICTIMEPERIODTREEDEFID_SIZE = 11; //INTEGER
   const LITHOSTRATTREEDEFID_SIZE = 11; //INTEGER
   const DIVISIONID_SIZE      = 11; //INTEGER
   const DATATYPEID_SIZE      = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const USERGROUPSCOPEID  = 'UserGroupScopeId';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const DISCIPLINEID      = 'disciplineId';
   const NAME              = 'Name';
   const REGNUMBER         = 'RegNumber';
   const TYPE              = 'Type';
   const TAXONTREEDEFID    = 'TaxonTreeDefID';
   const GEOGRAPHYTREEDEFID = 'GeographyTreeDefID';
   const GEOLOGICTIMEPERIODTREEDEFID = 'GeologicTimePeriodTreeDefID';
   const LITHOSTRATTREEDEFID = 'LithoStratTreeDefID';
   const DIVISIONID        = 'DivisionID';
   const DATATYPEID        = 'DataTypeID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $UserGroupScopeId = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['UserGroupScopeId']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $disciplineId = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['disciplineId']), 0, 11);
  $Name = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Name']), 0, 64);
  $RegNumber = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['RegNumber']), 0, 24);
  $Type = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Type']), 0, 64);
  $TaxonTreeDefID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['TaxonTreeDefID']), 0, 11);
  $GeographyTreeDefID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['GeographyTreeDefID']), 0, 11);
  $GeologicTimePeriodTreeDefID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['GeologicTimePeriodTreeDefID']), 0, 11);
  $LithoStratTreeDefID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['LithoStratTreeDefID']), 0, 11);
  $DivisionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DivisionID']), 0, 11);
  $DataTypeID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['DataTypeID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $UserGroupScopeId; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $ModifiedByAgentID; // INTEGER 
   private $disciplineId; // INTEGER 
   private $Name; // VARCHAR(64) 
   private $RegNumber; // VARCHAR(24) 
   private $Type; // VARCHAR(64) 
   private $TaxonTreeDefID; // INTEGER 
   private $GeographyTreeDefID; // INTEGER 
   private $GeologicTimePeriodTreeDefID; // INTEGER 
   private $LithoStratTreeDefID; // INTEGER 
   private $DivisionID; // INTEGER 
   private $DataTypeID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' UserGroupScopeId, TimestampCreated, TimestampModified, Version, CreatedByAgentID, ModifiedByAgentID, disciplineId, Name, RegNumber, Type, TaxonTreeDefID, GeographyTreeDefID, GeologicTimePeriodTreeDefID, LithoStratTreeDefID, DivisionID, DataTypeID, ';
   const PKFIELDLIST = ' UserGroupScopeId, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'UserGroupScopeId'  ) ;
   private $allFieldsArray = array( 0 => 'UserGroupScopeId' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'CreatedByAgentID' , 5 => 'ModifiedByAgentID' , 6 => 'disciplineId' , 7 => 'Name' , 8 => 'RegNumber' , 9 => 'Type' , 10 => 'TaxonTreeDefID' , 11 => 'GeographyTreeDefID' , 12 => 'GeologicTimePeriodTreeDefID' , 13 => 'LithoStratTreeDefID' , 14 => 'DivisionID' , 15 => 'DataTypeID'  ) ;
   private $selectDistinctFieldsArray = array( 4 => 'CreatedByAgentID' , 5 => 'ModifiedByAgentID' , 7 => 'Name' , 10 => 'TaxonTreeDefID' , 11 => 'GeographyTreeDefID' , 12 => 'GeologicTimePeriodTreeDefID' , 13 => 'LithoStratTreeDefID' , 14 => 'DivisionID' , 15 => 'DataTypeID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_discipline(){
       $this->UserGroupScopeId = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->CreatedByAgentID = '';
       $this->ModifiedByAgentID = '';
       $this->disciplineId = '';
       $this->Name = '';
       $this->RegNumber = '';
       $this->Type = '';
       $this->TaxonTreeDefID = '';
       $this->GeographyTreeDefID = '';
       $this->GeologicTimePeriodTreeDefID = '';
       $this->LithoStratTreeDefID = '';
       $this->DivisionID = '';
       $this->DataTypeID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='UserGroupScopeId') { $returnvalue = $this->setUserGroupScopeId($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='disciplineId') { $returnvalue = $this->setdisciplineId($value); } 
             if ($fieldname=='Name') { $returnvalue = $this->setName($value); } 
             if ($fieldname=='RegNumber') { $returnvalue = $this->setRegNumber($value); } 
             if ($fieldname=='Type') { $returnvalue = $this->setType($value); } 
             if ($fieldname=='TaxonTreeDefID') { $returnvalue = $this->setTaxonTreeDefID($value); } 
             if ($fieldname=='GeographyTreeDefID') { $returnvalue = $this->setGeographyTreeDefID($value); } 
             if ($fieldname=='GeologicTimePeriodTreeDefID') { $returnvalue = $this->setGeologicTimePeriodTreeDefID($value); } 
             if ($fieldname=='LithoStratTreeDefID') { $returnvalue = $this->setLithoStratTreeDefID($value); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->setDivisionID($value); } 
             if ($fieldname=='DataTypeID') { $returnvalue = $this->setDataTypeID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='UserGroupScopeId') { $returnvalue = $this->getUserGroupScopeId(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='disciplineId') { $returnvalue = $this->getdisciplineId(); } 
             if ($fieldname=='Name') { $returnvalue = $this->getName(); } 
             if ($fieldname=='RegNumber') { $returnvalue = $this->getRegNumber(); } 
             if ($fieldname=='Type') { $returnvalue = $this->getType(); } 
             if ($fieldname=='TaxonTreeDefID') { $returnvalue = $this->getTaxonTreeDefID(); } 
             if ($fieldname=='GeographyTreeDefID') { $returnvalue = $this->getGeographyTreeDefID(); } 
             if ($fieldname=='GeologicTimePeriodTreeDefID') { $returnvalue = $this->getGeologicTimePeriodTreeDefID(); } 
             if ($fieldname=='LithoStratTreeDefID') { $returnvalue = $this->getLithoStratTreeDefID(); } 
             if ($fieldname=='DivisionID') { $returnvalue = $this->getDivisionID(); } 
             if ($fieldname=='DataTypeID') { $returnvalue = $this->getDataTypeID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*UserGroupScopeId*/
   public function getUserGroupScopeId() {
       if ($this->UserGroupScopeId==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->UserGroupScopeId));
       }
   }
   public function setUserGroupScopeId($UserGroupScopeId) {
       if (strlen(preg_replace('/[^0-9]/','',$UserGroupScopeId)) > huh_discipline::USERGROUPSCOPEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $UserGroupScopeId = trim($UserGroupScopeId);
       if (!ctype_digit(strval($UserGroupScopeId)) && trim(strval($UserGroupScopeId))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->UserGroupScopeId = $this->l_addslashes($UserGroupScopeId);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_discipline::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_discipline::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_discipline::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_discipline::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_discipline::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*disciplineId*/
   public function getdisciplineId() {
       if ($this->disciplineId==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->disciplineId));
       }
   }
   public function setdisciplineId($disciplineId) {
       if (strlen(preg_replace('/[^0-9]/','',$disciplineId)) > huh_discipline::DISCIPLINEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $disciplineId = trim($disciplineId);
       if (!ctype_digit(strval($disciplineId)) && trim(strval($disciplineId))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->disciplineId = $this->l_addslashes($disciplineId);
       $this->dirty = true;
   }
/*Name*/
   public function getName() {
       if ($this->Name==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Name));
       }
   }
   public function setName($Name) {
       if (strlen($Name) > huh_discipline::NAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Name = $this->l_addslashes($Name);
       $this->dirty = true;
   }
/*RegNumber*/
   public function getRegNumber() {
       if ($this->RegNumber==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->RegNumber));
       }
   }
   public function setRegNumber($RegNumber) {
       if (strlen($RegNumber) > huh_discipline::REGNUMBER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->RegNumber = $this->l_addslashes($RegNumber);
       $this->dirty = true;
   }
/*Type*/
   public function getType() {
       if ($this->Type==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Type));
       }
   }
   public function setType($Type) {
       if (strlen($Type) > huh_discipline::TYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Type = $this->l_addslashes($Type);
       $this->dirty = true;
   }
/*TaxonTreeDefID*/
   public function getTaxonTreeDefID() {
       if ($this->TaxonTreeDefID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TaxonTreeDefID));
       }
   }
   public function setTaxonTreeDefID($TaxonTreeDefID) {
       if (strlen(preg_replace('/[^0-9]/','',$TaxonTreeDefID)) > huh_discipline::TAXONTREEDEFID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $TaxonTreeDefID = trim($TaxonTreeDefID);
       if (!ctype_digit(strval($TaxonTreeDefID)) && trim(strval($TaxonTreeDefID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->TaxonTreeDefID = $this->l_addslashes($TaxonTreeDefID);
       $this->dirty = true;
   }
/*GeographyTreeDefID*/
   public function getGeographyTreeDefID() {
       if ($this->GeographyTreeDefID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeographyTreeDefID));
       }
   }
   public function setGeographyTreeDefID($GeographyTreeDefID) {
       if (strlen(preg_replace('/[^0-9]/','',$GeographyTreeDefID)) > huh_discipline::GEOGRAPHYTREEDEFID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $GeographyTreeDefID = trim($GeographyTreeDefID);
       if (!ctype_digit(strval($GeographyTreeDefID))) {
             throw new Exception("Value must be an integer");
       }
       $this->GeographyTreeDefID = $this->l_addslashes($GeographyTreeDefID);
       $this->dirty = true;
   }
/*GeologicTimePeriodTreeDefID*/
   public function getGeologicTimePeriodTreeDefID() {
       if ($this->GeologicTimePeriodTreeDefID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->GeologicTimePeriodTreeDefID));
       }
   }
   public function setGeologicTimePeriodTreeDefID($GeologicTimePeriodTreeDefID) {
       if (strlen(preg_replace('/[^0-9]/','',$GeologicTimePeriodTreeDefID)) > huh_discipline::GEOLOGICTIMEPERIODTREEDEFID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $GeologicTimePeriodTreeDefID = trim($GeologicTimePeriodTreeDefID);
       if (!ctype_digit(strval($GeologicTimePeriodTreeDefID))) {
             throw new Exception("Value must be an integer");
       }
       $this->GeologicTimePeriodTreeDefID = $this->l_addslashes($GeologicTimePeriodTreeDefID);
       $this->dirty = true;
   }
/*LithoStratTreeDefID*/
   public function getLithoStratTreeDefID() {
       if ($this->LithoStratTreeDefID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->LithoStratTreeDefID));
       }
   }
   public function setLithoStratTreeDefID($LithoStratTreeDefID) {
       if (strlen(preg_replace('/[^0-9]/','',$LithoStratTreeDefID)) > huh_discipline::LITHOSTRATTREEDEFID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $LithoStratTreeDefID = trim($LithoStratTreeDefID);
       if (!ctype_digit(strval($LithoStratTreeDefID)) && trim(strval($LithoStratTreeDefID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->LithoStratTreeDefID = $this->l_addslashes($LithoStratTreeDefID);
       $this->dirty = true;
   }
/*DivisionID*/
   public function getDivisionID() {
       if ($this->DivisionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DivisionID));
       }
   }
   public function setDivisionID($DivisionID) {
       if (strlen(preg_replace('/[^0-9]/','',$DivisionID)) > huh_discipline::DIVISIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DivisionID = trim($DivisionID);
       if (!ctype_digit(strval($DivisionID))) {
             throw new Exception("Value must be an integer");
       }
       $this->DivisionID = $this->l_addslashes($DivisionID);
       $this->dirty = true;
   }
/*DataTypeID*/
   public function getDataTypeID() {
       if ($this->DataTypeID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->DataTypeID));
       }
   }
   public function setDataTypeID($DataTypeID) {
       if (strlen(preg_replace('/[^0-9]/','',$DataTypeID)) > huh_discipline::DATATYPEID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $DataTypeID = trim($DataTypeID);
       if (!ctype_digit(strval($DataTypeID))) {
             throw new Exception("Value must be an integer");
       }
       $this->DataTypeID = $this->l_addslashes($DataTypeID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getUserGroupScopeId();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['UserGroupScopeId'] = $this->getUserGroupScopeId();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_UserGroupScopeIdMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_disciplineIdMYSQLI_TYPE = 'i';
  const C_NameMYSQLI_TYPE = 's';
  const C_RegNumberMYSQLI_TYPE = 's';
  const C_TypeMYSQLI_TYPE = 's';
  const C_TaxonTreeDefIDMYSQLI_TYPE = 'i';
  const C_GeographyTreeDefIDMYSQLI_TYPE = 'i';
  const C_GeologicTimePeriodTreeDefIDMYSQLI_TYPE = 'i';
  const C_LithoStratTreeDefIDMYSQLI_TYPE = 'i';
  const C_DivisionIDMYSQLI_TYPE = 'i';
  const C_DataTypeIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='UserGroupScopeId') { $retval = self::C_UserGroupScopeIdMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='disciplineId') { $retval = self::C_disciplineIdMYSQLI_TYPE; }
      if ($aFieldname=='Name') { $retval = self::C_NameMYSQLI_TYPE; }
      if ($aFieldname=='RegNumber') { $retval = self::C_RegNumberMYSQLI_TYPE; }
      if ($aFieldname=='Type') { $retval = self::C_TypeMYSQLI_TYPE; }
      if ($aFieldname=='TaxonTreeDefID') { $retval = self::C_TaxonTreeDefIDMYSQLI_TYPE; }
      if ($aFieldname=='GeographyTreeDefID') { $retval = self::C_GeographyTreeDefIDMYSQLI_TYPE; }
      if ($aFieldname=='GeologicTimePeriodTreeDefID') { $retval = self::C_GeologicTimePeriodTreeDefIDMYSQLI_TYPE; }
      if ($aFieldname=='LithoStratTreeDefID') { $retval = self::C_LithoStratTreeDefIDMYSQLI_TYPE; }
      if ($aFieldname=='DivisionID') { $retval = self::C_DivisionIDMYSQLI_TYPE; }
      if ($aFieldname=='DataTypeID') { $retval = self::C_DataTypeIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setUserGroupScopeId($pk[UserGroupScopeId]);
             } else { ;
                 $this->setUserGroupScopeId($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->UserGroupScopeId != NULL) {
           $sql = 'SELECT UserGroupScopeId, TimestampCreated, TimestampModified, Version, CreatedByAgentID, ModifiedByAgentID, disciplineId, Name, RegNumber, Type, TaxonTreeDefID, GeographyTreeDefID, GeologicTimePeriodTreeDefID, LithoStratTreeDefID, DivisionID, DataTypeID FROM discipline WHERE UserGroupScopeId = '.$this->UserGroupScopeId ;

           $preparesql = 'SELECT UserGroupScopeId, TimestampCreated, TimestampModified, Version, CreatedByAgentID, ModifiedByAgentID, disciplineId, Name, RegNumber, Type, TaxonTreeDefID, GeographyTreeDefID, GeologicTimePeriodTreeDefID, LithoStratTreeDefID, DivisionID, DataTypeID FROM discipline WHERE UserGroupScopeId = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->UserGroupScopeId);
              $statement->execute();
              $statement->bind_result($this->UserGroupScopeId, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->disciplineId, $this->Name, $this->RegNumber, $this->Type, $this->TaxonTreeDefID, $this->GeographyTreeDefID, $this->GeologicTimePeriodTreeDefID, $this->LithoStratTreeDefID, $this->DivisionID, $this->DataTypeID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->UserGroupScopeId!= NULL) {
            $sql  = 'UPDATE  discipline SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", CreatedByAgentID = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", disciplineId = ? ";
            $sql .=  ", Name = ? ";
            $sql .=  ", RegNumber = ? ";
            $sql .=  ", Type = ? ";
            $sql .=  ", TaxonTreeDefID = ? ";
            $sql .=  ", GeographyTreeDefID = ? ";
            $sql .=  ", GeologicTimePeriodTreeDefID = ? ";
            $sql .=  ", LithoStratTreeDefID = ? ";
            $sql .=  ", DivisionID = ? ";
            $sql .=  ", DataTypeID = ? ";

            $sql .= "  WHERE UserGroupScopeId = ? ";
        } else {
            $sql  = 'INSERT INTO discipline ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( UserGroupScopeId ,  TimestampCreated ,  TimestampModified ,  Version ,  CreatedByAgentID ,  ModifiedByAgentID ,  disciplineId ,  Name ,  RegNumber ,  Type ,  TaxonTreeDefID ,  GeographyTreeDefID ,  GeologicTimePeriodTreeDefID ,  LithoStratTreeDefID ,  DivisionID ,  DataTypeID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->UserGroupScopeId!= NULL ) {
              $statement->bind_param("issiiiisssiiiiiii", $this->UserGroupScopeId , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->disciplineId , $this->Name , $this->RegNumber , $this->Type , $this->TaxonTreeDefID , $this->GeographyTreeDefID , $this->GeologicTimePeriodTreeDefID , $this->LithoStratTreeDefID , $this->DivisionID , $this->DataTypeID , $this->UserGroupScopeId );
           } else { 
              $statement->bind_param("issiiiisssiiiiii", $this->UserGroupScopeId , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->CreatedByAgentID , $this->ModifiedByAgentID , $this->disciplineId , $this->Name , $this->RegNumber , $this->Type , $this->TaxonTreeDefID , $this->GeographyTreeDefID , $this->GeologicTimePeriodTreeDefID , $this->LithoStratTreeDefID , $this->DivisionID , $this->DataTypeID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->UserGroupScopeId != NULL) {
           $sql = 'SELECT UserGroupScopeId, TimestampCreated, TimestampModified, Version, CreatedByAgentID, ModifiedByAgentID, disciplineId, Name, RegNumber, Type, TaxonTreeDefID, GeographyTreeDefID, GeologicTimePeriodTreeDefID, LithoStratTreeDefID, DivisionID, DataTypeID FROM discipline WHERE UserGroupScopeId = "'.$this->UserGroupScopeId.'"  ' ;

           $preparedsql = 'SELECT  FROM discipline WHERE  and UserGroupScopeId = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("issiiiisssiiiiii", $this->UserGroupScopeId, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->disciplineId, $this->Name, $this->RegNumber, $this->Type, $this->TaxonTreeDefID, $this->GeographyTreeDefID, $this->GeologicTimePeriodTreeDefID, $this->LithoStratTreeDefID, $this->DivisionID, $this->DataTypeID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM discipline WHERE  and UserGroupScopeId = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("issiiiisssiiiiii", $this->UserGroupScopeId, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->CreatedByAgentID, $this->ModifiedByAgentID, $this->disciplineId, $this->Name, $this->RegNumber, $this->Type, $this->TaxonTreeDefID, $this->GeographyTreeDefID, $this->GeologicTimePeriodTreeDefID, $this->LithoStratTreeDefID, $this->DivisionID, $this->DataTypeID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->UserGroupScopeId = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM discipline';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT UserGroupScopeId FROM discipline $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_discipline();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFromaccessionpreparation() { 
      // ForeignKey in: accessionpreparation
      $t = new accessionpreparation();
  } 
  public function loadLinkedFromagent_discipline() { 
      // ForeignKey in: agent_discipline
      $t = new agent_discipline();
  } 
  public function loadLinkedFromattributedef() { 
      // ForeignKey in: attributedef
      $t = new attributedef();
  } 
  public function loadLinkedFromautonumsch_dsp() { 
      // ForeignKey in: autonumsch_dsp
      $t = new autonumsch_dsp();
  } 
  public function loadLinkedFromcollectingevent() { 
      // ForeignKey in: collectingevent
      $t = new collectingevent();
  } 
  public function loadLinkedFromcollectingtrip() { 
      // ForeignKey in: collectingtrip
      $t = new collectingtrip();
  } 
  public function loadLinkedFromcollection() { 
      // ForeignKey in: collection
      $t = new collection();
  } 
  public function loadLinkedFromexchangeoutpreparation() { 
      // ForeignKey in: exchangeoutpreparation
      $t = new exchangeoutpreparation();
  } 
  public function loadLinkedFromfieldnotebook() { 
      // ForeignKey in: fieldnotebook
      $t = new fieldnotebook();
  } 
  public function loadLinkedFromfieldnotebookpage() { 
      // ForeignKey in: fieldnotebookpage
      $t = new fieldnotebookpage();
  } 
  public function loadLinkedFromfieldnotebookpageset() { 
      // ForeignKey in: fieldnotebookpageset
      $t = new fieldnotebookpageset();
  } 
  public function loadLinkedFromgift() { 
      // ForeignKey in: gift
      $t = new gift();
  } 
  public function loadLinkedFromgiftagent() { 
      // ForeignKey in: giftagent
      $t = new giftagent();
  } 
  public function loadLinkedFromgiftpreparation() { 
      // ForeignKey in: giftpreparation
      $t = new giftpreparation();
  } 
  public function loadLinkedFromloan() { 
      // ForeignKey in: loan
      $t = new loan();
  } 
  public function loadLinkedFromloanagent() { 
      // ForeignKey in: loanagent
      $t = new loanagent();
  } 
  public function loadLinkedFromloanpreparation() { 
      // ForeignKey in: loanpreparation
      $t = new loanpreparation();
  } 
  public function loadLinkedFromloanreturnpreparation() { 
      // ForeignKey in: loanreturnpreparation
      $t = new loanreturnpreparation();
  } 
  public function loadLinkedFromlocality() { 
      // ForeignKey in: locality
      $t = new locality();
  } 
  public function loadLinkedFromlocalitycitation() { 
      // ForeignKey in: localitycitation
      $t = new localitycitation();
  } 
  public function loadLinkedFromlocalitynamealias() { 
      // ForeignKey in: localitynamealias
      $t = new localitynamealias();
  } 
  public function loadLinkedFromshipment() { 
      // ForeignKey in: shipment
      $t = new shipment();
  } 
  public function loadLinkedFromspappresourcedir() { 
      // ForeignKey in: spappresourcedir
      $t = new spappresourcedir();
  } 
  public function loadLinkedFromspexportschema() { 
      // ForeignKey in: spexportschema
      $t = new spexportschema();
  } 
  public function loadLinkedFromsplocalecontainer() { 
      // ForeignKey in: splocalecontainer
      $t = new splocalecontainer();
  } 
  public function loadLinkedFromsptasksemaphore() { 
      // ForeignKey in: sptasksemaphore
      $t = new sptasksemaphore();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: TaxonTreeDefID
      $t = new taxontreedef();
      $t->load(getTaxonTreeDefID());
      $returnvalue[TaxonTreeDefID] = $t;
       // fk: GeographyTreeDefID
      $t = new geographytreedef();
      $t->load(getGeographyTreeDefID());
      $returnvalue[GeographyTreeDefID] = $t;
       // fk: GeologicTimePeriodTreeDefID
      $t = new geologictimeperiodtreedef();
      $t->load(getGeologicTimePeriodTreeDefID());
      $returnvalue[GeologicTimePeriodTreeDefID] = $t;
       // fk: LithoStratTreeDefID
      $t = new lithostrattreedef();
      $t->load(getLithoStratTreeDefID());
      $returnvalue[LithoStratTreeDefID] = $t;
       // fk: DivisionID
      $t = new division();
      $t->load(getDivisionID());
      $returnvalue[DivisionID] = $t;
       // fk: DataTypeID
      $t = new datatype();
      $t->load(getDataTypeID());
      $returnvalue[DataTypeID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT UserGroupScopeId, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(CreatedByAgentID,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(disciplineId,'') || ' ' || IFNULL(Name,'') || ' ' || IFNULL(RegNumber,'') || ' ' || IFNULL(Type,'') || ' ' || IFNULL(TaxonTreeDefID,'') || ' ' || IFNULL(GeographyTreeDefID,'') || ' ' || IFNULL(GeologicTimePeriodTreeDefID,'') || ' ' || IFNULL(LithoStratTreeDefID,'') || ' ' || IFNULL(DivisionID,'') || ' ' || IFNULL(DataTypeID,'')) FROM discipline order by CreatedByAgentID, ModifiedByAgentID, Name, TaxonTreeDefID, GeographyTreeDefID, GeologicTimePeriodTreeDefID, LithoStratTreeDefID, DivisionID, DataTypeID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM discipline order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM discipline WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM discipline WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_discipline();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM discipline WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM discipline WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_discipline();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM discipline WHERE Name $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM discipline WHERE Name $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_discipline();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByTaxonTreeDefID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM discipline WHERE TaxonTreeDefID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM discipline WHERE TaxonTreeDefID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_discipline();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGeographyTreeDefID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM discipline WHERE GeographyTreeDefID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM discipline WHERE GeographyTreeDefID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_discipline();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByGeologicTimePeriodTreeDefID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM discipline WHERE GeologicTimePeriodTreeDefID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM discipline WHERE GeologicTimePeriodTreeDefID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_discipline();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByLithoStratTreeDefID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM discipline WHERE LithoStratTreeDefID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM discipline WHERE LithoStratTreeDefID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_discipline();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDivisionID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM discipline WHERE DivisionID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM discipline WHERE DivisionID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_discipline();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByDataTypeID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT UserGroupScopeId FROM discipline WHERE DataTypeID $operator '$searchTerm'";
        $preparedsql = "SELECT UserGroupScopeId FROM discipline WHERE DataTypeID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_discipline();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM discipline group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM discipline group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Name ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Name FROM discipline group by Name order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Name=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctTaxonTreeDefID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' TaxonTreeDefID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, TaxonTreeDefID FROM discipline group by TaxonTreeDefID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&TaxonTreeDefID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGeographyTreeDefID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GeographyTreeDefID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GeographyTreeDefID FROM discipline group by GeographyTreeDefID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GeographyTreeDefID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctGeologicTimePeriodTreeDefID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' GeologicTimePeriodTreeDefID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, GeologicTimePeriodTreeDefID FROM discipline group by GeologicTimePeriodTreeDefID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&GeologicTimePeriodTreeDefID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctLithoStratTreeDefID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' LithoStratTreeDefID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, LithoStratTreeDefID FROM discipline group by LithoStratTreeDefID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&LithoStratTreeDefID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDivisionID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DivisionID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DivisionID FROM discipline group by DivisionID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DivisionID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctDataTypeID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' DataTypeID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, DataTypeID FROM discipline group by DataTypeID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&DataTypeID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'Name':
             $returnvalue = $this->selectDistinctName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'TaxonTreeDefID':
             $returnvalue = $this->selectDistinctTaxonTreeDefID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GeographyTreeDefID':
             $returnvalue = $this->selectDistinctGeographyTreeDefID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'GeologicTimePeriodTreeDefID':
             $returnvalue = $this->selectDistinctGeologicTimePeriodTreeDefID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'LithoStratTreeDefID':
             $returnvalue = $this->selectDistinctLithoStratTreeDefID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DivisionID':
             $returnvalue = $this->selectDistinctDivisionID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'DataTypeID':
             $returnvalue = $this->selectDistinctDataTypeID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the discipline.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_disciplineView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_discipline <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_discipline::USERGROUPSCOPEID.": ".$model->getUserGroupScopeId()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::DISCIPLINEID.": ".$model->getdisciplineId()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::NAME.": ".$model->getName()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::REGNUMBER.": ".$model->getRegNumber()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::TYPE.": ".$model->getType()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::TAXONTREEDEFID.": ".$model->getTaxonTreeDefID()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::GEOGRAPHYTREEDEFID.": ".$model->getGeographyTreeDefID()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::GEOLOGICTIMEPERIODTREEDEFID.": ".$model->getGeologicTimePeriodTreeDefID()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::LITHOSTRATTREEDEFID.": ".$model->getLithoStratTreeDefID()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::DIVISIONID.": ".$model->getDivisionID()."</li>\n";
       $returnvalue .= "<li>".huh_discipline::DATATYPEID.": ".$model->getDataTypeID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>taxontreedef</li>";
           $t_taxontreedef = new huh_taxontreedef();
           $t_taxontreedefView = new huh_taxontreedefView();
           $t_taxontreedefView->setModel($t_taxontreedef);
           if ($model->getTaxonTreeDefID() != '') { 
               $t_taxontreedef->load($model->getTaxonTreeDefID());
               $returnvalue .= $t_taxontreedefView->getDetailsView(false);
           }
           $returnvalue .= "<li>geographytreedef</li>";
           $t_geographytreedef = new huh_geographytreedef();
           $t_geographytreedefView = new huh_geographytreedefView();
           $t_geographytreedefView->setModel($t_geographytreedef);
           if ($model->getGeographyTreeDefID() != '') { 
               $t_geographytreedef->load($model->getGeographyTreeDefID());
               $returnvalue .= $t_geographytreedefView->getDetailsView(false);
           }
           $returnvalue .= "<li>geologictimeperiodtreedef</li>";
           $t_geologictimeperiodtreedef = new huh_geologictimeperiodtreedef();
           $t_geologictimeperiodtreedefView = new huh_geologictimeperiodtreedefView();
           $t_geologictimeperiodtreedefView->setModel($t_geologictimeperiodtreedef);
           if ($model->getGeologicTimePeriodTreeDefID() != '') { 
               $t_geologictimeperiodtreedef->load($model->getGeologicTimePeriodTreeDefID());
               $returnvalue .= $t_geologictimeperiodtreedefView->getDetailsView(false);
           }
           $returnvalue .= "<li>lithostrattreedef</li>";
           $t_lithostrattreedef = new huh_lithostrattreedef();
           $t_lithostrattreedefView = new huh_lithostrattreedefView();
           $t_lithostrattreedefView->setModel($t_lithostrattreedef);
           if ($model->getLithoStratTreeDefID() != '') { 
               $t_lithostrattreedef->load($model->getLithoStratTreeDefID());
               $returnvalue .= $t_lithostrattreedefView->getDetailsView(false);
           }
           $returnvalue .= "<li>division</li>";
           $t_division = new huh_division();
           $t_divisionView = new huh_divisionView();
           $t_divisionView->setModel($t_division);
           if ($model->getDivisionID() != '') { 
               $t_division->load($model->getDivisionID());
               $returnvalue .= $t_divisionView->getDetailsView(false);
           }
           $returnvalue .= "<li>datatype</li>";
           $t_datatype = new huh_datatype();
           $t_datatypeView = new huh_datatypeView();
           $t_datatypeView->setModel($t_datatype);
           if ($model->getDataTypeID() != '') { 
               $t_datatype->load($model->getDataTypeID());
               $returnvalue .= $t_datatypeView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_discipline::USERGROUPSCOPEID.': "'.$model->getUserGroupScopeId().'",';
       $returnvalue .= '"'.huh_discipline::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_discipline::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_discipline::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_discipline::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'",';
       $returnvalue .= '"'.huh_discipline::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_discipline::DISCIPLINEID.': "'.$model->getdisciplineId().'",';
       $returnvalue .= '"'.huh_discipline::NAME.': "'.$model->getName().'",';
       $returnvalue .= '"'.huh_discipline::REGNUMBER.': "'.$model->getRegNumber().'",';
       $returnvalue .= '"'.huh_discipline::TYPE.': "'.$model->getType().'",';
       $returnvalue .= '"'.huh_discipline::TAXONTREEDEFID.': "'.$model->getTaxonTreeDefID().'",';
       $returnvalue .= '"'.huh_discipline::GEOGRAPHYTREEDEFID.': "'.$model->getGeographyTreeDefID().'",';
       $returnvalue .= '"'.huh_discipline::GEOLOGICTIMEPERIODTREEDEFID.': "'.$model->getGeologicTimePeriodTreeDefID().'",';
       $returnvalue .= '"'.huh_discipline::LITHOSTRATTREEDEFID.': "'.$model->getLithoStratTreeDefID().'",';
       $returnvalue .= '"'.huh_discipline::DIVISIONID.': "'.$model->getDivisionID().'",';
       $returnvalue .= '"'.huh_discipline::DATATYPEID.': "'.$model->getDataTypeID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getUserGroupScopeId()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getdisciplineId()."</td>\n";
       $returnvalue .= "<td>".$model->getName()."</td>\n";
       $returnvalue .= "<td>".$model->getRegNumber()."</td>\n";
       $returnvalue .= "<td>".$model->getType()."</td>\n";
       $returnvalue .= "<td>".$model->getTaxonTreeDefID()."</td>\n";
       $returnvalue .= "<td>".$model->getGeographyTreeDefID()."</td>\n";
       $returnvalue .= "<td>".$model->getGeologicTimePeriodTreeDefID()."</td>\n";
       $returnvalue .= "<td>".$model->getLithoStratTreeDefID()."</td>\n";
       $returnvalue .= "<td>".$model->getDivisionID()."</td>\n";
       $returnvalue .= "<td>".$model->getDataTypeID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_discipline::USERGROUPSCOPEID."</th>\n";
       $returnvalue .= "<th>".huh_discipline::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_discipline::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_discipline::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_discipline::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_discipline::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_discipline::DISCIPLINEID."</th>\n";
       $returnvalue .= "<th>".huh_discipline::NAME."</th>\n";
       $returnvalue .= "<th>".huh_discipline::REGNUMBER."</th>\n";
       $returnvalue .= "<th>".huh_discipline::TYPE."</th>\n";
       $returnvalue .= "<th>".huh_discipline::TAXONTREEDEFID."</th>\n";
       $returnvalue .= "<th>".huh_discipline::GEOGRAPHYTREEDEFID."</th>\n";
       $returnvalue .= "<th>".huh_discipline::GEOLOGICTIMEPERIODTREEDEFID."</th>\n";
       $returnvalue .= "<th>".huh_discipline::LITHOSTRATTREEDEFID."</th>\n";
       $returnvalue .= "<th>".huh_discipline::DIVISIONID."</th>\n";
       $returnvalue .= "<th>".huh_discipline::DATATYPEID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_discipline">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new UserGroupScopeId"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_discipline::USERGROUPSCOPEID.">USERGROUPSCOPEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_discipline::USERGROUPSCOPEID." id=".huh_discipline::USERGROUPSCOPEID." value='".$model->getUserGroupScopeId()."'  style=' width:".huh_discipline::USERGROUPSCOPEID_SIZE ."em;  '  maxlength='".huh_discipline::USERGROUPSCOPEID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_discipline::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_discipline::TIMESTAMPCREATED." id=".huh_discipline::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_discipline::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_discipline::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_discipline::TIMESTAMPMODIFIED." id=".huh_discipline::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_discipline::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_discipline::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_discipline::VERSION." id=".huh_discipline::VERSION." value='".$model->getVersion()."'  style=' width:".huh_discipline::VERSION_SIZE ."em;  '  maxlength='".huh_discipline::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_discipline::CREATEDBYAGENTID." id=".huh_discipline::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_discipline::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_discipline::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_discipline::MODIFIEDBYAGENTID." id=".huh_discipline::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_discipline::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_discipline::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::DISCIPLINEID.">DISCIPLINEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_discipline::DISCIPLINEID." id=".huh_discipline::DISCIPLINEID." value='".$model->getdisciplineId()."'  style=' width:".huh_discipline::DISCIPLINEID_SIZE ."em;  '  maxlength='".huh_discipline::DISCIPLINEID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::NAME.">NAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_discipline::NAME." id=".huh_discipline::NAME." >".$model->getName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::REGNUMBER.">REGNUMBER</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_discipline::REGNUMBER." id=".huh_discipline::REGNUMBER." value='".$model->getRegNumber()."'  style=' width:".huh_discipline::REGNUMBER_SIZE ."em;  '  maxlength='".huh_discipline::REGNUMBER_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::TYPE.">TYPE</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_discipline::TYPE." id=".huh_discipline::TYPE." >".$model->getType()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::TAXONTREEDEFID.">TAXONTREEDEFID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_discipline::TAXONTREEDEFID." id=".huh_discipline::TAXONTREEDEFID." value='".$model->getTaxonTreeDefID()."'  style=' width:".huh_discipline::TAXONTREEDEFID_SIZE ."em;  '  maxlength='".huh_discipline::TAXONTREEDEFID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::GEOGRAPHYTREEDEFID.">GEOGRAPHYTREEDEFID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_discipline::GEOGRAPHYTREEDEFID." id=".huh_discipline::GEOGRAPHYTREEDEFID." value='".$model->getGeographyTreeDefID()."'  style=' width:".huh_discipline::GEOGRAPHYTREEDEFID_SIZE ."em;  '  maxlength='".huh_discipline::GEOGRAPHYTREEDEFID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::GEOLOGICTIMEPERIODTREEDEFID.">GEOLOGICTIMEPERIODTREEDEFID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_discipline::GEOLOGICTIMEPERIODTREEDEFID." id=".huh_discipline::GEOLOGICTIMEPERIODTREEDEFID." value='".$model->getGeologicTimePeriodTreeDefID()."'  style=' width:".huh_discipline::GEOLOGICTIMEPERIODTREEDEFID_SIZE ."em;  '  maxlength='".huh_discipline::GEOLOGICTIMEPERIODTREEDEFID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::LITHOSTRATTREEDEFID.">LITHOSTRATTREEDEFID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_discipline::LITHOSTRATTREEDEFID." id=".huh_discipline::LITHOSTRATTREEDEFID." value='".$model->getLithoStratTreeDefID()."'  style=' width:".huh_discipline::LITHOSTRATTREEDEFID_SIZE ."em;  '  maxlength='".huh_discipline::LITHOSTRATTREEDEFID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::DIVISIONID.">DIVISIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_discipline::DIVISIONID." id=".huh_discipline::DIVISIONID." value='".$model->getDivisionID()."'  style=' width:".huh_discipline::DIVISIONID_SIZE ."em;  '  maxlength='".huh_discipline::DIVISIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_discipline::DATATYPEID.">DATATYPEID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_discipline::DATATYPEID." id=".huh_discipline::DATATYPEID." value='".$model->getDataTypeID()."'  style=' width:".huh_discipline::DATATYPEID_SIZE ."em;  '  maxlength='".huh_discipline::DATATYPEID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_discipline">';
       $returnvalue .= '<input type=hidden name=UserGroupScopeId id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_discipline">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>USERGROUPSCOPEID<input type=text name=".huh_discipline::USERGROUPSCOPEID." id=".huh_discipline::USERGROUPSCOPEID." value='".$model->getUserGroupScopeId()."'  size='".huh_discipline::USERGROUPSCOPEID_SIZE ."'  maxlength='".huh_discipline::USERGROUPSCOPEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_discipline::TIMESTAMPCREATED." id=".huh_discipline::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_discipline::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_discipline::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_discipline::TIMESTAMPMODIFIED." id=".huh_discipline::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_discipline::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_discipline::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_discipline::VERSION." id=".huh_discipline::VERSION." value='".$model->getVersion()."'  size='".huh_discipline::VERSION_SIZE ."'  maxlength='".huh_discipline::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_discipline::CREATEDBYAGENTID." id=".huh_discipline::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_discipline::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_discipline::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_discipline::MODIFIEDBYAGENTID." id=".huh_discipline::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_discipline::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_discipline::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DISCIPLINEID<input type=text name=".huh_discipline::DISCIPLINEID." id=".huh_discipline::DISCIPLINEID." value='".$model->getdisciplineId()."'  size='".huh_discipline::DISCIPLINEID_SIZE ."'  maxlength='".huh_discipline::DISCIPLINEID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NAME<input type=text name=".huh_discipline::NAME." id=".huh_discipline::NAME." value='".$model->getName()."'  size='51'  maxlength='".huh_discipline::NAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>REGNUMBER<input type=text name=".huh_discipline::REGNUMBER." id=".huh_discipline::REGNUMBER." value='".$model->getRegNumber()."'  size='".huh_discipline::REGNUMBER_SIZE ."'  maxlength='".huh_discipline::REGNUMBER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TYPE<input type=text name=".huh_discipline::TYPE." id=".huh_discipline::TYPE." value='".$model->getType()."'  size='51'  maxlength='".huh_discipline::TYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TAXONTREEDEFID<input type=text name=".huh_discipline::TAXONTREEDEFID." id=".huh_discipline::TAXONTREEDEFID." value='".$model->getTaxonTreeDefID()."'  size='".huh_discipline::TAXONTREEDEFID_SIZE ."'  maxlength='".huh_discipline::TAXONTREEDEFID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOGRAPHYTREEDEFID<input type=text name=".huh_discipline::GEOGRAPHYTREEDEFID." id=".huh_discipline::GEOGRAPHYTREEDEFID." value='".$model->getGeographyTreeDefID()."'  size='".huh_discipline::GEOGRAPHYTREEDEFID_SIZE ."'  maxlength='".huh_discipline::GEOGRAPHYTREEDEFID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>GEOLOGICTIMEPERIODTREEDEFID<input type=text name=".huh_discipline::GEOLOGICTIMEPERIODTREEDEFID." id=".huh_discipline::GEOLOGICTIMEPERIODTREEDEFID." value='".$model->getGeologicTimePeriodTreeDefID()."'  size='".huh_discipline::GEOLOGICTIMEPERIODTREEDEFID_SIZE ."'  maxlength='".huh_discipline::GEOLOGICTIMEPERIODTREEDEFID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>LITHOSTRATTREEDEFID<input type=text name=".huh_discipline::LITHOSTRATTREEDEFID." id=".huh_discipline::LITHOSTRATTREEDEFID." value='".$model->getLithoStratTreeDefID()."'  size='".huh_discipline::LITHOSTRATTREEDEFID_SIZE ."'  maxlength='".huh_discipline::LITHOSTRATTREEDEFID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DIVISIONID<input type=text name=".huh_discipline::DIVISIONID." id=".huh_discipline::DIVISIONID." value='".$model->getDivisionID()."'  size='".huh_discipline::DIVISIONID_SIZE ."'  maxlength='".huh_discipline::DIVISIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>DATATYPEID<input type=text name=".huh_discipline::DATATYPEID." id=".huh_discipline::DATATYPEID." value='".$model->getDataTypeID()."'  size='".huh_discipline::DATATYPEID_SIZE ."'  maxlength='".huh_discipline::DATATYPEID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
