<?php 
// *******  Warning: This file will be overwritten by druid if PHP code is regenerated. *******
?>
<?php 
// test/druid_test_classes.php
// Autogenerated by Druid from MySQL db Build:6
//
// Run unit tests on MySQL db class files 
// using the simpletest unit testing framework for PHP.

//	Load class files *********** 
require_once("../druid_classes.php");
//	Test cases ****************** 

// test table level classes
class testOf_huh_HUH_ORCHIDS_ETHANOL extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getid());
    } 
    function testKeys() { 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setid('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['id'], '0');
    } 
    function testDirtyid() { 
       // FieldType: INTEGER
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setid('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setid('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setid('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtygenus() { 
       // FieldType: VARCHAR(30)
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setgenus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setgenus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setgenus('999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyepithet() { 
       // FieldType: YEAR
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setepithet('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setepithet('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setepithet('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyauthorship() { 
       // FieldType: YEAR
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setauthorship('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setauthorship('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setauthorship('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtycollector() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setcollector('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setcollector('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setcollector('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtycollector_number() { 
       // FieldType: VARCHAR(30)
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setcollector_number('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setcollector_number('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setcollector_number('999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyjar_number() { 
       // FieldType: VARCHAR(30)
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setjar_number('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setjar_number('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setjar_number('999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtynotes() { 
       // FieldType: VARCHAR(25)
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setnotes('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setnotes('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->setnotes('9999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtytemp() { 
       // FieldType: VARCHAR(1)
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       $this->assertFalse($t->isDirty());
       try { 
          $t->settemp('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->settemp('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_HUH_ORCHIDS_ETHANOL();
       try { 
          $t->settemp('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_IMAGE_BATCH extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_IMAGE_BATCH();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getID());
    } 
    function testKeys() { 
       $t = new  huh_IMAGE_BATCH();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ID'], '0');
    } 
    function testDirtyID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_BATCH();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_BATCH();
       try { 
          $t->setID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_BATCH();
       try { 
          $t->setID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLAB_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_BATCH();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLAB_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_BATCH();
       try { 
          $t->setLAB_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_BATCH();
       try { 
          $t->setLAB_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPRODUCTION_DATE() { 
       // FieldType: DATE
       $t = new  huh_IMAGE_BATCH();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPRODUCTION_DATE('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_BATCH();
       try { 
          $t->setPRODUCTION_DATE('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_BATCH();
       try { 
          $t->setPRODUCTION_DATE('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBATCH_NAME() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_IMAGE_BATCH();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBATCH_NAME('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_BATCH();
       try { 
          $t->setBATCH_NAME('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_BATCH();
       try { 
          $t->setBATCH_NAME('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyREMARKS() { 
       // FieldType: VARCHAR(300)
       $t = new  huh_IMAGE_BATCH();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setREMARKS('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_BATCH();
       try { 
          $t->setREMARKS('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_BATCH();
       try { 
          $t->setREMARKS('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPROJECT() { 
       // FieldType: VARCHAR(48)
       $t = new  huh_IMAGE_BATCH();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPROJECT('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_BATCH();
       try { 
          $t->setPROJECT('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_BATCH();
       try { 
          $t->setPROJECT('999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_IMAGE_LAB extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_IMAGE_LAB();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getID());
    } 
    function testKeys() { 
       $t = new  huh_IMAGE_LAB();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ID'], '0');
    } 
    function testDirtyID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_LAB();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_LAB();
       try { 
          $t->setID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_LAB();
       try { 
          $t->setID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNAME() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_IMAGE_LAB();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNAME('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_LAB();
       try { 
          $t->setNAME('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_LAB();
       try { 
          $t->setNAME('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDESCRIPTION() { 
       // FieldType: VARCHAR(300)
       $t = new  huh_IMAGE_LAB();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDESCRIPTION('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_LAB();
       try { 
          $t->setDESCRIPTION('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_LAB();
       try { 
          $t->setDESCRIPTION('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_IMAGE_OBJECT extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getID());
    } 
    function testKeys() { 
       $t = new  huh_IMAGE_OBJECT();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ID'], '0');
    } 
    function testDirtyID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIMAGE_SET_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIMAGE_SET_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setIMAGE_SET_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setIMAGE_SET_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOBJECT_TYPE_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOBJECT_TYPE_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setOBJECT_TYPE_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setOBJECT_TYPE_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyREPOSITORY_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setREPOSITORY_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setREPOSITORY_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setREPOSITORY_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMIME_TYPE_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMIME_TYPE_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setMIME_TYPE_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setMIME_TYPE_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBITS_PER_SAMPLE_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBITS_PER_SAMPLE_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setBITS_PER_SAMPLE_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setBITS_PER_SAMPLE_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCOMPRESSION_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCOMPRESSION_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setCOMPRESSION_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setCOMPRESSION_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPHOTO_INTERP_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPHOTO_INTERP_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setPHOTO_INTERP_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setPHOTO_INTERP_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyACTIVE_FLAG() { 
       // FieldType: INTEGER
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setACTIVE_FLAG('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setACTIVE_FLAG('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setACTIVE_FLAG('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyALTERED_FLAG() { 
       // FieldType: INTEGER
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setALTERED_FLAG('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setALTERED_FLAG('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setALTERED_FLAG('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIN_PROCESS_FLAG() { 
       // FieldType: INTEGER
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIN_PROCESS_FLAG('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setIN_PROCESS_FLAG('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setIN_PROCESS_FLAG('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyORDINAL() { 
       // FieldType: INTEGER
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setORDINAL('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setORDINAL('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setORDINAL('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPIXEL_WIDTH() { 
       // FieldType: INTEGER
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPIXEL_WIDTH('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setPIXEL_WIDTH('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setPIXEL_WIDTH('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPIXEL_HEIGHT() { 
       // FieldType: INTEGER
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPIXEL_HEIGHT('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setPIXEL_HEIGHT('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setPIXEL_HEIGHT('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCREATE_DATE() { 
       // FieldType: DATE
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCREATE_DATE('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setCREATE_DATE('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setCREATE_DATE('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRESOLUTION() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRESOLUTION('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setRESOLUTION('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setRESOLUTION('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFILE_SIZE() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFILE_SIZE('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setFILE_SIZE('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setFILE_SIZE('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOBJECT_NAME() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOBJECT_NAME('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setOBJECT_NAME('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setOBJECT_NAME('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyURI() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setURI('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setURI('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setURI('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySIGNATURE() { 
       // FieldType: VARCHAR(130)
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSIGNATURE('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setSIGNATURE('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setSIGNATURE('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCOLOR_TARGET_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_OBJECT();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCOLOR_TARGET_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setCOLOR_TARGET_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT();
       try { 
          $t->setCOLOR_TARGET_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_IMAGE_OBJECT_TYPE extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_IMAGE_OBJECT_TYPE();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getID());
    } 
    function testKeys() { 
       $t = new  huh_IMAGE_OBJECT_TYPE();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ID'], '0');
    } 
    function testDirtyID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_OBJECT_TYPE();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT_TYPE();
       try { 
          $t->setID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT_TYPE();
       try { 
          $t->setID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNAME() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_IMAGE_OBJECT_TYPE();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNAME('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT_TYPE();
       try { 
          $t->setNAME('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT_TYPE();
       try { 
          $t->setNAME('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDESCRIPTION() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_IMAGE_OBJECT_TYPE();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDESCRIPTION('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT_TYPE();
       try { 
          $t->setDESCRIPTION('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_OBJECT_TYPE();
       try { 
          $t->setDESCRIPTION('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_IMAGE_SET extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getID());
    } 
    function testKeys() { 
       $t = new  huh_IMAGE_SET();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ID'], '0');
    } 
    function testDirtyID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySPECIMEN_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSPECIMEN_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setSPECIMEN_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setSPECIMEN_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBATCH_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBATCH_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setBATCH_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setBATCH_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyACCESS_TYPE_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setACCESS_TYPE_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setACCESS_TYPE_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setACCESS_TYPE_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySOURCE_TYPE_ID() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSOURCE_TYPE_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setSOURCE_TYPE_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setSOURCE_TYPE_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyACTIVE_FLAG() { 
       // FieldType: INTEGER
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setACTIVE_FLAG('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setACTIVE_FLAG('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setACTIVE_FLAG('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDESCRIPTION() { 
       // FieldType: VARCHAR(1200)
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDESCRIPTION('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setDESCRIPTION('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->set
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCAPTION() { 
       // FieldType: VARCHAR(200)
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCAPTION('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setCAPTION('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setCAPTION('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOWNER() { 
       // FieldType: VARCHAR(200)
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOWNER('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setOWNER('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setOWNER('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCOPYRIGHT() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCOPYRIGHT('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setCOPYRIGHT('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setCOPYRIGHT('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyREMARKS() { 
       // FieldType: VARCHAR(1000)
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setREMARKS('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setREMARKS('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->set
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDATA_SOURCE() { 
       // FieldType: VARCHAR(30)
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDATA_SOURCE('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setDATA_SOURCE('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setDATA_SOURCE('999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySYS_DATA() { 
       // FieldType: VARCHAR(30)
       $t = new  huh_IMAGE_SET();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSYS_DATA('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setSYS_DATA('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET();
       try { 
          $t->setSYS_DATA('999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_IMAGE_SET_collectionobject extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_IMAGE_SET_collectionobject();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getcollectionobjectid());
       $this->assertNull($t->getimagesetid());
    } 
    function testKeys() { 
       $t = new  huh_IMAGE_SET_collectionobject();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),2);
       $t->setcollectionobjectid('0');
       $t->setimagesetid('1');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['collectionobjectid'], '0');
       $this->assertIdentical($pk['imagesetid'], '1');
    } 
    function testDirtycollectionobjectid() { 
       // FieldType: INTEGER
       $t = new  huh_IMAGE_SET_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setcollectionobjectid('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET_collectionobject();
       try { 
          $t->setcollectionobjectid('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET_collectionobject();
       try { 
          $t->setcollectionobjectid('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyimagesetid() { 
       // FieldType: BIGINT
       $t = new  huh_IMAGE_SET_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setimagesetid('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET_collectionobject();
       try { 
          $t->setimagesetid('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_IMAGE_SET_collectionobject();
       try { 
          $t->setimagesetid('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_REPOSITORY extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_REPOSITORY();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getID());
    } 
    function testKeys() { 
       $t = new  huh_REPOSITORY();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ID'], '0');
    } 
    function testDirtyID() { 
       // FieldType: BIGINT
       $t = new  huh_REPOSITORY();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_REPOSITORY();
       try { 
          $t->setID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_REPOSITORY();
       try { 
          $t->setID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNAME() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_REPOSITORY();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNAME('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_REPOSITORY();
       try { 
          $t->setNAME('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_REPOSITORY();
       try { 
          $t->setNAME('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyURL_PREFIX() { 
       // FieldType: VARCHAR(120)
       $t = new  huh_REPOSITORY();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setURL_PREFIX('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_REPOSITORY();
       try { 
          $t->setURL_PREFIX('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_REPOSITORY();
       try { 
          $t->setURL_PREFIX('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDESCRIPTION() { 
       // FieldType: VARCHAR(300)
       $t = new  huh_REPOSITORY();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDESCRIPTION('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_REPOSITORY();
       try { 
          $t->setDESCRIPTION('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_REPOSITORY();
       try { 
          $t->setDESCRIPTION('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_ST_LOOKUP extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_ST_LOOKUP();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getID());
    } 
    function testKeys() { 
       $t = new  huh_ST_LOOKUP();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ID'], '0');
    } 
    function testDirtyID() { 
       // FieldType: BIGINT
       $t = new  huh_ST_LOOKUP();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_ST_LOOKUP();
       try { 
          $t->setID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_ST_LOOKUP();
       try { 
          $t->setID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCATEGORY_ID() { 
       // FieldType: BIGINT
       $t = new  huh_ST_LOOKUP();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCATEGORY_ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_ST_LOOKUP();
       try { 
          $t->setCATEGORY_ID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_ST_LOOKUP();
       try { 
          $t->setCATEGORY_ID('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyORDINAL() { 
       // FieldType: INTEGER
       $t = new  huh_ST_LOOKUP();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setORDINAL('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_ST_LOOKUP();
       try { 
          $t->setORDINAL('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_ST_LOOKUP();
       try { 
          $t->setORDINAL('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyACTIVE() { 
       // FieldType: INTEGER
       $t = new  huh_ST_LOOKUP();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setACTIVE('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_ST_LOOKUP();
       try { 
          $t->setACTIVE('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_ST_LOOKUP();
       try { 
          $t->setACTIVE('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNAME() { 
       // FieldType: VARCHAR(24)
       $t = new  huh_ST_LOOKUP();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNAME('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_ST_LOOKUP();
       try { 
          $t->setNAME('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_ST_LOOKUP();
       try { 
          $t->setNAME('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDESCRIPTION() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_ST_LOOKUP();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDESCRIPTION('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_ST_LOOKUP();
       try { 
          $t->setDESCRIPTION('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_ST_LOOKUP();
       try { 
          $t->setDESCRIPTION('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_accession extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_accession();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAccessionID());
    } 
    function testKeys() { 
       $t = new  huh_accession();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAccessionID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AccessionID'], '0');
    } 
    function testDirtyAccessionID() { 
       // FieldType: INTEGER
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setAccessionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setAccessionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAccessionCondition() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionCondition('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setAccessionCondition('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setAccessionCondition('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAccessionNumber() { 
       // FieldType: VARCHAR(60)
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setAccessionNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setAccessionNumber('999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAltAccessionNumber() { 
       // FieldType: VARCHAR(60)
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAltAccessionNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setAltAccessionNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setAltAccessionNumber('999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateAccessioned() { 
       // FieldType: DATE
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateAccessioned('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setDateAccessioned('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setDateAccessioned('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateAcknowledged() { 
       // FieldType: DATE
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateAcknowledged('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setDateAcknowledged('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setDateAcknowledged('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateReceived() { 
       // FieldType: DATE
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateReceived('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setDateReceived('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setDateReceived('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStatus() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStatus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setStatus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setStatus('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText3() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setText3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setText3('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTotalValue() { 
       // FieldType: DECIMAL(12,2)
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTotalValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setTotalValue('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setTotalValue('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyType() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setType('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVerbatimDate() { 
       // FieldType: YEAR
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVerbatimDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setVerbatimDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setVerbatimDate('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDivisionID() { 
       // FieldType: INTEGER
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDivisionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setDivisionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setDivisionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddressOfRecordID() { 
       // FieldType: INTEGER
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddressOfRecordID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setAddressOfRecordID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setAddressOfRecordID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRepositoryAgreementID() { 
       // FieldType: INTEGER
       $t = new  huh_accession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRepositoryAgreementID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setRepositoryAgreementID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accession();
       try { 
          $t->setRepositoryAgreementID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_accessionagent extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_accessionagent();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAccessionAgentID());
    } 
    function testKeys() { 
       $t = new  huh_accessionagent();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAccessionAgentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AccessionAgentID'], '0');
    } 
    function testDirtyAccessionAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setAccessionAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setAccessionAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_accessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_accessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_accessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_accessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRole() { 
       // FieldType: YEAR
       $t = new  huh_accessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRole('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setRole('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setRole('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRepositoryAgreementID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRepositoryAgreementID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setRepositoryAgreementID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setRepositoryAgreementID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAccessionID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setAccessionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionagent();
       try { 
          $t->setAccessionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_accessionattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_accessionattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAccessionAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_accessionattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAccessionAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AccessionAttachmentID'], '0');
    } 
    function testDirtyAccessionAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setAccessionAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setAccessionAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_accessionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_accessionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_accessionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_accessionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_accessionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAccessionID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setAccessionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionattachment();
       try { 
          $t->setAccessionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_accessionauthorization extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_accessionauthorization();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAccessionAuthorizationID());
    } 
    function testKeys() { 
       $t = new  huh_accessionauthorization();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAccessionAuthorizationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AccessionAuthorizationID'], '0');
    } 
    function testDirtyAccessionAuthorizationID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionauthorization();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionAuthorizationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setAccessionAuthorizationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setAccessionAuthorizationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_accessionauthorization();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_accessionauthorization();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_accessionauthorization();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_accessionauthorization();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionauthorization();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRepositoryAgreementID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionauthorization();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRepositoryAgreementID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setRepositoryAgreementID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setRepositoryAgreementID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPermitID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionauthorization();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPermitID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setPermitID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setPermitID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAccessionID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionauthorization();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setAccessionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setAccessionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionauthorization();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionauthorization();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_accessionpreparation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAccessionPreparationID());
    } 
    function testKeys() { 
       $t = new  huh_accessionpreparation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAccessionPreparationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AccessionPreparationID'], '0');
    } 
    function testDirtyAccessionPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setAccessionPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setAccessionPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescriptionOfMaterial() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescriptionOfMaterial('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setDescriptionOfMaterial('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setDescriptionOfMaterial('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDiscardCount() { 
       // FieldType: SMALLINT
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDiscardCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setDiscardCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setDiscardCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDistributeCount() { 
       // FieldType: SMALLINT
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDistributeCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setDistributeCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setDistributeCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyItemCount() { 
       // FieldType: SMALLINT
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setItemCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setItemCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setItemCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNonSpecimenCount() { 
       // FieldType: SMALLINT
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNonSpecimenCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setNonSpecimenCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setNonSpecimenCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOutComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOutComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setOutComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setOutComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReceivedComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReceivedComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setReceivedComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setReceivedComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReturnCount() { 
       // FieldType: SMALLINT
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReturnCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setReturnCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setReturnCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTypeCount() { 
       // FieldType: SMALLINT
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTypeCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setTypeCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setTypeCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAccessionID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setAccessionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setAccessionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_accessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_accessionpreparation();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_address extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_address();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAddressID());
    } 
    function testKeys() { 
       $t = new  huh_address();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAddressID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AddressID'], '0');
    } 
    function testDirtyAddressID() { 
       // FieldType: INTEGER
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddressID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setAddressID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setAddressID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddress() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddress('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setAddress('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setAddress('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddress2() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddress2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setAddress2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setAddress2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCity() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCity('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setCity('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setCity('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCountry() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCountry('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setCountry('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setCountry('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndDate() { 
       // FieldType: DATE
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setEndDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setEndDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFax() { 
       // FieldType: YEAR
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFax('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setFax('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setFax('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsCurrent() { 
       // FieldType: BIT(1)
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsCurrent('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setIsCurrent('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setIsCurrent('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsPrimary() { 
       // FieldType: BIT(1)
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsPrimary('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setIsPrimary('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setIsPrimary('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsShipping() { 
       // FieldType: BIT(1)
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsShipping('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setIsShipping('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setIsShipping('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPhone1() { 
       // FieldType: YEAR
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPhone1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setPhone1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setPhone1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPhone2() { 
       // FieldType: YEAR
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPhone2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setPhone2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setPhone2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPositionHeld() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPositionHeld('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setPositionHeld('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setPositionHeld('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPostalCode() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPostalCode('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setPostalCode('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setPostalCode('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRoomOrBuilding() { 
       // FieldType: YEAR
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRoomOrBuilding('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setRoomOrBuilding('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setRoomOrBuilding('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartDate() { 
       // FieldType: DATE
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setStartDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setStartDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyState() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setState('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setState('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setState('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTypeOfAddr() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTypeOfAddr('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setTypeOfAddr('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setTypeOfAddr('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_address();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_address();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_addressofrecord extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAddressOfRecordID());
    } 
    function testKeys() { 
       $t = new  huh_addressofrecord();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAddressOfRecordID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AddressOfRecordID'], '0');
    } 
    function testDirtyAddressOfRecordID() { 
       // FieldType: INTEGER
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddressOfRecordID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setAddressOfRecordID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setAddressOfRecordID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddress() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddress('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setAddress('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setAddress('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddress2() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddress2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setAddress2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setAddress2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCity() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCity('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setCity('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setCity('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCountry() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCountry('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setCountry('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setCountry('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPostalCode() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPostalCode('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setPostalCode('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setPostalCode('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyState() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setState('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setState('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setState('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_addressofrecord();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_addressofrecord();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_agent extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_agent();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAgentID());
    } 
    function testKeys() { 
       $t = new  huh_agent();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAgentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AgentID'], '0');
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAbbreviation() { 
       // FieldType: YEAR
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAbbreviation('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setAbbreviation('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setAbbreviation('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentType() { 
       // FieldType: TINYINT
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setAgentType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setAgentType('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateOfBirth() { 
       // FieldType: DATE
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateOfBirth('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDateOfBirth('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDateOfBirth('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateOfBirthConfidence() { 
       // FieldType: VARCHAR(4)
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateOfBirthConfidence('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDateOfBirthConfidence('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDateOfBirthConfidence('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateOfBirthPrecision() { 
       // FieldType: TINYINT
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateOfBirthPrecision('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDateOfBirthPrecision('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDateOfBirthPrecision('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateOfDeath() { 
       // FieldType: DATE
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateOfDeath('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDateOfDeath('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDateOfDeath('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateOfDeathConfidence() { 
       // FieldType: VARCHAR(4)
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateOfDeathConfidence('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDateOfDeathConfidence('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDateOfDeathConfidence('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateOfDeathPrecision() { 
       // FieldType: TINYINT
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateOfDeathPrecision('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDateOfDeathPrecision('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDateOfDeathPrecision('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDatesType() { 
       // FieldType: TINYINT
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDatesType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDatesType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDatesType('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEmail() { 
       // FieldType: YEAR
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEmail('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setEmail('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setEmail('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFirstName() { 
       // FieldType: YEAR
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFirstName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setFirstName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setFirstName('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGUID() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGUID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setGUID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setGUID('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInitials() { 
       // FieldType: VARCHAR(8)
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInitials('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setInitials('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setInitials('99999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInterests() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInterests('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setInterests('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setInterests('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyJobTitle() { 
       // FieldType: YEAR
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setJobTitle('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setJobTitle('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setJobTitle('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLastName() { 
       // FieldType: VARCHAR(200)
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLastName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setLastName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setLastName('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMiddleInitial() { 
       // FieldType: YEAR
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMiddleInitial('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setMiddleInitial('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setMiddleInitial('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTitle() { 
       // FieldType: YEAR
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTitle('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setTitle('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setTitle('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyURL() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setURL('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setURL('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setURL('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInstitutionCCID() { 
       // FieldType: INTEGER
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInstitutionCCID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setInstitutionCCID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setInstitutionCCID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionCCID() { 
       // FieldType: INTEGER
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionCCID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setCollectionCCID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setCollectionCCID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpecifyUserID() { 
       // FieldType: INTEGER
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecifyUserID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setSpecifyUserID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setSpecifyUserID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionTCID() { 
       // FieldType: INTEGER
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionTCID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setCollectionTCID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setCollectionTCID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDivisionID() { 
       // FieldType: INTEGER
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDivisionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDivisionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setDivisionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInstitutionTCID() { 
       // FieldType: INTEGER
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInstitutionTCID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setInstitutionTCID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setInstitutionTCID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentOrganizationID() { 
       // FieldType: INTEGER
       $t = new  huh_agent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentOrganizationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setParentOrganizationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent();
       try { 
          $t->setParentOrganizationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_agent_discipline extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_agent_discipline();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAgentID());
       $this->assertNull($t->getDisciplineID());
    } 
    function testKeys() { 
       $t = new  huh_agent_discipline();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),2);
       $t->setAgentID('0');
       $t->setDisciplineID('1');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AgentID'], '0');
       $this->assertIdentical($pk['DisciplineID'], '1');
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agent_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent_discipline();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent_discipline();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_agent_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent_discipline();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agent_discipline();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_agentattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_agentattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAgentAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_agentattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAgentAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AgentAttachmentID'], '0');
    } 
    function testDirtyAgentAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setAgentAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setAgentAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_agentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_agentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_agentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_agentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_agentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_agentcitation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAgentCitationID());
    } 
    function testKeys() { 
       $t = new  huh_agentcitation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAgentCitationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AgentCitationID'], '0');
    } 
    function testDirtyAgentCitationID() { 
       // FieldType: INTEGER
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentCitationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setAgentCitationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setAgentCitationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRole() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRole('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setRole('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setRole('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: YEAR
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setText1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: YEAR
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setText2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReferenceWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_agentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setReferenceWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentcitation();
       try { 
          $t->setReferenceWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_agentgeography extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_agentgeography();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAgentGeographyID());
    } 
    function testKeys() { 
       $t = new  huh_agentgeography();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAgentGeographyID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AgentGeographyID'], '0');
    } 
    function testDirtyAgentGeographyID() { 
       // FieldType: INTEGER
       $t = new  huh_agentgeography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentGeographyID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setAgentGeographyID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setAgentGeographyID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_agentgeography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_agentgeography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_agentgeography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrderNumber() { 
       // FieldType: INTEGER
       $t = new  huh_agentgeography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrderNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setOrderNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setOrderNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_agentgeography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRole() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_agentgeography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRole('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setRole('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setRole('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentgeography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentgeography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentgeography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeographyID() { 
       // FieldType: INTEGER
       $t = new  huh_agentgeography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeographyID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setGeographyID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentgeography();
       try { 
          $t->setGeographyID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_agentspecialty extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_agentspecialty();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAgentSpecialtyID());
    } 
    function testKeys() { 
       $t = new  huh_agentspecialty();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAgentSpecialtyID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AgentSpecialtyID'], '0');
    } 
    function testDirtyAgentSpecialtyID() { 
       // FieldType: INTEGER
       $t = new  huh_agentspecialty();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentSpecialtyID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setAgentSpecialtyID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setAgentSpecialtyID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_agentspecialty();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_agentspecialty();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_agentspecialty();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrderNumber() { 
       // FieldType: INTEGER
       $t = new  huh_agentspecialty();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrderNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setOrderNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setOrderNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRole() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_agentspecialty();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRole('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setRole('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setRole('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpecialtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_agentspecialty();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecialtyName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setSpecialtyName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setSpecialtyName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentspecialty();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentspecialty();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentspecialty();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentspecialty();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_agentvariant extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAgentVariantID());
    } 
    function testKeys() { 
       $t = new  huh_agentvariant();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAgentVariantID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AgentVariantID'], '0');
    } 
    function testDirtyAgentVariantID() { 
       // FieldType: INTEGER
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentVariantID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setAgentVariantID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setAgentVariantID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCountry() { 
       // FieldType: VARCHAR(2)
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCountry('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setCountry('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setCountry('99999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLanguage() { 
       // FieldType: VARCHAR(2)
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLanguage('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setLanguage('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setLanguage('99999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVarType() { 
       // FieldType: TINYINT
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVarType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setVarType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setVarType('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVariant() { 
       // FieldType: VARCHAR(2)
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVariant('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setVariant('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setVariant('99999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_agentvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_agentvariant();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_appraisal extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_appraisal();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAppraisalID());
    } 
    function testKeys() { 
       $t = new  huh_appraisal();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAppraisalID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AppraisalID'], '0');
    } 
    function testDirtyAppraisalID() { 
       // FieldType: INTEGER
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAppraisalID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setAppraisalID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setAppraisalID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAppraisalDate() { 
       // FieldType: DATE
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAppraisalDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setAppraisalDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setAppraisalDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAppraisalNumber() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAppraisalNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setAppraisalNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setAppraisalNumber('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAppraisalValue() { 
       // FieldType: DECIMAL(12,2)
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAppraisalValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setAppraisalValue('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setAppraisalValue('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMonetaryUnitType() { 
       // FieldType: VARCHAR(8)
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMonetaryUnitType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setMonetaryUnitType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setMonetaryUnitType('99999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNotes() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNotes('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setNotes('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setNotes('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAccessionID() { 
       // FieldType: INTEGER
       $t = new  huh_appraisal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setAccessionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_appraisal();
       try { 
          $t->setAccessionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_attachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_attachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_attachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AttachmentID'], '0');
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentLocation() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentLocation('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setAttachmentLocation('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setAttachmentLocation('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCopyrightDate() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCopyrightDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setCopyrightDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setCopyrightDate('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCopyrightHolder() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCopyrightHolder('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setCopyrightHolder('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setCopyrightHolder('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCredit() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCredit('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setCredit('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setCredit('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateImaged() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateImaged('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setDateImaged('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setDateImaged('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFileCreatedDate() { 
       // FieldType: DATE
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFileCreatedDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setFileCreatedDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setFileCreatedDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLicense() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLicense('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setLicense('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setLicense('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMimeType() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMimeType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setMimeType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setMimeType('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrigFilename() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrigFilename('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setOrigFilename('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setOrigFilename('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTitle() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTitle('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setTitle('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setTitle('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVisibility() { 
       // FieldType: TINYINT
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVisibility('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setVisibility('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setVisibility('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVisibilitySetByID() { 
       // FieldType: INTEGER
       $t = new  huh_attachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVisibilitySetByID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setVisibilitySetByID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachment();
       try { 
          $t->setVisibilitySetByID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_attachmentmetadata extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_attachmentmetadata();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAttachmentMetadataID());
    } 
    function testKeys() { 
       $t = new  huh_attachmentmetadata();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAttachmentMetadataID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AttachmentMetadataID'], '0');
    } 
    function testDirtyAttachmentMetadataID() { 
       // FieldType: INTEGER
       $t = new  huh_attachmentmetadata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentMetadataID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setAttachmentMetadataID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setAttachmentMetadataID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_attachmentmetadata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_attachmentmetadata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_attachmentmetadata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_attachmentmetadata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyValue() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_attachmentmetadata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setValue('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_attachmentmetadata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_attachmentmetadata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_attachmentmetadata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmentmetadata();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_attachmenttag extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_attachmenttag();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAttachmentTagID());
    } 
    function testKeys() { 
       $t = new  huh_attachmenttag();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAttachmentTagID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AttachmentTagID'], '0');
    } 
    function testDirtyAttachmentTagID() { 
       // FieldType: INTEGER
       $t = new  huh_attachmenttag();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentTagID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setAttachmentTagID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setAttachmentTagID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_attachmenttag();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_attachmenttag();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_attachmenttag();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTag() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_attachmenttag();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTag('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setTag('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setTag('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_attachmenttag();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_attachmenttag();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_attachmenttag();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attachmenttag();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_attributedef extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_attributedef();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAttributeDefID());
    } 
    function testKeys() { 
       $t = new  huh_attributedef();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAttributeDefID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AttributeDefID'], '0');
    } 
    function testDirtyAttributeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_attributedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttributeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setAttributeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setAttributeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_attributedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_attributedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_attributedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDataType() { 
       // FieldType: SMALLINT
       $t = new  huh_attributedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDataType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setDataType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setDataType('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_attributedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setFieldName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setFieldName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTableType() { 
       // FieldType: SMALLINT
       $t = new  huh_attributedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTableType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setTableType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setTableType('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPrepTypeID() { 
       // FieldType: INTEGER
       $t = new  huh_attributedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPrepTypeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setPrepTypeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setPrepTypeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_attributedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_attributedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_attributedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_attributedef();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_author extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_author();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAuthorID());
    } 
    function testKeys() { 
       $t = new  huh_author();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAuthorID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AuthorID'], '0');
    } 
    function testDirtyAuthorID() { 
       // FieldType: INTEGER
       $t = new  huh_author();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAuthorID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setAuthorID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setAuthorID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_author();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_author();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_author();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrderNumber() { 
       // FieldType: SMALLINT
       $t = new  huh_author();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrderNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setOrderNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setOrderNumber('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_author();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReferenceWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_author();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setReferenceWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setReferenceWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_author();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_author();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_author();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_author();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_autonumberingscheme extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_autonumberingscheme();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAutoNumberingSchemeID());
    } 
    function testKeys() { 
       $t = new  huh_autonumberingscheme();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAutoNumberingSchemeID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AutoNumberingSchemeID'], '0');
    } 
    function testDirtyAutoNumberingSchemeID() { 
       // FieldType: INTEGER
       $t = new  huh_autonumberingscheme();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAutoNumberingSchemeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setAutoNumberingSchemeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setAutoNumberingSchemeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_autonumberingscheme();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_autonumberingscheme();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_autonumberingscheme();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFormatName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_autonumberingscheme();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFormatName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setFormatName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setFormatName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsNumericOnly() { 
       // FieldType: BIT(1)
       $t = new  huh_autonumberingscheme();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsNumericOnly('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setIsNumericOnly('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setIsNumericOnly('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySchemeClassName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_autonumberingscheme();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSchemeClassName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setSchemeClassName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setSchemeClassName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySchemeName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_autonumberingscheme();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSchemeName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setSchemeName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setSchemeName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTableNumber() { 
       // FieldType: INTEGER
       $t = new  huh_autonumberingscheme();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTableNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setTableNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setTableNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_autonumberingscheme();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_autonumberingscheme();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumberingscheme();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_autonumsch_coll extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_autonumsch_coll();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCollectionID());
       $this->assertNull($t->getAutoNumberingSchemeID());
    } 
    function testKeys() { 
       $t = new  huh_autonumsch_coll();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),2);
       $t->setCollectionID('0');
       $t->setAutoNumberingSchemeID('1');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CollectionID'], '0');
       $this->assertIdentical($pk['AutoNumberingSchemeID'], '1');
    } 
    function testDirtyCollectionID() { 
       // FieldType: INTEGER
       $t = new  huh_autonumsch_coll();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumsch_coll();
       try { 
          $t->setCollectionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumsch_coll();
       try { 
          $t->setCollectionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAutoNumberingSchemeID() { 
       // FieldType: INTEGER
       $t = new  huh_autonumsch_coll();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAutoNumberingSchemeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumsch_coll();
       try { 
          $t->setAutoNumberingSchemeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumsch_coll();
       try { 
          $t->setAutoNumberingSchemeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_autonumsch_div extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_autonumsch_div();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getDivisionID());
       $this->assertNull($t->getAutoNumberingSchemeID());
    } 
    function testKeys() { 
       $t = new  huh_autonumsch_div();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),2);
       $t->setDivisionID('0');
       $t->setAutoNumberingSchemeID('1');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['DivisionID'], '0');
       $this->assertIdentical($pk['AutoNumberingSchemeID'], '1');
    } 
    function testDirtyDivisionID() { 
       // FieldType: INTEGER
       $t = new  huh_autonumsch_div();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDivisionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumsch_div();
       try { 
          $t->setDivisionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumsch_div();
       try { 
          $t->setDivisionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAutoNumberingSchemeID() { 
       // FieldType: INTEGER
       $t = new  huh_autonumsch_div();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAutoNumberingSchemeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumsch_div();
       try { 
          $t->setAutoNumberingSchemeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumsch_div();
       try { 
          $t->setAutoNumberingSchemeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_autonumsch_dsp extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_autonumsch_dsp();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getDisciplineID());
       $this->assertNull($t->getAutoNumberingSchemeID());
    } 
    function testKeys() { 
       $t = new  huh_autonumsch_dsp();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),2);
       $t->setDisciplineID('0');
       $t->setAutoNumberingSchemeID('1');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['DisciplineID'], '0');
       $this->assertIdentical($pk['AutoNumberingSchemeID'], '1');
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_autonumsch_dsp();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumsch_dsp();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumsch_dsp();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAutoNumberingSchemeID() { 
       // FieldType: INTEGER
       $t = new  huh_autonumsch_dsp();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAutoNumberingSchemeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumsch_dsp();
       try { 
          $t->setAutoNumberingSchemeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_autonumsch_dsp();
       try { 
          $t->setAutoNumberingSchemeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_borrow extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_borrow();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getBorrowID());
    } 
    function testKeys() { 
       $t = new  huh_borrow();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setBorrowID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['BorrowID'], '0');
    } 
    function testDirtyBorrowID() { 
       // FieldType: INTEGER
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBorrowID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setBorrowID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setBorrowID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCurrentDueDate() { 
       // FieldType: DATE
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCurrentDueDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setCurrentDueDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setCurrentDueDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateClosed() { 
       // FieldType: DATE
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateClosed('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setDateClosed('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setDateClosed('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInvoiceNumber() { 
       // FieldType: YEAR
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInvoiceNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setInvoiceNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setInvoiceNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsClosed() { 
       // FieldType: BIT(1)
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsClosed('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setIsClosed('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setIsClosed('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsFinancialResponsibility() { 
       // FieldType: BIT(1)
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsFinancialResponsibility('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setIsFinancialResponsibility('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setIsFinancialResponsibility('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOriginalDueDate() { 
       // FieldType: DATE
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOriginalDueDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setOriginalDueDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setOriginalDueDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReceivedDate() { 
       // FieldType: DATE
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReceivedDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setReceivedDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setReceivedDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText3() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setText3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setText3('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo3() { 
       // FieldType: BIT(1)
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setYesNo3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setYesNo3('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddressOfRecordID() { 
       // FieldType: INTEGER
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddressOfRecordID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setAddressOfRecordID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setAddressOfRecordID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_borrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrow();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_borrowagent extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_borrowagent();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getBorrowAgentID());
    } 
    function testKeys() { 
       $t = new  huh_borrowagent();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setBorrowAgentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['BorrowAgentID'], '0');
    } 
    function testDirtyBorrowAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBorrowAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setBorrowAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setBorrowAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_borrowagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_borrowagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_borrowagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_borrowagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRole() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_borrowagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRole('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setRole('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setRole('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBorrowID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBorrowID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setBorrowID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setBorrowID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowagent();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_borrowmaterial extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getBorrowMaterialID());
    } 
    function testKeys() { 
       $t = new  huh_borrowmaterial();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setBorrowMaterialID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['BorrowMaterialID'], '0');
    } 
    function testDirtyBorrowMaterialID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBorrowMaterialID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setBorrowMaterialID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setBorrowMaterialID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setInComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setInComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyItemCount() { 
       // FieldType: SMALLINT
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setItemCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setItemCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setItemCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMaterialNumber() { 
       // FieldType: YEAR
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMaterialNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setMaterialNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setMaterialNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNonSpecimenCount() { 
       // FieldType: SMALLINT
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNonSpecimenCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setNonSpecimenCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setNonSpecimenCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOutComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOutComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setOutComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setOutComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyQuantityResolved() { 
       // FieldType: SMALLINT
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setQuantityResolved('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setQuantityResolved('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setQuantityResolved('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyQuantityReturned() { 
       // FieldType: SMALLINT
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setQuantityReturned('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setQuantityReturned('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setQuantityReturned('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcTaxonomy() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcTaxonomy('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setSrcTaxonomy('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setSrcTaxonomy('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTypeCount() { 
       // FieldType: SMALLINT
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTypeCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setTypeCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setTypeCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTaxonID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setTaxonID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setTaxonID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBorrowID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBorrowID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setBorrowID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setBorrowID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowmaterial();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_borrowreturnmaterial extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getBorrowReturnMaterialID());
    } 
    function testKeys() { 
       $t = new  huh_borrowreturnmaterial();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setBorrowReturnMaterialID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['BorrowReturnMaterialID'], '0');
    } 
    function testDirtyBorrowReturnMaterialID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBorrowReturnMaterialID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setBorrowReturnMaterialID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setBorrowReturnMaterialID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyItemCount() { 
       // FieldType: SMALLINT
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setItemCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setItemCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setItemCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNonSpecimenCount() { 
       // FieldType: SMALLINT
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNonSpecimenCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setNonSpecimenCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setNonSpecimenCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReturnedDate() { 
       // FieldType: DATE
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReturnedDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setReturnedDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setReturnedDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTypeCount() { 
       // FieldType: SMALLINT
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTypeCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setTypeCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setTypeCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBorrowMaterialID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBorrowMaterialID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setBorrowMaterialID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setBorrowMaterialID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReturnedByID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReturnedByID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setReturnedByID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setReturnedByID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_borrowreturnmaterial();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_borrowreturnmaterial();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collectingevent extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCollectingEventID());
    } 
    function testKeys() { 
       $t = new  huh_collectingevent();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setCollectingEventID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CollectingEventID'], '0');
    } 
    function testDirtyCollectingEventID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectingEventID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setCollectingEventID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setCollectingEventID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndDate() { 
       // FieldType: DATE
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setEndDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setEndDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndDatePrecision() { 
       // FieldType: TINYINT
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndDatePrecision('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setEndDatePrecision('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setEndDatePrecision('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndDateVerbatim() { 
       // FieldType: YEAR
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndDateVerbatim('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setEndDateVerbatim('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setEndDateVerbatim('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndTime() { 
       // FieldType: SMALLINT
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndTime('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setEndTime('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setEndTime('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMethod() { 
       // FieldType: YEAR
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMethod('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setMethod('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setMethod('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartDate() { 
       // FieldType: DATE
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setStartDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setStartDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartDatePrecision() { 
       // FieldType: TINYINT
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartDatePrecision('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setStartDatePrecision('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setStartDatePrecision('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartDateVerbatim() { 
       // FieldType: YEAR
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartDateVerbatim('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setStartDateVerbatim('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setStartDateVerbatim('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartTime() { 
       // FieldType: SMALLINT
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartTime('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setStartTime('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setStartTime('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStationFieldNumber() { 
       // FieldType: YEAR
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStationFieldNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setStationFieldNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setStationFieldNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVerbatimDate() { 
       // FieldType: YEAR
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVerbatimDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setVerbatimDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setVerbatimDate('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVerbatimLocality() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVerbatimLocality('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setVerbatimLocality('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setVerbatimLocality('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVisibility() { 
       // FieldType: TINYINT
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVisibility('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setVisibility('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setVisibility('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLocalityID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setLocalityID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setLocalityID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectingEventAttributeID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectingEventAttributeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setCollectingEventAttributeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setCollectingEventAttributeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectingTripID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectingTripID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setCollectingTripID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setCollectingTripID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVisibilitySetByID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVisibilitySetByID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setVisibilitySetByID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingevent();
       try { 
          $t->setVisibilitySetByID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collectingeventattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collectingeventattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCollectingEventAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_collectingeventattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setCollectingEventAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CollectingEventAttachmentID'], '0');
    } 
    function testDirtyCollectingEventAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectingEventAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setCollectingEventAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setCollectingEventAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectingeventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectingeventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectingeventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectingEventID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectingEventID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setCollectingEventID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattachment();
       try { 
          $t->setCollectingEventID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collectingeventattr extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collectingeventattr();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAttrID());
    } 
    function testKeys() { 
       $t = new  huh_collectingeventattr();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAttrID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AttrID'], '0');
    } 
    function testDirtyAttrID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttrID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setAttrID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setAttrID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectingeventattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectingeventattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDoubleValue() { 
       // FieldType: DOUBLE
       $t = new  huh_collectingeventattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDoubleValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setDoubleValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setDoubleValue('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStrValue() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_collectingeventattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStrValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setStrValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setStrValue('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectingEventID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectingEventID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setCollectingEventID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setCollectingEventID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttributeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttributeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setAttributeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattr();
       try { 
          $t->setAttributeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collectingeventattribute extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCollectingEventAttributeID());
    } 
    function testKeys() { 
       $t = new  huh_collectingeventattribute();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setCollectingEventAttributeID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CollectingEventAttributeID'], '0');
    } 
    function testDirtyCollectingEventAttributeID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectingEventAttributeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setCollectingEventAttributeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setCollectingEventAttributeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber10() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber10('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber10('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber10('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber11() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber11('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber11('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber11('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber12() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber12('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber12('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber12('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber13() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber13('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber13('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber13('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber3() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber3('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber4() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber4('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber4('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber5() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber5('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber5('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber5('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber6() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber6('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber6('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber6('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber7() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber7('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber7('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber7('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber8() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber8('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber8('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber8('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber9() { 
       // FieldType: REAL
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber9('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber9('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setNumber9('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText10() { 
       // FieldType: YEAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText10('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText10('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText10('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText11() { 
       // FieldType: YEAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText11('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText11('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText11('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText12() { 
       // FieldType: YEAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText12('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText12('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText12('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText13() { 
       // FieldType: YEAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText13('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText13('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText13('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText14() { 
       // FieldType: YEAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText14('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText14('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText14('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText15() { 
       // FieldType: YEAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText15('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText15('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText15('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText16() { 
       // FieldType: YEAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText16('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText16('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText16('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText17() { 
       // FieldType: YEAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText17('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText17('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText17('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText3() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText3('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText4() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText4('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText4('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText5() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText5('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText5('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText5('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText6() { 
       // FieldType: YEAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText6('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText6('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText6('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText7() { 
       // FieldType: YEAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText7('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText7('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText7('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText8() { 
       // FieldType: YEAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText8('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText8('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText8('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText9() { 
       // FieldType: YEAR
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText9('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText9('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setText9('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo3() { 
       // FieldType: BIT(1)
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setYesNo3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setYesNo3('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo4() { 
       // FieldType: BIT(1)
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setYesNo4('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setYesNo4('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo5() { 
       // FieldType: BIT(1)
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo5('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setYesNo5('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setYesNo5('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyHostTaxonID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setHostTaxonID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setHostTaxonID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setHostTaxonID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingeventattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingeventattribute();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collectingtrip extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCollectingTripID());
    } 
    function testKeys() { 
       $t = new  huh_collectingtrip();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setCollectingTripID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CollectingTripID'], '0');
    } 
    function testDirtyCollectingTripID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectingTripID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setCollectingTripID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setCollectingTripID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectingTripName() { 
       // FieldType: VARCHAR(200)
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectingTripName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setCollectingTripName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setCollectingTripName('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndDate() { 
       // FieldType: DATE
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setEndDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setEndDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndDatePrecision() { 
       // FieldType: TINYINT
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndDatePrecision('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setEndDatePrecision('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setEndDatePrecision('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndDateVerbatim() { 
       // FieldType: YEAR
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndDateVerbatim('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setEndDateVerbatim('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setEndDateVerbatim('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndTime() { 
       // FieldType: SMALLINT
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndTime('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setEndTime('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setEndTime('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySponsor() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSponsor('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setSponsor('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setSponsor('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartDate() { 
       // FieldType: DATE
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setStartDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setStartDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartDatePrecision() { 
       // FieldType: TINYINT
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartDatePrecision('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setStartDatePrecision('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setStartDatePrecision('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartDateVerbatim() { 
       // FieldType: YEAR
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartDateVerbatim('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setStartDateVerbatim('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setStartDateVerbatim('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartTime() { 
       // FieldType: SMALLINT
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartTime('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setStartTime('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setStartTime('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectingtrip();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectingtrip();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collection extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collection();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getUserGroupScopeId());
    } 
    function testKeys() { 
       $t = new  huh_collection();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setUserGroupScopeId('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['UserGroupScopeId'], '0');
    } 
    function testDirtyUserGroupScopeId() { 
       // FieldType: INTEGER
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUserGroupScopeId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setUserGroupScopeId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setUserGroupScopeId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCatalogFormatNumName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCatalogFormatNumName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setCatalogFormatNumName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setCatalogFormatNumName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCode() { 
       // FieldType: YEAR
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCode('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setCode('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setCode('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtycollectionId() { 
       // FieldType: INTEGER
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setcollectionId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setcollectionId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setcollectionId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionName() { 
       // FieldType: YEAR
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setCollectionName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setCollectionName('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionType() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setCollectionType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setCollectionType('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDbContentVersion() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDbContentVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setDbContentVersion('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setDbContentVersion('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDevelopmentStatus() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDevelopmentStatus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setDevelopmentStatus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setDevelopmentStatus('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEstimatedSize() { 
       // FieldType: INTEGER
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEstimatedSize('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setEstimatedSize('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setEstimatedSize('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInstitutionType() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInstitutionType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setInstitutionType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setInstitutionType('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsEmbeddedCollectingEvent() { 
       // FieldType: BIT(1)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsEmbeddedCollectingEvent('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setIsEmbeddedCollectingEvent('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setIsEmbeddedCollectingEvent('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsaNumber() { 
       // FieldType: VARCHAR(24)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsaNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setIsaNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setIsaNumber('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyKingdomCoverage() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setKingdomCoverage('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setKingdomCoverage('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setKingdomCoverage('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreservationMethodType() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreservationMethodType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setPreservationMethodType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setPreservationMethodType('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPrimaryFocus() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPrimaryFocus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setPrimaryFocus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setPrimaryFocus('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPrimaryPurpose() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPrimaryPurpose('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setPrimaryPurpose('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setPrimaryPurpose('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRegNumber() { 
       // FieldType: VARCHAR(24)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRegNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setRegNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setRegNumber('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyScope() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setScope('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setScope('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setScope('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWebPortalURI() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWebPortalURI('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setWebPortalURI('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setWebPortalURI('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWebSiteURI() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWebSiteURI('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setWebSiteURI('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setWebSiteURI('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_collection();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collection();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collectionobject extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCollectionObjectID());
    } 
    function testKeys() { 
       $t = new  huh_collectionobject();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setCollectionObjectID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CollectionObjectID'], '0');
    } 
    function testDirtyCollectionObjectID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionObjectID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCollectionObjectID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCollectionObjectID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAltCatalogNumber() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAltCatalogNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setAltCatalogNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setAltCatalogNumber('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAvailability() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAvailability('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setAvailability('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setAvailability('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCatalogNumber() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCatalogNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCatalogNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCatalogNumber('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCatalogedDate() { 
       // FieldType: DATE
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCatalogedDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCatalogedDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCatalogedDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCatalogedDatePrecision() { 
       // FieldType: TINYINT
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCatalogedDatePrecision('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCatalogedDatePrecision('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCatalogedDatePrecision('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCatalogedDateVerbatim() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCatalogedDateVerbatim('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCatalogedDateVerbatim('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCatalogedDateVerbatim('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCountAmt() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCountAmt('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCountAmt('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCountAmt('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldNumber() { 
       // FieldType: YEAR
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setFieldNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setFieldNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGUID() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGUID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setGUID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setGUID('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInternalRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInternalRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setInternalRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setInternalRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifier() { 
       // FieldType: YEAR
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifier('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setModifier('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setModifier('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNotifications() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNotifications('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setNotifications('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setNotifications('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyProjectNumber() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setProjectNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setProjectNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setProjectNumber('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRestrictions() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRestrictions('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setRestrictions('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setRestrictions('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText3() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setText3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setText3('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText4() { 
       // FieldType: YEAR
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setText4('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setText4('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTotalValue() { 
       // FieldType: DECIMAL(12,2)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTotalValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setTotalValue('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setTotalValue('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVisibility() { 
       // FieldType: TINYINT
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVisibility('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setVisibility('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setVisibility('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo3() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setYesNo3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setYesNo3('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo4() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setYesNo4('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setYesNo4('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo5() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo5('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setYesNo5('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setYesNo5('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo6() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo6('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setYesNo6('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setYesNo6('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVisibilitySetByID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVisibilitySetByID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setVisibilitySetByID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setVisibilitySetByID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCatalogerID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCatalogerID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCatalogerID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCatalogerID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyContainerID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setContainerID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setContainerID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setContainerID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectingEventID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectingEventID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCollectingEventID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCollectingEventID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionObjectAttributeID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionObjectAttributeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCollectionObjectAttributeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCollectionObjectAttributeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPaleoContextID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPaleoContextID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setPaleoContextID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setPaleoContextID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCollectionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setCollectionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldNotebookPageID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNotebookPageID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setFieldNotebookPageID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setFieldNotebookPageID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobject();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobject();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collectionobjectattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collectionobjectattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCollectionObjectAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_collectionobjectattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setCollectionObjectAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CollectionObjectAttachmentID'], '0');
    } 
    function testDirtyCollectionObjectAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionObjectAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setCollectionObjectAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setCollectionObjectAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectionobjectattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectionobjectattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectionobjectattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionObjectID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionObjectID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setCollectionObjectID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setCollectionObjectID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collectionobjectattr extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collectionobjectattr();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAttrID());
    } 
    function testKeys() { 
       $t = new  huh_collectionobjectattr();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAttrID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AttrID'], '0');
    } 
    function testDirtyAttrID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttrID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setAttrID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setAttrID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectionobjectattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectionobjectattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDoubleValue() { 
       // FieldType: DOUBLE
       $t = new  huh_collectionobjectattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDoubleValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setDoubleValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setDoubleValue('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStrValue() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_collectionobjectattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStrValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setStrValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setStrValue('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttributeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttributeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setAttributeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setAttributeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionObjectID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionObjectID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setCollectionObjectID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattr();
       try { 
          $t->setCollectionObjectID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collectionobjectattribute extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCollectionObjectAttributeID());
    } 
    function testKeys() { 
       $t = new  huh_collectionobjectattribute();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setCollectionObjectAttributeID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CollectionObjectAttributeID'], '0');
    } 
    function testDirtyCollectionObjectAttributeID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionObjectAttributeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setCollectionObjectAttributeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setCollectionObjectAttributeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber10() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber10('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber10('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber10('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber11() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber11('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber11('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber11('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber12() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber12('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber12('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber12('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber13() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber13('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber13('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber13('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber14() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber14('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber14('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber14('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber15() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber15('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber15('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber15('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber16() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber16('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber16('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber16('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber17() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber17('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber17('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber17('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber18() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber18('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber18('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber18('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber19() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber19('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber19('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber19('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber20() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber20('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber20('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber20('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber21() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber21('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber21('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber21('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber22() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber22('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber22('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber22('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber23() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber23('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber23('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber23('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber24() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber24('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber24('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber24('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber25() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber25('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber25('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber25('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber26() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber26('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber26('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber26('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber27() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber27('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber27('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber27('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber28() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber28('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber28('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber28('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber29() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber29('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber29('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber29('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber3() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber3('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber30() { 
       // FieldType: SMALLINT
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber30('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber30('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber30('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber31() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber31('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber31('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber31('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber32() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber32('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber32('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber32('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber33() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber33('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber33('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber33('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber34() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber34('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber34('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber34('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber35() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber35('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber35('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber35('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber36() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber36('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber36('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber36('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber37() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber37('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber37('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber37('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber38() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber38('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber38('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber38('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber39() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber39('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber39('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber39('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber4() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber4('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber4('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber40() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber40('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber40('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber40('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber41() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber41('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber41('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber41('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber42() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber42('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber42('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber42('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber5() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber5('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber5('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber5('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber6() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber6('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber6('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber6('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber7() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber7('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber7('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber7('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber8() { 
       // FieldType: TINYINT
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber8('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber8('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber8('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber9() { 
       // FieldType: REAL
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber9('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber9('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setNumber9('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText10() { 
       // FieldType: YEAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText10('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText10('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText10('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText11() { 
       // FieldType: YEAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText11('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText11('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText11('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText12() { 
       // FieldType: YEAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText12('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText12('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText12('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText13() { 
       // FieldType: YEAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText13('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText13('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText13('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText14() { 
       // FieldType: YEAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText14('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText14('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText14('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText3() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText3('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText4() { 
       // FieldType: YEAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText4('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText4('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText5() { 
       // FieldType: YEAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText5('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText5('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText5('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText6() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText6('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText6('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText6('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText7() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText7('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText7('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText7('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText8() { 
       // FieldType: YEAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText8('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText8('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText8('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText9() { 
       // FieldType: YEAR
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText9('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText9('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setText9('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo3() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo3('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo4() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo4('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo4('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo5() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo5('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo5('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo5('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo6() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo6('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo6('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo6('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo7() { 
       // FieldType: BIT(1)
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo7('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo7('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setYesNo7('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionobjectattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionobjectattribute();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collectionrelationship extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collectionrelationship();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCollectionRelationshipID());
    } 
    function testKeys() { 
       $t = new  huh_collectionrelationship();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setCollectionRelationshipID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CollectionRelationshipID'], '0');
    } 
    function testDirtyCollectionRelationshipID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionrelationship();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionRelationshipID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setCollectionRelationshipID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setCollectionRelationshipID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectionrelationship();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectionrelationship();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collectionrelationship();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collectionrelationship();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setText1('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collectionrelationship();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setText2('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionrelationship();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionrelationship();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRightSideCollectionID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionrelationship();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRightSideCollectionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setRightSideCollectionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setRightSideCollectionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionRelTypeID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionrelationship();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionRelTypeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setCollectionRelTypeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setCollectionRelTypeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLeftSideCollectionID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionrelationship();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLeftSideCollectionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setLeftSideCollectionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionrelationship();
       try { 
          $t->setLeftSideCollectionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collectionreltype extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collectionreltype();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCollectionRelTypeID());
    } 
    function testKeys() { 
       $t = new  huh_collectionreltype();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setCollectionRelTypeID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CollectionRelTypeID'], '0');
    } 
    function testDirtyCollectionRelTypeID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionreltype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionRelTypeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setCollectionRelTypeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setCollectionRelTypeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectionreltype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collectionreltype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collectionreltype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_collectionreltype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collectionreltype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLeftSideCollectionID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionreltype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLeftSideCollectionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setLeftSideCollectionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setLeftSideCollectionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionreltype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionreltype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRightSideCollectionID() { 
       // FieldType: INTEGER
       $t = new  huh_collectionreltype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRightSideCollectionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setRightSideCollectionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collectionreltype();
       try { 
          $t->setRightSideCollectionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_collector extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_collector();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCollectorID());
    } 
    function testKeys() { 
       $t = new  huh_collector();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setCollectorID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CollectorID'], '0');
    } 
    function testDirtyCollectorID() { 
       // FieldType: INTEGER
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectorID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setCollectorID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setCollectorID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEtAl() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEtAl('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setEtAl('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setEtAl('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsPrimary() { 
       // FieldType: BIT(1)
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsPrimary('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setIsPrimary('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setIsPrimary('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrderNumber() { 
       // FieldType: INTEGER
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrderNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setOrderNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setOrderNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectingEventID() { 
       // FieldType: INTEGER
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectingEventID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setCollectingEventID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setCollectingEventID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_collector();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_collector();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_commonnametx extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCommonNameTxID());
    } 
    function testKeys() { 
       $t = new  huh_commonnametx();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setCommonNameTxID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CommonNameTxID'], '0');
    } 
    function testDirtyCommonNameTxID() { 
       // FieldType: INTEGER
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCommonNameTxID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setCommonNameTxID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setCommonNameTxID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAuthor() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAuthor('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setAuthor('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setAuthor('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCountry() { 
       // FieldType: VARCHAR(2)
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCountry('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setCountry('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setCountry('99999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLanguage() { 
       // FieldType: VARCHAR(2)
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLanguage('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setLanguage('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setLanguage('99999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVariant() { 
       // FieldType: VARCHAR(2)
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVariant('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setVariant('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setVariant('99999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTaxonID() { 
       // FieldType: INTEGER
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setTaxonID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setTaxonID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_commonnametx();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametx();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_commonnametxcitation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getCommonNameTxCitationID());
    } 
    function testKeys() { 
       $t = new  huh_commonnametxcitation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setCommonNameTxCitationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['CommonNameTxCitationID'], '0');
    } 
    function testDirtyCommonNameTxCitationID() { 
       // FieldType: INTEGER
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCommonNameTxCitationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setCommonNameTxCitationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setCommonNameTxCitationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCommonNameTxID() { 
       // FieldType: INTEGER
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCommonNameTxID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setCommonNameTxID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setCommonNameTxID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReferenceWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setReferenceWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setReferenceWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_commonnametxcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_commonnametxcitation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_conservdescription extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getConservDescriptionID());
    } 
    function testKeys() { 
       $t = new  huh_conservdescription();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setConservDescriptionID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ConservDescriptionID'], '0');
    } 
    function testDirtyConservDescriptionID() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setConservDescriptionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setConservDescriptionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setConservDescriptionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBackgroundInfo() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBackgroundInfo('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setBackgroundInfo('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setBackgroundInfo('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyComposition() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setComposition('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setComposition('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setComposition('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisplayRecommendations() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisplayRecommendations('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setDisplayRecommendations('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setDisplayRecommendations('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyHeight() { 
       // FieldType: REAL
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setHeight('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setHeight('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setHeight('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLightRecommendations() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLightRecommendations('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setLightRecommendations('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setLightRecommendations('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyObjLength() { 
       // FieldType: REAL
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setObjLength('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setObjLength('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setObjLength('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOtherRecommendations() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOtherRecommendations('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setOtherRecommendations('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setOtherRecommendations('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyShortDesc() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setShortDesc('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setShortDesc('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setShortDesc('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySource() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSource('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setSource('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setSource('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUnits() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUnits('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setUnits('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setUnits('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWidth() { 
       // FieldType: REAL
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWidth('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setWidth('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setWidth('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDivisionID() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescription();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDivisionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setDivisionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescription();
       try { 
          $t->setDivisionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_conservdescriptionattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_conservdescriptionattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getConservDescriptionAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_conservdescriptionattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setConservDescriptionAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ConservDescriptionAttachmentID'], '0');
    } 
    function testDirtyConservDescriptionAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescriptionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setConservDescriptionAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setConservDescriptionAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setConservDescriptionAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_conservdescriptionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_conservdescriptionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescriptionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescriptionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservdescriptionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescriptionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescriptionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyConservDescriptionID() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescriptionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setConservDescriptionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setConservDescriptionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setConservDescriptionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_conservdescriptionattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservdescriptionattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_conservevent extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_conservevent();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getConservEventID());
    } 
    function testKeys() { 
       $t = new  huh_conservevent();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setConservEventID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ConservEventID'], '0');
    } 
    function testDirtyConservEventID() { 
       // FieldType: INTEGER
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setConservEventID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setConservEventID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setConservEventID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAdvTestingExam() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAdvTestingExam('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setAdvTestingExam('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setAdvTestingExam('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAdvTestingExamResults() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAdvTestingExamResults('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setAdvTestingExamResults('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setAdvTestingExamResults('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCompletedComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCompletedComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setCompletedComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setCompletedComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCompletedDate() { 
       // FieldType: DATE
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCompletedDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setCompletedDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setCompletedDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyConditionReport() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setConditionReport('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setConditionReport('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setConditionReport('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCuratorApprovalDate() { 
       // FieldType: DATE
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCuratorApprovalDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setCuratorApprovalDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setCuratorApprovalDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyExamDate() { 
       // FieldType: DATE
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setExamDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setExamDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setExamDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPhotoDocs() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPhotoDocs('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setPhotoDocs('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setPhotoDocs('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTreatmentCompDate() { 
       // FieldType: DATE
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTreatmentCompDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setTreatmentCompDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setTreatmentCompDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTreatmentReport() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTreatmentReport('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setTreatmentReport('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setTreatmentReport('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyExaminedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setExaminedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setExaminedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setExaminedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCuratorID() { 
       // FieldType: INTEGER
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCuratorID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setCuratorID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setCuratorID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyConservDescriptionID() { 
       // FieldType: INTEGER
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setConservDescriptionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setConservDescriptionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setConservDescriptionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_conservevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setTreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conservevent();
       try { 
          $t->setTreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_conserveventattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_conserveventattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getConservEventAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_conserveventattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setConservEventAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ConservEventAttachmentID'], '0');
    } 
    function testDirtyConservEventAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_conserveventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setConservEventAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setConservEventAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setConservEventAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_conserveventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_conserveventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_conserveventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_conserveventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_conserveventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_conserveventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_conserveventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_conserveventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyConservEventID() { 
       // FieldType: INTEGER
       $t = new  huh_conserveventattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setConservEventID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setConservEventID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_conserveventattachment();
       try { 
          $t->setConservEventID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_container extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_container();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getContainerID());
    } 
    function testKeys() { 
       $t = new  huh_container();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setContainerID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ContainerID'], '0');
    } 
    function testDirtyContainerID() { 
       // FieldType: INTEGER
       $t = new  huh_container();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setContainerID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setContainerID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setContainerID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_container();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_container();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_container();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_container();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_container();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(200)
       $t = new  huh_container();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setName('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber() { 
       // FieldType: INTEGER
       $t = new  huh_container();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyType() { 
       // FieldType: SMALLINT
       $t = new  huh_container();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setType('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_container();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentID() { 
       // FieldType: INTEGER
       $t = new  huh_container();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setParentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setParentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_container();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_container();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_datatype extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_datatype();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getDataTypeID());
    } 
    function testKeys() { 
       $t = new  huh_datatype();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setDataTypeID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['DataTypeID'], '0');
    } 
    function testDirtyDataTypeID() { 
       // FieldType: INTEGER
       $t = new  huh_datatype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDataTypeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setDataTypeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setDataTypeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_datatype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_datatype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_datatype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: YEAR
       $t = new  huh_datatype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setName('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_datatype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_datatype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_datatype();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_deaccession extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_deaccession();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getDeaccessionID());
    } 
    function testKeys() { 
       $t = new  huh_deaccession();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setDeaccessionID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['DeaccessionID'], '0');
    } 
    function testDirtyDeaccessionID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeaccessionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setDeaccessionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setDeaccessionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDeaccessionDate() { 
       // FieldType: DATE
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeaccessionDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setDeaccessionDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setDeaccessionDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDeaccessionNumber() { 
       // FieldType: YEAR
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeaccessionNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setDeaccessionNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setDeaccessionNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyType() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setType('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAccessionID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setAccessionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setAccessionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccession();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccession();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_deaccessionagent extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_deaccessionagent();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getDeaccessionAgentID());
    } 
    function testKeys() { 
       $t = new  huh_deaccessionagent();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setDeaccessionAgentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['DeaccessionAgentID'], '0');
    } 
    function testDirtyDeaccessionAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeaccessionAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setDeaccessionAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setDeaccessionAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_deaccessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_deaccessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_deaccessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_deaccessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRole() { 
       // FieldType: YEAR
       $t = new  huh_deaccessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRole('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setRole('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setRole('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDeaccessionID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeaccessionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setDeaccessionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setDeaccessionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccessionagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionagent();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_deaccessionpreparation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_deaccessionpreparation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getDeaccessionPreparationID());
    } 
    function testKeys() { 
       $t = new  huh_deaccessionpreparation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setDeaccessionPreparationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['DeaccessionPreparationID'], '0');
    } 
    function testDirtyDeaccessionPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeaccessionPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setDeaccessionPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setDeaccessionPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_deaccessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_deaccessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_deaccessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyQuantity() { 
       // FieldType: SMALLINT
       $t = new  huh_deaccessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setQuantity('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setQuantity('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setQuantity('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_deaccessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDeaccessionID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeaccessionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setDeaccessionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setDeaccessionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_deaccessionpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_deaccessionpreparation();
       try { 
          $t->setPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_determination extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_determination();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getDeterminationID());
    } 
    function testKeys() { 
       $t = new  huh_determination();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setDeterminationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['DeterminationID'], '0');
    } 
    function testDirtyDeterminationID() { 
       // FieldType: INTEGER
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeterminationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setDeterminationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setDeterminationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddendum() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddendum('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setAddendum('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setAddendum('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAlternateName() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAlternateName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setAlternateName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setAlternateName('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyConfidence() { 
       // FieldType: YEAR
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setConfidence('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setConfidence('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setConfidence('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDeterminedDate() { 
       // FieldType: DATE
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeterminedDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setDeterminedDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setDeterminedDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDeterminedDatePrecision() { 
       // FieldType: TINYINT
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeterminedDatePrecision('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setDeterminedDatePrecision('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setDeterminedDatePrecision('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFeatureOrBasis() { 
       // FieldType: YEAR
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFeatureOrBasis('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setFeatureOrBasis('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setFeatureOrBasis('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsCurrent() { 
       // FieldType: BIT(1)
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsCurrent('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setIsCurrent('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setIsCurrent('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMethod() { 
       // FieldType: YEAR
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMethod('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setMethod('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setMethod('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNameUsage() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNameUsage('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setNameUsage('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setNameUsage('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyQualifier() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setQualifier('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setQualifier('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setQualifier('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTypeStatusName() { 
       // FieldType: YEAR
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTypeStatusName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setTypeStatusName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setTypeStatusName('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo3() { 
       // FieldType: BIT(1)
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setYesNo3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setYesNo3('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFragmentID() { 
       // FieldType: INTEGER
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFragmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setFragmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setFragmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTaxonID() { 
       // FieldType: INTEGER
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setTaxonID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setTaxonID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreferredTaxonID() { 
       // FieldType: INTEGER
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreferredTaxonID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setPreferredTaxonID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setPreferredTaxonID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDeterminerID() { 
       // FieldType: INTEGER
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeterminerID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setDeterminerID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setDeterminerID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_determination();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determination();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_determinationcitation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getDeterminationCitationID());
    } 
    function testKeys() { 
       $t = new  huh_determinationcitation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setDeterminationCitationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['DeterminationCitationID'], '0');
    } 
    function testDirtyDeterminationCitationID() { 
       // FieldType: INTEGER
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeterminationCitationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setDeterminationCitationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setDeterminationCitationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReferenceWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setReferenceWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setReferenceWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDeterminationID() { 
       // FieldType: INTEGER
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeterminationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setDeterminationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setDeterminationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDesignatorID() { 
       // FieldType: INTEGER
       $t = new  huh_determinationcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDesignatorID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setDesignatorID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_determinationcitation();
       try { 
          $t->setDesignatorID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_discipline extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_discipline();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getUserGroupScopeId());
    } 
    function testKeys() { 
       $t = new  huh_discipline();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setUserGroupScopeId('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['UserGroupScopeId'], '0');
    } 
    function testDirtyUserGroupScopeId() { 
       // FieldType: INTEGER
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUserGroupScopeId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setUserGroupScopeId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setUserGroupScopeId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtydisciplineId() { 
       // FieldType: INTEGER
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setdisciplineId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setdisciplineId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setdisciplineId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRegNumber() { 
       // FieldType: VARCHAR(24)
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRegNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setRegNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setRegNumber('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyType() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setType('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTaxonTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setTaxonTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setTaxonTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeographyTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeographyTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setGeographyTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setGeographyTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeologicTimePeriodTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeologicTimePeriodTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setGeologicTimePeriodTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setGeologicTimePeriodTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLithoStratTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLithoStratTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setLithoStratTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setLithoStratTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDivisionID() { 
       // FieldType: INTEGER
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDivisionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setDivisionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setDivisionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDataTypeID() { 
       // FieldType: INTEGER
       $t = new  huh_discipline();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDataTypeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setDataTypeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_discipline();
       try { 
          $t->setDataTypeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_division extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_division();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getUserGroupScopeId());
    } 
    function testKeys() { 
       $t = new  huh_division();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setUserGroupScopeId('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['UserGroupScopeId'], '0');
    } 
    function testDirtyUserGroupScopeId() { 
       // FieldType: INTEGER
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUserGroupScopeId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setUserGroupScopeId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setUserGroupScopeId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAbbrev() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAbbrev('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setAbbrev('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setAbbrev('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAltName() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAltName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setAltName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setAltName('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineType() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setDisciplineType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setDisciplineType('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtydivisionId() { 
       // FieldType: INTEGER
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setdivisionId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setdivisionId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setdivisionId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIconURI() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIconURI('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setIconURI('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setIconURI('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRegNumber() { 
       // FieldType: VARCHAR(24)
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRegNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setRegNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setRegNumber('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUri() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUri('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setUri('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setUri('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddressID() { 
       // FieldType: INTEGER
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddressID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setAddressID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setAddressID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInstitutionID() { 
       // FieldType: INTEGER
       $t = new  huh_division();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInstitutionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setInstitutionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_division();
       try { 
          $t->setInstitutionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_dnasequence extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getDnaSequenceID());
    } 
    function testKeys() { 
       $t = new  huh_dnasequence();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setDnaSequenceID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['DnaSequenceID'], '0');
    } 
    function testDirtyDnaSequenceID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDnaSequenceID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setDnaSequenceID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setDnaSequenceID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAmbiguousResidues() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAmbiguousResidues('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setAmbiguousResidues('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setAmbiguousResidues('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBOLDBarcodeID() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBOLDBarcodeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setBOLDBarcodeID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setBOLDBarcodeID('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBOLDLastUpdateDate() { 
       // FieldType: DATE
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBOLDLastUpdateDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setBOLDLastUpdateDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setBOLDLastUpdateDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBOLDSampleID() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBOLDSampleID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setBOLDSampleID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setBOLDSampleID('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBOLDTranslationMatrix() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBOLDTranslationMatrix('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setBOLDTranslationMatrix('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setBOLDTranslationMatrix('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCompA() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCompA('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setCompA('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setCompA('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCompC() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCompC('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setCompC('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setCompC('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCompG() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCompG('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setCompG('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setCompG('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtycompT() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setcompT('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setcompT('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setcompT('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGenBankAccessionNumber() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGenBankAccessionNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setGenBankAccessionNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setGenBankAccessionNumber('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeneSequence() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeneSequence('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setGeneSequence('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setGeneSequence('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMoleculeType() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMoleculeType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setMoleculeType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setMoleculeType('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber3() { 
       // FieldType: REAL
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setNumber3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setNumber3('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTargetMarker() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTargetMarker('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setTargetMarker('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setTargetMarker('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setText1('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setText2('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText3() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setText3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setText3('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTotalResidues() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTotalResidues('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setTotalResidues('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setTotalResidues('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo3() { 
       // FieldType: BIT(1)
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setYesNo3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setYesNo3('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionObjectID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequence();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionObjectID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setCollectionObjectID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequence();
       try { 
          $t->setCollectionObjectID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_dnasequenceattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_dnasequenceattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getDnaSequencingRunAttachmentId());
    } 
    function testKeys() { 
       $t = new  huh_dnasequenceattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setDnaSequencingRunAttachmentId('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['DnaSequencingRunAttachmentId'], '0');
    } 
    function testDirtyDnaSequencingRunAttachmentId() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequenceattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDnaSequencingRunAttachmentId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setDnaSequencingRunAttachmentId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setDnaSequencingRunAttachmentId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_dnasequenceattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_dnasequenceattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequenceattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequenceattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_dnasequenceattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequenceattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequenceattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDnaSequencingRunID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequenceattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDnaSequencingRunID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setDnaSequencingRunID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setDnaSequencingRunID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequenceattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequenceattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_dnasequencingrun extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getDNASequencingRunID());
    } 
    function testKeys() { 
       $t = new  huh_dnasequencingrun();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setDNASequencingRunID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['DNASequencingRunID'], '0');
    } 
    function testDirtyDNASequencingRunID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDNASequencingRunID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setDNASequencingRunID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setDNASequencingRunID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber3() { 
       // FieldType: REAL
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setNumber3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setNumber3('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPCRCocktailPrimer() { 
       // FieldType: BIT(1)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPCRCocktailPrimer('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setPCRCocktailPrimer('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setPCRCocktailPrimer('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPCRForwardPrimerCode() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPCRForwardPrimerCode('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setPCRForwardPrimerCode('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setPCRForwardPrimerCode('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPCRPrimerName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPCRPrimerName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setPCRPrimerName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setPCRPrimerName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPCRPrimerSequence5_3() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPCRPrimerSequence5_3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setPCRPrimerSequence5_3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setPCRPrimerSequence5_3('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPCRReversePrimerCode() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPCRReversePrimerCode('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setPCRReversePrimerCode('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setPCRReversePrimerCode('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReadDirection() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReadDirection('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setReadDirection('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setReadDirection('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRunDate() { 
       // FieldType: DATE
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRunDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setRunDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setRunDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyScoreFileName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setScoreFileName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setScoreFileName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setScoreFileName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySequenceCocktailPrimer() { 
       // FieldType: BIT(1)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSequenceCocktailPrimer('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setSequenceCocktailPrimer('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setSequenceCocktailPrimer('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySequencePrimerCode() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSequencePrimerCode('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setSequencePrimerCode('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setSequencePrimerCode('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySequencePrimerName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSequencePrimerName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setSequencePrimerName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setSequencePrimerName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySequencePrimerSequence5_3() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSequencePrimerSequence5_3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setSequencePrimerSequence5_3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setSequencePrimerSequence5_3('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setText1('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setText2('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText3() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setText3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setText3('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTraceFileName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTraceFileName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setTraceFileName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setTraceFileName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo3() { 
       // FieldType: BIT(1)
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setYesNo3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setYesNo3('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDNASequenceID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDNASequenceID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setDNASequenceID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setDNASequenceID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingrun();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingrun();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_dnasequencingruncitation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getDNASequencingRunCitationID());
    } 
    function testKeys() { 
       $t = new  huh_dnasequencingruncitation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setDNASequencingRunCitationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['DNASequencingRunCitationID'], '0');
    } 
    function testDirtyDNASequencingRunCitationID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDNASequencingRunCitationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setDNASequencingRunCitationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setDNASequencingRunCitationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReferenceWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setReferenceWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setReferenceWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDNASequencingRunID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDNASequencingRunID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setDNASequencingRunID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setDNASequencingRunID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_dnasequencingruncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_dnasequencingruncitation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_exchangein extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_exchangein();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getExchangeInID());
    } 
    function testKeys() { 
       $t = new  huh_exchangein();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setExchangeInID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ExchangeInID'], '0');
    } 
    function testDirtyExchangeInID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setExchangeInID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setExchangeInID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setExchangeInID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescriptionOfMaterial() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescriptionOfMaterial('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setDescriptionOfMaterial('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setDescriptionOfMaterial('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDiscardCount() { 
       // FieldType: SMALLINT
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDiscardCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setDiscardCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setDiscardCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDistributeCount() { 
       // FieldType: SMALLINT
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDistributeCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setDistributeCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setDistributeCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyExchangeDate() { 
       // FieldType: DATE
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setExchangeDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setExchangeDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setExchangeDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNonSpecimenCount() { 
       // FieldType: SMALLINT
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNonSpecimenCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setNonSpecimenCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setNonSpecimenCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyQuantityExchanged() { 
       // FieldType: SMALLINT
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setQuantityExchanged('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setQuantityExchanged('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setQuantityExchanged('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReturnCount() { 
       // FieldType: SMALLINT
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReturnCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setReturnCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setReturnCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcGeography() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcGeography('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setSrcGeography('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setSrcGeography('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcTaxonomy() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcTaxonomy('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setSrcTaxonomy('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setSrcTaxonomy('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTypeCount() { 
       // FieldType: SMALLINT
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTypeCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setTypeCount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setTypeCount('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCatalogedByID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCatalogedByID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setCatalogedByID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setCatalogedByID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddressOfRecordID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddressOfRecordID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setAddressOfRecordID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setAddressOfRecordID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDivisionID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDivisionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setDivisionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setDivisionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReceivedFromOrganizationID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangein();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReceivedFromOrganizationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setReceivedFromOrganizationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangein();
       try { 
          $t->setReceivedFromOrganizationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_exchangeout extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getExchangeOutID());
    } 
    function testKeys() { 
       $t = new  huh_exchangeout();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setExchangeOutID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ExchangeOutID'], '0');
    } 
    function testDirtyExchangeOutID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setExchangeOutID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setExchangeOutID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setExchangeOutID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescriptionOfMaterial() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescriptionOfMaterial('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setDescriptionOfMaterial('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setDescriptionOfMaterial('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyExchangeDate() { 
       // FieldType: DATE
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setExchangeDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setExchangeDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setExchangeDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyExchangeNumber() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setExchangeNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setExchangeNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setExchangeNumber('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyQuantityExchanged() { 
       // FieldType: SMALLINT
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setQuantityExchanged('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setQuantityExchanged('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setQuantityExchanged('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRestrictions() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRestrictions('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setRestrictions('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setRestrictions('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcGeography() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcGeography('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setSrcGeography('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setSrcGeography('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcTaxonomy() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcTaxonomy('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setSrcTaxonomy('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setSrcTaxonomy('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDivisionID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDivisionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setDivisionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setDivisionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddressOfRecordID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddressOfRecordID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setAddressOfRecordID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setAddressOfRecordID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCatalogedByID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCatalogedByID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setCatalogedByID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setCatalogedByID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySentToOrganizationID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeout();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSentToOrganizationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setSentToOrganizationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeout();
       try { 
          $t->setSentToOrganizationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_exchangeoutpreparation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getExchangeOutPreparationID());
    } 
    function testKeys() { 
       $t = new  huh_exchangeoutpreparation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setExchangeOutPreparationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ExchangeOutPreparationID'], '0');
    } 
    function testDirtyExchangeOutPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setExchangeOutPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setExchangeOutPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setExchangeOutPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescriptionOfMaterial() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescriptionOfMaterial('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setDescriptionOfMaterial('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setDescriptionOfMaterial('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setInComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setInComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyItemCount() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setItemCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setItemCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setItemCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNonSpecimenCount() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNonSpecimenCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setNonSpecimenCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setNonSpecimenCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOutComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOutComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setOutComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setOutComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReceivedComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReceivedComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setReceivedComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setReceivedComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTypeCount() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTypeCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setTypeCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setTypeCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyExchangeOutID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setExchangeOutID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setExchangeOutID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setExchangeOutID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_exchangeoutpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_exchangeoutpreparation();
       try { 
          $t->setPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_fieldnotebook extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getFieldNotebookID());
    } 
    function testKeys() { 
       $t = new  huh_fieldnotebook();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setFieldNotebookID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['FieldNotebookID'], '0');
    } 
    function testDirtyFieldNotebookID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNotebookID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setFieldNotebookID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setFieldNotebookID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndDate() { 
       // FieldType: DATE
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setEndDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setEndDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStorage() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStorage('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setStorage('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setStorage('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartDate() { 
       // FieldType: DATE
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setStartDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setStartDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setCollectionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setCollectionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebook();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebook();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_fieldnotebookattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_fieldnotebookattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getFieldNotebookAttachmentId());
    } 
    function testKeys() { 
       $t = new  huh_fieldnotebookattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setFieldNotebookAttachmentId('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['FieldNotebookAttachmentId'], '0');
    } 
    function testDirtyFieldNotebookAttachmentId() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNotebookAttachmentId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setFieldNotebookAttachmentId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setFieldNotebookAttachmentId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fieldnotebookattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fieldnotebookattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_fieldnotebookattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldNotebookID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNotebookID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setFieldNotebookID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setFieldNotebookID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_fieldnotebookpage extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_fieldnotebookpage();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getFieldNotebookPageID());
    } 
    function testKeys() { 
       $t = new  huh_fieldnotebookpage();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setFieldNotebookPageID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['FieldNotebookPageID'], '0');
    } 
    function testDirtyFieldNotebookPageID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNotebookPageID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setFieldNotebookPageID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setFieldNotebookPageID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fieldnotebookpage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fieldnotebookpage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_fieldnotebookpage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setDescription('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPageNumber() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_fieldnotebookpage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPageNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setPageNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setPageNumber('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyScanDate() { 
       // FieldType: DATE
       $t = new  huh_fieldnotebookpage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setScanDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setScanDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setScanDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldNotebookPageSetID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNotebookPageSetID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setFieldNotebookPageSetID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setFieldNotebookPageSetID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpage();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_fieldnotebookpageattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_fieldnotebookpageattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getFieldNotebookPageAttachmentId());
    } 
    function testKeys() { 
       $t = new  huh_fieldnotebookpageattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setFieldNotebookPageAttachmentId('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['FieldNotebookPageAttachmentId'], '0');
    } 
    function testDirtyFieldNotebookPageAttachmentId() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNotebookPageAttachmentId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setFieldNotebookPageAttachmentId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setFieldNotebookPageAttachmentId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fieldnotebookpageattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fieldnotebookpageattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_fieldnotebookpageattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldNotebookPageID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNotebookPageID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setFieldNotebookPageID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setFieldNotebookPageID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_fieldnotebookpageset extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getFieldNotebookPageSetID());
    } 
    function testKeys() { 
       $t = new  huh_fieldnotebookpageset();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setFieldNotebookPageSetID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['FieldNotebookPageSetID'], '0');
    } 
    function testDirtyFieldNotebookPageSetID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNotebookPageSetID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setFieldNotebookPageSetID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setFieldNotebookPageSetID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setDescription('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndDate() { 
       // FieldType: DATE
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setEndDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setEndDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMethod() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMethod('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setMethod('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setMethod('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrderNumber() { 
       // FieldType: SMALLINT
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrderNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setOrderNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setOrderNumber('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartDate() { 
       // FieldType: DATE
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setStartDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setStartDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldNotebookID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNotebookID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setFieldNotebookID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setFieldNotebookID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpageset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpageset();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_fieldnotebookpagesetattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_fieldnotebookpagesetattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getFieldNotebookPageSetAttachmentId());
    } 
    function testKeys() { 
       $t = new  huh_fieldnotebookpagesetattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setFieldNotebookPageSetAttachmentId('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['FieldNotebookPageSetAttachmentId'], '0');
    } 
    function testDirtyFieldNotebookPageSetAttachmentId() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpagesetattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNotebookPageSetAttachmentId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setFieldNotebookPageSetAttachmentId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setFieldNotebookPageSetAttachmentId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fieldnotebookpagesetattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fieldnotebookpagesetattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpagesetattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpagesetattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_fieldnotebookpagesetattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpagesetattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpagesetattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpagesetattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldNotebookPageSetID() { 
       // FieldType: INTEGER
       $t = new  huh_fieldnotebookpagesetattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNotebookPageSetID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setFieldNotebookPageSetID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fieldnotebookpagesetattachment();
       try { 
          $t->setFieldNotebookPageSetID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_fragment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_fragment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getFragmentID());
    } 
    function testKeys() { 
       $t = new  huh_fragment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setFragmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['FragmentID'], '0');
    } 
    function testDirtyFragmentID() { 
       // FieldType: INTEGER
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFragmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setFragmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setFragmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAccessionNumber() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setAccessionNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setAccessionNumber('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDeaccessioned() { 
       // FieldType: BIT(1)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeaccessioned('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setDeaccessioned('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setDeaccessioned('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDistribution() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDistribution('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setDistribution('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setDistribution('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGUID() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGUID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setGUID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setGUID('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIdentifier() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIdentifier('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setIdentifier('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setIdentifier('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: INTEGER
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setNumber1('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setNumber1('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: INTEGER
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setNumber2('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setNumber2('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPhenology() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPhenology('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setPhenology('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setPhenology('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPrepMethod() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPrepMethod('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setPrepMethod('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setPrepMethod('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyProvenance() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setProvenance('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setProvenance('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setProvenance('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySex() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSex('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setSex('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setSex('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVoucher() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVoucher('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setVoucher('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setVoucher('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionObjectID() { 
       // FieldType: INTEGER
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionObjectID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setCollectionObjectID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setCollectionObjectID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fragment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_fragmentattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_fragmentattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getFragmentAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_fragmentattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setFragmentAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['FragmentAttachmentID'], '0');
    } 
    function testDirtyFragmentAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFragmentAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setFragmentAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setFragmentAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fragmentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fragmentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_fragmentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFragmentID() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFragmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setFragmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setFragmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_fragmentcitation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getFragmentCitationID());
    } 
    function testKeys() { 
       $t = new  huh_fragmentcitation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setFragmentCitationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['FragmentCitationID'], '0');
    } 
    function testDirtyFragmentCitationID() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFragmentCitationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setFragmentCitationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setFragmentCitationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsFigured() { 
       // FieldType: BIT(1)
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsFigured('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setIsFigured('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setIsFigured('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReferenceWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setReferenceWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setReferenceWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFragmentID() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFragmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setFragmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setFragmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_fragmentcitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_fragmentcitation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_geocoorddetail extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getGeoCoordDetailID());
    } 
    function testKeys() { 
       $t = new  huh_geocoorddetail();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setGeoCoordDetailID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['GeoCoordDetailID'], '0');
    } 
    function testDirtyGeoCoordDetailID() { 
       // FieldType: INTEGER
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeoCoordDetailID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setGeoCoordDetailID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setGeoCoordDetailID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeoRefAccuracyUnits() { 
       // FieldType: VARCHAR(20)
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeoRefAccuracyUnits('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setGeoRefAccuracyUnits('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setGeoRefAccuracyUnits('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeoRefDetDate() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeoRefDetDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setGeoRefDetDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setGeoRefDetDate('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeoRefDetRef() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeoRefDetRef('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setGeoRefDetRef('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setGeoRefDetRef('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeoRefRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeoRefRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setGeoRefRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setGeoRefRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeoRefVerificationStatus() { 
       // FieldType: YEAR
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeoRefVerificationStatus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setGeoRefVerificationStatus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setGeoRefVerificationStatus('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMaxUncertaintyEst() { 
       // FieldType: REAL
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMaxUncertaintyEst('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setMaxUncertaintyEst('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setMaxUncertaintyEst('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMaxUncertaintyEstUnit() { 
       // FieldType: VARCHAR(8)
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMaxUncertaintyEstUnit('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setMaxUncertaintyEstUnit('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setMaxUncertaintyEstUnit('99999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNamedPlaceExtent() { 
       // FieldType: REAL
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNamedPlaceExtent('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setNamedPlaceExtent('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setNamedPlaceExtent('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNoGeoRefBecause() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNoGeoRefBecause('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setNoGeoRefBecause('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setNoGeoRefBecause('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOriginalCoordSystem() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOriginalCoordSystem('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setOriginalCoordSystem('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setOriginalCoordSystem('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyProtocol() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setProtocol('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setProtocol('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setProtocol('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySource() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSource('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setSource('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setSource('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyValidation() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setValidation('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setValidation('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setValidation('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLocalityID() { 
       // FieldType: INTEGER
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setLocalityID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setLocalityID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geocoorddetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geocoorddetail();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_geography extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_geography();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getGeographyID());
    } 
    function testKeys() { 
       $t = new  huh_geography();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setGeographyID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['GeographyID'], '0');
    } 
    function testDirtyGeographyID() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeographyID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setGeographyID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setGeographyID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAbbrev() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAbbrev('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setAbbrev('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setAbbrev('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCentroidLat() { 
       // FieldType: DECIMAL(19,2)
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCentroidLat('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setCentroidLat('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setCentroidLat('9999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCentroidLon() { 
       // FieldType: DECIMAL(19,2)
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCentroidLon('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setCentroidLon('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setCentroidLon('9999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCommonName() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCommonName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setCommonName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setCommonName('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setFullName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setFullName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeographyCode() { 
       // FieldType: VARCHAR(8)
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeographyCode('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setGeographyCode('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setGeographyCode('99999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGML() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGML('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setGML('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setGML('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGUID() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGUID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setGUID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setGUID('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyHighestChildNodeNumber() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setHighestChildNodeNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setHighestChildNodeNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setHighestChildNodeNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsAccepted() { 
       // FieldType: BIT(1)
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsAccepted('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setIsAccepted('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setIsAccepted('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsCurrent() { 
       // FieldType: BIT(1)
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsCurrent('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setIsCurrent('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setIsCurrent('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNodeNumber() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNodeNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setNodeNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setNodeNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setNumber1('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setNumber1('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setNumber2('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setNumber2('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRankID() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRankID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setRankID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setRankID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setText1('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampVersion() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setTimestampVersion('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setTimestampVersion('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeographyTreeDefItemID() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeographyTreeDefItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setGeographyTreeDefItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setGeographyTreeDefItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentID() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setParentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setParentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAcceptedID() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAcceptedID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setAcceptedID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setAcceptedID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeographyTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_geography();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeographyTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setGeographyTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geography();
       try { 
          $t->setGeographyTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_geographytreedef extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_geographytreedef();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getGeographyTreeDefID());
    } 
    function testKeys() { 
       $t = new  huh_geographytreedef();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setGeographyTreeDefID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['GeographyTreeDefID'], '0');
    } 
    function testDirtyGeographyTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_geographytreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeographyTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setGeographyTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setGeographyTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geographytreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geographytreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_geographytreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullNameDirection() { 
       // FieldType: INTEGER
       $t = new  huh_geographytreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullNameDirection('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setFullNameDirection('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setFullNameDirection('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geographytreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_geographytreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geographytreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geographytreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedef();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_geographytreedefitem extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getGeographyTreeDefItemID());
    } 
    function testKeys() { 
       $t = new  huh_geographytreedefitem();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setGeographyTreeDefItemID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['GeographyTreeDefItemID'], '0');
    } 
    function testDirtyGeographyTreeDefItemID() { 
       // FieldType: INTEGER
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeographyTreeDefItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setGeographyTreeDefItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setGeographyTreeDefItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullNameSeparator() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullNameSeparator('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setFullNameSeparator('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setFullNameSeparator('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsEnforced() { 
       // FieldType: BIT(1)
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsEnforced('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setIsEnforced('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setIsEnforced('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsInFullName() { 
       // FieldType: BIT(1)
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsInFullName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setIsInFullName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setIsInFullName('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRankID() { 
       // FieldType: INTEGER
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRankID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setRankID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setRankID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTextAfter() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTextAfter('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setTextAfter('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setTextAfter('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTextBefore() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTextBefore('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setTextBefore('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setTextBefore('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentItemID() { 
       // FieldType: INTEGER
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setParentItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setParentItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeographyTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_geographytreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeographyTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setGeographyTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geographytreedefitem();
       try { 
          $t->setGeographyTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_geologictimeperiod extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getGeologicTimePeriodID());
    } 
    function testKeys() { 
       $t = new  huh_geologictimeperiod();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setGeologicTimePeriodID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['GeologicTimePeriodID'], '0');
    } 
    function testDirtyGeologicTimePeriodID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeologicTimePeriodID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setGeologicTimePeriodID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setGeologicTimePeriodID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndPeriod() { 
       // FieldType: REAL
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndPeriod('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setEndPeriod('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setEndPeriod('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndUncertainty() { 
       // FieldType: REAL
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndUncertainty('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setEndUncertainty('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setEndUncertainty('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setFullName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setFullName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGUID() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGUID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setGUID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setGUID('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyHighestChildNodeNumber() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setHighestChildNodeNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setHighestChildNodeNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setHighestChildNodeNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsAccepted() { 
       // FieldType: BIT(1)
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsAccepted('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setIsAccepted('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setIsAccepted('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsBioStrat() { 
       // FieldType: BIT(1)
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsBioStrat('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setIsBioStrat('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setIsBioStrat('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNodeNumber() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNodeNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setNodeNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setNodeNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRankID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRankID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setRankID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setRankID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStandard() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStandard('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setStandard('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setStandard('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartPeriod() { 
       // FieldType: REAL
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartPeriod('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setStartPeriod('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setStartPeriod('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartUncertainty() { 
       // FieldType: REAL
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartUncertainty('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setStartUncertainty('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setStartUncertainty('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeologicTimePeriodTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeologicTimePeriodTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setGeologicTimePeriodTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setGeologicTimePeriodTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeologicTimePeriodTreeDefItemID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeologicTimePeriodTreeDefItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setGeologicTimePeriodTreeDefItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setGeologicTimePeriodTreeDefItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setParentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setParentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAcceptedID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiod();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAcceptedID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setAcceptedID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiod();
       try { 
          $t->setAcceptedID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_geologictimeperiodtreedef extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_geologictimeperiodtreedef();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getGeologicTimePeriodTreeDefID());
    } 
    function testKeys() { 
       $t = new  huh_geologictimeperiodtreedef();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setGeologicTimePeriodTreeDefID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['GeologicTimePeriodTreeDefID'], '0');
    } 
    function testDirtyGeologicTimePeriodTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiodtreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeologicTimePeriodTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setGeologicTimePeriodTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setGeologicTimePeriodTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geologictimeperiodtreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geologictimeperiodtreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiodtreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullNameDirection() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiodtreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullNameDirection('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setFullNameDirection('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setFullNameDirection('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geologictimeperiodtreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_geologictimeperiodtreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiodtreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiodtreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedef();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_geologictimeperiodtreedefitem extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getGeologicTimePeriodTreeDefItemID());
    } 
    function testKeys() { 
       $t = new  huh_geologictimeperiodtreedefitem();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setGeologicTimePeriodTreeDefItemID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['GeologicTimePeriodTreeDefItemID'], '0');
    } 
    function testDirtyGeologicTimePeriodTreeDefItemID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeologicTimePeriodTreeDefItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setGeologicTimePeriodTreeDefItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setGeologicTimePeriodTreeDefItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullNameSeparator() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullNameSeparator('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setFullNameSeparator('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setFullNameSeparator('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsEnforced() { 
       // FieldType: BIT(1)
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsEnforced('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setIsEnforced('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setIsEnforced('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsInFullName() { 
       // FieldType: BIT(1)
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsInFullName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setIsInFullName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setIsInFullName('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRankID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRankID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setRankID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setRankID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTextAfter() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTextAfter('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setTextAfter('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setTextAfter('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTextBefore() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTextBefore('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setTextBefore('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setTextBefore('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeologicTimePeriodTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeologicTimePeriodTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setGeologicTimePeriodTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setGeologicTimePeriodTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentItemID() { 
       // FieldType: INTEGER
       $t = new  huh_geologictimeperiodtreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setParentItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_geologictimeperiodtreedefitem();
       try { 
          $t->setParentItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_gift extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_gift();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getGiftID());
    } 
    function testKeys() { 
       $t = new  huh_gift();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setGiftID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['GiftID'], '0');
    } 
    function testDirtyGiftID() { 
       // FieldType: INTEGER
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGiftID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setGiftID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setGiftID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateReceived() { 
       // FieldType: DATE
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateReceived('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setDateReceived('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setDateReceived('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGiftDate() { 
       // FieldType: DATE
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGiftDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setGiftDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setGiftDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGiftNumber() { 
       // FieldType: YEAR
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGiftNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setGiftNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setGiftNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsFinancialResponsibility() { 
       // FieldType: BIT(1)
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsFinancialResponsibility('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setIsFinancialResponsibility('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setIsFinancialResponsibility('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPurposeOfGift() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPurposeOfGift('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setPurposeOfGift('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setPurposeOfGift('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReceivedComments() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReceivedComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setReceivedComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setReceivedComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpecialConditions() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecialConditions('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setSpecialConditions('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setSpecialConditions('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcGeography() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcGeography('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setSrcGeography('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setSrcGeography('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcTaxonomy() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcTaxonomy('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setSrcTaxonomy('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setSrcTaxonomy('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDivisionID() { 
       // FieldType: INTEGER
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDivisionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setDivisionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setDivisionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddressOfRecordID() { 
       // FieldType: INTEGER
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddressOfRecordID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setAddressOfRecordID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setAddressOfRecordID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_gift();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_gift();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_giftagent extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_giftagent();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getGiftAgentID());
    } 
    function testKeys() { 
       $t = new  huh_giftagent();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setGiftAgentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['GiftAgentID'], '0');
    } 
    function testDirtyGiftAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_giftagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGiftAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setGiftAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setGiftAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_giftagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_giftagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_giftagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_giftagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRole() { 
       // FieldType: YEAR
       $t = new  huh_giftagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRole('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setRole('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setRole('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_giftagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_giftagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_giftagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_giftagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGiftID() { 
       // FieldType: INTEGER
       $t = new  huh_giftagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGiftID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setGiftID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftagent();
       try { 
          $t->setGiftID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_giftpreparation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getGiftPreparationID());
    } 
    function testKeys() { 
       $t = new  huh_giftpreparation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setGiftPreparationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['GiftPreparationID'], '0');
    } 
    function testDirtyGiftPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGiftPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setGiftPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setGiftPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescriptionOfMaterial() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescriptionOfMaterial('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setDescriptionOfMaterial('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setDescriptionOfMaterial('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setInComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setInComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyItemCount() { 
       // FieldType: INTEGER
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setItemCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setItemCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setItemCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNonSpecimenCount() { 
       // FieldType: INTEGER
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNonSpecimenCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setNonSpecimenCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setNonSpecimenCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOutComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOutComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setOutComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setOutComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReceivedComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReceivedComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setReceivedComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setReceivedComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTypeCount() { 
       // FieldType: INTEGER
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTypeCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setTypeCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setTypeCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGiftID() { 
       // FieldType: INTEGER
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGiftID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setGiftID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setGiftID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_giftpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_giftpreparation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_groupperson extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_groupperson();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getGroupPersonID());
    } 
    function testKeys() { 
       $t = new  huh_groupperson();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setGroupPersonID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['GroupPersonID'], '0');
    } 
    function testDirtyGroupPersonID() { 
       // FieldType: INTEGER
       $t = new  huh_groupperson();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGroupPersonID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setGroupPersonID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setGroupPersonID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_groupperson();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_groupperson();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_groupperson();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrderNumber() { 
       // FieldType: SMALLINT
       $t = new  huh_groupperson();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrderNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setOrderNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setOrderNumber('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_groupperson();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGroupID() { 
       // FieldType: INTEGER
       $t = new  huh_groupperson();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGroupID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setGroupID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setGroupID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_groupperson();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_groupperson();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_groupperson();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDivisionID() { 
       // FieldType: INTEGER
       $t = new  huh_groupperson();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDivisionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setDivisionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_groupperson();
       try { 
          $t->setDivisionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_hibernate_unique_key extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_hibernate_unique_key();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
    } 
    function testKeys() { 
       $t = new  huh_hibernate_unique_key();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),0);
       $pk = $t->PKArray();
    } 
    function testDirtynext_hi() { 
       // FieldType: INTEGER
       $t = new  huh_hibernate_unique_key();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setnext_hi('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_hibernate_unique_key();
       try { 
          $t->setnext_hi('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_hibernate_unique_key();
       try { 
          $t->setnext_hi('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_inforequest extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_inforequest();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getInfoRequestID());
    } 
    function testKeys() { 
       $t = new  huh_inforequest();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setInfoRequestID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['InfoRequestID'], '0');
    } 
    function testDirtyInfoRequestID() { 
       // FieldType: INTEGER
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInfoRequestID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setInfoRequestID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setInfoRequestID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEmail() { 
       // FieldType: YEAR
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEmail('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setEmail('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setEmail('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFirstname() { 
       // FieldType: YEAR
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFirstname('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setFirstname('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setFirstname('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInfoReqNumber() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInfoReqNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setInfoReqNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setInfoReqNumber('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInstitution() { 
       // FieldType: VARCHAR(127)
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInstitution('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setInstitution('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setInstitution('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLastname() { 
       // FieldType: YEAR
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLastname('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setLastname('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setLastname('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReplyDate() { 
       // FieldType: DATE
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReplyDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setReplyDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setReplyDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRequestDate() { 
       // FieldType: DATE
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRequestDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setRequestDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setRequestDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_inforequest();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_inforequest();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_institution extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_institution();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getUserGroupScopeId());
    } 
    function testKeys() { 
       $t = new  huh_institution();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setUserGroupScopeId('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['UserGroupScopeId'], '0');
    } 
    function testDirtyUserGroupScopeId() { 
       // FieldType: INTEGER
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUserGroupScopeId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setUserGroupScopeId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setUserGroupScopeId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAltName() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAltName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setAltName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setAltName('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCode() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCode('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setCode('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setCode('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCopyright() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCopyright('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setCopyright('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setCopyright('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisclaimer() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisclaimer('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setDisclaimer('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setDisclaimer('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyHasBeenAsked() { 
       // FieldType: BIT(1)
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setHasBeenAsked('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setHasBeenAsked('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setHasBeenAsked('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIconURI() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIconURI('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setIconURI('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setIconURI('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyinstitutionId() { 
       // FieldType: INTEGER
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setinstitutionId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setinstitutionId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setinstitutionId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIpr() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIpr('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setIpr('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setIpr('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsAccessionsGlobal() { 
       // FieldType: BIT(1)
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsAccessionsGlobal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setIsAccessionsGlobal('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setIsAccessionsGlobal('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsAnonymous() { 
       // FieldType: BIT(1)
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsAnonymous('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setIsAnonymous('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setIsAnonymous('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsSecurityOn() { 
       // FieldType: BIT(1)
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsSecurityOn('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setIsSecurityOn('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setIsSecurityOn('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsServerBased() { 
       // FieldType: BIT(1)
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsServerBased('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setIsServerBased('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setIsServerBased('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLicense() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLicense('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setLicense('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setLicense('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLsidAuthority() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLsidAuthority('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setLsidAuthority('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setLsidAuthority('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRegNumber() { 
       // FieldType: VARCHAR(24)
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRegNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setRegNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setRegNumber('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTermsOfUse() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTermsOfUse('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setTermsOfUse('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setTermsOfUse('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUri() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUri('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setUri('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setUri('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddressID() { 
       // FieldType: INTEGER
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddressID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setAddressID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setAddressID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStorageTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_institution();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStorageTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setStorageTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_institution();
       try { 
          $t->setStorageTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_journal extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_journal();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getJournalID());
    } 
    function testKeys() { 
       $t = new  huh_journal();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setJournalID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['JournalID'], '0');
    } 
    function testDirtyJournalID() { 
       // FieldType: INTEGER
       $t = new  huh_journal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setJournalID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setJournalID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setJournalID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_journal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_journal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_journal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGUID() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_journal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGUID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setGUID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setGUID('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyISSN() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_journal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setISSN('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setISSN('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setISSN('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyJournalAbbreviation() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_journal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setJournalAbbreviation('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setJournalAbbreviation('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setJournalAbbreviation('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyJournalName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_journal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setJournalName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setJournalName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setJournalName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_journal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_journal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setText1('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_journal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_journal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_journal();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_latlonpolygon extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_latlonpolygon();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLatLonPolygonID());
    } 
    function testKeys() { 
       $t = new  huh_latlonpolygon();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLatLonPolygonID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LatLonPolygonID'], '0');
    } 
    function testDirtyLatLonPolygonID() { 
       // FieldType: INTEGER
       $t = new  huh_latlonpolygon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLatLonPolygonID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setLatLonPolygonID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setLatLonPolygonID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_latlonpolygon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_latlonpolygon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_latlonpolygon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_latlonpolygon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsPolyline() { 
       // FieldType: BIT(1)
       $t = new  huh_latlonpolygon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsPolyline('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setIsPolyline('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setIsPolyline('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_latlonpolygon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_latlonpolygon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLocalityID() { 
       // FieldType: INTEGER
       $t = new  huh_latlonpolygon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setLocalityID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setLocalityID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_latlonpolygon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpVisualQueryID() { 
       // FieldType: INTEGER
       $t = new  huh_latlonpolygon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpVisualQueryID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setSpVisualQueryID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygon();
       try { 
          $t->setSpVisualQueryID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_latlonpolygonpnt extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_latlonpolygonpnt();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLatLonPolygonPntID());
    } 
    function testKeys() { 
       $t = new  huh_latlonpolygonpnt();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLatLonPolygonPntID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LatLonPolygonPntID'], '0');
    } 
    function testDirtyLatLonPolygonPntID() { 
       // FieldType: INTEGER
       $t = new  huh_latlonpolygonpnt();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLatLonPolygonPntID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygonpnt();
       try { 
          $t->setLatLonPolygonPntID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygonpnt();
       try { 
          $t->setLatLonPolygonPntID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyElevation() { 
       // FieldType: INTEGER
       $t = new  huh_latlonpolygonpnt();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setElevation('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygonpnt();
       try { 
          $t->setElevation('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygonpnt();
       try { 
          $t->setElevation('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLatitude() { 
       // FieldType: DECIMAL(12,10)
       $t = new  huh_latlonpolygonpnt();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLatitude('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygonpnt();
       try { 
          $t->setLatitude('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygonpnt();
       try { 
          $t->setLatitude('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLongitude() { 
       // FieldType: DECIMAL(12,10)
       $t = new  huh_latlonpolygonpnt();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLongitude('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygonpnt();
       try { 
          $t->setLongitude('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygonpnt();
       try { 
          $t->setLongitude('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_latlonpolygonpnt();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygonpnt();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygonpnt();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLatLonPolygonID() { 
       // FieldType: INTEGER
       $t = new  huh_latlonpolygonpnt();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLatLonPolygonID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygonpnt();
       try { 
          $t->setLatLonPolygonID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_latlonpolygonpnt();
       try { 
          $t->setLatLonPolygonID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_lithostrat extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLithoStratID());
    } 
    function testKeys() { 
       $t = new  huh_lithostrat();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLithoStratID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LithoStratID'], '0');
    } 
    function testDirtyLithoStratID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLithoStratID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setLithoStratID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setLithoStratID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setFullName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setFullName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGUID() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGUID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setGUID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setGUID('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyHighestChildNodeNumber() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setHighestChildNodeNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setHighestChildNodeNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setHighestChildNodeNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsAccepted() { 
       // FieldType: BIT(1)
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsAccepted('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setIsAccepted('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setIsAccepted('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNodeNumber() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNodeNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setNodeNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setNodeNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: DOUBLE
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setNumber1('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: DOUBLE
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setNumber2('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRankID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRankID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setRankID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setRankID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setParentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setParentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLithoStratTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLithoStratTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setLithoStratTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setLithoStratTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAcceptedID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAcceptedID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setAcceptedID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setAcceptedID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLithoStratTreeDefItemID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrat();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLithoStratTreeDefItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setLithoStratTreeDefItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrat();
       try { 
          $t->setLithoStratTreeDefItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_lithostrattreedef extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_lithostrattreedef();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLithoStratTreeDefID());
    } 
    function testKeys() { 
       $t = new  huh_lithostrattreedef();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLithoStratTreeDefID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LithoStratTreeDefID'], '0');
    } 
    function testDirtyLithoStratTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrattreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLithoStratTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setLithoStratTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setLithoStratTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_lithostrattreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_lithostrattreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrattreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullNameDirection() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrattreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullNameDirection('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setFullNameDirection('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setFullNameDirection('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_lithostrattreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_lithostrattreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrattreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrattreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedef();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_lithostrattreedefitem extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLithoStratTreeDefItemID());
    } 
    function testKeys() { 
       $t = new  huh_lithostrattreedefitem();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLithoStratTreeDefItemID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LithoStratTreeDefItemID'], '0');
    } 
    function testDirtyLithoStratTreeDefItemID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLithoStratTreeDefItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setLithoStratTreeDefItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setLithoStratTreeDefItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullNameSeparator() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullNameSeparator('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setFullNameSeparator('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setFullNameSeparator('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsEnforced() { 
       // FieldType: BIT(1)
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsEnforced('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setIsEnforced('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setIsEnforced('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsInFullName() { 
       // FieldType: BIT(1)
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsInFullName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setIsInFullName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setIsInFullName('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRankID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRankID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setRankID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setRankID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTextAfter() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTextAfter('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setTextAfter('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setTextAfter('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTextBefore() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTextBefore('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setTextBefore('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setTextBefore('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLithoStratTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLithoStratTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setLithoStratTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setLithoStratTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentItemID() { 
       // FieldType: INTEGER
       $t = new  huh_lithostrattreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setParentItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_lithostrattreedefitem();
       try { 
          $t->setParentItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_loan extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_loan();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLoanID());
    } 
    function testKeys() { 
       $t = new  huh_loan();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLoanID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LoanID'], '0');
    } 
    function testDirtyLoanID() { 
       // FieldType: INTEGER
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setLoanID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setLoanID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCurrentDueDate() { 
       // FieldType: DATE
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCurrentDueDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setCurrentDueDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setCurrentDueDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateClosed() { 
       // FieldType: DATE
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateClosed('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setDateClosed('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setDateClosed('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateReceived() { 
       // FieldType: DATE
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateReceived('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setDateReceived('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setDateReceived('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsClosed() { 
       // FieldType: BIT(1)
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsClosed('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setIsClosed('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setIsClosed('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsFinancialResponsibility() { 
       // FieldType: BIT(1)
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsFinancialResponsibility('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setIsFinancialResponsibility('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setIsFinancialResponsibility('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLoanDate() { 
       // FieldType: DATE
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setLoanDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setLoanDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLoanNumber() { 
       // FieldType: YEAR
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setLoanNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setLoanNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOriginalDueDate() { 
       // FieldType: DATE
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOriginalDueDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setOriginalDueDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setOriginalDueDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOverdueNotiSetDate() { 
       // FieldType: DATE
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOverdueNotiSetDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setOverdueNotiSetDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setOverdueNotiSetDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPurposeOfLoan() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPurposeOfLoan('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setPurposeOfLoan('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setPurposeOfLoan('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReceivedComments() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReceivedComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setReceivedComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setReceivedComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpecialConditions() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecialConditions('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setSpecialConditions('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setSpecialConditions('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcGeography() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcGeography('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setSrcGeography('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setSrcGeography('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcTaxonomy() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcTaxonomy('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setSrcTaxonomy('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setSrcTaxonomy('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText3() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setText3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setText3('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo3() { 
       // FieldType: BIT(1)
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setYesNo3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setYesNo3('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDivisionID() { 
       // FieldType: INTEGER
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDivisionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setDivisionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setDivisionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddressOfRecordID() { 
       // FieldType: INTEGER
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddressOfRecordID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setAddressOfRecordID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setAddressOfRecordID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLoanInventory() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loan();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanInventory('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setLoanInventory('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loan();
       try { 
          $t->setLoanInventory('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_loanagent extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_loanagent();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLoanAgentID());
    } 
    function testKeys() { 
       $t = new  huh_loanagent();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLoanAgentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LoanAgentID'], '0');
    } 
    function testDirtyLoanAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_loanagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setLoanAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setLoanAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_loanagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_loanagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_loanagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loanagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRole() { 
       // FieldType: YEAR
       $t = new  huh_loanagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRole('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setRole('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setRole('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_loanagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_loanagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_loanagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_loanagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLoanID() { 
       // FieldType: INTEGER
       $t = new  huh_loanagent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setLoanID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanagent();
       try { 
          $t->setLoanID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_loanattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_loanattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLoanAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_loanattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLoanAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LoanAttachmentID'], '0');
    } 
    function testDirtyLoanAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_loanattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setLoanAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setLoanAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_loanattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_loanattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_loanattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_loanattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loanattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLoanID() { 
       // FieldType: INTEGER
       $t = new  huh_loanattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setLoanID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setLoanID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_loanattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_loanattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_loanattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_loanpreparation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLoanPreparationID());
    } 
    function testKeys() { 
       $t = new  huh_loanpreparation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLoanPreparationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LoanPreparationID'], '0');
    } 
    function testDirtyLoanPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setLoanPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setLoanPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescriptionOfMaterial() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescriptionOfMaterial('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setDescriptionOfMaterial('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setDescriptionOfMaterial('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setInComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setInComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsResolved() { 
       // FieldType: BIT(1)
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsResolved('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setIsResolved('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setIsResolved('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyItemCount() { 
       // FieldType: INTEGER
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setItemCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setItemCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setItemCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNonSpecimenCount() { 
       // FieldType: INTEGER
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNonSpecimenCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setNonSpecimenCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setNonSpecimenCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOutComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOutComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setOutComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setOutComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyQuantityResolved() { 
       // FieldType: INTEGER
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setQuantityResolved('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setQuantityResolved('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setQuantityResolved('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyQuantityReturned() { 
       // FieldType: INTEGER
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setQuantityReturned('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setQuantityReturned('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setQuantityReturned('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReceivedComments() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReceivedComments('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setReceivedComments('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setReceivedComments('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcTaxonomy() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcTaxonomy('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setSrcTaxonomy('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setSrcTaxonomy('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTypeCount() { 
       // FieldType: INTEGER
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTypeCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setTypeCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setTypeCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLoanID() { 
       // FieldType: INTEGER
       $t = new  huh_loanpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setLoanID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanpreparation();
       try { 
          $t->setLoanID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_loanreturnpreparation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLoanReturnPreparationID());
    } 
    function testKeys() { 
       $t = new  huh_loanreturnpreparation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLoanReturnPreparationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LoanReturnPreparationID'], '0');
    } 
    function testDirtyLoanReturnPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanReturnPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setLoanReturnPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setLoanReturnPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyItemCount() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setItemCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setItemCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setItemCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNonSpecimenCount() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNonSpecimenCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setNonSpecimenCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setNonSpecimenCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyQuantityResolved() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setQuantityResolved('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setQuantityResolved('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setQuantityResolved('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyQuantityReturned() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setQuantityReturned('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setQuantityReturned('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setQuantityReturned('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReturnedDate() { 
       // FieldType: DATE
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReturnedDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setReturnedDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setReturnedDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTypeCount() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTypeCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setTypeCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setTypeCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDeaccessionPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDeaccessionPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setDeaccessionPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setDeaccessionPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLoanPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setLoanPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setLoanPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReceivedByID() { 
       // FieldType: INTEGER
       $t = new  huh_loanreturnpreparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReceivedByID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setReceivedByID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_loanreturnpreparation();
       try { 
          $t->setReceivedByID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_locality extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_locality();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLocalityID());
    } 
    function testKeys() { 
       $t = new  huh_locality();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLocalityID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LocalityID'], '0');
    } 
    function testDirtyLocalityID() { 
       // FieldType: INTEGER
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLocalityID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLocalityID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDatum() { 
       // FieldType: YEAR
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDatum('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setDatum('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setDatum('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyElevationAccuracy() { 
       // FieldType: DOUBLE
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setElevationAccuracy('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setElevationAccuracy('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setElevationAccuracy('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyElevationMethod() { 
       // FieldType: YEAR
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setElevationMethod('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setElevationMethod('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setElevationMethod('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGML() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGML('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setGML('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setGML('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGUID() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGUID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setGUID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setGUID('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLat1Text() { 
       // FieldType: YEAR
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLat1Text('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLat1Text('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLat1Text('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLat2Text() { 
       // FieldType: YEAR
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLat2Text('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLat2Text('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLat2Text('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLatLongAccuracy() { 
       // FieldType: DOUBLE
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLatLongAccuracy('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLatLongAccuracy('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLatLongAccuracy('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLatLongMethod() { 
       // FieldType: YEAR
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLatLongMethod('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLatLongMethod('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLatLongMethod('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLatLongType() { 
       // FieldType: YEAR
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLatLongType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLatLongType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLatLongType('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLatitude1() { 
       // FieldType: DECIMAL(12,10)
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLatitude1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLatitude1('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLatitude1('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLatitude2() { 
       // FieldType: DECIMAL(12,10)
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLatitude2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLatitude2('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLatitude2('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLocalityName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLocalityName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLocalityName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLong1Text() { 
       // FieldType: YEAR
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLong1Text('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLong1Text('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLong1Text('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLong2Text() { 
       // FieldType: YEAR
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLong2Text('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLong2Text('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLong2Text('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLongitude1() { 
       // FieldType: DECIMAL(13,10)
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLongitude1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLongitude1('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLongitude1('9999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLongitude2() { 
       // FieldType: DECIMAL(13,10)
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLongitude2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLongitude2('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setLongitude2('9999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMaxElevation() { 
       // FieldType: DOUBLE
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMaxElevation('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setMaxElevation('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setMaxElevation('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMinElevation() { 
       // FieldType: DOUBLE
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMinElevation('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setMinElevation('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setMinElevation('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNamedPlace() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNamedPlace('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setNamedPlace('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setNamedPlace('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOriginalElevationUnit() { 
       // FieldType: YEAR
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOriginalElevationUnit('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setOriginalElevationUnit('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setOriginalElevationUnit('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOriginalLatLongUnit() { 
       // FieldType: INTEGER
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOriginalLatLongUnit('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setOriginalLatLongUnit('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setOriginalLatLongUnit('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRelationToNamedPlace() { 
       // FieldType: VARCHAR(120)
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRelationToNamedPlace('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setRelationToNamedPlace('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setRelationToNamedPlace('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyShortName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setShortName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setShortName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setShortName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcLatLongUnit() { 
       // FieldType: TINYINT
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcLatLongUnit('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setSrcLatLongUnit('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setSrcLatLongUnit('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVerbatimElevation() { 
       // FieldType: YEAR
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVerbatimElevation('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setVerbatimElevation('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setVerbatimElevation('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVisibility() { 
       // FieldType: TINYINT
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVisibility('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setVisibility('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setVisibility('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVisibilitySetByID() { 
       // FieldType: INTEGER
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVisibilitySetByID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setVisibilitySetByID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setVisibilitySetByID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeographyID() { 
       // FieldType: INTEGER
       $t = new  huh_locality();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeographyID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setGeographyID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_locality();
       try { 
          $t->setGeographyID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_localityattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_localityattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLocalityAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_localityattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLocalityAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LocalityAttachmentID'], '0');
    } 
    function testDirtyLocalityAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_localityattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setLocalityAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setLocalityAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_localityattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_localityattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_localityattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_localityattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_localityattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_localityattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_localityattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLocalityID() { 
       // FieldType: INTEGER
       $t = new  huh_localityattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setLocalityID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setLocalityID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_localityattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localityattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_localitycitation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_localitycitation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLocalityCitationID());
    } 
    function testKeys() { 
       $t = new  huh_localitycitation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLocalityCitationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LocalityCitationID'], '0');
    } 
    function testDirtyLocalityCitationID() { 
       // FieldType: INTEGER
       $t = new  huh_localitycitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityCitationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setLocalityCitationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setLocalityCitationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_localitycitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_localitycitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_localitycitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_localitycitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_localitycitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLocalityID() { 
       // FieldType: INTEGER
       $t = new  huh_localitycitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setLocalityID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setLocalityID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_localitycitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReferenceWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_localitycitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setReferenceWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setReferenceWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_localitycitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitycitation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_localitydetail extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLocalityDetailID());
    } 
    function testKeys() { 
       $t = new  huh_localitydetail();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLocalityDetailID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LocalityDetailID'], '0');
    } 
    function testDirtyLocalityDetailID() { 
       // FieldType: INTEGER
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityDetailID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setLocalityDetailID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setLocalityDetailID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBaseMeridian() { 
       // FieldType: YEAR
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBaseMeridian('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setBaseMeridian('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setBaseMeridian('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDrainage() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDrainage('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setDrainage('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setDrainage('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGML() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGML('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setGML('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setGML('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyHucCode() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setHucCode('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setHucCode('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setHucCode('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsland() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsland('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setIsland('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setIsland('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIslandGroup() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIslandGroup('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setIslandGroup('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setIslandGroup('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNationalParkName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNationalParkName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setNationalParkName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setNationalParkName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: DOUBLE
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setNumber1('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: DOUBLE
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setNumber2('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRangeDesc() { 
       // FieldType: YEAR
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRangeDesc('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setRangeDesc('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setRangeDesc('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRangeDirection() { 
       // FieldType: YEAR
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRangeDirection('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setRangeDirection('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setRangeDirection('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySection() { 
       // FieldType: YEAR
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSection('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setSection('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setSection('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySectionPart() { 
       // FieldType: YEAR
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSectionPart('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setSectionPart('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setSectionPart('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTownship() { 
       // FieldType: YEAR
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTownship('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setTownship('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setTownship('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTownshipDirection() { 
       // FieldType: YEAR
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTownshipDirection('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setTownshipDirection('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setTownshipDirection('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUtmDatum() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUtmDatum('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmDatum('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmDatum('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUtmEasting() { 
       // FieldType: REAL
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUtmEasting('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmEasting('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmEasting('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUtmFalseEasting() { 
       // FieldType: INTEGER
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUtmFalseEasting('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmFalseEasting('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmFalseEasting('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUtmFalseNorthing() { 
       // FieldType: INTEGER
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUtmFalseNorthing('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmFalseNorthing('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmFalseNorthing('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUtmNorthing() { 
       // FieldType: REAL
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUtmNorthing('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmNorthing('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmNorthing('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUtmOrigLatitude() { 
       // FieldType: DECIMAL(19,2)
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUtmOrigLatitude('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmOrigLatitude('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmOrigLatitude('9999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUtmOrigLongitude() { 
       // FieldType: DECIMAL(19,2)
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUtmOrigLongitude('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmOrigLongitude('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmOrigLongitude('9999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUtmScale() { 
       // FieldType: VARCHAR(8)
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUtmScale('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmScale('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmScale('99999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUtmZone() { 
       // FieldType: SMALLINT
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUtmZone('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmZone('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setUtmZone('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWaterBody() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWaterBody('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setWaterBody('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setWaterBody('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLocalityID() { 
       // FieldType: INTEGER
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setLocalityID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setLocalityID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_localitydetail();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitydetail();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_localitynamealias extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_localitynamealias();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getLocalityNameAliasID());
    } 
    function testKeys() { 
       $t = new  huh_localitynamealias();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setLocalityNameAliasID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['LocalityNameAliasID'], '0');
    } 
    function testDirtyLocalityNameAliasID() { 
       // FieldType: INTEGER
       $t = new  huh_localitynamealias();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityNameAliasID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setLocalityNameAliasID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setLocalityNameAliasID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_localitynamealias();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_localitynamealias();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_localitynamealias();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_localitynamealias();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySource() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_localitynamealias();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSource('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setSource('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setSource('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_localitynamealias();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_localitynamealias();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_localitynamealias();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLocalityID() { 
       // FieldType: INTEGER
       $t = new  huh_localitynamealias();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLocalityID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setLocalityID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_localitynamealias();
       try { 
          $t->setLocalityID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_otheridentifier extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_otheridentifier();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getOtherIdentifierID());
    } 
    function testKeys() { 
       $t = new  huh_otheridentifier();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setOtherIdentifierID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['OtherIdentifierID'], '0');
    } 
    function testDirtyOtherIdentifierID() { 
       // FieldType: INTEGER
       $t = new  huh_otheridentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOtherIdentifierID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setOtherIdentifierID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setOtherIdentifierID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_otheridentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_otheridentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_otheridentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_otheridentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIdentifier() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_otheridentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIdentifier('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setIdentifier('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setIdentifier('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInstitution() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_otheridentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInstitution('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setInstitution('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setInstitution('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_otheridentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_otheridentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_otheridentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionObjectID() { 
       // FieldType: INTEGER
       $t = new  huh_otheridentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionObjectID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setCollectionObjectID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_otheridentifier();
       try { 
          $t->setCollectionObjectID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_paleocontext extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getPaleoContextID());
    } 
    function testKeys() { 
       $t = new  huh_paleocontext();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setPaleoContextID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['PaleoContextID'], '0');
    } 
    function testDirtyPaleoContextID() { 
       // FieldType: INTEGER
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPaleoContextID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setPaleoContextID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setPaleoContextID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBottomDistance() { 
       // FieldType: REAL
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBottomDistance('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setBottomDistance('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setBottomDistance('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDirection() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDirection('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setDirection('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setDirection('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDistanceUnits() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDistanceUnits('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setDistanceUnits('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setDistanceUnits('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPositionState() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPositionState('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setPositionState('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setPositionState('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setText1('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setText2('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTopDistance() { 
       // FieldType: REAL
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTopDistance('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setTopDistance('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setTopDistance('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLithoStratID() { 
       // FieldType: INTEGER
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLithoStratID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setLithoStratID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setLithoStratID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyChronosStratID() { 
       // FieldType: INTEGER
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setChronosStratID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setChronosStratID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setChronosStratID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBioStratID() { 
       // FieldType: INTEGER
       $t = new  huh_paleocontext();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBioStratID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setBioStratID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_paleocontext();
       try { 
          $t->setBioStratID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_permit extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_permit();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getPermitID());
    } 
    function testKeys() { 
       $t = new  huh_permit();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setPermitID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['PermitID'], '0');
    } 
    function testDirtyPermitID() { 
       // FieldType: INTEGER
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPermitID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setPermitID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setPermitID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndDate() { 
       // FieldType: DATE
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setEndDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setEndDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIssuedDate() { 
       // FieldType: DATE
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIssuedDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setIssuedDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setIssuedDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPermitNumber() { 
       // FieldType: YEAR
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPermitNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setPermitNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setPermitNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRenewalDate() { 
       // FieldType: DATE
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRenewalDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setRenewalDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setRenewalDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartDate() { 
       // FieldType: DATE
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setStartDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setStartDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyType() { 
       // FieldType: YEAR
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setType('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIssuedToID() { 
       // FieldType: INTEGER
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIssuedToID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setIssuedToID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setIssuedToID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIssuedByID() { 
       // FieldType: INTEGER
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIssuedByID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setIssuedByID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setIssuedByID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_permit();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permit();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_permitattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_permitattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getPermitAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_permitattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setPermitAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['PermitAttachmentID'], '0');
    } 
    function testDirtyPermitAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_permitattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPermitAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setPermitAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setPermitAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_permitattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_permitattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_permitattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_permitattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_permitattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_permitattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPermitID() { 
       // FieldType: INTEGER
       $t = new  huh_permitattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPermitID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setPermitID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setPermitID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_permitattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_permitattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_permitattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_picklist extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_picklist();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getPickListID());
    } 
    function testKeys() { 
       $t = new  huh_picklist();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setPickListID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['PickListID'], '0');
    } 
    function testDirtyPickListID() { 
       // FieldType: INTEGER
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPickListID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setPickListID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setPickListID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setFieldName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setFieldName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFilterFieldName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFilterFieldName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setFilterFieldName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setFilterFieldName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFilterValue() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFilterValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setFilterValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setFilterValue('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFormatter() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFormatter('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setFormatter('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setFormatter('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsSystem() { 
       // FieldType: BIT(1)
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsSystem('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setIsSystem('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setIsSystem('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReadOnly() { 
       // FieldType: BIT(1)
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReadOnly('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setReadOnly('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setReadOnly('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySizeLimit() { 
       // FieldType: INTEGER
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSizeLimit('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setSizeLimit('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setSizeLimit('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySortType() { 
       // FieldType: TINYINT
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSortType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setSortType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setSortType('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTableName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTableName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setTableName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setTableName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyType() { 
       // FieldType: TINYINT
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setType('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionID() { 
       // FieldType: INTEGER
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setCollectionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setCollectionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_picklist();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklist();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_picklistitem extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_picklistitem();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getPickListItemID());
    } 
    function testKeys() { 
       $t = new  huh_picklistitem();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setPickListItemID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['PickListItemID'], '0');
    } 
    function testDirtyPickListItemID() { 
       // FieldType: INTEGER
       $t = new  huh_picklistitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPickListItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setPickListItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setPickListItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_picklistitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_picklistitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_picklistitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_picklistitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTitle() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_picklistitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTitle('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setTitle('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setTitle('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyValue() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_picklistitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setValue('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPickListID() { 
       // FieldType: INTEGER
       $t = new  huh_picklistitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPickListID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setPickListID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setPickListID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_picklistitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_picklistitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_picklistitem();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_preparation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_preparation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getPreparationID());
    } 
    function testKeys() { 
       $t = new  huh_preparation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setPreparationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['PreparationID'], '0');
    } 
    function testDirtyPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCountAmt() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCountAmt('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setCountAmt('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setCountAmt('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIdentifier() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIdentifier('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setIdentifier('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setIdentifier('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInventoryDate() { 
       // FieldType: DATE
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInventoryDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setInventoryDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setInventoryDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyObjectCondition() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setObjectCondition('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setObjectCondition('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setObjectCondition('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparedDate() { 
       // FieldType: DATE
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparedDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setPreparedDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setPreparedDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparedDatePrecision() { 
       // FieldType: TINYINT
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparedDatePrecision('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setPreparedDatePrecision('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setPreparedDatePrecision('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySampleNumber() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSampleNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setSampleNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setSampleNumber('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStatus() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStatus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setStatus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setStatus('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStorageLocation() { 
       // FieldType: VARCHAR(100)
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStorageLocation('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setStorageLocation('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setStorageLocation('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo3() { 
       // FieldType: BIT(1)
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setYesNo3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setYesNo3('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparationAttributeID() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationAttributeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setPreparationAttributeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setPreparationAttributeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGeographyID() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGeographyID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setGeographyID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setGeographyID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparedByID() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparedByID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setPreparedByID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setPreparedByID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPrepTypeID() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPrepTypeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setPrepTypeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setPrepTypeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentID() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setParentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setParentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTaxonID() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setTaxonID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setTaxonID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAppraisalID() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAppraisalID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setAppraisalID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setAppraisalID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStorageID() { 
       // FieldType: INTEGER
       $t = new  huh_preparation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStorageID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setStorageID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparation();
       try { 
          $t->setStorageID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_preparationattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_preparationattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getPreparationAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_preparationattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setPreparationAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['PreparationAttachmentID'], '0');
    } 
    function testDirtyPreparationAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setPreparationAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setPreparationAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_preparationattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_preparationattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_preparationattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_preparationattr extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_preparationattr();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getAttrID());
    } 
    function testKeys() { 
       $t = new  huh_preparationattr();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setAttrID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['AttrID'], '0');
    } 
    function testDirtyAttrID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttrID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setAttrID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setAttrID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_preparationattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_preparationattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDoubleValue() { 
       // FieldType: DOUBLE
       $t = new  huh_preparationattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDoubleValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setDoubleValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setDoubleValue('999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStrValue() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_preparationattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStrValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setStrValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setStrValue('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttributeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttributeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setAttributeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setAttributeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparationId() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setPreparationId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattr();
       try { 
          $t->setPreparationId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_preparationattribute extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getPreparationAttributeID());
    } 
    function testKeys() { 
       $t = new  huh_preparationattribute();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setPreparationAttributeID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['PreparationAttributeID'], '0');
    } 
    function testDirtyPreparationAttributeID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationAttributeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setPreparationAttributeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setPreparationAttributeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttrDate() { 
       // FieldType: TIMESTAMP
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttrDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setAttrDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setAttrDate('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber3() { 
       // FieldType: REAL
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber3('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber4() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber4('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber4('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber5() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber5('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber5('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber5('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber6() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber6('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber6('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber6('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber7() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber7('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber7('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber7('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber8() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber8('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber8('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber8('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber9() { 
       // FieldType: SMALLINT
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber9('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber9('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setNumber9('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText10() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText10('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText10('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText10('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText11() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText11('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText11('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText11('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText12() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText12('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText12('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText12('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText13() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText13('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText13('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText13('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText14() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText14('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText14('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText14('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText15() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText15('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText15('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText15('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText16() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText16('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText16('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText16('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText17() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText17('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText17('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText17('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText18() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText18('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText18('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText18('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText19() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText19('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText19('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText19('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText20() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText20('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText20('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText20('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText21() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText21('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText21('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText21('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText22() { 
       // FieldType: VARCHAR(10)
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText22('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText22('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText22('9999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText23() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText23('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText23('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText23('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText24() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText24('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText24('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText24('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText25() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText25('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText25('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText25('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText26() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText26('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText26('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText26('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText3() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText3('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText4() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText4('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText4('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText5() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText5('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText5('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText5('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText6() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText6('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText6('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText6('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText7() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText7('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText7('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText7('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText8() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText8('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText8('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText8('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText9() { 
       // FieldType: YEAR
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText9('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText9('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setText9('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo3() { 
       // FieldType: BIT(1)
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setYesNo3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setYesNo3('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo4() { 
       // FieldType: BIT(1)
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setYesNo4('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setYesNo4('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_preparationattribute();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preparationattribute();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_preptype extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_preptype();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getPrepTypeID());
    } 
    function testKeys() { 
       $t = new  huh_preptype();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setPrepTypeID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['PrepTypeID'], '0');
    } 
    function testDirtyPrepTypeID() { 
       // FieldType: INTEGER
       $t = new  huh_preptype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPrepTypeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setPrepTypeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setPrepTypeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_preptype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_preptype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_preptype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsLoanable() { 
       // FieldType: BIT(1)
       $t = new  huh_preptype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsLoanable('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setIsLoanable('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setIsLoanable('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_preptype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionID() { 
       // FieldType: INTEGER
       $t = new  huh_preptype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setCollectionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setCollectionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_preptype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_preptype();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_preptype();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_project extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_project();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getProjectID());
    } 
    function testKeys() { 
       $t = new  huh_project();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setProjectID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ProjectID'], '0');
    } 
    function testDirtyProjectID() { 
       // FieldType: INTEGER
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setProjectID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setProjectID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setProjectID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndDate() { 
       // FieldType: DATE
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setEndDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setEndDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGrantAgency() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGrantAgency('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setGrantAgency('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setGrantAgency('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGrantNumber() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGrantNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setGrantNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setGrantNumber('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyProjectDescription() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setProjectDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setProjectDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setProjectDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyProjectName() { 
       // FieldType: YEAR
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setProjectName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setProjectName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setProjectName('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyProjectNumber() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setProjectNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setProjectNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setProjectNumber('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartDate() { 
       // FieldType: DATE
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setStartDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setStartDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyURL() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setURL('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setURL('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setURL('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyProjectAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_project();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setProjectAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setProjectAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project();
       try { 
          $t->setProjectAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_project_colobj extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_project_colobj();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getProjectID());
       $this->assertNull($t->getCollectionObjectID());
    } 
    function testKeys() { 
       $t = new  huh_project_colobj();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),2);
       $t->setProjectID('0');
       $t->setCollectionObjectID('1');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ProjectID'], '0');
       $this->assertIdentical($pk['CollectionObjectID'], '1');
    } 
    function testDirtyProjectID() { 
       // FieldType: INTEGER
       $t = new  huh_project_colobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setProjectID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project_colobj();
       try { 
          $t->setProjectID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project_colobj();
       try { 
          $t->setProjectID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionObjectID() { 
       // FieldType: INTEGER
       $t = new  huh_project_colobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionObjectID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project_colobj();
       try { 
          $t->setCollectionObjectID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_project_colobj();
       try { 
          $t->setCollectionObjectID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_recordset extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_recordset();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getRecordSetID());
    } 
    function testKeys() { 
       $t = new  huh_recordset();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setRecordSetID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['RecordSetID'], '0');
    } 
    function testDirtyRecordSetID() { 
       // FieldType: INTEGER
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRecordSetID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setRecordSetID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setRecordSetID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAllPermissionLevel() { 
       // FieldType: INTEGER
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAllPermissionLevel('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setAllPermissionLevel('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setAllPermissionLevel('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTableID() { 
       // FieldType: INTEGER
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTableID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setTableID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setTableID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGroupPermissionLevel() { 
       // FieldType: INTEGER
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGroupPermissionLevel('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setGroupPermissionLevel('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setGroupPermissionLevel('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOwnerPermissionLevel() { 
       // FieldType: INTEGER
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOwnerPermissionLevel('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setOwnerPermissionLevel('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setOwnerPermissionLevel('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyType() { 
       // FieldType: TINYINT
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setType('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInfoRequestID() { 
       // FieldType: INTEGER
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInfoRequestID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setInfoRequestID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setInfoRequestID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpecifyUserID() { 
       // FieldType: INTEGER
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecifyUserID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setSpecifyUserID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setSpecifyUserID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpPrincipalID() { 
       // FieldType: INTEGER
       $t = new  huh_recordset();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpPrincipalID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setSpPrincipalID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordset();
       try { 
          $t->setSpPrincipalID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_recordsetitem extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_recordsetitem();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getRecordSetItemID());
    } 
    function testKeys() { 
       $t = new  huh_recordsetitem();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setRecordSetItemID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['RecordSetItemID'], '0');
    } 
    function testDirtyRecordSetItemID() { 
       // FieldType: INTEGER
       $t = new  huh_recordsetitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRecordSetItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordsetitem();
       try { 
          $t->setRecordSetItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordsetitem();
       try { 
          $t->setRecordSetItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRecordId() { 
       // FieldType: INTEGER
       $t = new  huh_recordsetitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRecordId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordsetitem();
       try { 
          $t->setRecordId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordsetitem();
       try { 
          $t->setRecordId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRecordSetID() { 
       // FieldType: INTEGER
       $t = new  huh_recordsetitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRecordSetID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordsetitem();
       try { 
          $t->setRecordSetID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_recordsetitem();
       try { 
          $t->setRecordSetID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_referencework extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_referencework();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getReferenceWorkID());
    } 
    function testKeys() { 
       $t = new  huh_referencework();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setReferenceWorkID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ReferenceWorkID'], '0');
    } 
    function testDirtyReferenceWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setReferenceWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setReferenceWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGUID() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGUID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setGUID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setGUID('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsPublished() { 
       // FieldType: BIT(1)
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsPublished('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setIsPublished('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setIsPublished('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyISBN() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setISBN('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setISBN('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setISBN('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLibraryNumber() { 
       // FieldType: YEAR
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLibraryNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setLibraryNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setLibraryNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPages() { 
       // FieldType: YEAR
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPages('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setPages('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setPages('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPlaceOfPublication() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPlaceOfPublication('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setPlaceOfPublication('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setPlaceOfPublication('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPublisher() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPublisher('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setPublisher('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setPublisher('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReferenceWorkType() { 
       // FieldType: TINYINT
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setReferenceWorkType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setReferenceWorkType('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtytitle() { 
       // FieldType: VARCHAR(900)
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->settitle('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->settitle('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->settitle
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyURL() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setURL('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setURL('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setURL('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVolume() { 
       // FieldType: VARCHAR(25)
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVolume('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setVolume('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setVolume('9999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWorkDate() { 
       // FieldType: VARCHAR(25)
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setWorkDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setWorkDate('9999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyJournalID() { 
       // FieldType: INTEGER
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setJournalID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setJournalID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setJournalID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyContainedRFParentID() { 
       // FieldType: INTEGER
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setContainedRFParentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setContainedRFParentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setContainedRFParentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPrecedingWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPrecedingWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setPrecedingWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setPrecedingWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySucceedingWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSucceedingWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setSucceedingWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setSucceedingWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_referencework();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referencework();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_referenceworkidentifier extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_referenceworkidentifier();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getReferenceWorkIdentifierID());
    } 
    function testKeys() { 
       $t = new  huh_referenceworkidentifier();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setReferenceWorkIdentifierID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ReferenceWorkIdentifierID'], '0');
    } 
    function testDirtyReferenceWorkIdentifierID() { 
       // FieldType: INTEGER
       $t = new  huh_referenceworkidentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkIdentifierID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setReferenceWorkIdentifierID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setReferenceWorkIdentifierID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_referenceworkidentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_referenceworkidentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_referenceworkidentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIdentifier() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_referenceworkidentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIdentifier('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setIdentifier('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setIdentifier('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyType() { 
       // FieldType: VARCHAR(12)
       $t = new  huh_referenceworkidentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setType('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_referenceworkidentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReferenceWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_referenceworkidentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setReferenceWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setReferenceWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_referenceworkidentifier();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkidentifier();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_referenceworkvariant extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getReferenceWorkVariantID());
    } 
    function testKeys() { 
       $t = new  huh_referenceworkvariant();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setReferenceWorkVariantID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ReferenceWorkVariantID'], '0');
    } 
    function testDirtyReferenceWorkVariantID() { 
       // FieldType: INTEGER
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkVariantID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setReferenceWorkVariantID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setReferenceWorkVariantID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCountry() { 
       // FieldType: VARCHAR(2)
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCountry('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setCountry('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setCountry('99999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLanguage() { 
       // FieldType: VARCHAR(2)
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLanguage('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setLanguage('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setLanguage('99999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVarType() { 
       // FieldType: TINYINT
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVarType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setVarType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setVarType('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVariant() { 
       // FieldType: VARCHAR(2)
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVariant('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setVariant('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setVariant('99999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReferenceWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setReferenceWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setReferenceWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_referenceworkvariant();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_referenceworkvariant();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_repositoryagreement extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getRepositoryAgreementID());
    } 
    function testKeys() { 
       $t = new  huh_repositoryagreement();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setRepositoryAgreementID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['RepositoryAgreementID'], '0');
    } 
    function testDirtyRepositoryAgreementID() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRepositoryAgreementID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setRepositoryAgreementID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setRepositoryAgreementID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateReceived() { 
       // FieldType: DATE
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateReceived('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setDateReceived('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setDateReceived('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndDate() { 
       // FieldType: DATE
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setEndDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setEndDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRepositoryAgreementNumber() { 
       // FieldType: VARCHAR(60)
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRepositoryAgreementNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setRepositoryAgreementNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setRepositoryAgreementNumber('999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartDate() { 
       // FieldType: DATE
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setStartDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setStartDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStatus() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStatus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setStatus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setStatus('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText3() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setText3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setText3('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAddressOfRecordID() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAddressOfRecordID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setAddressOfRecordID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setAddressOfRecordID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDivisionID() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreement();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDivisionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setDivisionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreement();
       try { 
          $t->setDivisionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_repositoryagreementattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_repositoryagreementattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getRepositoryAgreementAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_repositoryagreementattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setRepositoryAgreementAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['RepositoryAgreementAttachmentID'], '0');
    } 
    function testDirtyRepositoryAgreementAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreementattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRepositoryAgreementAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setRepositoryAgreementAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setRepositoryAgreementAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_repositoryagreementattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_repositoryagreementattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreementattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreementattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_repositoryagreementattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreementattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreementattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreementattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRepositoryAgreementID() { 
       // FieldType: INTEGER
       $t = new  huh_repositoryagreementattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRepositoryAgreementID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setRepositoryAgreementID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_repositoryagreementattachment();
       try { 
          $t->setRepositoryAgreementID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_shipment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_shipment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getShipmentID());
    } 
    function testKeys() { 
       $t = new  huh_shipment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setShipmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['ShipmentID'], '0');
    } 
    function testDirtyShipmentID() { 
       // FieldType: INTEGER
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setShipmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShipmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShipmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyInsuredForAmount() { 
       // FieldType: YEAR
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setInsuredForAmount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setInsuredForAmount('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setInsuredForAmount('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber3() { 
       // FieldType: REAL
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setNumber3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setNumber3('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumberOfPackages() { 
       // FieldType: SMALLINT
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumberOfPackages('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setNumberOfPackages('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setNumberOfPackages('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyShipmentDate() { 
       // FieldType: DATE
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setShipmentDate('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShipmentDate('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShipmentDate('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyShipmentMethod() { 
       // FieldType: YEAR
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setShipmentMethod('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShipmentMethod('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShipmentMethod('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyShipmentNumber() { 
       // FieldType: YEAR
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setShipmentNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShipmentNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShipmentNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWeight() { 
       // FieldType: YEAR
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWeight('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setWeight('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setWeight('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyShippedToID() { 
       // FieldType: INTEGER
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setShippedToID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShippedToID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShippedToID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyShipperID() { 
       // FieldType: INTEGER
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setShipperID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShipperID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShipperID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBorrowID() { 
       // FieldType: INTEGER
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBorrowID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setBorrowID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setBorrowID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyShippedByID() { 
       // FieldType: INTEGER
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setShippedByID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShippedByID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setShippedByID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyExchangeOutID() { 
       // FieldType: INTEGER
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setExchangeOutID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setExchangeOutID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setExchangeOutID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGiftID() { 
       // FieldType: INTEGER
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGiftID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setGiftID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setGiftID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLoanID() { 
       // FieldType: INTEGER
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoanID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setLoanID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setLoanID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_shipment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_shipment();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_sp_schema_mapping extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_sp_schema_mapping();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpExportSchemaMappingID());
       $this->assertNull($t->getSpExportSchemaID());
    } 
    function testKeys() { 
       $t = new  huh_sp_schema_mapping();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),2);
       $t->setSpExportSchemaMappingID('0');
       $t->setSpExportSchemaID('1');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpExportSchemaMappingID'], '0');
       $this->assertIdentical($pk['SpExportSchemaID'], '1');
    } 
    function testDirtySpExportSchemaMappingID() { 
       // FieldType: INTEGER
       $t = new  huh_sp_schema_mapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpExportSchemaMappingID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sp_schema_mapping();
       try { 
          $t->setSpExportSchemaMappingID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sp_schema_mapping();
       try { 
          $t->setSpExportSchemaMappingID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpExportSchemaID() { 
       // FieldType: INTEGER
       $t = new  huh_sp_schema_mapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpExportSchemaID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sp_schema_mapping();
       try { 
          $t->setSpExportSchemaID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sp_schema_mapping();
       try { 
          $t->setSpExportSchemaID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spappresource extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spappresource();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpAppResourceID());
    } 
    function testKeys() { 
       $t = new  huh_spappresource();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpAppResourceID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpAppResourceID'], '0');
    } 
    function testDirtySpAppResourceID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpAppResourceID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setSpAppResourceID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setSpAppResourceID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAllPermissionLevel() { 
       // FieldType: INTEGER
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAllPermissionLevel('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setAllPermissionLevel('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setAllPermissionLevel('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGroupPermissionLevel() { 
       // FieldType: INTEGER
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGroupPermissionLevel('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setGroupPermissionLevel('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setGroupPermissionLevel('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLevel() { 
       // FieldType: SMALLINT
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLevel('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setLevel('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setLevel('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMetaData() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMetaData('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setMetaData('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setMetaData('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMimeType() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMimeType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setMimeType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setMimeType('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOwnerPermissionLevel() { 
       // FieldType: INTEGER
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOwnerPermissionLevel('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setOwnerPermissionLevel('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setOwnerPermissionLevel('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpAppResourceDirID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpAppResourceDirID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setSpAppResourceDirID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setSpAppResourceDirID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpecifyUserID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecifyUserID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setSpecifyUserID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setSpecifyUserID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpPrincipalID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresource();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpPrincipalID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setSpPrincipalID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresource();
       try { 
          $t->setSpPrincipalID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spappresourcedata extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spappresourcedata();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpAppResourceDataID());
    } 
    function testKeys() { 
       $t = new  huh_spappresourcedata();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpAppResourceDataID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpAppResourceDataID'], '0');
    } 
    function testDirtySpAppResourceDataID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpAppResourceDataID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setSpAppResourceDataID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setSpAppResourceDataID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spappresourcedata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spappresourcedata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtydata() { 
       // FieldType: LONGVARBINARY
       $t = new  huh_spappresourcedata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setdata('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setdata('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setdata('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpAppResourceID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpAppResourceID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setSpAppResourceID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setSpAppResourceID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpViewSetObjID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpViewSetObjID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setSpViewSetObjID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setSpViewSetObjID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedata();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedata();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spappresourcedir extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpAppResourceDirID());
    } 
    function testKeys() { 
       $t = new  huh_spappresourcedir();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpAppResourceDirID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpAppResourceDirID'], '0');
    } 
    function testDirtySpAppResourceDirID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpAppResourceDirID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setSpAppResourceDirID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setSpAppResourceDirID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineType() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setDisciplineType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setDisciplineType('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsPersonal() { 
       // FieldType: BIT(1)
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsPersonal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setIsPersonal('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setIsPersonal('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUserType() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUserType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setUserType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setUserType('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setCollectionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setCollectionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpecifyUserID() { 
       // FieldType: INTEGER
       $t = new  huh_spappresourcedir();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecifyUserID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setSpecifyUserID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spappresourcedir();
       try { 
          $t->setSpecifyUserID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spauditlog extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpAuditLogID());
    } 
    function testKeys() { 
       $t = new  huh_spauditlog();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpAuditLogID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpAuditLogID'], '0');
    } 
    function testDirtySpAuditLogID() { 
       // FieldType: INTEGER
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpAuditLogID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setSpAuditLogID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setSpAuditLogID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAction() { 
       // FieldType: TINYINT
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAction('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setAction('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setAction('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentRecordId() { 
       // FieldType: INTEGER
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentRecordId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setParentRecordId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setParentRecordId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentTableNum() { 
       // FieldType: SMALLINT
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentTableNum('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setParentTableNum('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setParentTableNum('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRecordId() { 
       // FieldType: INTEGER
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRecordId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setRecordId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setRecordId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRecordVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRecordVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setRecordVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setRecordVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTableNum() { 
       // FieldType: SMALLINT
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTableNum('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setTableNum('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setTableNum('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spauditlog();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlog();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spauditlogfield extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spauditlogfield();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpAuditLogFieldID());
    } 
    function testKeys() { 
       $t = new  huh_spauditlogfield();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpAuditLogFieldID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpAuditLogFieldID'], '0');
    } 
    function testDirtySpAuditLogFieldID() { 
       // FieldType: INTEGER
       $t = new  huh_spauditlogfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpAuditLogFieldID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setSpAuditLogFieldID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setSpAuditLogFieldID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spauditlogfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spauditlogfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spauditlogfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_spauditlogfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setFieldName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setFieldName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNewValue() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spauditlogfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNewValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setNewValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setNewValue('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOldValue() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spauditlogfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOldValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setOldValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setOldValue('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spauditlogfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpAuditLogID() { 
       // FieldType: INTEGER
       $t = new  huh_spauditlogfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpAuditLogID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setSpAuditLogID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setSpAuditLogID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spauditlogfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spauditlogfield();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_specifyuser extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpecifyUserID());
    } 
    function testKeys() { 
       $t = new  huh_specifyuser();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpecifyUserID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpecifyUserID'], '0');
    } 
    function testDirtySpecifyUserID() { 
       // FieldType: INTEGER
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecifyUserID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setSpecifyUserID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setSpecifyUserID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAccumMinLoggedIn() { 
       // FieldType: BIGINT
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccumMinLoggedIn('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setAccumMinLoggedIn('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setAccumMinLoggedIn('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEMail() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEMail('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setEMail('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setEMail('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsLoggedIn() { 
       // FieldType: BIT(1)
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsLoggedIn('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setIsLoggedIn('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setIsLoggedIn('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsLoggedInReport() { 
       // FieldType: BIT(1)
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsLoggedInReport('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setIsLoggedInReport('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setIsLoggedInReport('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLoginCollectionName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoginCollectionName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setLoginCollectionName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setLoginCollectionName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLoginDisciplineName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoginDisciplineName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setLoginDisciplineName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setLoginDisciplineName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLoginOutTime() { 
       // FieldType: TIMESTAMP
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLoginOutTime('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setLoginOutTime('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setLoginOutTime('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPassword() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPassword('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setPassword('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setPassword('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUserType() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUserType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setUserType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setUserType('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_specifyuser();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_specifyuser_spprincipal extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_specifyuser_spprincipal();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpecifyUserID());
       $this->assertNull($t->getSpPrincipalID());
    } 
    function testKeys() { 
       $t = new  huh_specifyuser_spprincipal();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),2);
       $t->setSpecifyUserID('0');
       $t->setSpPrincipalID('1');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpecifyUserID'], '0');
       $this->assertIdentical($pk['SpPrincipalID'], '1');
    } 
    function testDirtySpecifyUserID() { 
       // FieldType: INTEGER
       $t = new  huh_specifyuser_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecifyUserID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser_spprincipal();
       try { 
          $t->setSpecifyUserID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser_spprincipal();
       try { 
          $t->setSpecifyUserID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpPrincipalID() { 
       // FieldType: INTEGER
       $t = new  huh_specifyuser_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpPrincipalID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser_spprincipal();
       try { 
          $t->setSpPrincipalID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_specifyuser_spprincipal();
       try { 
          $t->setSpPrincipalID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spexportschema extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spexportschema();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpExportSchemaID());
    } 
    function testKeys() { 
       $t = new  huh_spexportschema();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpExportSchemaID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpExportSchemaID'], '0');
    } 
    function testDirtySpExportSchemaID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschema();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpExportSchemaID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setSpExportSchemaID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setSpExportSchemaID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spexportschema();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spexportschema();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschema();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_spexportschema();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySchemaName() { 
       // FieldType: VARCHAR(80)
       $t = new  huh_spexportschema();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSchemaName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setSchemaName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setSchemaName('99999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySchemaVersion() { 
       // FieldType: VARCHAR(80)
       $t = new  huh_spexportschema();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSchemaVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setSchemaVersion('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setSchemaVersion('99999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschema();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschema();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschema();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschema();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spexportschemaitem extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpExportSchemaItemID());
    } 
    function testKeys() { 
       $t = new  huh_spexportschemaitem();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpExportSchemaItemID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpExportSchemaItemID'], '0');
    } 
    function testDirtySpExportSchemaItemID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpExportSchemaItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setSpExportSchemaItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setSpExportSchemaItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDataType() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDataType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setDataType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setDataType('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setFieldName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setFieldName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFormatter() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFormatter('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setFormatter('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setFormatter('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpLocaleContainerItemID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpLocaleContainerItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setSpLocaleContainerItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setSpLocaleContainerItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpExportSchemaID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpExportSchemaID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setSpExportSchemaID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setSpExportSchemaID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitem();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spexportschemaitemmapping extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spexportschemaitemmapping();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpExportSchemaItemMappingID());
    } 
    function testKeys() { 
       $t = new  huh_spexportschemaitemmapping();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpExportSchemaItemMappingID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpExportSchemaItemMappingID'], '0');
    } 
    function testDirtySpExportSchemaItemMappingID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitemmapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpExportSchemaItemMappingID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setSpExportSchemaItemMappingID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setSpExportSchemaItemMappingID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spexportschemaitemmapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spexportschemaitemmapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitemmapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_spexportschemaitemmapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyExportSchemaItemID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitemmapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setExportSchemaItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setExportSchemaItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setExportSchemaItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitemmapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpQueryFieldID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitemmapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpQueryFieldID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setSpQueryFieldID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setSpQueryFieldID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpExportSchemaMappingID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitemmapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpExportSchemaMappingID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setSpExportSchemaMappingID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setSpExportSchemaMappingID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemaitemmapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemaitemmapping();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spexportschemamapping extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spexportschemamapping();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpExportSchemaMappingID());
    } 
    function testKeys() { 
       $t = new  huh_spexportschemamapping();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpExportSchemaMappingID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpExportSchemaMappingID'], '0');
    } 
    function testDirtySpExportSchemaMappingID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemamapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpExportSchemaMappingID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setSpExportSchemaMappingID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setSpExportSchemaMappingID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spexportschemamapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spexportschemamapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemamapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_spexportschemamapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMappingName() { 
       // FieldType: YEAR
       $t = new  huh_spexportschemamapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMappingName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setMappingName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setMappingName('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimeStampExported() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spexportschemamapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimeStampExported('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setTimeStampExported('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setTimeStampExported('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemamapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spexportschemamapping();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spexportschemamapping();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spfieldvaluedefault extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spfieldvaluedefault();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpFieldValueDefaultID());
    } 
    function testKeys() { 
       $t = new  huh_spfieldvaluedefault();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpFieldValueDefaultID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpFieldValueDefaultID'], '0');
    } 
    function testDirtySpFieldValueDefaultID() { 
       // FieldType: INTEGER
       $t = new  huh_spfieldvaluedefault();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpFieldValueDefaultID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setSpFieldValueDefaultID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setSpFieldValueDefaultID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spfieldvaluedefault();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spfieldvaluedefault();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spfieldvaluedefault();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionMemberID() { 
       // FieldType: INTEGER
       $t = new  huh_spfieldvaluedefault();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionMemberID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setCollectionMemberID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setCollectionMemberID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_spfieldvaluedefault();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setFieldName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setFieldName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIdValue() { 
       // FieldType: INTEGER
       $t = new  huh_spfieldvaluedefault();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIdValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setIdValue('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setIdValue('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStrValue() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spfieldvaluedefault();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStrValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setStrValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setStrValue('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTableName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_spfieldvaluedefault();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTableName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setTableName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setTableName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spfieldvaluedefault();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spfieldvaluedefault();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spfieldvaluedefault();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_splocalecontainer extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpLocaleContainerID());
    } 
    function testKeys() { 
       $t = new  huh_splocalecontainer();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpLocaleContainerID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpLocaleContainerID'], '0');
    } 
    function testDirtySpLocaleContainerID() { 
       // FieldType: INTEGER
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpLocaleContainerID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setSpLocaleContainerID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setSpLocaleContainerID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFormat() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFormat('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setFormat('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setFormat('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsHidden() { 
       // FieldType: BIT(1)
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsHidden('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setIsHidden('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setIsHidden('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsSystem() { 
       // FieldType: BIT(1)
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsSystem('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setIsSystem('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setIsSystem('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsUIFormatter() { 
       // FieldType: BIT(1)
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsUIFormatter('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setIsUIFormatter('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setIsUIFormatter('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPickListName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPickListName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setPickListName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setPickListName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyType() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setType('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAggregator() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAggregator('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setAggregator('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setAggregator('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDefaultUI() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDefaultUI('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setDefaultUI('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setDefaultUI('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySchemaType() { 
       // FieldType: TINYINT
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSchemaType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setSchemaType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setSchemaType('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_splocalecontainer();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontainer();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_splocalecontaineritem extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpLocaleContainerItemID());
    } 
    function testKeys() { 
       $t = new  huh_splocalecontaineritem();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpLocaleContainerItemID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpLocaleContainerItemID'], '0');
    } 
    function testDirtySpLocaleContainerItemID() { 
       // FieldType: INTEGER
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpLocaleContainerItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setSpLocaleContainerItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setSpLocaleContainerItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFormat() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFormat('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setFormat('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setFormat('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsHidden() { 
       // FieldType: BIT(1)
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsHidden('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setIsHidden('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setIsHidden('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsSystem() { 
       // FieldType: BIT(1)
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsSystem('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setIsSystem('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setIsSystem('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsUIFormatter() { 
       // FieldType: BIT(1)
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsUIFormatter('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setIsUIFormatter('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setIsUIFormatter('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPickListName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPickListName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setPickListName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setPickListName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyType() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setType('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsRequired() { 
       // FieldType: BIT(1)
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsRequired('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setIsRequired('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setIsRequired('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWebLinkName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWebLinkName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setWebLinkName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setWebLinkName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpLocaleContainerID() { 
       // FieldType: INTEGER
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpLocaleContainerID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setSpLocaleContainerID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setSpLocaleContainerID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_splocalecontaineritem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocalecontaineritem();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_splocaleitemstr extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpLocaleItemStrID());
    } 
    function testKeys() { 
       $t = new  huh_splocaleitemstr();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpLocaleItemStrID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpLocaleItemStrID'], '0');
    } 
    function testDirtySpLocaleItemStrID() { 
       // FieldType: INTEGER
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpLocaleItemStrID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setSpLocaleItemStrID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setSpLocaleItemStrID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCountry() { 
       // FieldType: VARCHAR(2)
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCountry('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setCountry('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setCountry('99999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLanguage() { 
       // FieldType: VARCHAR(2)
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLanguage('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setLanguage('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setLanguage('99999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setText('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setText('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVariant() { 
       // FieldType: VARCHAR(2)
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVariant('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setVariant('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setVariant('99999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpLocaleContainerItemDescID() { 
       // FieldType: INTEGER
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpLocaleContainerItemDescID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setSpLocaleContainerItemDescID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setSpLocaleContainerItemDescID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpLocaleContainerDescID() { 
       // FieldType: INTEGER
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpLocaleContainerDescID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setSpLocaleContainerDescID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setSpLocaleContainerDescID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpLocaleContainerItemNameID() { 
       // FieldType: INTEGER
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpLocaleContainerItemNameID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setSpLocaleContainerItemNameID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setSpLocaleContainerItemNameID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpLocaleContainerNameID() { 
       // FieldType: INTEGER
       $t = new  huh_splocaleitemstr();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpLocaleContainerNameID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setSpLocaleContainerNameID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_splocaleitemstr();
       try { 
          $t->setSpLocaleContainerNameID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_sppermission extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_sppermission();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpPermissionID());
    } 
    function testKeys() { 
       $t = new  huh_sppermission();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpPermissionID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpPermissionID'], '0');
    } 
    function testDirtySpPermissionID() { 
       // FieldType: INTEGER
       $t = new  huh_sppermission();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpPermissionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sppermission();
       try { 
          $t->setSpPermissionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sppermission();
       try { 
          $t->setSpPermissionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyActions() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_sppermission();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setActions('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sppermission();
       try { 
          $t->setActions('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sppermission();
       try { 
          $t->setActions('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_sppermission();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sppermission();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sppermission();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPermissionClass() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_sppermission();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPermissionClass('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sppermission();
       try { 
          $t->setPermissionClass('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sppermission();
       try { 
          $t->setPermissionClass('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTargetId() { 
       // FieldType: INTEGER
       $t = new  huh_sppermission();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTargetId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sppermission();
       try { 
          $t->setTargetId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sppermission();
       try { 
          $t->setTargetId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spprincipal extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpPrincipalID());
    } 
    function testKeys() { 
       $t = new  huh_spprincipal();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpPrincipalID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpPrincipalID'], '0');
    } 
    function testDirtySpPrincipalID() { 
       // FieldType: INTEGER
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpPrincipalID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setSpPrincipalID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setSpPrincipalID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGroupSubClass() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGroupSubClass('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setGroupSubClass('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setGroupSubClass('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtygroupType() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setgroupType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setgroupType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setgroupType('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPriority() { 
       // FieldType: TINYINT
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPriority('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setPriority('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setPriority('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyuserGroupScopeID() { 
       // FieldType: INTEGER
       $t = new  huh_spprincipal();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setuserGroupScopeID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setuserGroupScopeID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal();
       try { 
          $t->setuserGroupScopeID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spprincipal_sppermission extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spprincipal_sppermission();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpPermissionID());
       $this->assertNull($t->getSpPrincipalID());
    } 
    function testKeys() { 
       $t = new  huh_spprincipal_sppermission();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),2);
       $t->setSpPermissionID('0');
       $t->setSpPrincipalID('1');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpPermissionID'], '0');
       $this->assertIdentical($pk['SpPrincipalID'], '1');
    } 
    function testDirtySpPermissionID() { 
       // FieldType: INTEGER
       $t = new  huh_spprincipal_sppermission();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpPermissionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal_sppermission();
       try { 
          $t->setSpPermissionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal_sppermission();
       try { 
          $t->setSpPermissionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpPrincipalID() { 
       // FieldType: INTEGER
       $t = new  huh_spprincipal_sppermission();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpPrincipalID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal_sppermission();
       try { 
          $t->setSpPrincipalID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spprincipal_sppermission();
       try { 
          $t->setSpPrincipalID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spquery extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spquery();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpQueryID());
    } 
    function testKeys() { 
       $t = new  huh_spquery();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpQueryID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpQueryID'], '0');
    } 
    function testDirtySpQueryID() { 
       // FieldType: INTEGER
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpQueryID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setSpQueryID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setSpQueryID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyContextName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setContextName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setContextName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setContextName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyContextTableId() { 
       // FieldType: SMALLINT
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setContextTableId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setContextTableId('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setContextTableId('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCountOnly() { 
       // FieldType: BIT(1)
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCountOnly('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setCountOnly('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setCountOnly('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsFavorite() { 
       // FieldType: BIT(1)
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsFavorite('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setIsFavorite('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setIsFavorite('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: SMALLINT
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setOrdinal('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setOrdinal('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySearchSynonymy() { 
       // FieldType: BIT(1)
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSearchSynonymy('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setSearchSynonymy('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setSearchSynonymy('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySelectDistinct() { 
       // FieldType: BIT(1)
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSelectDistinct('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setSelectDistinct('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setSelectDistinct('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySqlStr() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSqlStr('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setSqlStr('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setSqlStr('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpecifyUserID() { 
       // FieldType: INTEGER
       $t = new  huh_spquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecifyUserID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setSpecifyUserID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spquery();
       try { 
          $t->setSpecifyUserID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spqueryfield extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpQueryFieldID());
    } 
    function testKeys() { 
       $t = new  huh_spqueryfield();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpQueryFieldID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpQueryFieldID'], '0');
    } 
    function testDirtySpQueryFieldID() { 
       // FieldType: INTEGER
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpQueryFieldID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setSpQueryFieldID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setSpQueryFieldID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAlwaysFilter() { 
       // FieldType: BIT(1)
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAlwaysFilter('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setAlwaysFilter('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setAlwaysFilter('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyColumnAlias() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setColumnAlias('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setColumnAlias('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setColumnAlias('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyContextTableIdent() { 
       // FieldType: INTEGER
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setContextTableIdent('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setContextTableIdent('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setContextTableIdent('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEndValue() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEndValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setEndValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setEndValue('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setFieldName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setFieldName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFormatName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFormatName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setFormatName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setFormatName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsDisplay() { 
       // FieldType: BIT(1)
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsDisplay('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setIsDisplay('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setIsDisplay('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsNot() { 
       // FieldType: BIT(1)
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsNot('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setIsNot('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setIsNot('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsPrompt() { 
       // FieldType: BIT(1)
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsPrompt('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setIsPrompt('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setIsPrompt('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsRelFld() { 
       // FieldType: BIT(1)
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsRelFld('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setIsRelFld('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setIsRelFld('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOperEnd() { 
       // FieldType: TINYINT
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOperEnd('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setOperEnd('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setOperEnd('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOperStart() { 
       // FieldType: TINYINT
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOperStart('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setOperStart('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setOperStart('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPosition() { 
       // FieldType: SMALLINT
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPosition('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setPosition('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setPosition('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySortType() { 
       // FieldType: TINYINT
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSortType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setSortType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setSortType('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStartValue() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStartValue('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setStartValue('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setStartValue('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStringId() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStringId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setStringId('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setStringId('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTableList() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTableList('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setTableList('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setTableList('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpQueryID() { 
       // FieldType: INTEGER
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpQueryID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setSpQueryID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setSpQueryID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spqueryfield();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spqueryfield();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spreport extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spreport();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpReportId());
    } 
    function testKeys() { 
       $t = new  huh_spreport();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpReportId('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpReportId'], '0');
    } 
    function testDirtySpReportId() { 
       // FieldType: INTEGER
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpReportId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setSpReportId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setSpReportId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRepeatCount() { 
       // FieldType: INTEGER
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRepeatCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setRepeatCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setRepeatCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRepeatField() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRepeatField('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setRepeatField('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setRepeatField('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpecifyUserID() { 
       // FieldType: INTEGER
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecifyUserID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setSpecifyUserID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setSpecifyUserID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAppResourceID() { 
       // FieldType: INTEGER
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAppResourceID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setAppResourceID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setAppResourceID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWorkbenchTemplateID() { 
       // FieldType: INTEGER
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchTemplateID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setWorkbenchTemplateID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setWorkbenchTemplateID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpQueryID() { 
       // FieldType: INTEGER
       $t = new  huh_spreport();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpQueryID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setSpQueryID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spreport();
       try { 
          $t->setSpQueryID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_sptasksemaphore extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getTaskSemaphoreID());
    } 
    function testKeys() { 
       $t = new  huh_sptasksemaphore();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setTaskSemaphoreID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['TaskSemaphoreID'], '0');
    } 
    function testDirtyTaskSemaphoreID() { 
       // FieldType: INTEGER
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaskSemaphoreID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setTaskSemaphoreID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setTaskSemaphoreID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyContext() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setContext('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setContext('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setContext('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsLocked() { 
       // FieldType: BIT(1)
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsLocked('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setIsLocked('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setIsLocked('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLockedTime() { 
       // FieldType: TIMESTAMP
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLockedTime('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setLockedTime('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setLockedTime('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMachineName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMachineName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setMachineName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setMachineName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyScope() { 
       // FieldType: TINYINT
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setScope('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setScope('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setScope('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTaskName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaskName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setTaskName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setTaskName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUsageCount() { 
       // FieldType: INTEGER
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUsageCount('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setUsageCount('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setUsageCount('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOwnerID() { 
       // FieldType: INTEGER
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOwnerID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setOwnerID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setOwnerID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDisciplineID() { 
       // FieldType: INTEGER
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDisciplineID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setDisciplineID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setDisciplineID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCollectionID() { 
       // FieldType: INTEGER
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCollectionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setCollectionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setCollectionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_sptasksemaphore();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_sptasksemaphore();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spversion extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spversion();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpVersionID());
    } 
    function testKeys() { 
       $t = new  huh_spversion();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpVersionID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpVersionID'], '0');
    } 
    function testDirtySpVersionID() { 
       // FieldType: INTEGER
       $t = new  huh_spversion();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpVersionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setSpVersionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setSpVersionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spversion();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spversion();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spversion();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAppName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_spversion();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAppName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setAppName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setAppName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAppVersion() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_spversion();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAppVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setAppVersion('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setAppVersion('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySchemaVersion() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_spversion();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSchemaVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setSchemaVersion('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setSchemaVersion('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spversion();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spversion();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spversion();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spviewsetobj extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpViewSetObjID());
    } 
    function testKeys() { 
       $t = new  huh_spviewsetobj();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpViewSetObjID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpViewSetObjID'], '0');
    } 
    function testDirtySpViewSetObjID() { 
       // FieldType: INTEGER
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpViewSetObjID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setSpViewSetObjID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setSpViewSetObjID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFileName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFileName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setFileName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setFileName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLevel() { 
       // FieldType: SMALLINT
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLevel('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setLevel('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setLevel('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMetaData() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMetaData('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setMetaData('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setMetaData('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpAppResourceDirID() { 
       // FieldType: INTEGER
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpAppResourceDirID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setSpAppResourceDirID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setSpAppResourceDirID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spviewsetobj();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spviewsetobj();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_spvisualquery extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_spvisualquery();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getSpVisualQueryID());
    } 
    function testKeys() { 
       $t = new  huh_spvisualquery();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setSpVisualQueryID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['SpVisualQueryID'], '0');
    } 
    function testDirtySpVisualQueryID() { 
       // FieldType: INTEGER
       $t = new  huh_spvisualquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpVisualQueryID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setSpVisualQueryID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setSpVisualQueryID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spvisualquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_spvisualquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_spvisualquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDescription() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_spvisualquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDescription('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setDescription('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setDescription('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_spvisualquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spvisualquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_spvisualquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpecifyUserID() { 
       // FieldType: INTEGER
       $t = new  huh_spvisualquery();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecifyUserID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setSpecifyUserID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_spvisualquery();
       try { 
          $t->setSpecifyUserID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_storage extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_storage();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getStorageID());
    } 
    function testKeys() { 
       $t = new  huh_storage();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setStorageID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['StorageID'], '0');
    } 
    function testDirtyStorageID() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStorageID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setStorageID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setStorageID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAbbrev() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAbbrev('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setAbbrev('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setAbbrev('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setFullName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setFullName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyHighestChildNodeNumber() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setHighestChildNodeNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setHighestChildNodeNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setHighestChildNodeNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsAccepted() { 
       // FieldType: BIT(1)
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsAccepted('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setIsAccepted('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setIsAccepted('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyname() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setname('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setname('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setname('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNodeNumber() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNodeNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setNodeNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setNodeNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setNumber1('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setNumber1('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setNumber2('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setNumber2('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRankID() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRankID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setRankID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setRankID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: YEAR
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setText1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setText2('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampVersion() { 
       // FieldType: TIMESTAMP
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setTimestampVersion('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setTimestampVersion('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStorageTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStorageTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setStorageTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setStorageTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStorageTreeDefItemID() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStorageTreeDefItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setStorageTreeDefItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setStorageTreeDefItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentID() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setParentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setParentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAcceptedID() { 
       // FieldType: INTEGER
       $t = new  huh_storage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAcceptedID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setAcceptedID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storage();
       try { 
          $t->setAcceptedID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_storagetreedef extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_storagetreedef();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getStorageTreeDefID());
    } 
    function testKeys() { 
       $t = new  huh_storagetreedef();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setStorageTreeDefID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['StorageTreeDefID'], '0');
    } 
    function testDirtyStorageTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_storagetreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStorageTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setStorageTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setStorageTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_storagetreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_storagetreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_storagetreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullNameDirection() { 
       // FieldType: INTEGER
       $t = new  huh_storagetreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullNameDirection('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setFullNameDirection('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setFullNameDirection('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_storagetreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_storagetreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_storagetreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_storagetreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedef();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_storagetreedefitem extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getStorageTreeDefItemID());
    } 
    function testKeys() { 
       $t = new  huh_storagetreedefitem();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setStorageTreeDefItemID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['StorageTreeDefItemID'], '0');
    } 
    function testDirtyStorageTreeDefItemID() { 
       // FieldType: INTEGER
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStorageTreeDefItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setStorageTreeDefItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setStorageTreeDefItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullNameSeparator() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullNameSeparator('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setFullNameSeparator('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setFullNameSeparator('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsEnforced() { 
       // FieldType: BIT(1)
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsEnforced('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setIsEnforced('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setIsEnforced('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsInFullName() { 
       // FieldType: BIT(1)
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsInFullName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setIsInFullName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setIsInFullName('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRankID() { 
       // FieldType: INTEGER
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRankID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setRankID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setRankID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTextAfter() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTextAfter('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setTextAfter('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setTextAfter('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTextBefore() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTextBefore('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setTextBefore('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setTextBefore('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentItemID() { 
       // FieldType: INTEGER
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setParentItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setParentItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStorageTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_storagetreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStorageTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setStorageTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_storagetreedefitem();
       try { 
          $t->setStorageTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_taxon extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_taxon();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getTaxonID());
    } 
    function testKeys() { 
       $t = new  huh_taxon();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setTaxonID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['TaxonID'], '0');
    } 
    function testDirtyTaxonID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setTaxonID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setTaxonID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAuthor() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAuthor('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setAuthor('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setAuthor('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCitesStatus() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCitesStatus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setCitesStatus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setCitesStatus('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCOLStatus() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCOLStatus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setCOLStatus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setCOLStatus('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCommonName() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCommonName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setCommonName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setCommonName('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCultivarName() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCultivarName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setCultivarName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setCultivarName('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEnvironmentalProtectionStatus() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEnvironmentalProtectionStatus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setEnvironmentalProtectionStatus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setEnvironmentalProtectionStatus('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyEsaStatus() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setEsaStatus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setEsaStatus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setEsaStatus('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setFullName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setFullName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGroupNumber() { 
       // FieldType: VARCHAR(20)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGroupNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setGroupNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setGroupNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGUID() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGUID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setGUID('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setGUID('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyHighestChildNodeNumber() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setHighestChildNodeNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setHighestChildNodeNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setHighestChildNodeNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsAccepted() { 
       // FieldType: BIT(1)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsAccepted('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setIsAccepted('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setIsAccepted('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsHybrid() { 
       // FieldType: BIT(1)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsHybrid('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setIsHybrid('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setIsHybrid('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsisNumber() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsisNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setIsisNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setIsisNumber('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLabelFormat() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLabelFormat('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setLabelFormat('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setLabelFormat('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNcbiTaxonNumber() { 
       // FieldType: VARCHAR(8)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNcbiTaxonNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setNcbiTaxonNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setNcbiTaxonNumber('99999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNodeNumber() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNodeNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setNodeNumber('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setNodeNumber('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setNumber1('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setNumber1('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setNumber2('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setNumber2('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRankID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRankID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setRankID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setRankID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySource() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSource('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setSource('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setSource('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTaxonomicSerialNumber() { 
       // FieldType: YEAR
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonomicSerialNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setTaxonomicSerialNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setTaxonomicSerialNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setText1('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: VARCHAR(200)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setText2('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUnitInd1() { 
       // FieldType: YEAR
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUnitInd1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitInd1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitInd1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUnitInd2() { 
       // FieldType: YEAR
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUnitInd2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitInd2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitInd2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUnitInd3() { 
       // FieldType: YEAR
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUnitInd3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitInd3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitInd3('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUnitInd4() { 
       // FieldType: YEAR
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUnitInd4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitInd4('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitInd4('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUnitName1() { 
       // FieldType: YEAR
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUnitName1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitName1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitName1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUnitName2() { 
       // FieldType: YEAR
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUnitName2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitName2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitName2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUnitName3() { 
       // FieldType: YEAR
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUnitName3('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitName3('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitName3('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUnitName4() { 
       // FieldType: YEAR
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUnitName4('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitName4('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUnitName4('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUsfwsCode() { 
       // FieldType: VARCHAR(16)
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUsfwsCode('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUsfwsCode('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setUsfwsCode('9999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVisibility() { 
       // FieldType: TINYINT
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVisibility('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setVisibility('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setVisibility('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAcceptedID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAcceptedID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setAcceptedID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setAcceptedID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStdExAuthorID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStdExAuthorID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setStdExAuthorID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setStdExAuthorID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTaxonTreeDefItemID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonTreeDefItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setTaxonTreeDefItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setTaxonTreeDefItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyHybridParent2ID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setHybridParent2ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setHybridParent2ID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setHybridParent2ID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStdAuthorID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStdAuthorID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setStdAuthorID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setStdAuthorID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setParentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setParentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTaxonTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setTaxonTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setTaxonTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCitInAuthorID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCitInAuthorID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setCitInAuthorID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setCitInAuthorID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySanctAuthorID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSanctAuthorID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setSanctAuthorID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setSanctAuthorID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParAuthorID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParAuthorID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setParAuthorID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setParAuthorID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBasionymID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBasionymID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setBasionymID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setBasionymID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyHybridParent1ID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setHybridParent1ID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setHybridParent1ID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setHybridParent1ID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParExAuthorID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParExAuthorID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setParExAuthorID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setParExAuthorID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVisibilitySetByID() { 
       // FieldType: INTEGER
       $t = new  huh_taxon();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVisibilitySetByID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setVisibilitySetByID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxon();
       try { 
          $t->setVisibilitySetByID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_taxonattachment extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_taxonattachment();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getTaxonAttachmentID());
    } 
    function testKeys() { 
       $t = new  huh_taxonattachment();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setTaxonAttachmentID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['TaxonAttachmentID'], '0');
    } 
    function testDirtyTaxonAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxonattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setTaxonAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setTaxonAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_taxonattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_taxonattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_taxonattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOrdinal() { 
       // FieldType: INTEGER
       $t = new  huh_taxonattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOrdinal('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setOrdinal('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setOrdinal('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_taxonattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxonattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxonattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTaxonID() { 
       // FieldType: INTEGER
       $t = new  huh_taxonattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setTaxonID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setTaxonID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachmentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxonattachment();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachmentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setAttachmentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxonattachment();
       try { 
          $t->setAttachmentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_taxoncitation extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getTaxonCitationID());
    } 
    function testKeys() { 
       $t = new  huh_taxoncitation();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setTaxonCitationID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['TaxonCitationID'], '0');
    } 
    function testDirtyTaxonCitationID() { 
       // FieldType: INTEGER
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonCitationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setTaxonCitationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setTaxonCitationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber1() { 
       // FieldType: REAL
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setNumber1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setNumber1('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyNumber2() { 
       // FieldType: REAL
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setNumber2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setNumber2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setNumber2('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText1() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setText1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setText1('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyText2() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setText2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setText2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setText2('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo1() { 
       // FieldType: BIT(1)
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo1('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setYesNo1('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setYesNo1('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYesNo2() { 
       // FieldType: BIT(1)
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYesNo2('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setYesNo2('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setYesNo2('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTaxonID() { 
       // FieldType: INTEGER
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setTaxonID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setTaxonID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyReferenceWorkID() { 
       // FieldType: INTEGER
       $t = new  huh_taxoncitation();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setReferenceWorkID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setReferenceWorkID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxoncitation();
       try { 
          $t->setReferenceWorkID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_taxontreedef extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_taxontreedef();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getTaxonTreeDefID());
    } 
    function testKeys() { 
       $t = new  huh_taxontreedef();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setTaxonTreeDefID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['TaxonTreeDefID'], '0');
    } 
    function testDirtyTaxonTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_taxontreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setTaxonTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setTaxonTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_taxontreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_taxontreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_taxontreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullNameDirection() { 
       // FieldType: INTEGER
       $t = new  huh_taxontreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullNameDirection('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setFullNameDirection('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setFullNameDirection('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_taxontreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_taxontreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxontreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxontreedef();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedef();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_taxontreedefitem extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getTaxonTreeDefItemID());
    } 
    function testKeys() { 
       $t = new  huh_taxontreedefitem();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setTaxonTreeDefItemID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['TaxonTreeDefItemID'], '0');
    } 
    function testDirtyTaxonTreeDefItemID() { 
       // FieldType: INTEGER
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonTreeDefItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setTaxonTreeDefItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setTaxonTreeDefItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFormatToken() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFormatToken('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setFormatToken('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setFormatToken('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFullNameSeparator() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFullNameSeparator('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setFullNameSeparator('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setFullNameSeparator('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsEnforced() { 
       // FieldType: BIT(1)
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsEnforced('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setIsEnforced('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setIsEnforced('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsInFullName() { 
       // FieldType: BIT(1)
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsInFullName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setIsInFullName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setIsInFullName('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRankID() { 
       // FieldType: INTEGER
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRankID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setRankID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setRankID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTextAfter() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTextAfter('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setTextAfter('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setTextAfter('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTextBefore() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTextBefore('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setTextBefore('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setTextBefore('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyParentItemID() { 
       // FieldType: INTEGER
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setParentItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setParentItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setParentItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTaxonTreeDefID() { 
       // FieldType: INTEGER
       $t = new  huh_taxontreedefitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTaxonTreeDefID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setTaxonTreeDefID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_taxontreedefitem();
       try { 
          $t->setTaxonTreeDefID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_treatmentevent extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getTreatmentEventID());
    } 
    function testKeys() { 
       $t = new  huh_treatmentevent();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setTreatmentEventID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['TreatmentEventID'], '0');
    } 
    function testDirtyTreatmentEventID() { 
       // FieldType: INTEGER
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTreatmentEventID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setTreatmentEventID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setTreatmentEventID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateBoxed() { 
       // FieldType: DATE
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateBoxed('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateBoxed('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateBoxed('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateCleaned() { 
       // FieldType: DATE
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateCleaned('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateCleaned('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateCleaned('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateCompleted() { 
       // FieldType: DATE
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateCompleted('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateCompleted('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateCompleted('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateReceived() { 
       // FieldType: DATE
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateReceived('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateReceived('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateReceived('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateToIsolation() { 
       // FieldType: DATE
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateToIsolation('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateToIsolation('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateToIsolation('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateTreatmentEnded() { 
       // FieldType: DATE
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateTreatmentEnded('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateTreatmentEnded('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateTreatmentEnded('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDateTreatmentStarted() { 
       // FieldType: DATE
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDateTreatmentStarted('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateTreatmentStarted('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDateTreatmentStarted('999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldNumber() { 
       // FieldType: YEAR
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setFieldNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setFieldNumber('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyStorage() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setStorage('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setStorage('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setStorage('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTreatmentNumber() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTreatmentNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setTreatmentNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setTreatmentNumber('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyType() { 
       // FieldType: VARCHAR(32)
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setType('99999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyPreparationID() { 
       // FieldType: INTEGER
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setPreparationID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setPreparationID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setPreparationID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAccessionID() { 
       // FieldType: INTEGER
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAccessionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setAccessionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setAccessionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDivisionID() { 
       // FieldType: INTEGER
       $t = new  huh_treatmentevent();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDivisionID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDivisionID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_treatmentevent();
       try { 
          $t->setDivisionID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_workbench extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_workbench();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getWorkbenchID());
    } 
    function testKeys() { 
       $t = new  huh_workbench();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setWorkbenchID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['WorkbenchID'], '0');
    } 
    function testDirtyWorkbenchID() { 
       // FieldType: INTEGER
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setWorkbenchID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setWorkbenchID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAllPermissionLevel() { 
       // FieldType: INTEGER
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAllPermissionLevel('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setAllPermissionLevel('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setAllPermissionLevel('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTableID() { 
       // FieldType: INTEGER
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTableID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setTableID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setTableID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyExportInstitutionName() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setExportInstitutionName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setExportInstitutionName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setExportInstitutionName('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFormId() { 
       // FieldType: INTEGER
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFormId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setFormId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setFormId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyGroupPermissionLevel() { 
       // FieldType: INTEGER
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setGroupPermissionLevel('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setGroupPermissionLevel('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setGroupPermissionLevel('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLockedByUserName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLockedByUserName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setLockedByUserName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setLockedByUserName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyOwnerPermissionLevel() { 
       // FieldType: INTEGER
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setOwnerPermissionLevel('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setOwnerPermissionLevel('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setOwnerPermissionLevel('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcFilePath() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcFilePath('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setSrcFilePath('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setSrcFilePath('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpPrincipalID() { 
       // FieldType: INTEGER
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpPrincipalID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setSpPrincipalID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setSpPrincipalID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWorkbenchTemplateID() { 
       // FieldType: INTEGER
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchTemplateID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setWorkbenchTemplateID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setWorkbenchTemplateID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpecifyUserID() { 
       // FieldType: INTEGER
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecifyUserID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setSpecifyUserID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setSpecifyUserID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_workbench();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbench();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_workbenchdataitem extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_workbenchdataitem();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getWorkbenchDataItemID());
    } 
    function testKeys() { 
       $t = new  huh_workbenchdataitem();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setWorkbenchDataItemID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['WorkbenchDataItemID'], '0');
    } 
    function testDirtyWorkbenchDataItemID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchdataitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchDataItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchdataitem();
       try { 
          $t->setWorkbenchDataItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchdataitem();
       try { 
          $t->setWorkbenchDataItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCellData() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_workbenchdataitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCellData('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchdataitem();
       try { 
          $t->setCellData('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchdataitem();
       try { 
          $t->setCellData('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRowNumber() { 
       // FieldType: SMALLINT
       $t = new  huh_workbenchdataitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRowNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchdataitem();
       try { 
          $t->setRowNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchdataitem();
       try { 
          $t->setRowNumber('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyValidationStatus() { 
       // FieldType: SMALLINT
       $t = new  huh_workbenchdataitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setValidationStatus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchdataitem();
       try { 
          $t->setValidationStatus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchdataitem();
       try { 
          $t->setValidationStatus('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWorkbenchTemplateMappingItemID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchdataitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchTemplateMappingItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchdataitem();
       try { 
          $t->setWorkbenchTemplateMappingItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchdataitem();
       try { 
          $t->setWorkbenchTemplateMappingItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWorkbenchRowID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchdataitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchRowID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchdataitem();
       try { 
          $t->setWorkbenchRowID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchdataitem();
       try { 
          $t->setWorkbenchRowID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_workbenchrow extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_workbenchrow();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getWorkbenchRowID());
    } 
    function testKeys() { 
       $t = new  huh_workbenchrow();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setWorkbenchRowID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['WorkbenchRowID'], '0');
    } 
    function testDirtyWorkbenchRowID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchRowID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setWorkbenchRowID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setWorkbenchRowID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyBioGeomancerResults() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_workbenchrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setBioGeomancerResults('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setBioGeomancerResults('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setBioGeomancerResults('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCardImageData() { 
       // FieldType: LONGVARBINARY
       $t = new  huh_workbenchrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCardImageData('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setCardImageData('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setCardImageData('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCardImageFullPath() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_workbenchrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCardImageFullPath('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setCardImageFullPath('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setCardImageFullPath('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLat1Text() { 
       // FieldType: YEAR
       $t = new  huh_workbenchrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLat1Text('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setLat1Text('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setLat1Text('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLat2Text() { 
       // FieldType: YEAR
       $t = new  huh_workbenchrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLat2Text('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setLat2Text('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setLat2Text('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLong1Text() { 
       // FieldType: YEAR
       $t = new  huh_workbenchrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLong1Text('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setLong1Text('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setLong1Text('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyLong2Text() { 
       // FieldType: YEAR
       $t = new  huh_workbenchrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setLong2Text('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setLong2Text('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setLong2Text('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRowNumber() { 
       // FieldType: SMALLINT
       $t = new  huh_workbenchrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRowNumber('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setRowNumber('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setRowNumber('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyUploadStatus() { 
       // FieldType: TINYINT
       $t = new  huh_workbenchrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setUploadStatus('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setUploadStatus('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setUploadStatus('9999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWorkbenchID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchrow();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setWorkbenchID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrow();
       try { 
          $t->setWorkbenchID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_workbenchrowimage extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_workbenchrowimage();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getWorkbenchRowImageID());
    } 
    function testKeys() { 
       $t = new  huh_workbenchrowimage();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setWorkbenchRowImageID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['WorkbenchRowImageID'], '0');
    } 
    function testDirtyWorkbenchRowImageID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchrowimage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchRowImageID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrowimage();
       try { 
          $t->setWorkbenchRowImageID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrowimage();
       try { 
          $t->setWorkbenchRowImageID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyAttachToTableName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_workbenchrowimage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setAttachToTableName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrowimage();
       try { 
          $t->setAttachToTableName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrowimage();
       try { 
          $t->setAttachToTableName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCardImageData() { 
       // FieldType: LONGVARBINARY
       $t = new  huh_workbenchrowimage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCardImageData('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrowimage();
       try { 
          $t->setCardImageData('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrowimage();
       try { 
          $t->setCardImageData('99999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCardImageFullPath() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_workbenchrowimage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCardImageFullPath('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrowimage();
       try { 
          $t->setCardImageFullPath('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrowimage();
       try { 
          $t->setCardImageFullPath('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyImageOrder() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchrowimage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setImageOrder('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrowimage();
       try { 
          $t->setImageOrder('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrowimage();
       try { 
          $t->setImageOrder('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWorkbenchRowID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchrowimage();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchRowID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrowimage();
       try { 
          $t->setWorkbenchRowID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchrowimage();
       try { 
          $t->setWorkbenchRowID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_workbenchtemplate extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_workbenchtemplate();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getWorkbenchTemplateID());
    } 
    function testKeys() { 
       $t = new  huh_workbenchtemplate();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setWorkbenchTemplateID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['WorkbenchTemplateID'], '0');
    } 
    function testDirtyWorkbenchTemplateID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchtemplate();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchTemplateID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setWorkbenchTemplateID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setWorkbenchTemplateID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_workbenchtemplate();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_workbenchtemplate();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchtemplate();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_workbenchtemplate();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyRemarks() { 
       // FieldType: LONGVARCHAR
       $t = new  huh_workbenchtemplate();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setRemarks('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setRemarks('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setRemarks('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySrcFilePath() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_workbenchtemplate();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSrcFilePath('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setSrcFilePath('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setSrcFilePath('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtySpecifyUserID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchtemplate();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setSpecifyUserID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setSpecifyUserID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setSpecifyUserID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchtemplate();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchtemplate();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplate();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
class testOf_huh_workbenchtemplatemappingitem extends UnitTestCase { 
    function testConstructor() { 
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isLoaded());
       $this->assertFalse($t->isDirty());
       $this->assertIdentical($t->errorMessage(),'');
       $this->assertNull($t->getWorkbenchTemplateMappingItemID());
    } 
    function testKeys() { 
       $t = new  huh_workbenchtemplatemappingitem();
       $pk = $t->PKArray();
       $this->assertIdentical(count($pk),1);
       $t->setWorkbenchTemplateMappingItemID('0');
       $pk = $t->PKArray();
       $this->assertIdentical($pk['WorkbenchTemplateMappingItemID'], '0');
    } 
    function testDirtyWorkbenchTemplateMappingItemID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchTemplateMappingItemID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setWorkbenchTemplateMappingItemID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setWorkbenchTemplateMappingItemID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampCreated() { 
       // FieldType: TIMESTAMP
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampCreated('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setTimestampCreated('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setTimestampCreated('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTimestampModified() { 
       // FieldType: TIMESTAMP
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTimestampModified('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setTimestampModified('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setTimestampModified('999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyVersion() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setVersion('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setVersion('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setVersion('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyXCoord() { 
       // FieldType: SMALLINT
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setXCoord('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setXCoord('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setXCoord('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyYCoord() { 
       // FieldType: SMALLINT
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setYCoord('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setYCoord('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setYCoord('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCaption() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCaption('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setCaption('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setCaption('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCarryForward() { 
       // FieldType: BIT(1)
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCarryForward('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setCarryForward('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setCarryForward('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDataFieldLength() { 
       // FieldType: SMALLINT
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDataFieldLength('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setDataFieldLength('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setDataFieldLength('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setFieldName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setFieldName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyFieldType() { 
       // FieldType: SMALLINT
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setFieldType('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setFieldType('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setFieldType('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyImportedColName() { 
       // FieldType: VARCHAR(255)
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setImportedColName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setImportedColName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setImportedColName('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsExportableToContent() { 
       // FieldType: BIT(1)
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsExportableToContent('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setIsExportableToContent('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setIsExportableToContent('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsIncludedInTitle() { 
       // FieldType: BIT(1)
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsIncludedInTitle('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setIsIncludedInTitle('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setIsIncludedInTitle('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyIsRequired() { 
       // FieldType: BIT(1)
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setIsRequired('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setIsRequired('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setIsRequired('9999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyMetaData() { 
       // FieldType: VARCHAR(128)
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setMetaData('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setMetaData('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setMetaData('99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyDataColumnIndex() { 
       // FieldType: SMALLINT
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setDataColumnIndex('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setDataColumnIndex('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setDataColumnIndex('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTableId() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTableId('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setTableId('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setTableId('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyTableName() { 
       // FieldType: VARCHAR(64)
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setTableName('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setTableName('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setTableName('9999999999999999999999999999999999999999999999999999999999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyViewOrder() { 
       // FieldType: SMALLINT
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setViewOrder('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setViewOrder('A');
         $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setViewOrder('999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyCreatedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setCreatedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setCreatedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setCreatedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyModifiedByAgentID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setModifiedByAgentID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setModifiedByAgentID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setModifiedByAgentID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
    function testDirtyWorkbenchTemplateID() { 
       // FieldType: INTEGER
       $t = new  huh_workbenchtemplatemappingitem();
       $this->assertFalse($t->isDirty());
       try { 
          $t->setWorkbenchTemplateID('1');
          $this->assertTrue($t->isDirty());
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setWorkbenchTemplateID('A');
          $this->fail('Failed to throw exception on storing a character to an integer field.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
       $t = new  huh_workbenchtemplatemappingitem();
       try { 
          $t->setWorkbenchTemplateID('99999999999999');
          $this->fail('Failed to throw exception on overlength set.');
       } catch (Exception $e) { 
          $this->assertFalse($t->isDirty());
       } 
    } 
} 
// test database level classes

class testOf_database_schema extends UnitTestCase {
  function testHasTable() { 
     $d = new database_schema();
     $this->assertTrue($d->hasTable('huh_HUH_ORCHIDS_ETHANOL'));
     $this->assertTrue($d->hasTable('huh_IMAGE_BATCH'));
     $this->assertTrue($d->hasTable('huh_IMAGE_LAB'));
     $this->assertTrue($d->hasTable('huh_IMAGE_OBJECT'));
     $this->assertTrue($d->hasTable('huh_IMAGE_OBJECT_TYPE'));
     $this->assertTrue($d->hasTable('huh_IMAGE_SET'));
     $this->assertTrue($d->hasTable('huh_IMAGE_SET_collectionobject'));
     $this->assertTrue($d->hasTable('huh_REPOSITORY'));
     $this->assertTrue($d->hasTable('huh_ST_LOOKUP'));
     $this->assertTrue($d->hasTable('huh_accession'));
     $this->assertTrue($d->hasTable('huh_accessionagent'));
     $this->assertTrue($d->hasTable('huh_accessionattachment'));
     $this->assertTrue($d->hasTable('huh_accessionauthorization'));
     $this->assertTrue($d->hasTable('huh_accessionpreparation'));
     $this->assertTrue($d->hasTable('huh_address'));
     $this->assertTrue($d->hasTable('huh_addressofrecord'));
     $this->assertTrue($d->hasTable('huh_agent'));
     $this->assertTrue($d->hasTable('huh_agent_discipline'));
     $this->assertTrue($d->hasTable('huh_agentattachment'));
     $this->assertTrue($d->hasTable('huh_agentcitation'));
     $this->assertTrue($d->hasTable('huh_agentgeography'));
     $this->assertTrue($d->hasTable('huh_agentspecialty'));
     $this->assertTrue($d->hasTable('huh_agentvariant'));
     $this->assertTrue($d->hasTable('huh_appraisal'));
     $this->assertTrue($d->hasTable('huh_attachment'));
     $this->assertTrue($d->hasTable('huh_attachmentmetadata'));
     $this->assertTrue($d->hasTable('huh_attachmenttag'));
     $this->assertTrue($d->hasTable('huh_attributedef'));
     $this->assertTrue($d->hasTable('huh_author'));
     $this->assertTrue($d->hasTable('huh_autonumberingscheme'));
     $this->assertTrue($d->hasTable('huh_autonumsch_coll'));
     $this->assertTrue($d->hasTable('huh_autonumsch_div'));
     $this->assertTrue($d->hasTable('huh_autonumsch_dsp'));
     $this->assertTrue($d->hasTable('huh_borrow'));
     $this->assertTrue($d->hasTable('huh_borrowagent'));
     $this->assertTrue($d->hasTable('huh_borrowmaterial'));
     $this->assertTrue($d->hasTable('huh_borrowreturnmaterial'));
     $this->assertTrue($d->hasTable('huh_collectingevent'));
     $this->assertTrue($d->hasTable('huh_collectingeventattachment'));
     $this->assertTrue($d->hasTable('huh_collectingeventattr'));
     $this->assertTrue($d->hasTable('huh_collectingeventattribute'));
     $this->assertTrue($d->hasTable('huh_collectingtrip'));
     $this->assertTrue($d->hasTable('huh_collection'));
     $this->assertTrue($d->hasTable('huh_collectionobject'));
     $this->assertTrue($d->hasTable('huh_collectionobjectattachment'));
     $this->assertTrue($d->hasTable('huh_collectionobjectattr'));
     $this->assertTrue($d->hasTable('huh_collectionobjectattribute'));
     $this->assertTrue($d->hasTable('huh_collectionrelationship'));
     $this->assertTrue($d->hasTable('huh_collectionreltype'));
     $this->assertTrue($d->hasTable('huh_collector'));
     $this->assertTrue($d->hasTable('huh_commonnametx'));
     $this->assertTrue($d->hasTable('huh_commonnametxcitation'));
     $this->assertTrue($d->hasTable('huh_conservdescription'));
     $this->assertTrue($d->hasTable('huh_conservdescriptionattachment'));
     $this->assertTrue($d->hasTable('huh_conservevent'));
     $this->assertTrue($d->hasTable('huh_conserveventattachment'));
     $this->assertTrue($d->hasTable('huh_container'));
     $this->assertTrue($d->hasTable('huh_datatype'));
     $this->assertTrue($d->hasTable('huh_deaccession'));
     $this->assertTrue($d->hasTable('huh_deaccessionagent'));
     $this->assertTrue($d->hasTable('huh_deaccessionpreparation'));
     $this->assertTrue($d->hasTable('huh_determination'));
     $this->assertTrue($d->hasTable('huh_determinationcitation'));
     $this->assertTrue($d->hasTable('huh_discipline'));
     $this->assertTrue($d->hasTable('huh_division'));
     $this->assertTrue($d->hasTable('huh_dnasequence'));
     $this->assertTrue($d->hasTable('huh_dnasequenceattachment'));
     $this->assertTrue($d->hasTable('huh_dnasequencingrun'));
     $this->assertTrue($d->hasTable('huh_dnasequencingruncitation'));
     $this->assertTrue($d->hasTable('huh_exchangein'));
     $this->assertTrue($d->hasTable('huh_exchangeout'));
     $this->assertTrue($d->hasTable('huh_exchangeoutpreparation'));
     $this->assertTrue($d->hasTable('huh_fieldnotebook'));
     $this->assertTrue($d->hasTable('huh_fieldnotebookattachment'));
     $this->assertTrue($d->hasTable('huh_fieldnotebookpage'));
     $this->assertTrue($d->hasTable('huh_fieldnotebookpageattachment'));
     $this->assertTrue($d->hasTable('huh_fieldnotebookpageset'));
     $this->assertTrue($d->hasTable('huh_fieldnotebookpagesetattachment'));
     $this->assertTrue($d->hasTable('huh_fragment'));
     $this->assertTrue($d->hasTable('huh_fragmentattachment'));
     $this->assertTrue($d->hasTable('huh_fragmentcitation'));
     $this->assertTrue($d->hasTable('huh_geocoorddetail'));
     $this->assertTrue($d->hasTable('huh_geography'));
     $this->assertTrue($d->hasTable('huh_geographytreedef'));
     $this->assertTrue($d->hasTable('huh_geographytreedefitem'));
     $this->assertTrue($d->hasTable('huh_geologictimeperiod'));
     $this->assertTrue($d->hasTable('huh_geologictimeperiodtreedef'));
     $this->assertTrue($d->hasTable('huh_geologictimeperiodtreedefitem'));
     $this->assertTrue($d->hasTable('huh_gift'));
     $this->assertTrue($d->hasTable('huh_giftagent'));
     $this->assertTrue($d->hasTable('huh_giftpreparation'));
     $this->assertTrue($d->hasTable('huh_groupperson'));
     $this->assertTrue($d->hasTable('huh_hibernate_unique_key'));
     $this->assertTrue($d->hasTable('huh_inforequest'));
     $this->assertTrue($d->hasTable('huh_institution'));
     $this->assertTrue($d->hasTable('huh_journal'));
     $this->assertTrue($d->hasTable('huh_latlonpolygon'));
     $this->assertTrue($d->hasTable('huh_latlonpolygonpnt'));
     $this->assertTrue($d->hasTable('huh_lithostrat'));
     $this->assertTrue($d->hasTable('huh_lithostrattreedef'));
     $this->assertTrue($d->hasTable('huh_lithostrattreedefitem'));
     $this->assertTrue($d->hasTable('huh_loan'));
     $this->assertTrue($d->hasTable('huh_loanagent'));
     $this->assertTrue($d->hasTable('huh_loanattachment'));
     $this->assertTrue($d->hasTable('huh_loanpreparation'));
     $this->assertTrue($d->hasTable('huh_loanreturnpreparation'));
     $this->assertTrue($d->hasTable('huh_locality'));
     $this->assertTrue($d->hasTable('huh_localityattachment'));
     $this->assertTrue($d->hasTable('huh_localitycitation'));
     $this->assertTrue($d->hasTable('huh_localitydetail'));
     $this->assertTrue($d->hasTable('huh_localitynamealias'));
     $this->assertTrue($d->hasTable('huh_otheridentifier'));
     $this->assertTrue($d->hasTable('huh_paleocontext'));
     $this->assertTrue($d->hasTable('huh_permit'));
     $this->assertTrue($d->hasTable('huh_permitattachment'));
     $this->assertTrue($d->hasTable('huh_picklist'));
     $this->assertTrue($d->hasTable('huh_picklistitem'));
     $this->assertTrue($d->hasTable('huh_preparation'));
     $this->assertTrue($d->hasTable('huh_preparationattachment'));
     $this->assertTrue($d->hasTable('huh_preparationattr'));
     $this->assertTrue($d->hasTable('huh_preparationattribute'));
     $this->assertTrue($d->hasTable('huh_preptype'));
     $this->assertTrue($d->hasTable('huh_project'));
     $this->assertTrue($d->hasTable('huh_project_colobj'));
     $this->assertTrue($d->hasTable('huh_recordset'));
     $this->assertTrue($d->hasTable('huh_recordsetitem'));
     $this->assertTrue($d->hasTable('huh_referencework'));
     $this->assertTrue($d->hasTable('huh_referenceworkidentifier'));
     $this->assertTrue($d->hasTable('huh_referenceworkvariant'));
     $this->assertTrue($d->hasTable('huh_repositoryagreement'));
     $this->assertTrue($d->hasTable('huh_repositoryagreementattachment'));
     $this->assertTrue($d->hasTable('huh_shipment'));
     $this->assertTrue($d->hasTable('huh_sp_schema_mapping'));
     $this->assertTrue($d->hasTable('huh_spappresource'));
     $this->assertTrue($d->hasTable('huh_spappresourcedata'));
     $this->assertTrue($d->hasTable('huh_spappresourcedir'));
     $this->assertTrue($d->hasTable('huh_spauditlog'));
     $this->assertTrue($d->hasTable('huh_spauditlogfield'));
     $this->assertTrue($d->hasTable('huh_specifyuser'));
     $this->assertTrue($d->hasTable('huh_specifyuser_spprincipal'));
     $this->assertTrue($d->hasTable('huh_spexportschema'));
     $this->assertTrue($d->hasTable('huh_spexportschemaitem'));
     $this->assertTrue($d->hasTable('huh_spexportschemaitemmapping'));
     $this->assertTrue($d->hasTable('huh_spexportschemamapping'));
     $this->assertTrue($d->hasTable('huh_spfieldvaluedefault'));
     $this->assertTrue($d->hasTable('huh_splocalecontainer'));
     $this->assertTrue($d->hasTable('huh_splocalecontaineritem'));
     $this->assertTrue($d->hasTable('huh_splocaleitemstr'));
     $this->assertTrue($d->hasTable('huh_sppermission'));
     $this->assertTrue($d->hasTable('huh_spprincipal'));
     $this->assertTrue($d->hasTable('huh_spprincipal_sppermission'));
     $this->assertTrue($d->hasTable('huh_spquery'));
     $this->assertTrue($d->hasTable('huh_spqueryfield'));
     $this->assertTrue($d->hasTable('huh_spreport'));
     $this->assertTrue($d->hasTable('huh_sptasksemaphore'));
     $this->assertTrue($d->hasTable('huh_spversion'));
     $this->assertTrue($d->hasTable('huh_spviewsetobj'));
     $this->assertTrue($d->hasTable('huh_spvisualquery'));
     $this->assertTrue($d->hasTable('huh_storage'));
     $this->assertTrue($d->hasTable('huh_storagetreedef'));
     $this->assertTrue($d->hasTable('huh_storagetreedefitem'));
     $this->assertTrue($d->hasTable('huh_taxon'));
     $this->assertTrue($d->hasTable('huh_taxonattachment'));
     $this->assertTrue($d->hasTable('huh_taxoncitation'));
     $this->assertTrue($d->hasTable('huh_taxontreedef'));
     $this->assertTrue($d->hasTable('huh_taxontreedefitem'));
     $this->assertTrue($d->hasTable('huh_treatmentevent'));
     $this->assertTrue($d->hasTable('huh_workbench'));
     $this->assertTrue($d->hasTable('huh_workbenchdataitem'));
     $this->assertTrue($d->hasTable('huh_workbenchrow'));
     $this->assertTrue($d->hasTable('huh_workbenchrowimage'));
     $this->assertTrue($d->hasTable('huh_workbenchtemplate'));
     $this->assertTrue($d->hasTable('huh_workbenchtemplatemappingitem'));

     $this->assertFalse($d->hasTable("SELECT"),"SELECT is not expected to be a valid table name." );
  }
  function testGetClass() { 
     $d = new database_schema();
     $t = new huh_HUH_ORCHIDS_ETHANOL;
     $this->assertNotNull($d->getClass('huh_HUH_ORCHIDS_ETHANOL'));
     $this->assertTrue($d->getClass('huh_HUH_ORCHIDS_ETHANOL')==$t);
     $t = new huh_IMAGE_BATCH;
     $this->assertNotNull($d->getClass('huh_IMAGE_BATCH'));
     $this->assertTrue($d->getClass('huh_IMAGE_BATCH')==$t);
     $t = new huh_IMAGE_LAB;
     $this->assertNotNull($d->getClass('huh_IMAGE_LAB'));
     $this->assertTrue($d->getClass('huh_IMAGE_LAB')==$t);
     $t = new huh_IMAGE_OBJECT;
     $this->assertNotNull($d->getClass('huh_IMAGE_OBJECT'));
     $this->assertTrue($d->getClass('huh_IMAGE_OBJECT')==$t);
     $t = new huh_IMAGE_OBJECT_TYPE;
     $this->assertNotNull($d->getClass('huh_IMAGE_OBJECT_TYPE'));
     $this->assertTrue($d->getClass('huh_IMAGE_OBJECT_TYPE')==$t);
     $t = new huh_IMAGE_SET;
     $this->assertNotNull($d->getClass('huh_IMAGE_SET'));
     $this->assertTrue($d->getClass('huh_IMAGE_SET')==$t);
     $t = new huh_IMAGE_SET_collectionobject;
     $this->assertNotNull($d->getClass('huh_IMAGE_SET_collectionobject'));
     $this->assertTrue($d->getClass('huh_IMAGE_SET_collectionobject')==$t);
     $t = new huh_REPOSITORY;
     $this->assertNotNull($d->getClass('huh_REPOSITORY'));
     $this->assertTrue($d->getClass('huh_REPOSITORY')==$t);
     $t = new huh_ST_LOOKUP;
     $this->assertNotNull($d->getClass('huh_ST_LOOKUP'));
     $this->assertTrue($d->getClass('huh_ST_LOOKUP')==$t);
     $t = new huh_accession;
     $this->assertNotNull($d->getClass('huh_accession'));
     $this->assertTrue($d->getClass('huh_accession')==$t);
     $t = new huh_accessionagent;
     $this->assertNotNull($d->getClass('huh_accessionagent'));
     $this->assertTrue($d->getClass('huh_accessionagent')==$t);
     $t = new huh_accessionattachment;
     $this->assertNotNull($d->getClass('huh_accessionattachment'));
     $this->assertTrue($d->getClass('huh_accessionattachment')==$t);
     $t = new huh_accessionauthorization;
     $this->assertNotNull($d->getClass('huh_accessionauthorization'));
     $this->assertTrue($d->getClass('huh_accessionauthorization')==$t);
     $t = new huh_accessionpreparation;
     $this->assertNotNull($d->getClass('huh_accessionpreparation'));
     $this->assertTrue($d->getClass('huh_accessionpreparation')==$t);
     $t = new huh_address;
     $this->assertNotNull($d->getClass('huh_address'));
     $this->assertTrue($d->getClass('huh_address')==$t);
     $t = new huh_addressofrecord;
     $this->assertNotNull($d->getClass('huh_addressofrecord'));
     $this->assertTrue($d->getClass('huh_addressofrecord')==$t);
     $t = new huh_agent;
     $this->assertNotNull($d->getClass('huh_agent'));
     $this->assertTrue($d->getClass('huh_agent')==$t);
     $t = new huh_agent_discipline;
     $this->assertNotNull($d->getClass('huh_agent_discipline'));
     $this->assertTrue($d->getClass('huh_agent_discipline')==$t);
     $t = new huh_agentattachment;
     $this->assertNotNull($d->getClass('huh_agentattachment'));
     $this->assertTrue($d->getClass('huh_agentattachment')==$t);
     $t = new huh_agentcitation;
     $this->assertNotNull($d->getClass('huh_agentcitation'));
     $this->assertTrue($d->getClass('huh_agentcitation')==$t);
     $t = new huh_agentgeography;
     $this->assertNotNull($d->getClass('huh_agentgeography'));
     $this->assertTrue($d->getClass('huh_agentgeography')==$t);
     $t = new huh_agentspecialty;
     $this->assertNotNull($d->getClass('huh_agentspecialty'));
     $this->assertTrue($d->getClass('huh_agentspecialty')==$t);
     $t = new huh_agentvariant;
     $this->assertNotNull($d->getClass('huh_agentvariant'));
     $this->assertTrue($d->getClass('huh_agentvariant')==$t);
     $t = new huh_appraisal;
     $this->assertNotNull($d->getClass('huh_appraisal'));
     $this->assertTrue($d->getClass('huh_appraisal')==$t);
     $t = new huh_attachment;
     $this->assertNotNull($d->getClass('huh_attachment'));
     $this->assertTrue($d->getClass('huh_attachment')==$t);
     $t = new huh_attachmentmetadata;
     $this->assertNotNull($d->getClass('huh_attachmentmetadata'));
     $this->assertTrue($d->getClass('huh_attachmentmetadata')==$t);
     $t = new huh_attachmenttag;
     $this->assertNotNull($d->getClass('huh_attachmenttag'));
     $this->assertTrue($d->getClass('huh_attachmenttag')==$t);
     $t = new huh_attributedef;
     $this->assertNotNull($d->getClass('huh_attributedef'));
     $this->assertTrue($d->getClass('huh_attributedef')==$t);
     $t = new huh_author;
     $this->assertNotNull($d->getClass('huh_author'));
     $this->assertTrue($d->getClass('huh_author')==$t);
     $t = new huh_autonumberingscheme;
     $this->assertNotNull($d->getClass('huh_autonumberingscheme'));
     $this->assertTrue($d->getClass('huh_autonumberingscheme')==$t);
     $t = new huh_autonumsch_coll;
     $this->assertNotNull($d->getClass('huh_autonumsch_coll'));
     $this->assertTrue($d->getClass('huh_autonumsch_coll')==$t);
     $t = new huh_autonumsch_div;
     $this->assertNotNull($d->getClass('huh_autonumsch_div'));
     $this->assertTrue($d->getClass('huh_autonumsch_div')==$t);
     $t = new huh_autonumsch_dsp;
     $this->assertNotNull($d->getClass('huh_autonumsch_dsp'));
     $this->assertTrue($d->getClass('huh_autonumsch_dsp')==$t);
     $t = new huh_borrow;
     $this->assertNotNull($d->getClass('huh_borrow'));
     $this->assertTrue($d->getClass('huh_borrow')==$t);
     $t = new huh_borrowagent;
     $this->assertNotNull($d->getClass('huh_borrowagent'));
     $this->assertTrue($d->getClass('huh_borrowagent')==$t);
     $t = new huh_borrowmaterial;
     $this->assertNotNull($d->getClass('huh_borrowmaterial'));
     $this->assertTrue($d->getClass('huh_borrowmaterial')==$t);
     $t = new huh_borrowreturnmaterial;
     $this->assertNotNull($d->getClass('huh_borrowreturnmaterial'));
     $this->assertTrue($d->getClass('huh_borrowreturnmaterial')==$t);
     $t = new huh_collectingevent;
     $this->assertNotNull($d->getClass('huh_collectingevent'));
     $this->assertTrue($d->getClass('huh_collectingevent')==$t);
     $t = new huh_collectingeventattachment;
     $this->assertNotNull($d->getClass('huh_collectingeventattachment'));
     $this->assertTrue($d->getClass('huh_collectingeventattachment')==$t);
     $t = new huh_collectingeventattr;
     $this->assertNotNull($d->getClass('huh_collectingeventattr'));
     $this->assertTrue($d->getClass('huh_collectingeventattr')==$t);
     $t = new huh_collectingeventattribute;
     $this->assertNotNull($d->getClass('huh_collectingeventattribute'));
     $this->assertTrue($d->getClass('huh_collectingeventattribute')==$t);
     $t = new huh_collectingtrip;
     $this->assertNotNull($d->getClass('huh_collectingtrip'));
     $this->assertTrue($d->getClass('huh_collectingtrip')==$t);
     $t = new huh_collection;
     $this->assertNotNull($d->getClass('huh_collection'));
     $this->assertTrue($d->getClass('huh_collection')==$t);
     $t = new huh_collectionobject;
     $this->assertNotNull($d->getClass('huh_collectionobject'));
     $this->assertTrue($d->getClass('huh_collectionobject')==$t);
     $t = new huh_collectionobjectattachment;
     $this->assertNotNull($d->getClass('huh_collectionobjectattachment'));
     $this->assertTrue($d->getClass('huh_collectionobjectattachment')==$t);
     $t = new huh_collectionobjectattr;
     $this->assertNotNull($d->getClass('huh_collectionobjectattr'));
     $this->assertTrue($d->getClass('huh_collectionobjectattr')==$t);
     $t = new huh_collectionobjectattribute;
     $this->assertNotNull($d->getClass('huh_collectionobjectattribute'));
     $this->assertTrue($d->getClass('huh_collectionobjectattribute')==$t);
     $t = new huh_collectionrelationship;
     $this->assertNotNull($d->getClass('huh_collectionrelationship'));
     $this->assertTrue($d->getClass('huh_collectionrelationship')==$t);
     $t = new huh_collectionreltype;
     $this->assertNotNull($d->getClass('huh_collectionreltype'));
     $this->assertTrue($d->getClass('huh_collectionreltype')==$t);
     $t = new huh_collector;
     $this->assertNotNull($d->getClass('huh_collector'));
     $this->assertTrue($d->getClass('huh_collector')==$t);
     $t = new huh_commonnametx;
     $this->assertNotNull($d->getClass('huh_commonnametx'));
     $this->assertTrue($d->getClass('huh_commonnametx')==$t);
     $t = new huh_commonnametxcitation;
     $this->assertNotNull($d->getClass('huh_commonnametxcitation'));
     $this->assertTrue($d->getClass('huh_commonnametxcitation')==$t);
     $t = new huh_conservdescription;
     $this->assertNotNull($d->getClass('huh_conservdescription'));
     $this->assertTrue($d->getClass('huh_conservdescription')==$t);
     $t = new huh_conservdescriptionattachment;
     $this->assertNotNull($d->getClass('huh_conservdescriptionattachment'));
     $this->assertTrue($d->getClass('huh_conservdescriptionattachment')==$t);
     $t = new huh_conservevent;
     $this->assertNotNull($d->getClass('huh_conservevent'));
     $this->assertTrue($d->getClass('huh_conservevent')==$t);
     $t = new huh_conserveventattachment;
     $this->assertNotNull($d->getClass('huh_conserveventattachment'));
     $this->assertTrue($d->getClass('huh_conserveventattachment')==$t);
     $t = new huh_container;
     $this->assertNotNull($d->getClass('huh_container'));
     $this->assertTrue($d->getClass('huh_container')==$t);
     $t = new huh_datatype;
     $this->assertNotNull($d->getClass('huh_datatype'));
     $this->assertTrue($d->getClass('huh_datatype')==$t);
     $t = new huh_deaccession;
     $this->assertNotNull($d->getClass('huh_deaccession'));
     $this->assertTrue($d->getClass('huh_deaccession')==$t);
     $t = new huh_deaccessionagent;
     $this->assertNotNull($d->getClass('huh_deaccessionagent'));
     $this->assertTrue($d->getClass('huh_deaccessionagent')==$t);
     $t = new huh_deaccessionpreparation;
     $this->assertNotNull($d->getClass('huh_deaccessionpreparation'));
     $this->assertTrue($d->getClass('huh_deaccessionpreparation')==$t);
     $t = new huh_determination;
     $this->assertNotNull($d->getClass('huh_determination'));
     $this->assertTrue($d->getClass('huh_determination')==$t);
     $t = new huh_determinationcitation;
     $this->assertNotNull($d->getClass('huh_determinationcitation'));
     $this->assertTrue($d->getClass('huh_determinationcitation')==$t);
     $t = new huh_discipline;
     $this->assertNotNull($d->getClass('huh_discipline'));
     $this->assertTrue($d->getClass('huh_discipline')==$t);
     $t = new huh_division;
     $this->assertNotNull($d->getClass('huh_division'));
     $this->assertTrue($d->getClass('huh_division')==$t);
     $t = new huh_dnasequence;
     $this->assertNotNull($d->getClass('huh_dnasequence'));
     $this->assertTrue($d->getClass('huh_dnasequence')==$t);
     $t = new huh_dnasequenceattachment;
     $this->assertNotNull($d->getClass('huh_dnasequenceattachment'));
     $this->assertTrue($d->getClass('huh_dnasequenceattachment')==$t);
     $t = new huh_dnasequencingrun;
     $this->assertNotNull($d->getClass('huh_dnasequencingrun'));
     $this->assertTrue($d->getClass('huh_dnasequencingrun')==$t);
     $t = new huh_dnasequencingruncitation;
     $this->assertNotNull($d->getClass('huh_dnasequencingruncitation'));
     $this->assertTrue($d->getClass('huh_dnasequencingruncitation')==$t);
     $t = new huh_exchangein;
     $this->assertNotNull($d->getClass('huh_exchangein'));
     $this->assertTrue($d->getClass('huh_exchangein')==$t);
     $t = new huh_exchangeout;
     $this->assertNotNull($d->getClass('huh_exchangeout'));
     $this->assertTrue($d->getClass('huh_exchangeout')==$t);
     $t = new huh_exchangeoutpreparation;
     $this->assertNotNull($d->getClass('huh_exchangeoutpreparation'));
     $this->assertTrue($d->getClass('huh_exchangeoutpreparation')==$t);
     $t = new huh_fieldnotebook;
     $this->assertNotNull($d->getClass('huh_fieldnotebook'));
     $this->assertTrue($d->getClass('huh_fieldnotebook')==$t);
     $t = new huh_fieldnotebookattachment;
     $this->assertNotNull($d->getClass('huh_fieldnotebookattachment'));
     $this->assertTrue($d->getClass('huh_fieldnotebookattachment')==$t);
     $t = new huh_fieldnotebookpage;
     $this->assertNotNull($d->getClass('huh_fieldnotebookpage'));
     $this->assertTrue($d->getClass('huh_fieldnotebookpage')==$t);
     $t = new huh_fieldnotebookpageattachment;
     $this->assertNotNull($d->getClass('huh_fieldnotebookpageattachment'));
     $this->assertTrue($d->getClass('huh_fieldnotebookpageattachment')==$t);
     $t = new huh_fieldnotebookpageset;
     $this->assertNotNull($d->getClass('huh_fieldnotebookpageset'));
     $this->assertTrue($d->getClass('huh_fieldnotebookpageset')==$t);
     $t = new huh_fieldnotebookpagesetattachment;
     $this->assertNotNull($d->getClass('huh_fieldnotebookpagesetattachment'));
     $this->assertTrue($d->getClass('huh_fieldnotebookpagesetattachment')==$t);
     $t = new huh_fragment;
     $this->assertNotNull($d->getClass('huh_fragment'));
     $this->assertTrue($d->getClass('huh_fragment')==$t);
     $t = new huh_fragmentattachment;
     $this->assertNotNull($d->getClass('huh_fragmentattachment'));
     $this->assertTrue($d->getClass('huh_fragmentattachment')==$t);
     $t = new huh_fragmentcitation;
     $this->assertNotNull($d->getClass('huh_fragmentcitation'));
     $this->assertTrue($d->getClass('huh_fragmentcitation')==$t);
     $t = new huh_geocoorddetail;
     $this->assertNotNull($d->getClass('huh_geocoorddetail'));
     $this->assertTrue($d->getClass('huh_geocoorddetail')==$t);
     $t = new huh_geography;
     $this->assertNotNull($d->getClass('huh_geography'));
     $this->assertTrue($d->getClass('huh_geography')==$t);
     $t = new huh_geographytreedef;
     $this->assertNotNull($d->getClass('huh_geographytreedef'));
     $this->assertTrue($d->getClass('huh_geographytreedef')==$t);
     $t = new huh_geographytreedefitem;
     $this->assertNotNull($d->getClass('huh_geographytreedefitem'));
     $this->assertTrue($d->getClass('huh_geographytreedefitem')==$t);
     $t = new huh_geologictimeperiod;
     $this->assertNotNull($d->getClass('huh_geologictimeperiod'));
     $this->assertTrue($d->getClass('huh_geologictimeperiod')==$t);
     $t = new huh_geologictimeperiodtreedef;
     $this->assertNotNull($d->getClass('huh_geologictimeperiodtreedef'));
     $this->assertTrue($d->getClass('huh_geologictimeperiodtreedef')==$t);
     $t = new huh_geologictimeperiodtreedefitem;
     $this->assertNotNull($d->getClass('huh_geologictimeperiodtreedefitem'));
     $this->assertTrue($d->getClass('huh_geologictimeperiodtreedefitem')==$t);
     $t = new huh_gift;
     $this->assertNotNull($d->getClass('huh_gift'));
     $this->assertTrue($d->getClass('huh_gift')==$t);
     $t = new huh_giftagent;
     $this->assertNotNull($d->getClass('huh_giftagent'));
     $this->assertTrue($d->getClass('huh_giftagent')==$t);
     $t = new huh_giftpreparation;
     $this->assertNotNull($d->getClass('huh_giftpreparation'));
     $this->assertTrue($d->getClass('huh_giftpreparation')==$t);
     $t = new huh_groupperson;
     $this->assertNotNull($d->getClass('huh_groupperson'));
     $this->assertTrue($d->getClass('huh_groupperson')==$t);
     $t = new huh_hibernate_unique_key;
     $this->assertNotNull($d->getClass('huh_hibernate_unique_key'));
     $this->assertTrue($d->getClass('huh_hibernate_unique_key')==$t);
     $t = new huh_inforequest;
     $this->assertNotNull($d->getClass('huh_inforequest'));
     $this->assertTrue($d->getClass('huh_inforequest')==$t);
     $t = new huh_institution;
     $this->assertNotNull($d->getClass('huh_institution'));
     $this->assertTrue($d->getClass('huh_institution')==$t);
     $t = new huh_journal;
     $this->assertNotNull($d->getClass('huh_journal'));
     $this->assertTrue($d->getClass('huh_journal')==$t);
     $t = new huh_latlonpolygon;
     $this->assertNotNull($d->getClass('huh_latlonpolygon'));
     $this->assertTrue($d->getClass('huh_latlonpolygon')==$t);
     $t = new huh_latlonpolygonpnt;
     $this->assertNotNull($d->getClass('huh_latlonpolygonpnt'));
     $this->assertTrue($d->getClass('huh_latlonpolygonpnt')==$t);
     $t = new huh_lithostrat;
     $this->assertNotNull($d->getClass('huh_lithostrat'));
     $this->assertTrue($d->getClass('huh_lithostrat')==$t);
     $t = new huh_lithostrattreedef;
     $this->assertNotNull($d->getClass('huh_lithostrattreedef'));
     $this->assertTrue($d->getClass('huh_lithostrattreedef')==$t);
     $t = new huh_lithostrattreedefitem;
     $this->assertNotNull($d->getClass('huh_lithostrattreedefitem'));
     $this->assertTrue($d->getClass('huh_lithostrattreedefitem')==$t);
     $t = new huh_loan;
     $this->assertNotNull($d->getClass('huh_loan'));
     $this->assertTrue($d->getClass('huh_loan')==$t);
     $t = new huh_loanagent;
     $this->assertNotNull($d->getClass('huh_loanagent'));
     $this->assertTrue($d->getClass('huh_loanagent')==$t);
     $t = new huh_loanattachment;
     $this->assertNotNull($d->getClass('huh_loanattachment'));
     $this->assertTrue($d->getClass('huh_loanattachment')==$t);
     $t = new huh_loanpreparation;
     $this->assertNotNull($d->getClass('huh_loanpreparation'));
     $this->assertTrue($d->getClass('huh_loanpreparation')==$t);
     $t = new huh_loanreturnpreparation;
     $this->assertNotNull($d->getClass('huh_loanreturnpreparation'));
     $this->assertTrue($d->getClass('huh_loanreturnpreparation')==$t);
     $t = new huh_locality;
     $this->assertNotNull($d->getClass('huh_locality'));
     $this->assertTrue($d->getClass('huh_locality')==$t);
     $t = new huh_localityattachment;
     $this->assertNotNull($d->getClass('huh_localityattachment'));
     $this->assertTrue($d->getClass('huh_localityattachment')==$t);
     $t = new huh_localitycitation;
     $this->assertNotNull($d->getClass('huh_localitycitation'));
     $this->assertTrue($d->getClass('huh_localitycitation')==$t);
     $t = new huh_localitydetail;
     $this->assertNotNull($d->getClass('huh_localitydetail'));
     $this->assertTrue($d->getClass('huh_localitydetail')==$t);
     $t = new huh_localitynamealias;
     $this->assertNotNull($d->getClass('huh_localitynamealias'));
     $this->assertTrue($d->getClass('huh_localitynamealias')==$t);
     $t = new huh_otheridentifier;
     $this->assertNotNull($d->getClass('huh_otheridentifier'));
     $this->assertTrue($d->getClass('huh_otheridentifier')==$t);
     $t = new huh_paleocontext;
     $this->assertNotNull($d->getClass('huh_paleocontext'));
     $this->assertTrue($d->getClass('huh_paleocontext')==$t);
     $t = new huh_permit;
     $this->assertNotNull($d->getClass('huh_permit'));
     $this->assertTrue($d->getClass('huh_permit')==$t);
     $t = new huh_permitattachment;
     $this->assertNotNull($d->getClass('huh_permitattachment'));
     $this->assertTrue($d->getClass('huh_permitattachment')==$t);
     $t = new huh_picklist;
     $this->assertNotNull($d->getClass('huh_picklist'));
     $this->assertTrue($d->getClass('huh_picklist')==$t);
     $t = new huh_picklistitem;
     $this->assertNotNull($d->getClass('huh_picklistitem'));
     $this->assertTrue($d->getClass('huh_picklistitem')==$t);
     $t = new huh_preparation;
     $this->assertNotNull($d->getClass('huh_preparation'));
     $this->assertTrue($d->getClass('huh_preparation')==$t);
     $t = new huh_preparationattachment;
     $this->assertNotNull($d->getClass('huh_preparationattachment'));
     $this->assertTrue($d->getClass('huh_preparationattachment')==$t);
     $t = new huh_preparationattr;
     $this->assertNotNull($d->getClass('huh_preparationattr'));
     $this->assertTrue($d->getClass('huh_preparationattr')==$t);
     $t = new huh_preparationattribute;
     $this->assertNotNull($d->getClass('huh_preparationattribute'));
     $this->assertTrue($d->getClass('huh_preparationattribute')==$t);
     $t = new huh_preptype;
     $this->assertNotNull($d->getClass('huh_preptype'));
     $this->assertTrue($d->getClass('huh_preptype')==$t);
     $t = new huh_project;
     $this->assertNotNull($d->getClass('huh_project'));
     $this->assertTrue($d->getClass('huh_project')==$t);
     $t = new huh_project_colobj;
     $this->assertNotNull($d->getClass('huh_project_colobj'));
     $this->assertTrue($d->getClass('huh_project_colobj')==$t);
     $t = new huh_recordset;
     $this->assertNotNull($d->getClass('huh_recordset'));
     $this->assertTrue($d->getClass('huh_recordset')==$t);
     $t = new huh_recordsetitem;
     $this->assertNotNull($d->getClass('huh_recordsetitem'));
     $this->assertTrue($d->getClass('huh_recordsetitem')==$t);
     $t = new huh_referencework;
     $this->assertNotNull($d->getClass('huh_referencework'));
     $this->assertTrue($d->getClass('huh_referencework')==$t);
     $t = new huh_referenceworkidentifier;
     $this->assertNotNull($d->getClass('huh_referenceworkidentifier'));
     $this->assertTrue($d->getClass('huh_referenceworkidentifier')==$t);
     $t = new huh_referenceworkvariant;
     $this->assertNotNull($d->getClass('huh_referenceworkvariant'));
     $this->assertTrue($d->getClass('huh_referenceworkvariant')==$t);
     $t = new huh_repositoryagreement;
     $this->assertNotNull($d->getClass('huh_repositoryagreement'));
     $this->assertTrue($d->getClass('huh_repositoryagreement')==$t);
     $t = new huh_repositoryagreementattachment;
     $this->assertNotNull($d->getClass('huh_repositoryagreementattachment'));
     $this->assertTrue($d->getClass('huh_repositoryagreementattachment')==$t);
     $t = new huh_shipment;
     $this->assertNotNull($d->getClass('huh_shipment'));
     $this->assertTrue($d->getClass('huh_shipment')==$t);
     $t = new huh_sp_schema_mapping;
     $this->assertNotNull($d->getClass('huh_sp_schema_mapping'));
     $this->assertTrue($d->getClass('huh_sp_schema_mapping')==$t);
     $t = new huh_spappresource;
     $this->assertNotNull($d->getClass('huh_spappresource'));
     $this->assertTrue($d->getClass('huh_spappresource')==$t);
     $t = new huh_spappresourcedata;
     $this->assertNotNull($d->getClass('huh_spappresourcedata'));
     $this->assertTrue($d->getClass('huh_spappresourcedata')==$t);
     $t = new huh_spappresourcedir;
     $this->assertNotNull($d->getClass('huh_spappresourcedir'));
     $this->assertTrue($d->getClass('huh_spappresourcedir')==$t);
     $t = new huh_spauditlog;
     $this->assertNotNull($d->getClass('huh_spauditlog'));
     $this->assertTrue($d->getClass('huh_spauditlog')==$t);
     $t = new huh_spauditlogfield;
     $this->assertNotNull($d->getClass('huh_spauditlogfield'));
     $this->assertTrue($d->getClass('huh_spauditlogfield')==$t);
     $t = new huh_specifyuser;
     $this->assertNotNull($d->getClass('huh_specifyuser'));
     $this->assertTrue($d->getClass('huh_specifyuser')==$t);
     $t = new huh_specifyuser_spprincipal;
     $this->assertNotNull($d->getClass('huh_specifyuser_spprincipal'));
     $this->assertTrue($d->getClass('huh_specifyuser_spprincipal')==$t);
     $t = new huh_spexportschema;
     $this->assertNotNull($d->getClass('huh_spexportschema'));
     $this->assertTrue($d->getClass('huh_spexportschema')==$t);
     $t = new huh_spexportschemaitem;
     $this->assertNotNull($d->getClass('huh_spexportschemaitem'));
     $this->assertTrue($d->getClass('huh_spexportschemaitem')==$t);
     $t = new huh_spexportschemaitemmapping;
     $this->assertNotNull($d->getClass('huh_spexportschemaitemmapping'));
     $this->assertTrue($d->getClass('huh_spexportschemaitemmapping')==$t);
     $t = new huh_spexportschemamapping;
     $this->assertNotNull($d->getClass('huh_spexportschemamapping'));
     $this->assertTrue($d->getClass('huh_spexportschemamapping')==$t);
     $t = new huh_spfieldvaluedefault;
     $this->assertNotNull($d->getClass('huh_spfieldvaluedefault'));
     $this->assertTrue($d->getClass('huh_spfieldvaluedefault')==$t);
     $t = new huh_splocalecontainer;
     $this->assertNotNull($d->getClass('huh_splocalecontainer'));
     $this->assertTrue($d->getClass('huh_splocalecontainer')==$t);
     $t = new huh_splocalecontaineritem;
     $this->assertNotNull($d->getClass('huh_splocalecontaineritem'));
     $this->assertTrue($d->getClass('huh_splocalecontaineritem')==$t);
     $t = new huh_splocaleitemstr;
     $this->assertNotNull($d->getClass('huh_splocaleitemstr'));
     $this->assertTrue($d->getClass('huh_splocaleitemstr')==$t);
     $t = new huh_sppermission;
     $this->assertNotNull($d->getClass('huh_sppermission'));
     $this->assertTrue($d->getClass('huh_sppermission')==$t);
     $t = new huh_spprincipal;
     $this->assertNotNull($d->getClass('huh_spprincipal'));
     $this->assertTrue($d->getClass('huh_spprincipal')==$t);
     $t = new huh_spprincipal_sppermission;
     $this->assertNotNull($d->getClass('huh_spprincipal_sppermission'));
     $this->assertTrue($d->getClass('huh_spprincipal_sppermission')==$t);
     $t = new huh_spquery;
     $this->assertNotNull($d->getClass('huh_spquery'));
     $this->assertTrue($d->getClass('huh_spquery')==$t);
     $t = new huh_spqueryfield;
     $this->assertNotNull($d->getClass('huh_spqueryfield'));
     $this->assertTrue($d->getClass('huh_spqueryfield')==$t);
     $t = new huh_spreport;
     $this->assertNotNull($d->getClass('huh_spreport'));
     $this->assertTrue($d->getClass('huh_spreport')==$t);
     $t = new huh_sptasksemaphore;
     $this->assertNotNull($d->getClass('huh_sptasksemaphore'));
     $this->assertTrue($d->getClass('huh_sptasksemaphore')==$t);
     $t = new huh_spversion;
     $this->assertNotNull($d->getClass('huh_spversion'));
     $this->assertTrue($d->getClass('huh_spversion')==$t);
     $t = new huh_spviewsetobj;
     $this->assertNotNull($d->getClass('huh_spviewsetobj'));
     $this->assertTrue($d->getClass('huh_spviewsetobj')==$t);
     $t = new huh_spvisualquery;
     $this->assertNotNull($d->getClass('huh_spvisualquery'));
     $this->assertTrue($d->getClass('huh_spvisualquery')==$t);
     $t = new huh_storage;
     $this->assertNotNull($d->getClass('huh_storage'));
     $this->assertTrue($d->getClass('huh_storage')==$t);
     $t = new huh_storagetreedef;
     $this->assertNotNull($d->getClass('huh_storagetreedef'));
     $this->assertTrue($d->getClass('huh_storagetreedef')==$t);
     $t = new huh_storagetreedefitem;
     $this->assertNotNull($d->getClass('huh_storagetreedefitem'));
     $this->assertTrue($d->getClass('huh_storagetreedefitem')==$t);
     $t = new huh_taxon;
     $this->assertNotNull($d->getClass('huh_taxon'));
     $this->assertTrue($d->getClass('huh_taxon')==$t);
     $t = new huh_taxonattachment;
     $this->assertNotNull($d->getClass('huh_taxonattachment'));
     $this->assertTrue($d->getClass('huh_taxonattachment')==$t);
     $t = new huh_taxoncitation;
     $this->assertNotNull($d->getClass('huh_taxoncitation'));
     $this->assertTrue($d->getClass('huh_taxoncitation')==$t);
     $t = new huh_taxontreedef;
     $this->assertNotNull($d->getClass('huh_taxontreedef'));
     $this->assertTrue($d->getClass('huh_taxontreedef')==$t);
     $t = new huh_taxontreedefitem;
     $this->assertNotNull($d->getClass('huh_taxontreedefitem'));
     $this->assertTrue($d->getClass('huh_taxontreedefitem')==$t);
     $t = new huh_treatmentevent;
     $this->assertNotNull($d->getClass('huh_treatmentevent'));
     $this->assertTrue($d->getClass('huh_treatmentevent')==$t);
     $t = new huh_workbench;
     $this->assertNotNull($d->getClass('huh_workbench'));
     $this->assertTrue($d->getClass('huh_workbench')==$t);
     $t = new huh_workbenchdataitem;
     $this->assertNotNull($d->getClass('huh_workbenchdataitem'));
     $this->assertTrue($d->getClass('huh_workbenchdataitem')==$t);
     $t = new huh_workbenchrow;
     $this->assertNotNull($d->getClass('huh_workbenchrow'));
     $this->assertTrue($d->getClass('huh_workbenchrow')==$t);
     $t = new huh_workbenchrowimage;
     $this->assertNotNull($d->getClass('huh_workbenchrowimage'));
     $this->assertTrue($d->getClass('huh_workbenchrowimage')==$t);
     $t = new huh_workbenchtemplate;
     $this->assertNotNull($d->getClass('huh_workbenchtemplate'));
     $this->assertTrue($d->getClass('huh_workbenchtemplate')==$t);
     $t = new huh_workbenchtemplatemappingitem;
     $this->assertNotNull($d->getClass('huh_workbenchtemplatemappingitem'));
     $this->assertTrue($d->getClass('huh_workbenchtemplatemappingitem')==$t);

     $this->assertFalse($d->hasTable("SELECT"),"SELECT is not expected to be a valid table name." );
  }
}


?>

