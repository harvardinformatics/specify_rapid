<?php
//==============================================================================
//===   picklist.php                         
//===   Autogenerated by Druid from MySQL db Build:6
//==============================================================================

include_once("druid_interfaces.php");

class huh_picklist implements  model , loadableModel, saveableModel, tableSchema 
{
   // These constants hold the sizes the fields in this table in the database.
   const PICKLISTID_SIZE      = 11; //INTEGER
   const TIMESTAMPCREATED_SIZE = 21; //TIMESTAMP
   const TIMESTAMPMODIFIED_SIZE = 21; //TIMESTAMP
   const VERSION_SIZE         = 11; //INTEGER
   const FIELDNAME_SIZE       = 64; //64
   const FILTERFIELDNAME_SIZE = 32; //32
   const FILTERVALUE_SIZE     = 32; //32
   const FORMATTER_SIZE       = 64; //64
   const ISSYSTEM_SIZE        = 1; //1
   const NAME_SIZE            = 64; //64
   const READONLY_SIZE        = 1; //1
   const SIZELIMIT_SIZE       = 11; //INTEGER
   const SORTTYPE_SIZE        = 4; //TINYINT
   const TABLENAME_SIZE       = 64; //64
   const TYPE_SIZE            = 4; //TINYINT
   const MODIFIEDBYAGENTID_SIZE = 11; //INTEGER
   const COLLECTIONID_SIZE    = 11; //INTEGER
   const CREATEDBYAGENTID_SIZE = 11; //INTEGER
    // These constants hold the field names of the table in the database. 
   const PICKLISTID        = 'PickListID';
   const TIMESTAMPCREATED  = 'TimestampCreated';
   const TIMESTAMPMODIFIED = 'TimestampModified';
   const VERSION           = 'Version';
   const FIELDNAME         = 'FieldName';
   const FILTERFIELDNAME   = 'FilterFieldName';
   const FILTERVALUE       = 'FilterValue';
   const FORMATTER         = 'Formatter';
   const ISSYSTEM          = 'IsSystem';
   const NAME              = 'Name';
   const READONLY          = 'ReadOnly';
   const SIZELIMIT         = 'SizeLimit';
   const SORTTYPE          = 'SortType';
   const TABLENAME         = 'TableName';
   const TYPE              = 'Type';
   const MODIFIEDBYAGENTID = 'ModifiedByAgentID';
   const COLLECTIONID      = 'CollectionID';
   const CREATEDBYAGENTID  = 'CreatedByAgentID';

   //---------------------------------------------------------------------------

   // interface tableSchema implementation
   // schemaPK returns array of primary key field names
   public function schemaPK() {
       return $this->primaryKeyArray;
   } 
   // schemaHaveDistinct returns array of field names for which selectDistinct{fieldname} methods are available.
   public function schemaHaveDistinct() {
       return $this->selectDistinctFieldsArray;
   } 
   // schemaFields returns array of all field names
   public function schemaFields() { 
       return $this->allFieldsArray;
   } 
/*  Example sanitized retrieval of variable matching object variables from $_GET 
/*  Customize these to limit each variable to narrowest possible set of known good values. 

  $PickListID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['PickListID']), 0, 11);
  $TimestampCreated = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampCreated']), 0, 21);
  $TimestampModified = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TimestampModified']), 0, 21);
  $Version = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['Version']), 0, 11);
  $FieldName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FieldName']), 0, 64);
  $FilterFieldName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FilterFieldName']), 0, 32);
  $FilterValue = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['FilterValue']), 0, 32);
  $Formatter = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Formatter']), 0, 64);
  $IsSystem = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['IsSystem']), 0, 1);
  $Name = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Name']), 0, 64);
  $ReadOnly = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['ReadOnly']), 0, 1);
  $SizeLimit = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['SizeLimit']), 0, 11);
  $SortType = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['SortType']), 0, 4);
  $TableName = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['TableName']), 0, 64);
  $Type = substr(preg_replace('/[^A-Za-z0-9\.\.\ \[NULL\]]/','',$_GET['Type']), 0, 4);
  $ModifiedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['ModifiedByAgentID']), 0, 11);
  $CollectionID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CollectionID']), 0, 11);
  $CreatedByAgentID = substr(preg_replace('/[^0-9\-\[NULL\]]/','',$_GET['CreatedByAgentID']), 0, 11);
*/

   //---------------------------------------------------------------------------

   private $PickListID; // PK INTEGER 
   private $TimestampCreated; // TIMESTAMP 
   private $TimestampModified; // TIMESTAMP 
   private $Version; // INTEGER 
   private $FieldName; // VARCHAR(64) 
   private $FilterFieldName; // VARCHAR(32) 
   private $FilterValue; // VARCHAR(32) 
   private $Formatter; // VARCHAR(64) 
   private $IsSystem; // BIT(1) 
   private $Name; // VARCHAR(64) 
   private $ReadOnly; // BIT(1) 
   private $SizeLimit; // INTEGER 
   private $SortType; // TINYINT 
   private $TableName; // VARCHAR(64) 
   private $Type; // TINYINT 
   private $ModifiedByAgentID; // INTEGER 
   private $CollectionID; // INTEGER 
   private $CreatedByAgentID; // INTEGER 
   private $dirty;
   private $loaded;
   private $error;
   const FIELDLIST = ' PickListID, TimestampCreated, TimestampModified, Version, FieldName, FilterFieldName, FilterValue, Formatter, IsSystem, Name, ReadOnly, SizeLimit, SortType, TableName, Type, ModifiedByAgentID, CollectionID, CreatedByAgentID, ';
   const PKFIELDLIST = ' PickListID, ';
   const NUMBER_OF_PRIMARY_KEYS = 1;
   private $primaryKeyArray = array( 1 => 'PickListID'  ) ;
   private $allFieldsArray = array( 0 => 'PickListID' , 1 => 'TimestampCreated' , 2 => 'TimestampModified' , 3 => 'Version' , 4 => 'FieldName' , 5 => 'FilterFieldName' , 6 => 'FilterValue' , 7 => 'Formatter' , 8 => 'IsSystem' , 9 => 'Name' , 10 => 'ReadOnly' , 11 => 'SizeLimit' , 12 => 'SortType' , 13 => 'TableName' , 14 => 'Type' , 15 => 'ModifiedByAgentID' , 16 => 'CollectionID' , 17 => 'CreatedByAgentID'  ) ;
   private $selectDistinctFieldsArray = array( 9 => 'Name' , 15 => 'ModifiedByAgentID' , 16 => 'CollectionID' , 17 => 'CreatedByAgentID'  ) ;

   //---------------------------------------------------------------------------

   // constructor 
   function huh_picklist(){
       $this->PickListID = NULL;
       $this->TimestampCreated = '';
       $this->TimestampModified = '';
       $this->Version = '';
       $this->FieldName = '';
       $this->FilterFieldName = '';
       $this->FilterValue = '';
       $this->Formatter = '';
       $this->IsSystem = '';
       $this->Name = '';
       $this->ReadOnly = '';
       $this->SizeLimit = '';
       $this->SortType = '';
       $this->TableName = '';
       $this->Type = '';
       $this->ModifiedByAgentID = '';
       $this->CollectionID = '';
       $this->CreatedByAgentID = '';
       $this->dirty = false;
       $this->loaded = false;
       $this->error = '';
   }

   private function l_addslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = addslashes($value);
      }
      return $retval;
   }
   private function l_stripslashes($value) {
      $retval = $value;
      if (!get_magic_quotes_gpc()) {
          $retval = stripslashes($value);
      }
      return $retval;
   }
   public function isDirty() {
       return $this->dirty;
   }
   public function isLoaded() {
       return $this->loaded;
   }
   public function errorMessage() {
       return $this->error;
   }

   //---------------------------------------------------------------------------

   public function keyValueSet($fieldname,$value) {
       $returnvalue = false;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='PickListID') { $returnvalue = $this->setPickListID($value); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->setTimestampCreated($value); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->setTimestampModified($value); } 
             if ($fieldname=='Version') { $returnvalue = $this->setVersion($value); } 
             if ($fieldname=='FieldName') { $returnvalue = $this->setFieldName($value); } 
             if ($fieldname=='FilterFieldName') { $returnvalue = $this->setFilterFieldName($value); } 
             if ($fieldname=='FilterValue') { $returnvalue = $this->setFilterValue($value); } 
             if ($fieldname=='Formatter') { $returnvalue = $this->setFormatter($value); } 
             if ($fieldname=='IsSystem') { $returnvalue = $this->setIsSystem($value); } 
             if ($fieldname=='Name') { $returnvalue = $this->setName($value); } 
             if ($fieldname=='ReadOnly') { $returnvalue = $this->setReadOnly($value); } 
             if ($fieldname=='SizeLimit') { $returnvalue = $this->setSizeLimit($value); } 
             if ($fieldname=='SortType') { $returnvalue = $this->setSortType($value); } 
             if ($fieldname=='TableName') { $returnvalue = $this->setTableName($value); } 
             if ($fieldname=='Type') { $returnvalue = $this->setType($value); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->setModifiedByAgentID($value); } 
             if ($fieldname=='CollectionID') { $returnvalue = $this->setCollectionID($value); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->setCreatedByAgentID($value); } 
             $returnvalue = true;
          }
          catch (exception $e) { ;
              $returnvalue = false;
              throw new Exception('Field Set Error'.$e->getMessage()); 
          }
       } else { 
          throw new Exception('No Such field'); 
       }  
       return $returnvalue;
   }
   public function keyGet($fieldname) {
       $returnvalue = null;
       if ($this->hasField($fieldname)) { 
          try {
             if ($fieldname=='PickListID') { $returnvalue = $this->getPickListID(); } 
             if ($fieldname=='TimestampCreated') { $returnvalue = $this->getTimestampCreated(); } 
             if ($fieldname=='TimestampModified') { $returnvalue = $this->getTimestampModified(); } 
             if ($fieldname=='Version') { $returnvalue = $this->getVersion(); } 
             if ($fieldname=='FieldName') { $returnvalue = $this->getFieldName(); } 
             if ($fieldname=='FilterFieldName') { $returnvalue = $this->getFilterFieldName(); } 
             if ($fieldname=='FilterValue') { $returnvalue = $this->getFilterValue(); } 
             if ($fieldname=='Formatter') { $returnvalue = $this->getFormatter(); } 
             if ($fieldname=='IsSystem') { $returnvalue = $this->getIsSystem(); } 
             if ($fieldname=='Name') { $returnvalue = $this->getName(); } 
             if ($fieldname=='ReadOnly') { $returnvalue = $this->getReadOnly(); } 
             if ($fieldname=='SizeLimit') { $returnvalue = $this->getSizeLimit(); } 
             if ($fieldname=='SortType') { $returnvalue = $this->getSortType(); } 
             if ($fieldname=='TableName') { $returnvalue = $this->getTableName(); } 
             if ($fieldname=='Type') { $returnvalue = $this->getType(); } 
             if ($fieldname=='ModifiedByAgentID') { $returnvalue = $this->getModifiedByAgentID(); } 
             if ($fieldname=='CollectionID') { $returnvalue = $this->getCollectionID(); } 
             if ($fieldname=='CreatedByAgentID') { $returnvalue = $this->getCreatedByAgentID(); } 
          }
          catch (exception $e) { ;
              $returnvalue = null;
          }
       }
       return $returnvalue;
   }
/*PickListID*/
   public function getPickListID() {
       if ($this->PickListID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->PickListID));
       }
   }
   public function setPickListID($PickListID) {
       if (strlen(preg_replace('/[^0-9]/','',$PickListID)) > huh_picklist::PICKLISTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $PickListID = trim($PickListID);
       if (!ctype_digit(strval($PickListID)) && trim(strval($PickListID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->PickListID = $this->l_addslashes($PickListID);
       $this->dirty = true;
   }
/*TimestampCreated*/
   public function getTimestampCreated() {
       if ($this->TimestampCreated==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampCreated));
       }
   }
   public function setTimestampCreated($TimestampCreated) {
       if (strlen($TimestampCreated) > huh_picklist::TIMESTAMPCREATED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampCreated = $this->l_addslashes($TimestampCreated);
       $this->dirty = true;
   }
/*TimestampModified*/
   public function getTimestampModified() {
       if ($this->TimestampModified==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TimestampModified));
       }
   }
   public function setTimestampModified($TimestampModified) {
       if (strlen($TimestampModified) > huh_picklist::TIMESTAMPMODIFIED_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TimestampModified = $this->l_addslashes($TimestampModified);
       $this->dirty = true;
   }
/*Version*/
   public function getVersion() {
       if ($this->Version==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Version));
       }
   }
   public function setVersion($Version) {
       if (strlen(preg_replace('/[^0-9]/','',$Version)) > huh_picklist::VERSION_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $Version = trim($Version);
       if (!ctype_digit(strval($Version)) && trim(strval($Version))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->Version = $this->l_addslashes($Version);
       $this->dirty = true;
   }
/*FieldName*/
   public function getFieldName() {
       if ($this->FieldName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FieldName));
       }
   }
   public function setFieldName($FieldName) {
       if (strlen($FieldName) > huh_picklist::FIELDNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FieldName = $this->l_addslashes($FieldName);
       $this->dirty = true;
   }
/*FilterFieldName*/
   public function getFilterFieldName() {
       if ($this->FilterFieldName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FilterFieldName));
       }
   }
   public function setFilterFieldName($FilterFieldName) {
       if (strlen($FilterFieldName) > huh_picklist::FILTERFIELDNAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FilterFieldName = $this->l_addslashes($FilterFieldName);
       $this->dirty = true;
   }
/*FilterValue*/
   public function getFilterValue() {
       if ($this->FilterValue==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->FilterValue));
       }
   }
   public function setFilterValue($FilterValue) {
       if (strlen($FilterValue) > huh_picklist::FILTERVALUE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->FilterValue = $this->l_addslashes($FilterValue);
       $this->dirty = true;
   }
/*Formatter*/
   public function getFormatter() {
       if ($this->Formatter==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Formatter));
       }
   }
   public function setFormatter($Formatter) {
       if (strlen($Formatter) > huh_picklist::FORMATTER_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Formatter = $this->l_addslashes($Formatter);
       $this->dirty = true;
   }
/*IsSystem*/
   public function getIsSystem() {
       if ($this->IsSystem==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->IsSystem));
       }
   }
   public function setIsSystem($IsSystem) {
       if (strlen($IsSystem) > huh_picklist::ISSYSTEM_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->IsSystem = $this->l_addslashes($IsSystem);
       $this->dirty = true;
   }
/*Name*/
   public function getName() {
       if ($this->Name==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Name));
       }
   }
   public function setName($Name) {
       if (strlen($Name) > huh_picklist::NAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Name = $this->l_addslashes($Name);
       $this->dirty = true;
   }
/*ReadOnly*/
   public function getReadOnly() {
       if ($this->ReadOnly==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ReadOnly));
       }
   }
   public function setReadOnly($ReadOnly) {
       if (strlen($ReadOnly) > huh_picklist::READONLY_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->ReadOnly = $this->l_addslashes($ReadOnly);
       $this->dirty = true;
   }
/*SizeLimit*/
   public function getSizeLimit() {
       if ($this->SizeLimit==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SizeLimit));
       }
   }
   public function setSizeLimit($SizeLimit) {
       if (strlen(preg_replace('/[^0-9]/','',$SizeLimit)) > huh_picklist::SIZELIMIT_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $SizeLimit = trim($SizeLimit);
       if (!ctype_digit(strval($SizeLimit)) && trim(strval($SizeLimit))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->SizeLimit = $this->l_addslashes($SizeLimit);
       $this->dirty = true;
   }
/*SortType*/
   public function getSortType() {
       if ($this->SortType==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->SortType));
       }
   }
   public function setSortType($SortType) {
       if (strlen($SortType) > huh_picklist::SORTTYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->SortType = $this->l_addslashes($SortType);
       $this->dirty = true;
   }
/*TableName*/
   public function getTableName() {
       if ($this->TableName==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->TableName));
       }
   }
   public function setTableName($TableName) {
       if (strlen($TableName) > huh_picklist::TABLENAME_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->TableName = $this->l_addslashes($TableName);
       $this->dirty = true;
   }
/*Type*/
   public function getType() {
       if ($this->Type==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->Type));
       }
   }
   public function setType($Type) {
       if (strlen($Type) > huh_picklist::TYPE_SIZE) { 
           throw new Exception('Value exceeds field length.');
       } 
       $this->Type = $this->l_addslashes($Type);
       $this->dirty = true;
   }
/*ModifiedByAgentID*/
   public function getModifiedByAgentID() {
       if ($this->ModifiedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->ModifiedByAgentID));
       }
   }
   public function setModifiedByAgentID($ModifiedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$ModifiedByAgentID)) > huh_picklist::MODIFIEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $ModifiedByAgentID = trim($ModifiedByAgentID);
       if (!ctype_digit(strval($ModifiedByAgentID)) && trim(strval($ModifiedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->ModifiedByAgentID = $this->l_addslashes($ModifiedByAgentID);
       $this->dirty = true;
   }
/*CollectionID*/
   public function getCollectionID() {
       if ($this->CollectionID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CollectionID));
       }
   }
   public function setCollectionID($CollectionID) {
       if (strlen(preg_replace('/[^0-9]/','',$CollectionID)) > huh_picklist::COLLECTIONID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CollectionID = trim($CollectionID);
       if (!ctype_digit(strval($CollectionID))) {
             throw new Exception("Value must be an integer");
       }
       $this->CollectionID = $this->l_addslashes($CollectionID);
       $this->dirty = true;
   }
/*CreatedByAgentID*/
   public function getCreatedByAgentID() {
       if ($this->CreatedByAgentID==null) { 
          return null;
       } else { ;
          return trim($this->l_stripslashes($this->CreatedByAgentID));
       }
   }
   public function setCreatedByAgentID($CreatedByAgentID) {
       if (strlen(preg_replace('/[^0-9]/','',$CreatedByAgentID)) > huh_picklist::CREATEDBYAGENTID_SIZE) { 
           throw new Exception('Value has too many digits for the field length.');
       } 
       $CreatedByAgentID = trim($CreatedByAgentID);
       if (!ctype_digit(strval($CreatedByAgentID)) && trim(strval($CreatedByAgentID))!='' ) {
             throw new Exception("Value must be an integer");
       }
       $this->CreatedByAgentID = $this->l_addslashes($CreatedByAgentID);
       $this->dirty = true;
   }
   public function PK() { // get value of primary key 
        $returnvalue = '';
        $returnvalue .= $this->getPickListID();
        return $returnvalue;
   }
   public function PKArray() { // get name and value of primary key fields 
        $returnvalue = array();
        $returnvalue['PickListID'] = $this->getPickListID();
        return $returnvalue;
   }
   public function NumberOfPrimaryKeyFields() { // returns the number of primary key fields defined for this table 
        return 1;
   }

   // Constants holding the mysqli field type character (s,i,d) for each field
  const C_PickListIDMYSQLI_TYPE = 'i';
  const C_TimestampCreatedMYSQLI_TYPE = 's';
  const C_TimestampModifiedMYSQLI_TYPE = 's';
  const C_VersionMYSQLI_TYPE = 'i';
  const C_FieldNameMYSQLI_TYPE = 's';
  const C_FilterFieldNameMYSQLI_TYPE = 's';
  const C_FilterValueMYSQLI_TYPE = 's';
  const C_FormatterMYSQLI_TYPE = 's';
  const C_IsSystemMYSQLI_TYPE = 'i';
  const C_NameMYSQLI_TYPE = 's';
  const C_ReadOnlyMYSQLI_TYPE = 'i';
  const C_SizeLimitMYSQLI_TYPE = 'i';
  const C_SortTypeMYSQLI_TYPE = 'i';
  const C_TableNameMYSQLI_TYPE = 's';
  const C_TypeMYSQLI_TYPE = 'i';
  const C_ModifiedByAgentIDMYSQLI_TYPE = 'i';
  const C_CollectionIDMYSQLI_TYPE = 'i';
  const C_CreatedByAgentIDMYSQLI_TYPE = 'i';

   // function to obtain the mysqli field type character from a fieldname
   public function MySQLiFieldType($aFieldname) { 
      $retval = '';
      if ($aFieldname=='PickListID') { $retval = self::C_PickListIDMYSQLI_TYPE; }
      if ($aFieldname=='TimestampCreated') { $retval = self::C_TimestampCreatedMYSQLI_TYPE; }
      if ($aFieldname=='TimestampModified') { $retval = self::C_TimestampModifiedMYSQLI_TYPE; }
      if ($aFieldname=='Version') { $retval = self::C_VersionMYSQLI_TYPE; }
      if ($aFieldname=='FieldName') { $retval = self::C_FieldNameMYSQLI_TYPE; }
      if ($aFieldname=='FilterFieldName') { $retval = self::C_FilterFieldNameMYSQLI_TYPE; }
      if ($aFieldname=='FilterValue') { $retval = self::C_FilterValueMYSQLI_TYPE; }
      if ($aFieldname=='Formatter') { $retval = self::C_FormatterMYSQLI_TYPE; }
      if ($aFieldname=='IsSystem') { $retval = self::C_IsSystemMYSQLI_TYPE; }
      if ($aFieldname=='Name') { $retval = self::C_NameMYSQLI_TYPE; }
      if ($aFieldname=='ReadOnly') { $retval = self::C_ReadOnlyMYSQLI_TYPE; }
      if ($aFieldname=='SizeLimit') { $retval = self::C_SizeLimitMYSQLI_TYPE; }
      if ($aFieldname=='SortType') { $retval = self::C_SortTypeMYSQLI_TYPE; }
      if ($aFieldname=='TableName') { $retval = self::C_TableNameMYSQLI_TYPE; }
      if ($aFieldname=='Type') { $retval = self::C_TypeMYSQLI_TYPE; }
      if ($aFieldname=='ModifiedByAgentID') { $retval = self::C_ModifiedByAgentIDMYSQLI_TYPE; }
      if ($aFieldname=='CollectionID') { $retval = self::C_CollectionIDMYSQLI_TYPE; }
      if ($aFieldname=='CreatedByAgentID') { $retval = self::C_CreatedByAgentIDMYSQLI_TYPE; }
      return $retval;
   }

   // Function load() can take either the value of the primary key which uniquely identifies a particular row
   // or an array of array('primarykeyfieldname'=>'value') in the case of a single field primary key
   // or an array of fieldname value pairs in the case of multiple field primary key.
   public function load($pk) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        try {
             if (is_array($pk)) { 
                 $this->setPickListID($pk[PickListID]);
             } else { ;
                 $this->setPickListID($pk);
             };
        } 
        catch (Exception $e) { 
             throw new Exception($e->getMessage());
        }
        if($this->PickListID != NULL) {
           $sql = 'SELECT PickListID, TimestampCreated, TimestampModified, Version, FieldName, FilterFieldName, FilterValue, Formatter, IsSystem, Name, ReadOnly, SizeLimit, SortType, TableName, Type, ModifiedByAgentID, CollectionID, CreatedByAgentID FROM picklist WHERE PickListID = '.$this->PickListID ;

           $preparesql = 'SELECT PickListID, TimestampCreated, TimestampModified, Version, FieldName, FilterFieldName, FilterValue, Formatter, IsSystem, Name, ReadOnly, SizeLimit, SortType, TableName, Type, ModifiedByAgentID, CollectionID, CreatedByAgentID FROM picklist WHERE PickListID = ? ';

           if ($statement = $connection->prepare($preparesql)) { 
              $statement->bind_param("i", $this->PickListID);
              $statement->execute();
              $statement->bind_result($this->PickListID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->FieldName, $this->FilterFieldName, $this->FilterValue, $this->Formatter, $this->IsSystem, $this->Name, $this->ReadOnly, $this->SizeLimit, $this->SortType, $this->TableName, $this->Type, $this->ModifiedByAgentID, $this->CollectionID, $this->CreatedByAgentID);
              $statement->fetch();
              $statement->close();
           }

            $this->loaded = true;
            $this->dirty = false;
        } else { 
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   // Function save() will either save the current record or insert a new record.
   // Inserts new record if the primary key field in this table is null 
   // for this instance of this object.
   // Otherwise updates the record identified by the primary key value.
   public function save() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        // Test to see if this is an insert or update.
        if ($this->PickListID!= NULL) {
            $sql  = 'UPDATE  picklist SET ';
            $isInsert = false;
            $sql .=  "TimestampCreated = ? ";
            $sql .=  ", TimestampModified = ? ";
            $sql .=  ", Version = ? ";
            $sql .=  ", FieldName = ? ";
            $sql .=  ", FilterFieldName = ? ";
            $sql .=  ", FilterValue = ? ";
            $sql .=  ", Formatter = ? ";
            $sql .=  ", IsSystem = ? ";
            $sql .=  ", Name = ? ";
            $sql .=  ", ReadOnly = ? ";
            $sql .=  ", SizeLimit = ? ";
            $sql .=  ", SortType = ? ";
            $sql .=  ", TableName = ? ";
            $sql .=  ", Type = ? ";
            $sql .=  ", ModifiedByAgentID = ? ";
            $sql .=  ", CollectionID = ? ";
            $sql .=  ", CreatedByAgentID = ? ";

            $sql .= "  WHERE PickListID = ? ";
        } else {
            $sql  = 'INSERT INTO picklist ';
            $isInsert = true;
if ($this->PK==NULL) { throw new Exception('Can\'t insert record with null primary key for this table'); }
            $sql .= '( PickListID ,  TimestampCreated ,  TimestampModified ,  Version ,  FieldName ,  FilterFieldName ,  FilterValue ,  Formatter ,  IsSystem ,  Name ,  ReadOnly ,  SizeLimit ,  SortType ,  TableName ,  Type ,  ModifiedByAgentID ,  CollectionID ,  CreatedByAgentID ) VALUES (';
            $sql .=  "  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .=  " ,  ? ";
            $sql .= ')';

        }
        if ($statement = $connection->prepare($sql)) { 
           if ($this->PickListID!= NULL ) {
              $statement->bind_param("ississssisiiisiiiii", $this->PickListID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->FieldName , $this->FilterFieldName , $this->FilterValue , $this->Formatter , $this->IsSystem , $this->Name , $this->ReadOnly , $this->SizeLimit , $this->SortType , $this->TableName , $this->Type , $this->ModifiedByAgentID , $this->CollectionID , $this->CreatedByAgentID , $this->PickListID );
           } else { 
              $statement->bind_param("ississssisiiisiiii", $this->PickListID , $this->TimestampCreated , $this->TimestampModified , $this->Version , $this->FieldName , $this->FilterFieldName , $this->FilterValue , $this->Formatter , $this->IsSystem , $this->Name , $this->ReadOnly , $this->SizeLimit , $this->SortType , $this->TableName , $this->Type , $this->ModifiedByAgentID , $this->CollectionID , $this->CreatedByAgentID );
           } 
           $statement->execute();
           if ($statement->num_rows()!=1) {
               $this->error = $statement->error; 
           }
           $statement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }
        if ($this->error=='') { 
            $returnvalue = true;
        };

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function delete() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        if($this->PickListID != NULL) {
           $sql = 'SELECT PickListID, TimestampCreated, TimestampModified, Version, FieldName, FilterFieldName, FilterValue, Formatter, IsSystem, Name, ReadOnly, SizeLimit, SortType, TableName, Type, ModifiedByAgentID, CollectionID, CreatedByAgentID FROM picklist WHERE PickListID = "'.$this->PickListID.'"  ' ;

           $preparedsql = 'SELECT  FROM picklist WHERE  and PickListID = ?  ' ;
        if ($statement = $connection->prepare($preparedsql)) { 
           $statement->bind_param("ississssisiiisiiii", $this->PickListID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->FieldName, $this->FilterFieldName, $this->FilterValue, $this->Formatter, $this->IsSystem, $this->Name, $this->ReadOnly, $this->SizeLimit, $this->SortType, $this->TableName, $this->Type, $this->ModifiedByAgentID, $this->CollectionID, $this->CreatedByAgentID);
           $statement->execute();
           $statement->store_result();
           if ($statement->num_rows()==1) {
                $sql = 'DELETE FROM picklist WHERE  and PickListID = ?  ';
                if ($stmt_delete = $connection->prepare($sql)) { 
                   $stmt_delete->bind_param("ississssisiiisiiii", $this->PickListID, $this->TimestampCreated, $this->TimestampModified, $this->Version, $this->FieldName, $this->FilterFieldName, $this->FilterValue, $this->Formatter, $this->IsSystem, $this->Name, $this->ReadOnly, $this->SizeLimit, $this->SortType, $this->TableName, $this->Type, $this->ModifiedByAgentID, $this->CollectionID, $this->CreatedByAgentID);
                   if ($stmnt_delete->execute()) { 
                       $returnvalue = true;
                   } else {
                       $this->error = mysqli_error($connection); 
                   }
                   $stmt_delete->close();
                }
           } else { 
               $this->error = mysqli_error($connection); 
           }
           $tatement->close();
        } else { 
            $this->error = mysqli_error($connection); 
        }

            $this->loaded = true;
            // record was deleted, so set PK to null
            $this->PickListID = NULL; 
        } else { 
           throw new Exception('Unable to identify which record to delete, primary key is not set');
        }
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function count() {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = false;
        $sql = 'SELECT count(*)  FROM picklist';
        if ($result = $connection->query($sql)) { 
           if ($result->num_rows()==1) {
             $row = $result->fetch_row();
             if ($row) {
                $returnvalue = $row[0];
             }
           }
        } else { 
           $this->error = mysqli_error($connection); 
        }
        mysqli_free_result($result);

        $this->loaded = true;
        return $returnvalue;
    }
   //---------------------------------------------------------------------------

   public function loadArrayKeyValueSearch($searchTermArray) {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = array();
       $and = '';
       $wherebit = 'WHERE ';
       foreach($searchTermArray as $fieldname => $searchTerm) {
           if ($this->hasField($fieldname)) { 
               $operator = '='; 
               // change to a like search if a wildcard character is present
               if (!(strpos($searchTerm,'%')===false)) { $operator = 'like'; }
               if (!(strpos($searchTerm,'_')===false)) { $operator = 'like'; }
               if ($searchTerm=='[NULL]') { 
                   $wherebit .= "$and ($fieldname is null or $fieldname='') "; 
               } else { 
                   $wherebit .= "$and $fieldname $operator ? ";
                   $types = $types . $this->MySQLiFieldType($fieldname);
               } 
               $and = ' and ';
           }
       }
       $sql = "SELECT PickListID FROM picklist $wherebit";
       if ($wherebit=='') { 
             $this->error = 'Error: No search terms provided';
       } else {
          $statement = $connection->prepare($sql);
          $vars = Array();
          $vars[] = $types;
          $i = 0;
          foreach ($searchTermArray as $value) { 
               $varname = 'bind'.$i;  // create a variable name
               $$varname = $value;    // using that variable name store the value 
               $vars[] = &$$varname;  // add a reference to the variable to the array
               $i++;
           }
           //$vars[] contains $types followed by references to variables holding each value in $searchTermArray.
          call_user_func_array(array($statement,'bind_param'),$vars);
          //$statement->bind_param($types,$names);
          $statement->execute();
          $statement->bind_result($id);
          $ids = array();
          while ($statement->fetch()) {
              $ids[] = $id;
          } // double loop to allow all data to be retrieved before preparing a new statement. 
          $statement->close();
          for ($i=0;$i<count($ids);$i++) {
              $obj = new huh_picklist();
              $obj->load($ids[$i]);
              $returnvalue[] = $obj;
              $result=true;
          }
          if ($result===false) { $this->error = mysqli_error($connection); }
       }
       return $returnvalue;
   }	

   //---------------------------------------------------------------------------

// TODO: *************** link to related tables 
  public function loadLinkedFrompicklistitem() { 
      // ForeignKey in: picklistitem
      $t = new picklistitem();
  } 

   //---------------------------------------------------------------------------

  public function loadLinkedTo() { 
     $returnvalue = array(); 
       // fk: ModifiedByAgentID
      $t = new agent();
      $t->load(getModifiedByAgentID());
      $returnvalue[ModifiedByAgentID] = $t;
       // fk: CollectionID
      $t = new collection();
      $t->load(getCollectionID());
      $returnvalue[CollectionID] = $t;
       // fk: CreatedByAgentID
      $t = new agent();
      $t->load(getCreatedByAgentID());
      $returnvalue[CreatedByAgentID] = $t;
     return $returnvalue;
  } 
   // Returns an array of primary key values (id) and concatenated values of all other fields (fields)
   // wrapped as $values in: '{ "identifier":"id", "items": [ '.$values.' ] }';
   // when druid_handler.php is called with druid_action=returnfkjson
   // Used with dojo dijit.form.FilteringSelect to submit surrogate numeric key values from a text picklist 
   public function keySelectAllConcatJSON($orderby='ASC') {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
       $returnvalue = '';
       $order = '';
       if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
       $sql = "SELECT PickListID, concat(IFNULL(TimestampCreated,'') || ' ' || IFNULL(TimestampModified,'') || ' ' || IFNULL(Version,'') || ' ' || IFNULL(FieldName,'') || ' ' || IFNULL(FilterFieldName,'') || ' ' || IFNULL(FilterValue,'') || ' ' || IFNULL(Formatter,'') || ' ' || IFNULL(IsSystem,'') || ' ' || IFNULL(Name,'') || ' ' || IFNULL(ReadOnly,'') || ' ' || IFNULL(SizeLimit,'') || ' ' || IFNULL(SortType,'') || ' ' || IFNULL(TableName,'') || ' ' || IFNULL(Type,'') || ' ' || IFNULL(ModifiedByAgentID,'') || ' ' || IFNULL(CollectionID,'') || ' ' || IFNULL(CreatedByAgentID,'')) FROM picklist order by Name, ModifiedByAgentID, CollectionID, CreatedByAgentID $order ";
       $comma = '';
       if ($result = $connection->query($sql)) { 
          while ($row = $result->fetch_row()) {
             if ($row) {
                $pkval = trim($row[0]);
                $fval = trim($row[1]);
                if ($pkval!='') { 
                    $pkval = str_replace('"','&quot;',$pkval);
                    $fval = str_replace('"','&quot;',$fval);
                    $returnvalue .= $comma . ' { "id":"'.$pkval.'", "fields": "'.$fval.'" } ';
                    $comma = ', ';
                }
             }
          }
       } else { 
          $this->error = mysqli_error(); 
       }
       $result->close();
       return $returnvalue;
   }
   //---------------------------------------------------------------------------

   public function keySelectDistinctJSON($field,$orderby='ASC') {
       // ******* Note: $connection must be a mysqli object.
       global $connection;
       $returnvalue = '';
       if ($this->hasField($field)) { 
          $order = '';
          $fieldesc = mysql_escape_string($field);
          if ($orderby=='ASC') { $order = 'ASC'; } else { $order = 'DESC'; } 
          $preparemysql = "SELECT DISTINCT $fieldesc FROM picklist order by $fieldesc $order ";
          $comma = '';
         if ($stmt = $connection->prepare($preparemysql)) { 
             $stmt->execute();
             $stmt->bind_result($val);
             while ($stmt->fetch()) {
                $val = trim($val);                if ($val!='') { 
                    $val = str_replace('"','&quot;',$val);
                    $returnvalue .= $comma . ' { "'.$field.'":"'.$val.'" } ';
                    $comma = ', ';
                 }
             }
             $stmt->close();
         }
       }
       return $returnvalue;
   }
   //---------------------------------------------------------------------------


   //---------------------------------------------------------------------------

   // Each field with an index has a load array method generated for it.
   public function loadArrayByName($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PickListID FROM picklist WHERE Name $operator '$searchTerm'";
        $preparedsql = "SELECT PickListID FROM picklist WHERE Name $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_picklist();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByModifiedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PickListID FROM picklist WHERE ModifiedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT PickListID FROM picklist WHERE ModifiedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_picklist();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCollectionID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PickListID FROM picklist WHERE CollectionID $operator '$searchTerm'";
        $preparedsql = "SELECT PickListID FROM picklist WHERE CollectionID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_picklist();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }
   public function loadArrayByCreatedByAgentID($searchTerm) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = array();
        $operator = "=";
        // change to a like search if a wildcard character is present
        if (!(strpos($searchTerm,"%")===false)) { $operator = "like"; }
        if (!(strpos($searchTerm,"_")===false)) { $operator = "like"; }
        $sql = "SELECT PickListID FROM picklist WHERE CreatedByAgentID $operator '$searchTerm'";
        $preparedsql = "SELECT PickListID FROM picklist WHERE CreatedByAgentID $operator ? ";
        if ($statement = $connection->prepare($preparedsql)) { 
            $statement->bind_param("s", $searchTerm);
            $statement->execute();
            $statement->bind_result($id);
            while ($statement->fetch()) { ;
                $obj = new huh_picklist();
                $obj->load($id);
                $returnvalue[] = $obj;
            }
            $statement->close();
        }
        return $returnvalue;
   }

   //---------------------------------------------------------------------------

   // Each fulltext index has a load array method generated for it.

   //---------------------------------------------------------------------------

   // Each field with an index has a select distinct method generated for it.
   public function selectDistinctName($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' Name ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, Name FROM picklist group by Name order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&Name=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' ModifiedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, ModifiedByAgentID FROM picklist group by ModifiedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&ModifiedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCollectionID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CollectionID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CollectionID FROM picklist group by CollectionID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CollectionID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }
   public function selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount=false,$orderbycount=false) {
        // ******* Note: $connection must be a mysqli object.
        global $connection;
        $returnvalue = '';
        $order = ' CreatedByAgentID ';
        if ($orderbycount) { $order = ' druid_ct DESC '; } 
        $sql = "SELECT count(*) as druid_ct, CreatedByAgentID FROM picklist group by CreatedByAgentID order by $order ";
        if ($result = $connection->query($sql)) { 
           while ($row = $result->fetch_row()) {
              if ($row) {
                  $count = $row[0];
                  $val = $row[1];
                  $escaped = urlencode($row[1]);
                  if ($val=='') {
                     $val = '[NULL]'; 
                     $escaped = urlencode('[NULL]');
                  }
                  if ($link=='') { 
                     $returnvalue .= "$startline$val&nbsp;($count)$endline";
                  } else { 
                     $returnvalue .= "$startline<a href='$link&CreatedByAgentID=$escaped'>$val</a>&nbsp;($count)$endline";
                  }
              }
           }
           $result->close();
        }
        return $returnvalue;
    }

   public function keySelectDistinct($fieldname,$startline,$link,$endline,$includecount=false,$orderbycount=false) {
       $returnvalue = '';
       switch ($fieldname) { 
          case 'Name':
             $returnvalue = $this->selectDistinctName($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'ModifiedByAgentID':
             $returnvalue = $this->selectDistinctModifiedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CollectionID':
             $returnvalue = $this->selectDistinctCollectionID($startline,$link,$endline,$includecount,$orderbycount);
             break;
          case 'CreatedByAgentID':
             $returnvalue = $this->selectDistinctCreatedByAgentID($startline,$link,$endline,$includecount,$orderbycount);
             break;
       }
       return $returnvalue;
    }

   //---------------------------------------------------------------------------

   public function hasField($fieldname) {
       $returnvalue = false;
       if (trim($fieldname)!='' && trim($fieldname)!=',') {
            if (strpos(self::FIELDLIST," $fieldname, ")!==false) { 
               $returnvalue = true;
            }
       }
       return $returnvalue;
    }
   //---------------------------------------------------------------------------

}


// Write your own views by extending this class.
// Place your extended views in a separate file and you
// can use Druid to regenerate the picklist.php file to reflect changes
// in the underlying database without overwriting your custom views of the data.
// 
class huh_picklistView implements viewer
{
   var $model = null;
   public function setModel($aModel) { 
       $this->model = $aModel;
   }
   // @param $includeRelated default true shows rows from other tables through foreign key relationships.
   // @param $editLinkURL default '' allows adding a link to show this record in an editing form.
   public function getDetailsView($includeRelated=true, $editLinkURL='') {
       $returnvalue = '<ul>';
       $editLinkURL=trim($editLinkURL);
       $model = $this->model;
       $primarykeys = $model->schemaPK();
       if ($editLinkURL!='') { 
          if (!preg_match('/\&$/',$editLinkURL)) { $editLinkURL .= '&'; } 
          $nullpk = false; 
          foreach ($primarykeys as $primarykey) { 
              // Add fieldname=value pairs for primary key(s) to editLinkURL. 
              $editLinkURL .= urlencode($primarykey) . '=' . urlencode($model->keyGet($primarykey));
              if ($model->keyGet($primarykey)=='') { $nullpk = true; } 
          }
          if (!$nullpk) { $returnvalue .= "<li>huh_picklist <a href='$editLinkURL'>Edit</a></li>\n";  } 
       }
       $returnvalue .= "<li>".huh_picklist::PICKLISTID.": ".$model->getPickListID()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::TIMESTAMPCREATED.": ".$model->getTimestampCreated()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::TIMESTAMPMODIFIED.": ".$model->getTimestampModified()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::VERSION.": ".$model->getVersion()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::FIELDNAME.": ".$model->getFieldName()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::FILTERFIELDNAME.": ".$model->getFilterFieldName()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::FILTERVALUE.": ".$model->getFilterValue()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::FORMATTER.": ".$model->getFormatter()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::ISSYSTEM.": ".$model->getIsSystem()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::NAME.": ".$model->getName()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::READONLY.": ".$model->getReadOnly()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::SIZELIMIT.": ".$model->getSizeLimit()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::SORTTYPE.": ".$model->getSortType()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::TABLENAME.": ".$model->getTableName()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::TYPE.": ".$model->getType()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::MODIFIEDBYAGENTID.": ".$model->getModifiedByAgentID()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::COLLECTIONID.": ".$model->getCollectionID()."</li>\n";
       $returnvalue .= "<li>".huh_picklist::CREATEDBYAGENTID.": ".$model->getCreatedByAgentID()."</li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getModifiedByAgentID() != '') { 
               $t_agent->load($model->getModifiedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }
           $returnvalue .= "<li>collection</li>";
           $t_collection = new huh_collection();
           $t_collectionView = new huh_collectionView();
           $t_collectionView->setModel($t_collection);
           if ($model->getCollectionID() != '') { 
               $t_collection->load($model->getCollectionID());
               $returnvalue .= $t_collectionView->getDetailsView(false);
           }
           $returnvalue .= "<li>agent</li>";
           $t_agent = new huh_agent();
           $t_agentView = new huh_agentView();
           $t_agentView->setModel($t_agent);
           if ($model->getCreatedByAgentID() != '') { 
               $t_agent->load($model->getCreatedByAgentID());
               $returnvalue .= $t_agentView->getDetailsView(false);
           }

        }
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getJSON() {
       $returnvalue = '{ ';
       $model = $this->model;
       $returnvalue .= '"'.huh_picklist::PICKLISTID.': "'.$model->getPickListID().'",';
       $returnvalue .= '"'.huh_picklist::TIMESTAMPCREATED.': "'.$model->getTimestampCreated().'",';
       $returnvalue .= '"'.huh_picklist::TIMESTAMPMODIFIED.': "'.$model->getTimestampModified().'",';
       $returnvalue .= '"'.huh_picklist::VERSION.': "'.$model->getVersion().'",';
       $returnvalue .= '"'.huh_picklist::FIELDNAME.': "'.$model->getFieldName().'",';
       $returnvalue .= '"'.huh_picklist::FILTERFIELDNAME.': "'.$model->getFilterFieldName().'",';
       $returnvalue .= '"'.huh_picklist::FILTERVALUE.': "'.$model->getFilterValue().'",';
       $returnvalue .= '"'.huh_picklist::FORMATTER.': "'.$model->getFormatter().'",';
       $returnvalue .= '"'.huh_picklist::ISSYSTEM.': "'.$model->getIsSystem().'",';
       $returnvalue .= '"'.huh_picklist::NAME.': "'.$model->getName().'",';
       $returnvalue .= '"'.huh_picklist::READONLY.': "'.$model->getReadOnly().'",';
       $returnvalue .= '"'.huh_picklist::SIZELIMIT.': "'.$model->getSizeLimit().'",';
       $returnvalue .= '"'.huh_picklist::SORTTYPE.': "'.$model->getSortType().'",';
       $returnvalue .= '"'.huh_picklist::TABLENAME.': "'.$model->getTableName().'",';
       $returnvalue .= '"'.huh_picklist::TYPE.': "'.$model->getType().'",';
       $returnvalue .= '"'.huh_picklist::MODIFIEDBYAGENTID.': "'.$model->getModifiedByAgentID().'",';
       $returnvalue .= '"'.huh_picklist::COLLECTIONID.': "'.$model->getCollectionID().'",';
       $returnvalue .= '"'.huh_picklist::CREATEDBYAGENTID.': "'.$model->getCreatedByAgentID().'" }';
       $returnvalue .= '</ul>';
       return  $returnvalue;
   }
   public function getTableRowView() {
       $returnvalue = '<tr>';
       $model = $this->model;
       $returnvalue .= "<td>".$model->getPickListID()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampCreated()."</td>\n";
       $returnvalue .= "<td>".$model->getTimestampModified()."</td>\n";
       $returnvalue .= "<td>".$model->getVersion()."</td>\n";
       $returnvalue .= "<td>".$model->getFieldName()."</td>\n";
       $returnvalue .= "<td>".$model->getFilterFieldName()."</td>\n";
       $returnvalue .= "<td>".$model->getFilterValue()."</td>\n";
       $returnvalue .= "<td>".$model->getFormatter()."</td>\n";
       $returnvalue .= "<td>".$model->getIsSystem()."</td>\n";
       $returnvalue .= "<td>".$model->getName()."</td>\n";
       $returnvalue .= "<td>".$model->getReadOnly()."</td>\n";
       $returnvalue .= "<td>".$model->getSizeLimit()."</td>\n";
       $returnvalue .= "<td>".$model->getSortType()."</td>\n";
       $returnvalue .= "<td>".$model->getTableName()."</td>\n";
       $returnvalue .= "<td>".$model->getType()."</td>\n";
       $returnvalue .= "<td>".$model->getModifiedByAgentID()."</td>\n";
       $returnvalue .= "<td>".$model->getCollectionID()."</td>\n";
       $returnvalue .= "<td>".$model->getCreatedByAgentID()."</td>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getHeaderRow() {
       $returnvalue = '<tr>';
       $returnvalue .= "<th>".huh_picklist::PICKLISTID."</th>\n";
       $returnvalue .= "<th>".huh_picklist::TIMESTAMPCREATED."</th>\n";
       $returnvalue .= "<th>".huh_picklist::TIMESTAMPMODIFIED."</th>\n";
       $returnvalue .= "<th>".huh_picklist::VERSION."</th>\n";
       $returnvalue .= "<th>".huh_picklist::FIELDNAME."</th>\n";
       $returnvalue .= "<th>".huh_picklist::FILTERFIELDNAME."</th>\n";
       $returnvalue .= "<th>".huh_picklist::FILTERVALUE."</th>\n";
       $returnvalue .= "<th>".huh_picklist::FORMATTER."</th>\n";
       $returnvalue .= "<th>".huh_picklist::ISSYSTEM."</th>\n";
       $returnvalue .= "<th>".huh_picklist::NAME."</th>\n";
       $returnvalue .= "<th>".huh_picklist::READONLY."</th>\n";
       $returnvalue .= "<th>".huh_picklist::SIZELIMIT."</th>\n";
       $returnvalue .= "<th>".huh_picklist::SORTTYPE."</th>\n";
       $returnvalue .= "<th>".huh_picklist::TABLENAME."</th>\n";
       $returnvalue .= "<th>".huh_picklist::TYPE."</th>\n";
       $returnvalue .= "<th>".huh_picklist::MODIFIEDBYAGENTID."</th>\n";
       $returnvalue .= "<th>".huh_picklist::COLLECTIONID."</th>\n";
       $returnvalue .= "<th>".huh_picklist::CREATEDBYAGENTID."</th>\n";
       $returnvalue .= '</tr>';
       return  $returnvalue;
   }
   public function getEditFormDojoView($includeRelated=true) {
       $model = $this->model;
       if ($model->PK()=='') { $addform=true; } else { $addform=false; } 
       $returnvalue = '';
       $id = trim($model->PK());
       $feedback = "status$id";
       $formname = "editform$id";
       $script = '
  var saveprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function save'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Saving...";
     dojo.xhrGet(saveprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_picklist">';
       $returnvalue .= "<div id='div_$formnane' >";
       if($addform) { 
          $returnvalue .= "Add a new PickListID"; 
       } else { 
         $returnvalue .= "<div><label for=".huh_picklist::PICKLISTID.">PICKLISTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_picklist::PICKLISTID." id=".huh_picklist::PICKLISTID." value='".$model->getPickListID()."'  style=' width:".huh_picklist::PICKLISTID_SIZE ."em;  '  maxlength='".huh_picklist::PICKLISTID_SIZE ."' ></div>\n";
       }  
       $returnvalue .= "<div><label for=".huh_picklist::TIMESTAMPCREATED.">TIMESTAMPCREATED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_picklist::TIMESTAMPCREATED." id=".huh_picklist::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  style=' width:".huh_picklist::TIMESTAMPCREATED_SIZE ."em;  '  maxlength='".huh_picklist::TIMESTAMPCREATED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::TIMESTAMPMODIFIED.">TIMESTAMPMODIFIED</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_picklist::TIMESTAMPMODIFIED." id=".huh_picklist::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  style=' width:".huh_picklist::TIMESTAMPMODIFIED_SIZE ."em;  '  maxlength='".huh_picklist::TIMESTAMPMODIFIED_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::VERSION.">VERSION</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_picklist::VERSION." id=".huh_picklist::VERSION." value='".$model->getVersion()."'  style=' width:".huh_picklist::VERSION_SIZE ."em;  '  maxlength='".huh_picklist::VERSION_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::FIELDNAME.">FIELDNAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_picklist::FIELDNAME." id=".huh_picklist::FIELDNAME." >".$model->getFieldName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::FILTERFIELDNAME.">FILTERFIELDNAME</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_picklist::FILTERFIELDNAME." id=".huh_picklist::FILTERFIELDNAME." value='".$model->getFilterFieldName()."'  style=' width:".huh_picklist::FILTERFIELDNAME_SIZE ."em;  '  maxlength='".huh_picklist::FILTERFIELDNAME_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::FILTERVALUE.">FILTERVALUE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_picklist::FILTERVALUE." id=".huh_picklist::FILTERVALUE." value='".$model->getFilterValue()."'  style=' width:".huh_picklist::FILTERVALUE_SIZE ."em;  '  maxlength='".huh_picklist::FILTERVALUE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::FORMATTER.">FORMATTER</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_picklist::FORMATTER." id=".huh_picklist::FORMATTER." >".$model->getFormatter()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::ISSYSTEM.">ISSYSTEM</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_picklist::ISSYSTEM." id=".huh_picklist::ISSYSTEM." value='".$model->getIsSystem()."'  style=' width:".huh_picklist::ISSYSTEM_SIZE ."em;  '  maxlength='".huh_picklist::ISSYSTEM_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::NAME.">NAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_picklist::NAME." id=".huh_picklist::NAME." >".$model->getName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::READONLY.">READONLY</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_picklist::READONLY." id=".huh_picklist::READONLY." value='".$model->getReadOnly()."'  style=' width:".huh_picklist::READONLY_SIZE ."em;  '  maxlength='".huh_picklist::READONLY_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::SIZELIMIT.">SIZELIMIT</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_picklist::SIZELIMIT." id=".huh_picklist::SIZELIMIT." value='".$model->getSizeLimit()."'  style=' width:".huh_picklist::SIZELIMIT_SIZE ."em;  '  maxlength='".huh_picklist::SIZELIMIT_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::SORTTYPE.">SORTTYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_picklist::SORTTYPE." id=".huh_picklist::SORTTYPE." value='".$model->getSortType()."'  style=' width:".huh_picklist::SORTTYPE_SIZE ."em;  '  maxlength='".huh_picklist::SORTTYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::TABLENAME.">TABLENAME</label><textarea  dojoType='dijit.form.Textarea'  style=' width:51em; border:1px solid grey; '  name=".huh_picklist::TABLENAME." id=".huh_picklist::TABLENAME." >".$model->getTableName()."</textarea></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::TYPE.">TYPE</label><input  dojoType='dijit.form.ValidationTextBox'  name=".huh_picklist::TYPE." id=".huh_picklist::TYPE." value='".$model->getType()."'  style=' width:".huh_picklist::TYPE_SIZE ."em;  '  maxlength='".huh_picklist::TYPE_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::MODIFIEDBYAGENTID.">MODIFIEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_picklist::MODIFIEDBYAGENTID." id=".huh_picklist::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  style=' width:".huh_picklist::MODIFIEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_picklist::MODIFIEDBYAGENTID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::COLLECTIONID.">COLLECTIONID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_picklist::COLLECTIONID." id=".huh_picklist::COLLECTIONID." value='".$model->getCollectionID()."'  style=' width:".huh_picklist::COLLECTIONID_SIZE ."em;  '  maxlength='".huh_picklist::COLLECTIONID_SIZE ."' ></div>\n";
       $returnvalue .= "<div><label for=".huh_picklist::CREATEDBYAGENTID.">CREATEDBYAGENTID</label><input  dojoType='dijit.form.ValidationTextBox'  regExp='^[0-9-]*'  invalidMessage='The value entered is not valid.  It must be an integer.' name=".huh_picklist::CREATEDBYAGENTID." id=".huh_picklist::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  style=' width:".huh_picklist::CREATEDBYAGENTID_SIZE ."em;  '  maxlength='".huh_picklist::CREATEDBYAGENTID_SIZE ."' ></div>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= "<li><input name=save id=save type=button value='Save' onclick='$script  save$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</div>';
       $returnvalue .= '</form>';
       if(!$addform) { 
          // show delete button if editing an existing record 
       $id = trim($model->PK());
       $feedback = "deletestatus$id";
       $formname = "deleteform$id";
       $script = '
  var deleteprocessor'.$id.' = {
        form: dojo.byId("'.$formname.'"),
        url: "ajax_handler.php",
        handleAs: "text",
        load: function(data){
                dojo.byId("'.$feedback.'").innerHTML = data;
        },
        error: function(data){
                dojo.byId("'.$feedback.'").innerHTML = "Error: " + data;
                console.debug("Error: ", data);
        },
        timeout: 8000
  };
  function deleterecord'.$id.'() {
     dojo.byId("'.$feedback.'").innerHTML = "Deleting...";
     dojo.xhrGet(deleteprocessor'.$id.');
  };
       ';
       $returnvalue .= "<form id='$formname' name='$formname' dojoType='dijit.form.Form'>";
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=delete>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_table value="huh_picklist">';
       $returnvalue .= '<input type=hidden name=PickListID id=druid_table value="'.$id.'">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li><input name=delete id=save type=button value='Delete' onclick='$script  deleterecord$id();'><div id='$feedback'></div></li>";
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       } 
       return  $returnvalue;
   }
   public function getEditFormView($includeRelated=true) {
       $model = $this->model;
       $returnvalue = '<form method=get action=druid_handler.php>';
       $returnvalue .= '<input type=hidden name=druid_action id=druid_action value=save>';
       $returnvalue .= '<input type=hidden name=druid_table id=druid_action value="huh_picklist">';
       $returnvalue .= '<ul>';
       $returnvalue .= "<li>PICKLISTID<input type=text name=".huh_picklist::PICKLISTID." id=".huh_picklist::PICKLISTID." value='".$model->getPickListID()."'  size='".huh_picklist::PICKLISTID_SIZE ."'  maxlength='".huh_picklist::PICKLISTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPCREATED<input type=text name=".huh_picklist::TIMESTAMPCREATED." id=".huh_picklist::TIMESTAMPCREATED." value='".$model->getTimestampCreated()."'  size='".huh_picklist::TIMESTAMPCREATED_SIZE ."'  maxlength='".huh_picklist::TIMESTAMPCREATED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TIMESTAMPMODIFIED<input type=text name=".huh_picklist::TIMESTAMPMODIFIED." id=".huh_picklist::TIMESTAMPMODIFIED." value='".$model->getTimestampModified()."'  size='".huh_picklist::TIMESTAMPMODIFIED_SIZE ."'  maxlength='".huh_picklist::TIMESTAMPMODIFIED_SIZE ."' ></li>\n";
       $returnvalue .= "<li>VERSION<input type=text name=".huh_picklist::VERSION." id=".huh_picklist::VERSION." value='".$model->getVersion()."'  size='".huh_picklist::VERSION_SIZE ."'  maxlength='".huh_picklist::VERSION_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FIELDNAME<input type=text name=".huh_picklist::FIELDNAME." id=".huh_picklist::FIELDNAME." value='".$model->getFieldName()."'  size='51'  maxlength='".huh_picklist::FIELDNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FILTERFIELDNAME<input type=text name=".huh_picklist::FILTERFIELDNAME." id=".huh_picklist::FILTERFIELDNAME." value='".$model->getFilterFieldName()."'  size='".huh_picklist::FILTERFIELDNAME_SIZE ."'  maxlength='".huh_picklist::FILTERFIELDNAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FILTERVALUE<input type=text name=".huh_picklist::FILTERVALUE." id=".huh_picklist::FILTERVALUE." value='".$model->getFilterValue()."'  size='".huh_picklist::FILTERVALUE_SIZE ."'  maxlength='".huh_picklist::FILTERVALUE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>FORMATTER<input type=text name=".huh_picklist::FORMATTER." id=".huh_picklist::FORMATTER." value='".$model->getFormatter()."'  size='51'  maxlength='".huh_picklist::FORMATTER_SIZE ."' ></li>\n";
       $returnvalue .= "<li>ISSYSTEM<input type=text name=".huh_picklist::ISSYSTEM." id=".huh_picklist::ISSYSTEM." value='".$model->getIsSystem()."'  size='".huh_picklist::ISSYSTEM_SIZE ."'  maxlength='".huh_picklist::ISSYSTEM_SIZE ."' ></li>\n";
       $returnvalue .= "<li>NAME<input type=text name=".huh_picklist::NAME." id=".huh_picklist::NAME." value='".$model->getName()."'  size='51'  maxlength='".huh_picklist::NAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>READONLY<input type=text name=".huh_picklist::READONLY." id=".huh_picklist::READONLY." value='".$model->getReadOnly()."'  size='".huh_picklist::READONLY_SIZE ."'  maxlength='".huh_picklist::READONLY_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SIZELIMIT<input type=text name=".huh_picklist::SIZELIMIT." id=".huh_picklist::SIZELIMIT." value='".$model->getSizeLimit()."'  size='".huh_picklist::SIZELIMIT_SIZE ."'  maxlength='".huh_picklist::SIZELIMIT_SIZE ."' ></li>\n";
       $returnvalue .= "<li>SORTTYPE<input type=text name=".huh_picklist::SORTTYPE." id=".huh_picklist::SORTTYPE." value='".$model->getSortType()."'  size='".huh_picklist::SORTTYPE_SIZE ."'  maxlength='".huh_picklist::SORTTYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TABLENAME<input type=text name=".huh_picklist::TABLENAME." id=".huh_picklist::TABLENAME." value='".$model->getTableName()."'  size='51'  maxlength='".huh_picklist::TABLENAME_SIZE ."' ></li>\n";
       $returnvalue .= "<li>TYPE<input type=text name=".huh_picklist::TYPE." id=".huh_picklist::TYPE." value='".$model->getType()."'  size='".huh_picklist::TYPE_SIZE ."'  maxlength='".huh_picklist::TYPE_SIZE ."' ></li>\n";
       $returnvalue .= "<li>MODIFIEDBYAGENTID<input type=text name=".huh_picklist::MODIFIEDBYAGENTID." id=".huh_picklist::MODIFIEDBYAGENTID." value='".$model->getModifiedByAgentID()."'  size='".huh_picklist::MODIFIEDBYAGENTID_SIZE ."'  maxlength='".huh_picklist::MODIFIEDBYAGENTID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>COLLECTIONID<input type=text name=".huh_picklist::COLLECTIONID." id=".huh_picklist::COLLECTIONID." value='".$model->getCollectionID()."'  size='".huh_picklist::COLLECTIONID_SIZE ."'  maxlength='".huh_picklist::COLLECTIONID_SIZE ."' ></li>\n";
       $returnvalue .= "<li>CREATEDBYAGENTID<input type=text name=".huh_picklist::CREATEDBYAGENTID." id=".huh_picklist::CREATEDBYAGENTID." value='".$model->getCreatedByAgentID()."'  size='".huh_picklist::CREATEDBYAGENTID_SIZE ."'  maxlength='".huh_picklist::CREATEDBYAGENTID_SIZE ."' ></li>\n";
       if ($includeRelated) { 
           // note that $includeRelated is provided as false in calls out to
           // related tables to prevent infinite loops between related objects.
        }
       $returnvalue .= '<li><input type=submit value="Save"></li>';
       $returnvalue .= '</ul>';
       $returnvalue .= '</form>';
       return  $returnvalue;
   }
}

//==============================================================================
?>
